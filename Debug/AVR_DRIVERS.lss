
AVR_DRIVERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007a  00800060  00003e3c  00003ed0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  008000da  008000da  00003f4a  2**0
                  ALLOC
  3 .stab         000044e8  00000000  00000000  00003f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016b4  00000000  00000000  00008434  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b9e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c8cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d67c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d7dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000da69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e237  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 43 07 	jmp	0xe86	; 0xe86 <__vector_1>
       8:	0c 94 70 07 	jmp	0xee0	; 0xee0 <__vector_2>
       c:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3d       	cpi	r26, 0xDA	; 218
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ed       	ldi	r26, 0xDA	; 218
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3e       	cpi	r26, 0xEC	; 236
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <main>
      8a:	0c 94 1c 1f 	jmp	0x3e38	; 0x3e38 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e5 1e 	jmp	0x3dca	; 0x3dca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f1 1e 	jmp	0x3de2	; 0x3de2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0d 1f 	jmp	0x3e1a	; 0x3e1a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f1 1e 	jmp	0x3de2	; 0x3de2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0d 1f 	jmp	0x3e1a	; 0x3e1a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e5 1e 	jmp	0x3dca	; 0x3dca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f1 1e 	jmp	0x3de2	; 0x3de2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0d 1f 	jmp	0x3e1a	; 0x3e1a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f1 1e 	jmp	0x3de2	; 0x3de2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0d 1f 	jmp	0x3e1a	; 0x3e1a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f1 1e 	jmp	0x3de2	; 0x3de2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0d 1f 	jmp	0x3e1a	; 0x3e1a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f5 1e 	jmp	0x3dea	; 0x3dea <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 11 1f 	jmp	0x3e22	; 0x3e22 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GIE_Enable>:
/*
The I-bit is cleared by hardware after an interrupt
has occurred, and is set by the RETI instruction to enable subsequent interrupts.
The I-bit can also be set and cleared by the application with ---the SEI and CLI---  instruction
  */
void GIE_Enable(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, 7);
     b4e:	af e5       	ldi	r26, 0x5F	; 95
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <GIE_Disable>:

void GIE_Disable(){
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, 7);
     b6a:	af e5       	ldi	r26, 0x5F	; 95
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ef e5       	ldi	r30, 0x5F	; 95
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	8c 93       	st	X, r24
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <EXTI_Enable>:

static pf PF1_CallBack;
static pf PF2_CallBack;
static pf PF3_CallBack;

void EXTI_Enable(u8 INT){
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	0f 92       	push	r0
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	89 83       	std	Y+1, r24	; 0x01
	//Enable Interrupt
	SET_BIT(GICR, INT);
     b8a:	ab e5       	ldi	r26, 0x5B	; 91
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	eb e5       	ldi	r30, 0x5B	; 91
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	48 2f       	mov	r20, r24
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	28 2f       	mov	r18, r24
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	02 2e       	mov	r0, r18
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <EXTI_Enable+0x2a>
     ba4:	88 0f       	add	r24, r24
     ba6:	99 1f       	adc	r25, r25
     ba8:	0a 94       	dec	r0
     baa:	e2 f7       	brpl	.-8      	; 0xba4 <EXTI_Enable+0x26>
     bac:	84 2b       	or	r24, r20
     bae:	8c 93       	st	X, r24
}
     bb0:	0f 90       	pop	r0
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	08 95       	ret

00000bb8 <EXTI_Disable>:


void EXTI_Disable(u8 INT){
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	0f 92       	push	r0
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(GICR, INT); //Disable bit INT in GICR REG (INT0 , INT1 ,INT2)
     bc4:	ab e5       	ldi	r26, 0x5B	; 91
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	eb e5       	ldi	r30, 0x5B	; 91
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	48 2f       	mov	r20, r24
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	28 2f       	mov	r18, r24
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	02 2e       	mov	r0, r18
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <EXTI_Disable+0x2a>
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	0a 94       	dec	r0
     be4:	e2 f7       	brpl	.-8      	; 0xbde <EXTI_Disable+0x26>
     be6:	80 95       	com	r24
     be8:	84 23       	and	r24, r20
     bea:	8c 93       	st	X, r24
}
     bec:	0f 90       	pop	r0
     bee:	cf 91       	pop	r28
     bf0:	df 91       	pop	r29
     bf2:	08 95       	ret

00000bf4 <EXTI_InitMode>:

tenuErrorStatus EXTI_InitMode(u8 INT, u8 mode){
     bf4:	df 93       	push	r29
     bf6:	cf 93       	push	r28
     bf8:	00 d0       	rcall	.+0      	; 0xbfa <EXTI_InitMode+0x6>
     bfa:	0f 92       	push	r0
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	8a 83       	std	Y+2, r24	; 0x02
     c02:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuReturnStateLoc = EOK;
     c04:	19 82       	std	Y+1, r1	; 0x01
	if(INT == EXTI_INT0){
     c06:	8a 81       	ldd	r24, Y+2	; 0x02
     c08:	86 30       	cpi	r24, 0x06	; 6
     c0a:	09 f0       	breq	.+2      	; 0xc0e <EXTI_InitMode+0x1a>
     c0c:	4b c0       	rjmp	.+150    	; 0xca4 <EXTI_InitMode+0xb0>
		if (mode == EXTI_LOW_SGNL){
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	81 30       	cpi	r24, 0x01	; 1
     c12:	79 f4       	brne	.+30     	; 0xc32 <EXTI_InitMode+0x3e>
			CLR_BIT(MCUCR, EXTI_ISC00);
     c14:	a5 e5       	ldi	r26, 0x55	; 85
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e5 e5       	ldi	r30, 0x55	; 85
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	8e 7f       	andi	r24, 0xFE	; 254
     c20:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, EXTI_ISC01);
     c22:	a5 e5       	ldi	r26, 0x55	; 85
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	e5 e5       	ldi	r30, 0x55	; 85
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	8d 7f       	andi	r24, 0xFD	; 253
     c2e:	8c 93       	st	X, r24
     c30:	a6 c0       	rjmp	.+332    	; 0xd7e <EXTI_InitMode+0x18a>
		}else if (mode == EXTI_LOG_CHNG){
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	79 f4       	brne	.+30     	; 0xc56 <EXTI_InitMode+0x62>
			SET_BIT(MCUCR, EXTI_ISC00);
     c38:	a5 e5       	ldi	r26, 0x55	; 85
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	e5 e5       	ldi	r30, 0x55	; 85
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	81 60       	ori	r24, 0x01	; 1
     c44:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, EXTI_ISC01);
     c46:	a5 e5       	ldi	r26, 0x55	; 85
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e5 e5       	ldi	r30, 0x55	; 85
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	8d 7f       	andi	r24, 0xFD	; 253
     c52:	8c 93       	st	X, r24
     c54:	94 c0       	rjmp	.+296    	; 0xd7e <EXTI_InitMode+0x18a>
		}else if (mode == EXTI_FAL_EDGE){
     c56:	8b 81       	ldd	r24, Y+3	; 0x03
     c58:	83 30       	cpi	r24, 0x03	; 3
     c5a:	79 f4       	brne	.+30     	; 0xc7a <EXTI_InitMode+0x86>
			CLR_BIT(MCUCR, EXTI_ISC00);
     c5c:	a5 e5       	ldi	r26, 0x55	; 85
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	e5 e5       	ldi	r30, 0x55	; 85
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	8e 7f       	andi	r24, 0xFE	; 254
     c68:	8c 93       	st	X, r24
			SET_BIT(MCUCR, EXTI_ISC01);
     c6a:	a5 e5       	ldi	r26, 0x55	; 85
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e5 e5       	ldi	r30, 0x55	; 85
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	82 60       	ori	r24, 0x02	; 2
     c76:	8c 93       	st	X, r24
     c78:	82 c0       	rjmp	.+260    	; 0xd7e <EXTI_InitMode+0x18a>
		}else if(mode == EXTI_RAIS_EDGE){
     c7a:	8b 81       	ldd	r24, Y+3	; 0x03
     c7c:	84 30       	cpi	r24, 0x04	; 4
     c7e:	79 f4       	brne	.+30     	; 0xc9e <EXTI_InitMode+0xaa>
			SET_BIT(MCUCR, EXTI_ISC00);
     c80:	a5 e5       	ldi	r26, 0x55	; 85
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	e5 e5       	ldi	r30, 0x55	; 85
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	81 60       	ori	r24, 0x01	; 1
     c8c:	8c 93       	st	X, r24
			SET_BIT(MCUCR, EXTI_ISC01);
     c8e:	a5 e5       	ldi	r26, 0x55	; 85
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e5 e5       	ldi	r30, 0x55	; 85
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	82 60       	ori	r24, 0x02	; 2
     c9a:	8c 93       	st	X, r24
     c9c:	70 c0       	rjmp	.+224    	; 0xd7e <EXTI_InitMode+0x18a>
		}else{
			enuReturnStateLoc = PARAM_OUT_RANGE;
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	89 83       	std	Y+1, r24	; 0x01
     ca2:	6d c0       	rjmp	.+218    	; 0xd7e <EXTI_InitMode+0x18a>
		}

	}else if(INT == EXTI_INT1){
     ca4:	8a 81       	ldd	r24, Y+2	; 0x02
     ca6:	87 30       	cpi	r24, 0x07	; 7
     ca8:	09 f0       	breq	.+2      	; 0xcac <EXTI_InitMode+0xb8>
     caa:	4b c0       	rjmp	.+150    	; 0xd42 <EXTI_InitMode+0x14e>
		if (mode == EXTI_LOW_SGNL){
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	79 f4       	brne	.+30     	; 0xcd0 <EXTI_InitMode+0xdc>
			CLR_BIT(MCUCR, EXTI_ISC10);
     cb2:	a5 e5       	ldi	r26, 0x55	; 85
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e5 e5       	ldi	r30, 0x55	; 85
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	8b 7f       	andi	r24, 0xFB	; 251
     cbe:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, EXTI_ISC11);
     cc0:	a5 e5       	ldi	r26, 0x55	; 85
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e5 e5       	ldi	r30, 0x55	; 85
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	87 7f       	andi	r24, 0xF7	; 247
     ccc:	8c 93       	st	X, r24
     cce:	57 c0       	rjmp	.+174    	; 0xd7e <EXTI_InitMode+0x18a>
		}else if (mode == EXTI_LOG_CHNG){
     cd0:	8b 81       	ldd	r24, Y+3	; 0x03
     cd2:	82 30       	cpi	r24, 0x02	; 2
     cd4:	79 f4       	brne	.+30     	; 0xcf4 <EXTI_InitMode+0x100>
			SET_BIT(MCUCR, EXTI_ISC10);
     cd6:	a5 e5       	ldi	r26, 0x55	; 85
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e5 e5       	ldi	r30, 0x55	; 85
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	84 60       	ori	r24, 0x04	; 4
     ce2:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, EXTI_ISC11);
     ce4:	a5 e5       	ldi	r26, 0x55	; 85
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e5 e5       	ldi	r30, 0x55	; 85
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	87 7f       	andi	r24, 0xF7	; 247
     cf0:	8c 93       	st	X, r24
     cf2:	45 c0       	rjmp	.+138    	; 0xd7e <EXTI_InitMode+0x18a>
		}else if (mode == EXTI_FAL_EDGE){
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	83 30       	cpi	r24, 0x03	; 3
     cf8:	79 f4       	brne	.+30     	; 0xd18 <EXTI_InitMode+0x124>
			CLR_BIT(MCUCR, EXTI_ISC10);
     cfa:	a5 e5       	ldi	r26, 0x55	; 85
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e5 e5       	ldi	r30, 0x55	; 85
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8b 7f       	andi	r24, 0xFB	; 251
     d06:	8c 93       	st	X, r24
			SET_BIT(MCUCR, EXTI_ISC11);
     d08:	a5 e5       	ldi	r26, 0x55	; 85
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e5 e5       	ldi	r30, 0x55	; 85
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	88 60       	ori	r24, 0x08	; 8
     d14:	8c 93       	st	X, r24
     d16:	33 c0       	rjmp	.+102    	; 0xd7e <EXTI_InitMode+0x18a>
		}else if(mode == EXTI_RAIS_EDGE){
     d18:	8b 81       	ldd	r24, Y+3	; 0x03
     d1a:	84 30       	cpi	r24, 0x04	; 4
     d1c:	79 f4       	brne	.+30     	; 0xd3c <EXTI_InitMode+0x148>
			SET_BIT(MCUCR, EXTI_ISC10);
     d1e:	a5 e5       	ldi	r26, 0x55	; 85
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e5 e5       	ldi	r30, 0x55	; 85
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	84 60       	ori	r24, 0x04	; 4
     d2a:	8c 93       	st	X, r24
			SET_BIT(MCUCR, EXTI_ISC11);
     d2c:	a5 e5       	ldi	r26, 0x55	; 85
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e5 e5       	ldi	r30, 0x55	; 85
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	88 60       	ori	r24, 0x08	; 8
     d38:	8c 93       	st	X, r24
     d3a:	21 c0       	rjmp	.+66     	; 0xd7e <EXTI_InitMode+0x18a>
		}else{
			enuReturnStateLoc = PARAM_OUT_RANGE;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	89 83       	std	Y+1, r24	; 0x01
     d40:	1e c0       	rjmp	.+60     	; 0xd7e <EXTI_InitMode+0x18a>
		}

	}else if(INT == EXTI_INT2){
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	85 30       	cpi	r24, 0x05	; 5
     d46:	c9 f4       	brne	.+50     	; 0xd7a <EXTI_InitMode+0x186>
		if(mode == EXTI_FAL_EDGE){
     d48:	8b 81       	ldd	r24, Y+3	; 0x03
     d4a:	83 30       	cpi	r24, 0x03	; 3
     d4c:	41 f4       	brne	.+16     	; 0xd5e <EXTI_InitMode+0x16a>
			CLR_BIT(MCUCSR, EXTI_ISC2);
     d4e:	a4 e5       	ldi	r26, 0x54	; 84
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e4 e5       	ldi	r30, 0x54	; 84
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	8f 7b       	andi	r24, 0xBF	; 191
     d5a:	8c 93       	st	X, r24
     d5c:	10 c0       	rjmp	.+32     	; 0xd7e <EXTI_InitMode+0x18a>
		}else if(mode == EXTI_RAIS_EDGE){
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	84 30       	cpi	r24, 0x04	; 4
     d62:	41 f4       	brne	.+16     	; 0xd74 <EXTI_InitMode+0x180>
			SET_BIT(MCUCSR, EXTI_ISC2);
     d64:	a4 e5       	ldi	r26, 0x54	; 84
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e4 e5       	ldi	r30, 0x54	; 84
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	80 64       	ori	r24, 0x40	; 64
     d70:	8c 93       	st	X, r24
     d72:	05 c0       	rjmp	.+10     	; 0xd7e <EXTI_InitMode+0x18a>
		}else{
			enuReturnStateLoc = PARAM_OUT_RANGE;
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	89 83       	std	Y+1, r24	; 0x01
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <EXTI_InitMode+0x18a>
		}
	}
	else{
		enuReturnStateLoc = PARAM_OUT_RANGE;
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuReturnStateLoc;
     d7e:	89 81       	ldd	r24, Y+1	; 0x01

}
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	08 95       	ret

00000d8c <EXTI_CheckIntFlag>:

u8 EXTI_CheckIntFlag(u8 INT)    //check if  specific interrupt flag is up
{
     d8c:	df 93       	push	r29
     d8e:	cf 93       	push	r28
     d90:	00 d0       	rcall	.+0      	; 0xd92 <EXTI_CheckIntFlag+0x6>
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	89 83       	std	Y+1, r24	; 0x01
	if(INT == EXTI_INT0)
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	86 30       	cpi	r24, 0x06	; 6
     d9c:	91 f4       	brne	.+36     	; 0xdc2 <EXTI_CheckIntFlag+0x36>
	{
		if (GET_BIT(GIFR, EXTI_INTF0) == HIGH)
     d9e:	ea e5       	ldi	r30, 0x5A	; 90
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	82 95       	swap	r24
     da6:	86 95       	lsr	r24
     da8:	86 95       	lsr	r24
     daa:	83 70       	andi	r24, 0x03	; 3
     dac:	88 2f       	mov	r24, r24
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	81 70       	andi	r24, 0x01	; 1
     db2:	90 70       	andi	r25, 0x00	; 0
     db4:	88 23       	and	r24, r24
     db6:	19 f0       	breq	.+6      	; 0xdbe <EXTI_CheckIntFlag+0x32>
		{
			return 1;
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	8a 83       	std	Y+2, r24	; 0x02
     dbc:	28 c0       	rjmp	.+80     	; 0xe0e <EXTI_CheckIntFlag+0x82>
		}
		else
		{
			return 0;
     dbe:	1a 82       	std	Y+2, r1	; 0x02
     dc0:	26 c0       	rjmp	.+76     	; 0xe0e <EXTI_CheckIntFlag+0x82>
		}
	}
	else if(INT == EXTI_INT1)
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	87 30       	cpi	r24, 0x07	; 7
     dc6:	69 f4       	brne	.+26     	; 0xde2 <EXTI_CheckIntFlag+0x56>
	{
		if (GET_BIT(GIFR, EXTI_INTF1) == HIGH)
     dc8:	ea e5       	ldi	r30, 0x5A	; 90
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	88 1f       	adc	r24, r24
     dd0:	88 27       	eor	r24, r24
     dd2:	88 1f       	adc	r24, r24
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	19 f4       	brne	.+6      	; 0xdde <EXTI_CheckIntFlag+0x52>
		{
			return 1 ;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	8a 83       	std	Y+2, r24	; 0x02
     ddc:	18 c0       	rjmp	.+48     	; 0xe0e <EXTI_CheckIntFlag+0x82>
		}
		else
		{
			return 0;
     dde:	1a 82       	std	Y+2, r1	; 0x02
     de0:	16 c0       	rjmp	.+44     	; 0xe0e <EXTI_CheckIntFlag+0x82>
		}
	}
	else if(INT == EXTI_INT2)
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	85 30       	cpi	r24, 0x05	; 5
     de6:	89 f4       	brne	.+34     	; 0xe0a <EXTI_CheckIntFlag+0x7e>
	{
		if (GET_BIT(GIFR, EXTI_INTF2) == HIGH)
     de8:	ea e5       	ldi	r30, 0x5A	; 90
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	82 95       	swap	r24
     df0:	86 95       	lsr	r24
     df2:	87 70       	andi	r24, 0x07	; 7
     df4:	88 2f       	mov	r24, r24
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	81 70       	andi	r24, 0x01	; 1
     dfa:	90 70       	andi	r25, 0x00	; 0
     dfc:	88 23       	and	r24, r24
     dfe:	19 f0       	breq	.+6      	; 0xe06 <EXTI_CheckIntFlag+0x7a>
		{
			return 1 ;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8a 83       	std	Y+2, r24	; 0x02
     e04:	04 c0       	rjmp	.+8      	; 0xe0e <EXTI_CheckIntFlag+0x82>
		}
		else
		{
			return 0;
     e06:	1a 82       	std	Y+2, r1	; 0x02
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <EXTI_CheckIntFlag+0x82>
		}
	}

	return -1;
     e0a:	8f ef       	ldi	r24, 0xFF	; 255
     e0c:	8a 83       	std	Y+2, r24	; 0x02
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
}
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	08 95       	ret

00000e1a <EXTI_FnCallBack_INT0>:

void EXTI_FnCallBack_INT0(pf callback){
     e1a:	df 93       	push	r29
     e1c:	cf 93       	push	r28
     e1e:	00 d0       	rcall	.+0      	; 0xe20 <EXTI_FnCallBack_INT0+0x6>
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	9a 83       	std	Y+2, r25	; 0x02
     e26:	89 83       	std	Y+1, r24	; 0x01
	PF1_CallBack = callback;
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	9a 81       	ldd	r25, Y+2	; 0x02
     e2c:	90 93 db 00 	sts	0x00DB, r25
     e30:	80 93 da 00 	sts	0x00DA, r24
}
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	08 95       	ret

00000e3e <EXTI_FnCallBack_INT1>:
void EXTI_FnCallBack_INT1(pf callback){
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	00 d0       	rcall	.+0      	; 0xe44 <EXTI_FnCallBack_INT1+0x6>
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	9a 83       	std	Y+2, r25	; 0x02
     e4a:	89 83       	std	Y+1, r24	; 0x01
	PF2_CallBack = callback;
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	9a 81       	ldd	r25, Y+2	; 0x02
     e50:	90 93 dd 00 	sts	0x00DD, r25
     e54:	80 93 dc 00 	sts	0x00DC, r24
}
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <EXTI_FnCallBack_INT2>:
void EXTI_FnCallBack_INT2(pf callback){
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	00 d0       	rcall	.+0      	; 0xe68 <EXTI_FnCallBack_INT2+0x6>
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	9a 83       	std	Y+2, r25	; 0x02
     e6e:	89 83       	std	Y+1, r24	; 0x01
	PF3_CallBack = callback;
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	9a 81       	ldd	r25, Y+2	; 0x02
     e74:	90 93 df 00 	sts	0x00DF, r25
     e78:	80 93 de 00 	sts	0x00DE, r24
}
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	08 95       	ret

00000e86 <__vector_1>:

void __vector_1() {
     e86:	1f 92       	push	r1
     e88:	0f 92       	push	r0
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	0f 92       	push	r0
     e8e:	11 24       	eor	r1, r1
     e90:	2f 93       	push	r18
     e92:	3f 93       	push	r19
     e94:	4f 93       	push	r20
     e96:	5f 93       	push	r21
     e98:	6f 93       	push	r22
     e9a:	7f 93       	push	r23
     e9c:	8f 93       	push	r24
     e9e:	9f 93       	push	r25
     ea0:	af 93       	push	r26
     ea2:	bf 93       	push	r27
     ea4:	ef 93       	push	r30
     ea6:	ff 93       	push	r31
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
	PF1_CallBack();
     eb0:	e0 91 da 00 	lds	r30, 0x00DA
     eb4:	f0 91 db 00 	lds	r31, 0x00DB
     eb8:	09 95       	icall
}
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	ff 91       	pop	r31
     ec0:	ef 91       	pop	r30
     ec2:	bf 91       	pop	r27
     ec4:	af 91       	pop	r26
     ec6:	9f 91       	pop	r25
     ec8:	8f 91       	pop	r24
     eca:	7f 91       	pop	r23
     ecc:	6f 91       	pop	r22
     ece:	5f 91       	pop	r21
     ed0:	4f 91       	pop	r20
     ed2:	3f 91       	pop	r19
     ed4:	2f 91       	pop	r18
     ed6:	0f 90       	pop	r0
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	0f 90       	pop	r0
     edc:	1f 90       	pop	r1
     ede:	18 95       	reti

00000ee0 <__vector_2>:


void __vector_2() {
     ee0:	1f 92       	push	r1
     ee2:	0f 92       	push	r0
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	0f 92       	push	r0
     ee8:	11 24       	eor	r1, r1
     eea:	2f 93       	push	r18
     eec:	3f 93       	push	r19
     eee:	4f 93       	push	r20
     ef0:	5f 93       	push	r21
     ef2:	6f 93       	push	r22
     ef4:	7f 93       	push	r23
     ef6:	8f 93       	push	r24
     ef8:	9f 93       	push	r25
     efa:	af 93       	push	r26
     efc:	bf 93       	push	r27
     efe:	ef 93       	push	r30
     f00:	ff 93       	push	r31
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
	PF2_CallBack();
     f0a:	e0 91 dc 00 	lds	r30, 0x00DC
     f0e:	f0 91 dd 00 	lds	r31, 0x00DD
     f12:	09 95       	icall
}
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	ff 91       	pop	r31
     f1a:	ef 91       	pop	r30
     f1c:	bf 91       	pop	r27
     f1e:	af 91       	pop	r26
     f20:	9f 91       	pop	r25
     f22:	8f 91       	pop	r24
     f24:	7f 91       	pop	r23
     f26:	6f 91       	pop	r22
     f28:	5f 91       	pop	r21
     f2a:	4f 91       	pop	r20
     f2c:	3f 91       	pop	r19
     f2e:	2f 91       	pop	r18
     f30:	0f 90       	pop	r0
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	0f 90       	pop	r0
     f36:	1f 90       	pop	r1
     f38:	18 95       	reti

00000f3a <__vector_3>:


void __vector_3() {
     f3a:	1f 92       	push	r1
     f3c:	0f 92       	push	r0
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	0f 92       	push	r0
     f42:	11 24       	eor	r1, r1
     f44:	2f 93       	push	r18
     f46:	3f 93       	push	r19
     f48:	4f 93       	push	r20
     f4a:	5f 93       	push	r21
     f4c:	6f 93       	push	r22
     f4e:	7f 93       	push	r23
     f50:	8f 93       	push	r24
     f52:	9f 93       	push	r25
     f54:	af 93       	push	r26
     f56:	bf 93       	push	r27
     f58:	ef 93       	push	r30
     f5a:	ff 93       	push	r31
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
	PF3_CallBack();
     f64:	e0 91 de 00 	lds	r30, 0x00DE
     f68:	f0 91 df 00 	lds	r31, 0x00DF
     f6c:	09 95       	icall
}
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	ff 91       	pop	r31
     f74:	ef 91       	pop	r30
     f76:	bf 91       	pop	r27
     f78:	af 91       	pop	r26
     f7a:	9f 91       	pop	r25
     f7c:	8f 91       	pop	r24
     f7e:	7f 91       	pop	r23
     f80:	6f 91       	pop	r22
     f82:	5f 91       	pop	r21
     f84:	4f 91       	pop	r20
     f86:	3f 91       	pop	r19
     f88:	2f 91       	pop	r18
     f8a:	0f 90       	pop	r0
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	0f 90       	pop	r0
     f90:	1f 90       	pop	r1
     f92:	18 95       	reti

00000f94 <DIO_voidInit>:
#include "DIO_priv.h"



void DIO_voidInit(void)
{
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
   DDRA = CONC(DIO_PIN_DIR_7 ,DIO_PIN_DIR_6 ,DIO_PIN_DIR_5 ,DIO_PIN_DIR_4 ,DIO_PIN_DIR_3 ,DIO_PIN_DIR_2 ,DIO_PIN_DIR_1 ,DIO_PIN_DIR_0 );
     f9c:	ea e3       	ldi	r30, 0x3A	; 58
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	8f ef       	ldi	r24, 0xFF	; 255
     fa2:	80 83       	st	Z, r24
   DDRB = CONC(DIO_PIN_DIR_15,DIO_PIN_DIR_14,DIO_PIN_DIR_13,DIO_PIN_DIR_12,DIO_PIN_DIR_11,DIO_PIN_DIR_10,DIO_PIN_DIR_9 ,DIO_PIN_DIR_8 );
     fa4:	e7 e3       	ldi	r30, 0x37	; 55
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	8f ef       	ldi	r24, 0xFF	; 255
     faa:	80 83       	st	Z, r24
   DDRC = CONC(DIO_PIN_DIR_23,DIO_PIN_DIR_22,DIO_PIN_DIR_21,DIO_PIN_DIR_20,DIO_PIN_DIR_19,DIO_PIN_DIR_18,DIO_PIN_DIR_17,DIO_PIN_DIR_16);
     fac:	e4 e3       	ldi	r30, 0x34	; 52
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	8f ef       	ldi	r24, 0xFF	; 255
     fb2:	80 83       	st	Z, r24
   DDRD = CONC(DIO_PIN_DIR_31,DIO_PIN_DIR_30,DIO_PIN_DIR_29,DIO_PIN_DIR_28,DIO_PIN_DIR_27,DIO_PIN_DIR_26,DIO_PIN_DIR_25,DIO_PIN_DIR_24);
     fb4:	e1 e3       	ldi	r30, 0x31	; 49
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	8f ef       	ldi	r24, 0xFF	; 255
     fba:	80 83       	st	Z, r24

}
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <DIO_InitCertainPort>:

void DIO_InitCertainPort(u8 PORT)
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	0f 92       	push	r0
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	89 83       	std	Y+1, r24	; 0x01
	if(PORT == ODRA){
     fce:	eb e3       	ldi	r30, 0x3B	; 59
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	90 81       	ld	r25, Z
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	98 17       	cp	r25, r24
     fd8:	29 f4       	brne	.+10     	; 0xfe4 <DIO_InitCertainPort+0x22>
		DDRA = CONC(DIO_PIN_DIR_7 ,DIO_PIN_DIR_6 ,DIO_PIN_DIR_5 ,DIO_PIN_DIR_4 ,DIO_PIN_DIR_3 ,DIO_PIN_DIR_2 ,DIO_PIN_DIR_1 ,DIO_PIN_DIR_0 );
     fda:	ea e3       	ldi	r30, 0x3A	; 58
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	8f ef       	ldi	r24, 0xFF	; 255
     fe0:	80 83       	st	Z, r24
     fe2:	20 c0       	rjmp	.+64     	; 0x1024 <DIO_InitCertainPort+0x62>
	}else if(PORT == ODRB){
     fe4:	e8 e3       	ldi	r30, 0x38	; 56
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	90 81       	ld	r25, Z
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	98 17       	cp	r25, r24
     fee:	29 f4       	brne	.+10     	; 0xffa <DIO_InitCertainPort+0x38>
		DDRB = CONC(DIO_PIN_DIR_15,DIO_PIN_DIR_14,DIO_PIN_DIR_13,DIO_PIN_DIR_12,DIO_PIN_DIR_11,DIO_PIN_DIR_10,DIO_PIN_DIR_9 ,DIO_PIN_DIR_8 );
     ff0:	e7 e3       	ldi	r30, 0x37	; 55
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	8f ef       	ldi	r24, 0xFF	; 255
     ff6:	80 83       	st	Z, r24
     ff8:	15 c0       	rjmp	.+42     	; 0x1024 <DIO_InitCertainPort+0x62>
	}else if(PORT == ODRC){
     ffa:	e5 e3       	ldi	r30, 0x35	; 53
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	90 81       	ld	r25, Z
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	98 17       	cp	r25, r24
    1004:	29 f4       	brne	.+10     	; 0x1010 <DIO_InitCertainPort+0x4e>
		DDRC = CONC(DIO_PIN_DIR_23,DIO_PIN_DIR_22,DIO_PIN_DIR_21,DIO_PIN_DIR_20,DIO_PIN_DIR_19,DIO_PIN_DIR_18,DIO_PIN_DIR_17,DIO_PIN_DIR_16);
    1006:	e4 e3       	ldi	r30, 0x34	; 52
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	8f ef       	ldi	r24, 0xFF	; 255
    100c:	80 83       	st	Z, r24
    100e:	0a c0       	rjmp	.+20     	; 0x1024 <DIO_InitCertainPort+0x62>
	}else if(PORT == ODRD){
    1010:	e2 e3       	ldi	r30, 0x32	; 50
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	90 81       	ld	r25, Z
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	98 17       	cp	r25, r24
    101a:	21 f4       	brne	.+8      	; 0x1024 <DIO_InitCertainPort+0x62>
		DDRD = CONC(DIO_PIN_DIR_31,DIO_PIN_DIR_30,DIO_PIN_DIR_29,DIO_PIN_DIR_28,DIO_PIN_DIR_27,DIO_PIN_DIR_26,DIO_PIN_DIR_25,DIO_PIN_DIR_24);
    101c:	e1 e3       	ldi	r30, 0x31	; 49
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	8f ef       	ldi	r24, 0xFF	; 255
    1022:	80 83       	st	Z, r24
	}
	return;
}
    1024:	0f 90       	pop	r0
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <DIO_enuWritePin>:



tenuErrorStatus DIO_enuWritePin(u8 u8PinNumCpy,u8 u8PinValueCpy)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	2b 97       	sbiw	r28, 0x0b	; 11
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	cd bf       	out	0x3d, r28	; 61
    1040:	8a 83       	std	Y+2, r24	; 0x02
    1042:	6b 83       	std	Y+3, r22	; 0x03

	tenuErrorStatus enuReturnStateLoc = EOK;
    1044:	19 82       	std	Y+1, r1	; 0x01
	if (u8PinNumCpy >= DIO_PIN_NUM_0 && u8PinNumCpy <= DIO_PIN_NUM_7)
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	88 30       	cpi	r24, 0x08	; 8
    104a:	d8 f5       	brcc	.+118    	; 0x10c2 <DIO_enuWritePin+0x96>
	{
		switch (u8PinValueCpy)
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	3b 87       	std	Y+11, r19	; 0x0b
    1054:	2a 87       	std	Y+10, r18	; 0x0a
    1056:	8a 85       	ldd	r24, Y+10	; 0x0a
    1058:	9b 85       	ldd	r25, Y+11	; 0x0b
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	31 f0       	breq	.+12     	; 0x106a <DIO_enuWritePin+0x3e>
    105e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1060:	3b 85       	ldd	r19, Y+11	; 0x0b
    1062:	21 30       	cpi	r18, 0x01	; 1
    1064:	31 05       	cpc	r19, r1
    1066:	b1 f0       	breq	.+44     	; 0x1094 <DIO_enuWritePin+0x68>
    1068:	29 c0       	rjmp	.+82     	; 0x10bc <DIO_enuWritePin+0x90>
		{
			case DIO_LOW :
			 CLR_BIT (ODRA ,  u8PinNumCpy);
    106a:	ab e3       	ldi	r26, 0x3B	; 59
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	eb e3       	ldi	r30, 0x3B	; 59
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 2e       	mov	r0, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <DIO_enuWritePin+0x5c>
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	0a 94       	dec	r0
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <DIO_enuWritePin+0x58>
    108c:	80 95       	com	r24
    108e:	84 23       	and	r24, r20
    1090:	8c 93       	st	X, r24
    1092:	f8 c0       	rjmp	.+496    	; 0x1284 <DIO_enuWritePin+0x258>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRA , u8PinNumCpy);
    1094:	ab e3       	ldi	r26, 0x3B	; 59
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	eb e3       	ldi	r30, 0x3B	; 59
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	48 2f       	mov	r20, r24
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 2e       	mov	r0, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_enuWritePin+0x86>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO_enuWritePin+0x82>
    10b6:	84 2b       	or	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	e4 c0       	rjmp	.+456    	; 0x1284 <DIO_enuWritePin+0x258>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	89 83       	std	Y+1, r24	; 0x01
    10c0:	e1 c0       	rjmp	.+450    	; 0x1284 <DIO_enuWritePin+0x258>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_8 && u8PinNumCpy <= DIO_PIN_NUM_15)
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	88 30       	cpi	r24, 0x08	; 8
    10c6:	08 f4       	brcc	.+2      	; 0x10ca <DIO_enuWritePin+0x9e>
    10c8:	45 c0       	rjmp	.+138    	; 0x1154 <DIO_enuWritePin+0x128>
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	80 31       	cpi	r24, 0x10	; 16
    10ce:	08 f0       	brcs	.+2      	; 0x10d2 <DIO_enuWritePin+0xa6>
    10d0:	41 c0       	rjmp	.+130    	; 0x1154 <DIO_enuWritePin+0x128>
	{
		switch (u8PinValueCpy)
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	39 87       	std	Y+9, r19	; 0x09
    10da:	28 87       	std	Y+8, r18	; 0x08
    10dc:	88 85       	ldd	r24, Y+8	; 0x08
    10de:	99 85       	ldd	r25, Y+9	; 0x09
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	31 f0       	breq	.+12     	; 0x10f0 <DIO_enuWritePin+0xc4>
    10e4:	28 85       	ldd	r18, Y+8	; 0x08
    10e6:	39 85       	ldd	r19, Y+9	; 0x09
    10e8:	21 30       	cpi	r18, 0x01	; 1
    10ea:	31 05       	cpc	r19, r1
    10ec:	c9 f0       	breq	.+50     	; 0x1120 <DIO_enuWritePin+0xf4>
    10ee:	2f c0       	rjmp	.+94     	; 0x114e <DIO_enuWritePin+0x122>
		{
			case DIO_LOW :
			 CLR_BIT (ODRB ,  u8PinNumCpy%8); //0 1 2 3 4 5 6 7 => 8%8 = 0, 9%8 = 1, 10%8 = 2, 11%8 = 3, 12%8 = 4, 13%8 = 5, 14%8 = 6, 15%8 = 7
    10f0:	a8 e3       	ldi	r26, 0x38	; 56
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e8 e3       	ldi	r30, 0x38	; 56
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	48 2f       	mov	r20, r24
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	88 2f       	mov	r24, r24
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	9c 01       	movw	r18, r24
    1104:	27 70       	andi	r18, 0x07	; 7
    1106:	30 70       	andi	r19, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 2e       	mov	r0, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <DIO_enuWritePin+0xe8>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	0a 94       	dec	r0
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <DIO_enuWritePin+0xe4>
    1118:	80 95       	com	r24
    111a:	84 23       	and	r24, r20
    111c:	8c 93       	st	X, r24
    111e:	b2 c0       	rjmp	.+356    	; 0x1284 <DIO_enuWritePin+0x258>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRB , u8PinNumCpy%8);
    1120:	a8 e3       	ldi	r26, 0x38	; 56
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e8 e3       	ldi	r30, 0x38	; 56
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	88 2f       	mov	r24, r24
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	9c 01       	movw	r18, r24
    1134:	27 70       	andi	r18, 0x07	; 7
    1136:	30 70       	andi	r19, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	02 2e       	mov	r0, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <DIO_enuWritePin+0x118>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	0a 94       	dec	r0
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <DIO_enuWritePin+0x114>
    1148:	84 2b       	or	r24, r20
    114a:	8c 93       	st	X, r24
    114c:	9b c0       	rjmp	.+310    	; 0x1284 <DIO_enuWritePin+0x258>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	98 c0       	rjmp	.+304    	; 0x1284 <DIO_enuWritePin+0x258>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_16 && u8PinNumCpy <= DIO_PIN_NUM_23)
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	80 31       	cpi	r24, 0x10	; 16
    1158:	08 f4       	brcc	.+2      	; 0x115c <DIO_enuWritePin+0x130>
    115a:	45 c0       	rjmp	.+138    	; 0x11e6 <DIO_enuWritePin+0x1ba>
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	88 31       	cpi	r24, 0x18	; 24
    1160:	08 f0       	brcs	.+2      	; 0x1164 <DIO_enuWritePin+0x138>
    1162:	41 c0       	rjmp	.+130    	; 0x11e6 <DIO_enuWritePin+0x1ba>
	{
		switch (u8PinValueCpy)
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	3f 83       	std	Y+7, r19	; 0x07
    116c:	2e 83       	std	Y+6, r18	; 0x06
    116e:	8e 81       	ldd	r24, Y+6	; 0x06
    1170:	9f 81       	ldd	r25, Y+7	; 0x07
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	31 f0       	breq	.+12     	; 0x1182 <DIO_enuWritePin+0x156>
    1176:	2e 81       	ldd	r18, Y+6	; 0x06
    1178:	3f 81       	ldd	r19, Y+7	; 0x07
    117a:	21 30       	cpi	r18, 0x01	; 1
    117c:	31 05       	cpc	r19, r1
    117e:	c9 f0       	breq	.+50     	; 0x11b2 <DIO_enuWritePin+0x186>
    1180:	2f c0       	rjmp	.+94     	; 0x11e0 <DIO_enuWritePin+0x1b4>
		{
			case DIO_LOW :
			 CLR_BIT (ODRC ,  u8PinNumCpy%16);
    1182:	a5 e3       	ldi	r26, 0x35	; 53
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e5 e3       	ldi	r30, 0x35	; 53
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	48 2f       	mov	r20, r24
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	88 2f       	mov	r24, r24
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	9c 01       	movw	r18, r24
    1196:	2f 70       	andi	r18, 0x0F	; 15
    1198:	30 70       	andi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <DIO_enuWritePin+0x17a>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <DIO_enuWritePin+0x176>
    11aa:	80 95       	com	r24
    11ac:	84 23       	and	r24, r20
    11ae:	8c 93       	st	X, r24
    11b0:	69 c0       	rjmp	.+210    	; 0x1284 <DIO_enuWritePin+0x258>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRC , u8PinNumCpy%16);
    11b2:	a5 e3       	ldi	r26, 0x35	; 53
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e5 e3       	ldi	r30, 0x35	; 53
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	88 2f       	mov	r24, r24
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	9c 01       	movw	r18, r24
    11c6:	2f 70       	andi	r18, 0x0F	; 15
    11c8:	30 70       	andi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <DIO_enuWritePin+0x1aa>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <DIO_enuWritePin+0x1a6>
    11da:	84 2b       	or	r24, r20
    11dc:	8c 93       	st	X, r24
    11de:	52 c0       	rjmp	.+164    	; 0x1284 <DIO_enuWritePin+0x258>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	89 83       	std	Y+1, r24	; 0x01
    11e4:	4f c0       	rjmp	.+158    	; 0x1284 <DIO_enuWritePin+0x258>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_24 && u8PinNumCpy <= DIO_PIN_NUM_31)
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	88 31       	cpi	r24, 0x18	; 24
    11ea:	08 f4       	brcc	.+2      	; 0x11ee <DIO_enuWritePin+0x1c2>
    11ec:	49 c0       	rjmp	.+146    	; 0x1280 <DIO_enuWritePin+0x254>
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	80 32       	cpi	r24, 0x20	; 32
    11f2:	08 f0       	brcs	.+2      	; 0x11f6 <DIO_enuWritePin+0x1ca>
    11f4:	45 c0       	rjmp	.+138    	; 0x1280 <DIO_enuWritePin+0x254>
	{
		switch (u8PinValueCpy)
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	3d 83       	std	Y+5, r19	; 0x05
    11fe:	2c 83       	std	Y+4, r18	; 0x04
    1200:	8c 81       	ldd	r24, Y+4	; 0x04
    1202:	9d 81       	ldd	r25, Y+5	; 0x05
    1204:	00 97       	sbiw	r24, 0x00	; 0
    1206:	31 f0       	breq	.+12     	; 0x1214 <DIO_enuWritePin+0x1e8>
    1208:	2c 81       	ldd	r18, Y+4	; 0x04
    120a:	3d 81       	ldd	r19, Y+5	; 0x05
    120c:	21 30       	cpi	r18, 0x01	; 1
    120e:	31 05       	cpc	r19, r1
    1210:	d9 f0       	breq	.+54     	; 0x1248 <DIO_enuWritePin+0x21c>
    1212:	33 c0       	rjmp	.+102    	; 0x127a <DIO_enuWritePin+0x24e>
		{
			case DIO_LOW :
			 CLR_BIT (ODRD ,  u8PinNumCpy%24);
    1214:	a2 e3       	ldi	r26, 0x32	; 50
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e2 e3       	ldi	r30, 0x32	; 50
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	48 2f       	mov	r20, r24
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	98 e1       	ldi	r25, 0x18	; 24
    1224:	69 2f       	mov	r22, r25
    1226:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <__udivmodqi4>
    122a:	89 2f       	mov	r24, r25
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	02 2e       	mov	r0, r18
    1236:	02 c0       	rjmp	.+4      	; 0x123c <DIO_enuWritePin+0x210>
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	0a 94       	dec	r0
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <DIO_enuWritePin+0x20c>
    1240:	80 95       	com	r24
    1242:	84 23       	and	r24, r20
    1244:	8c 93       	st	X, r24
    1246:	1e c0       	rjmp	.+60     	; 0x1284 <DIO_enuWritePin+0x258>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRD , u8PinNumCpy%24);
    1248:	a2 e3       	ldi	r26, 0x32	; 50
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e2 e3       	ldi	r30, 0x32	; 50
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	98 e1       	ldi	r25, 0x18	; 24
    1258:	69 2f       	mov	r22, r25
    125a:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <__udivmodqi4>
    125e:	89 2f       	mov	r24, r25
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	02 2e       	mov	r0, r18
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <DIO_enuWritePin+0x244>
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	0a 94       	dec	r0
    1272:	e2 f7       	brpl	.-8      	; 0x126c <DIO_enuWritePin+0x240>
    1274:	84 2b       	or	r24, r20
    1276:	8c 93       	st	X, r24
    1278:	05 c0       	rjmp	.+10     	; 0x1284 <DIO_enuWritePin+0x258>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <DIO_enuWritePin+0x258>
		}
	}
	else
	{
		enuReturnStateLoc = PARAM_OUT_RANGE ;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuReturnStateLoc ;
    1284:	89 81       	ldd	r24, Y+1	; 0x01

}
    1286:	2b 96       	adiw	r28, 0x0b	; 11
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	08 95       	ret

00001298 <DIO_enuReadPin>:
//#define GET_BIT(byte,pos) ( (byte >> pos) & 1 )
//4 => 0100 
//GET_BIT(4, 1)     0100 >> 1 = 00010 & 0001 = 0

tenuErrorStatus DIO_enuReadPin(u8 u8PinNumCpy ,u8 *pu8PinValueCpy )
{
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	00 d0       	rcall	.+0      	; 0x129e <DIO_enuReadPin+0x6>
    129e:	00 d0       	rcall	.+0      	; 0x12a0 <DIO_enuReadPin+0x8>
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	8a 83       	std	Y+2, r24	; 0x02
    12a6:	7c 83       	std	Y+4, r23	; 0x04
    12a8:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuReturnStateLoc = EOK;
    12aa:	19 82       	std	Y+1, r1	; 0x01

	if (pu8PinValueCpy != NULL)
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	9c 81       	ldd	r25, Y+4	; 0x04
    12b0:	00 97       	sbiw	r24, 0x00	; 0
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <DIO_enuReadPin+0x1e>
    12b4:	71 c0       	rjmp	.+226    	; 0x1398 <DIO_enuReadPin+0x100>
	{
		//IDR
		if (u8PinNumCpy >= DIO_PIN_NUM_0 && u8PinNumCpy <= DIO_PIN_NUM_7)
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	88 30       	cpi	r24, 0x08	; 8
    12ba:	a0 f4       	brcc	.+40     	; 0x12e4 <DIO_enuReadPin+0x4c>
		{
			*pu8PinValueCpy  = GET_BIT(IDRA , u8PinNumCpy);
    12bc:	e9 e3       	ldi	r30, 0x39	; 57
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	88 2f       	mov	r24, r24
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	a9 01       	movw	r20, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <DIO_enuReadPin+0x3c>
    12d0:	55 95       	asr	r21
    12d2:	47 95       	ror	r20
    12d4:	8a 95       	dec	r24
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <DIO_enuReadPin+0x38>
    12d8:	ca 01       	movw	r24, r20
    12da:	81 70       	andi	r24, 0x01	; 1
    12dc:	eb 81       	ldd	r30, Y+3	; 0x03
    12de:	fc 81       	ldd	r31, Y+4	; 0x04
    12e0:	80 83       	st	Z, r24
    12e2:	5c c0       	rjmp	.+184    	; 0x139c <DIO_enuReadPin+0x104>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_8 && u8PinNumCpy <= DIO_PIN_NUM_15)
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	88 30       	cpi	r24, 0x08	; 8
    12e8:	c8 f0       	brcs	.+50     	; 0x131c <DIO_enuReadPin+0x84>
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	80 31       	cpi	r24, 0x10	; 16
    12ee:	b0 f4       	brcc	.+44     	; 0x131c <DIO_enuReadPin+0x84>
		{
			*pu8PinValueCpy  = GET_BIT(IDRB , u8PinNumCpy%8);
    12f0:	e6 e3       	ldi	r30, 0x36	; 54
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	88 2f       	mov	r24, r24
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	87 70       	andi	r24, 0x07	; 7
    1302:	90 70       	andi	r25, 0x00	; 0
    1304:	a9 01       	movw	r20, r18
    1306:	02 c0       	rjmp	.+4      	; 0x130c <DIO_enuReadPin+0x74>
    1308:	55 95       	asr	r21
    130a:	47 95       	ror	r20
    130c:	8a 95       	dec	r24
    130e:	e2 f7       	brpl	.-8      	; 0x1308 <DIO_enuReadPin+0x70>
    1310:	ca 01       	movw	r24, r20
    1312:	81 70       	andi	r24, 0x01	; 1
    1314:	eb 81       	ldd	r30, Y+3	; 0x03
    1316:	fc 81       	ldd	r31, Y+4	; 0x04
    1318:	80 83       	st	Z, r24
    131a:	40 c0       	rjmp	.+128    	; 0x139c <DIO_enuReadPin+0x104>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_16 && u8PinNumCpy <= DIO_PIN_NUM_23)
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	80 31       	cpi	r24, 0x10	; 16
    1320:	c8 f0       	brcs	.+50     	; 0x1354 <DIO_enuReadPin+0xbc>
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	88 31       	cpi	r24, 0x18	; 24
    1326:	b0 f4       	brcc	.+44     	; 0x1354 <DIO_enuReadPin+0xbc>
		{
			*pu8PinValueCpy  = GET_BIT(IDRC , u8PinNumCpy%16);
    1328:	e3 e3       	ldi	r30, 0x33	; 51
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	88 2f       	mov	r24, r24
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	8f 70       	andi	r24, 0x0F	; 15
    133a:	90 70       	andi	r25, 0x00	; 0
    133c:	a9 01       	movw	r20, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <DIO_enuReadPin+0xac>
    1340:	55 95       	asr	r21
    1342:	47 95       	ror	r20
    1344:	8a 95       	dec	r24
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <DIO_enuReadPin+0xa8>
    1348:	ca 01       	movw	r24, r20
    134a:	81 70       	andi	r24, 0x01	; 1
    134c:	eb 81       	ldd	r30, Y+3	; 0x03
    134e:	fc 81       	ldd	r31, Y+4	; 0x04
    1350:	80 83       	st	Z, r24
    1352:	24 c0       	rjmp	.+72     	; 0x139c <DIO_enuReadPin+0x104>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_24 && u8PinNumCpy <= DIO_PIN_NUM_31)
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	88 31       	cpi	r24, 0x18	; 24
    1358:	e0 f0       	brcs	.+56     	; 0x1392 <DIO_enuReadPin+0xfa>
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	80 32       	cpi	r24, 0x20	; 32
    135e:	c8 f4       	brcc	.+50     	; 0x1392 <DIO_enuReadPin+0xfa>
		{
			*pu8PinValueCpy  = GET_BIT(IDRD , u8PinNumCpy%24);
    1360:	e0 e3       	ldi	r30, 0x30	; 48
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	98 e1       	ldi	r25, 0x18	; 24
    136e:	69 2f       	mov	r22, r25
    1370:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <__udivmodqi4>
    1374:	89 2f       	mov	r24, r25
    1376:	88 2f       	mov	r24, r24
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	a9 01       	movw	r20, r18
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <DIO_enuReadPin+0xea>
    137e:	55 95       	asr	r21
    1380:	47 95       	ror	r20
    1382:	8a 95       	dec	r24
    1384:	e2 f7       	brpl	.-8      	; 0x137e <DIO_enuReadPin+0xe6>
    1386:	ca 01       	movw	r24, r20
    1388:	81 70       	andi	r24, 0x01	; 1
    138a:	eb 81       	ldd	r30, Y+3	; 0x03
    138c:	fc 81       	ldd	r31, Y+4	; 0x04
    138e:	80 83       	st	Z, r24
    1390:	05 c0       	rjmp	.+10     	; 0x139c <DIO_enuReadPin+0x104>
		}
		else
		{
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	02 c0       	rjmp	.+4      	; 0x139c <DIO_enuReadPin+0x104>
		}
	}
	else
	{
		enuReturnStateLoc = PARAM_NULL_PTR ;
    1398:	82 e0       	ldi	r24, 0x02	; 2
    139a:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuReturnStateLoc ;
    139c:	89 81       	ldd	r24, Y+1	; 0x01

}
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <DIO_enuStatePullup>:

tenuErrorStatus DIO_enuStatePullup(u8 u8PinNumCpy, u8 u8StateCpy)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <DIO_enuStatePullup+0x6>
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	89 83       	std	Y+1, r24	; 0x01
    13b8:	6a 83       	std	Y+2, r22	; 0x02
   return DIO_enuWritePin(u8PinNumCpy,u8StateCpy);
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	6a 81       	ldd	r22, Y+2	; 0x02
    13be:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
}
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <DIO_enuWriteGroup>:



tenuErrorStatus DIO_enuWriteGroup(u8 *pau8PinNumCpy,u8 * pau8PinValueCpy , u8 u8SizeCpy)
{
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	27 97       	sbiw	r28, 0x07	; 7
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	cd bf       	out	0x3d, r28	; 61
    13e0:	9c 83       	std	Y+4, r25	; 0x04
    13e2:	8b 83       	std	Y+3, r24	; 0x03
    13e4:	7e 83       	std	Y+6, r23	; 0x06
    13e6:	6d 83       	std	Y+5, r22	; 0x05
    13e8:	4f 83       	std	Y+7, r20	; 0x07
	tenuErrorStatus enuReturnStateLoc = EOK;
    13ea:	1a 82       	std	Y+2, r1	; 0x02
	u8 u8CntrLoc;
	for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    13ec:	19 82       	std	Y+1, r1	; 0x01
    13ee:	1d c0       	rjmp	.+58     	; 0x142a <DIO_enuWriteGroup+0x5e>
	{
		enuReturnStateLoc = DIO_enuWritePin(pau8PinNumCpy[u8CntrLoc],pau8PinValueCpy[u8CntrLoc]);
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	9c 81       	ldd	r25, Y+4	; 0x04
    13fa:	fc 01       	movw	r30, r24
    13fc:	e2 0f       	add	r30, r18
    13fe:	f3 1f       	adc	r31, r19
    1400:	40 81       	ld	r20, Z
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	8d 81       	ldd	r24, Y+5	; 0x05
    140a:	9e 81       	ldd	r25, Y+6	; 0x06
    140c:	fc 01       	movw	r30, r24
    140e:	e2 0f       	add	r30, r18
    1410:	f3 1f       	adc	r31, r19
    1412:	90 81       	ld	r25, Z
    1414:	84 2f       	mov	r24, r20
    1416:	69 2f       	mov	r22, r25
    1418:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
    141c:	8a 83       	std	Y+2, r24	; 0x02
		if (enuReturnStateLoc != EOK)
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	88 23       	and	r24, r24
    1422:	39 f4       	brne	.+14     	; 0x1432 <DIO_enuWriteGroup+0x66>

tenuErrorStatus DIO_enuWriteGroup(u8 *pau8PinNumCpy,u8 * pau8PinValueCpy , u8 u8SizeCpy)
{
	tenuErrorStatus enuReturnStateLoc = EOK;
	u8 u8CntrLoc;
	for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	8f 5f       	subi	r24, 0xFF	; 255
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	99 81       	ldd	r25, Y+1	; 0x01
    142c:	8f 81       	ldd	r24, Y+7	; 0x07
    142e:	98 17       	cp	r25, r24
    1430:	f8 f2       	brcs	.-66     	; 0x13f0 <DIO_enuWriteGroup+0x24>
		if (enuReturnStateLoc != EOK)
		{
			break;
		}
	}
	return enuReturnStateLoc;
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1434:	27 96       	adiw	r28, 0x07	; 7
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	cd bf       	out	0x3d, r28	; 61
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <STPR_FullStep_Right>:
#include "STPR_cfg.h"
#include "STPR_priv.h"


void STPR_FullStep_Right(u8 speed)
{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	a1 97       	sbiw	r28, 0x21	; 33
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	89 a3       	std	Y+33, r24	; 0x21
	//full step
	DIO_enuWritePin(STPR_COIL_0,DIO_HIGH); //activate coil 1
    145c:	88 e1       	ldi	r24, 0x18	; 24
    145e:	61 e0       	ldi	r22, 0x01	; 1
    1460:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	Delay_ms(speed);
    1464:	89 a1       	ldd	r24, Y+33	; 0x21
    1466:	86 95       	lsr	r24
    1468:	86 95       	lsr	r24
    146a:	86 95       	lsr	r24
    146c:	88 2f       	mov	r24, r24
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	a0 e0       	ldi	r26, 0x00	; 0
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	8d 8f       	std	Y+29, r24	; 0x1d
    1476:	9e 8f       	std	Y+30, r25	; 0x1e
    1478:	af 8f       	std	Y+31, r26	; 0x1f
    147a:	b8 a3       	std	Y+32, r27	; 0x20
    147c:	28 c0       	rjmp	.+80     	; 0x14ce <STPR_FullStep_Right+0x88>
    147e:	80 ed       	ldi	r24, 0xD0	; 208
    1480:	97 e0       	ldi	r25, 0x07	; 7
    1482:	a0 e0       	ldi	r26, 0x00	; 0
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	89 8f       	std	Y+25, r24	; 0x19
    1488:	9a 8f       	std	Y+26, r25	; 0x1a
    148a:	ab 8f       	std	Y+27, r26	; 0x1b
    148c:	bc 8f       	std	Y+28, r27	; 0x1c
    148e:	0c c0       	rjmp	.+24     	; 0x14a8 <STPR_FullStep_Right+0x62>
    1490:	00 00       	nop
    1492:	89 8d       	ldd	r24, Y+25	; 0x19
    1494:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1496:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1498:	bc 8d       	ldd	r27, Y+28	; 0x1c
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	a1 09       	sbc	r26, r1
    149e:	b1 09       	sbc	r27, r1
    14a0:	89 8f       	std	Y+25, r24	; 0x19
    14a2:	9a 8f       	std	Y+26, r25	; 0x1a
    14a4:	ab 8f       	std	Y+27, r26	; 0x1b
    14a6:	bc 8f       	std	Y+28, r27	; 0x1c
    14a8:	89 8d       	ldd	r24, Y+25	; 0x19
    14aa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    14ac:	ab 8d       	ldd	r26, Y+27	; 0x1b
    14ae:	bc 8d       	ldd	r27, Y+28	; 0x1c
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	a1 05       	cpc	r26, r1
    14b4:	b1 05       	cpc	r27, r1
    14b6:	61 f7       	brne	.-40     	; 0x1490 <STPR_FullStep_Right+0x4a>
    14b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14bc:	af 8d       	ldd	r26, Y+31	; 0x1f
    14be:	b8 a1       	ldd	r27, Y+32	; 0x20
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	a1 09       	sbc	r26, r1
    14c4:	b1 09       	sbc	r27, r1
    14c6:	8d 8f       	std	Y+29, r24	; 0x1d
    14c8:	9e 8f       	std	Y+30, r25	; 0x1e
    14ca:	af 8f       	std	Y+31, r26	; 0x1f
    14cc:	b8 a3       	std	Y+32, r27	; 0x20
    14ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14d2:	af 8d       	ldd	r26, Y+31	; 0x1f
    14d4:	b8 a1       	ldd	r27, Y+32	; 0x20
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	a1 05       	cpc	r26, r1
    14da:	b1 05       	cpc	r27, r1
    14dc:	81 f6       	brne	.-96     	; 0x147e <STPR_FullStep_Right+0x38>
	DIO_enuWritePin(STPR_COIL_0,DIO_LOW);
    14de:	88 e1       	ldi	r24, 0x18	; 24
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_1,DIO_HIGH); //activate coil 2
    14e6:	89 e1       	ldi	r24, 0x19	; 25
    14e8:	61 e0       	ldi	r22, 0x01	; 1
    14ea:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	Delay_ms(speed);
    14ee:	89 a1       	ldd	r24, Y+33	; 0x21
    14f0:	86 95       	lsr	r24
    14f2:	86 95       	lsr	r24
    14f4:	86 95       	lsr	r24
    14f6:	88 2f       	mov	r24, r24
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	a0 e0       	ldi	r26, 0x00	; 0
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	8d 8b       	std	Y+21, r24	; 0x15
    1500:	9e 8b       	std	Y+22, r25	; 0x16
    1502:	af 8b       	std	Y+23, r26	; 0x17
    1504:	b8 8f       	std	Y+24, r27	; 0x18
    1506:	28 c0       	rjmp	.+80     	; 0x1558 <STPR_FullStep_Right+0x112>
    1508:	80 ed       	ldi	r24, 0xD0	; 208
    150a:	97 e0       	ldi	r25, 0x07	; 7
    150c:	a0 e0       	ldi	r26, 0x00	; 0
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	89 8b       	std	Y+17, r24	; 0x11
    1512:	9a 8b       	std	Y+18, r25	; 0x12
    1514:	ab 8b       	std	Y+19, r26	; 0x13
    1516:	bc 8b       	std	Y+20, r27	; 0x14
    1518:	0c c0       	rjmp	.+24     	; 0x1532 <STPR_FullStep_Right+0xec>
    151a:	00 00       	nop
    151c:	89 89       	ldd	r24, Y+17	; 0x11
    151e:	9a 89       	ldd	r25, Y+18	; 0x12
    1520:	ab 89       	ldd	r26, Y+19	; 0x13
    1522:	bc 89       	ldd	r27, Y+20	; 0x14
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	a1 09       	sbc	r26, r1
    1528:	b1 09       	sbc	r27, r1
    152a:	89 8b       	std	Y+17, r24	; 0x11
    152c:	9a 8b       	std	Y+18, r25	; 0x12
    152e:	ab 8b       	std	Y+19, r26	; 0x13
    1530:	bc 8b       	std	Y+20, r27	; 0x14
    1532:	89 89       	ldd	r24, Y+17	; 0x11
    1534:	9a 89       	ldd	r25, Y+18	; 0x12
    1536:	ab 89       	ldd	r26, Y+19	; 0x13
    1538:	bc 89       	ldd	r27, Y+20	; 0x14
    153a:	00 97       	sbiw	r24, 0x00	; 0
    153c:	a1 05       	cpc	r26, r1
    153e:	b1 05       	cpc	r27, r1
    1540:	61 f7       	brne	.-40     	; 0x151a <STPR_FullStep_Right+0xd4>
    1542:	8d 89       	ldd	r24, Y+21	; 0x15
    1544:	9e 89       	ldd	r25, Y+22	; 0x16
    1546:	af 89       	ldd	r26, Y+23	; 0x17
    1548:	b8 8d       	ldd	r27, Y+24	; 0x18
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	a1 09       	sbc	r26, r1
    154e:	b1 09       	sbc	r27, r1
    1550:	8d 8b       	std	Y+21, r24	; 0x15
    1552:	9e 8b       	std	Y+22, r25	; 0x16
    1554:	af 8b       	std	Y+23, r26	; 0x17
    1556:	b8 8f       	std	Y+24, r27	; 0x18
    1558:	8d 89       	ldd	r24, Y+21	; 0x15
    155a:	9e 89       	ldd	r25, Y+22	; 0x16
    155c:	af 89       	ldd	r26, Y+23	; 0x17
    155e:	b8 8d       	ldd	r27, Y+24	; 0x18
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	a1 05       	cpc	r26, r1
    1564:	b1 05       	cpc	r27, r1
    1566:	81 f6       	brne	.-96     	; 0x1508 <STPR_FullStep_Right+0xc2>
	DIO_enuWritePin(STPR_COIL_1,DIO_LOW);
    1568:	89 e1       	ldi	r24, 0x19	; 25
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_2,DIO_HIGH);//activate coil 3
    1570:	8a e1       	ldi	r24, 0x1A	; 26
    1572:	61 e0       	ldi	r22, 0x01	; 1
    1574:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	Delay_ms(speed);
    1578:	89 a1       	ldd	r24, Y+33	; 0x21
    157a:	86 95       	lsr	r24
    157c:	86 95       	lsr	r24
    157e:	86 95       	lsr	r24
    1580:	88 2f       	mov	r24, r24
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	a0 e0       	ldi	r26, 0x00	; 0
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	8d 87       	std	Y+13, r24	; 0x0d
    158a:	9e 87       	std	Y+14, r25	; 0x0e
    158c:	af 87       	std	Y+15, r26	; 0x0f
    158e:	b8 8b       	std	Y+16, r27	; 0x10
    1590:	28 c0       	rjmp	.+80     	; 0x15e2 <STPR_FullStep_Right+0x19c>
    1592:	80 ed       	ldi	r24, 0xD0	; 208
    1594:	97 e0       	ldi	r25, 0x07	; 7
    1596:	a0 e0       	ldi	r26, 0x00	; 0
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	89 87       	std	Y+9, r24	; 0x09
    159c:	9a 87       	std	Y+10, r25	; 0x0a
    159e:	ab 87       	std	Y+11, r26	; 0x0b
    15a0:	bc 87       	std	Y+12, r27	; 0x0c
    15a2:	0c c0       	rjmp	.+24     	; 0x15bc <STPR_FullStep_Right+0x176>
    15a4:	00 00       	nop
    15a6:	89 85       	ldd	r24, Y+9	; 0x09
    15a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15aa:	ab 85       	ldd	r26, Y+11	; 0x0b
    15ac:	bc 85       	ldd	r27, Y+12	; 0x0c
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	a1 09       	sbc	r26, r1
    15b2:	b1 09       	sbc	r27, r1
    15b4:	89 87       	std	Y+9, r24	; 0x09
    15b6:	9a 87       	std	Y+10, r25	; 0x0a
    15b8:	ab 87       	std	Y+11, r26	; 0x0b
    15ba:	bc 87       	std	Y+12, r27	; 0x0c
    15bc:	89 85       	ldd	r24, Y+9	; 0x09
    15be:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c0:	ab 85       	ldd	r26, Y+11	; 0x0b
    15c2:	bc 85       	ldd	r27, Y+12	; 0x0c
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	a1 05       	cpc	r26, r1
    15c8:	b1 05       	cpc	r27, r1
    15ca:	61 f7       	brne	.-40     	; 0x15a4 <STPR_FullStep_Right+0x15e>
    15cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d0:	af 85       	ldd	r26, Y+15	; 0x0f
    15d2:	b8 89       	ldd	r27, Y+16	; 0x10
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	a1 09       	sbc	r26, r1
    15d8:	b1 09       	sbc	r27, r1
    15da:	8d 87       	std	Y+13, r24	; 0x0d
    15dc:	9e 87       	std	Y+14, r25	; 0x0e
    15de:	af 87       	std	Y+15, r26	; 0x0f
    15e0:	b8 8b       	std	Y+16, r27	; 0x10
    15e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e6:	af 85       	ldd	r26, Y+15	; 0x0f
    15e8:	b8 89       	ldd	r27, Y+16	; 0x10
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	a1 05       	cpc	r26, r1
    15ee:	b1 05       	cpc	r27, r1
    15f0:	81 f6       	brne	.-96     	; 0x1592 <STPR_FullStep_Right+0x14c>
	DIO_enuWritePin(STPR_COIL_2,DIO_LOW);
    15f2:	8a e1       	ldi	r24, 0x1A	; 26
    15f4:	60 e0       	ldi	r22, 0x00	; 0
    15f6:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_3,DIO_HIGH); //activate coil 4
    15fa:	8b e1       	ldi	r24, 0x1B	; 27
    15fc:	61 e0       	ldi	r22, 0x01	; 1
    15fe:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	Delay_ms(speed);
    1602:	89 a1       	ldd	r24, Y+33	; 0x21
    1604:	86 95       	lsr	r24
    1606:	86 95       	lsr	r24
    1608:	86 95       	lsr	r24
    160a:	88 2f       	mov	r24, r24
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	a0 e0       	ldi	r26, 0x00	; 0
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	8d 83       	std	Y+5, r24	; 0x05
    1614:	9e 83       	std	Y+6, r25	; 0x06
    1616:	af 83       	std	Y+7, r26	; 0x07
    1618:	b8 87       	std	Y+8, r27	; 0x08
    161a:	28 c0       	rjmp	.+80     	; 0x166c <STPR_FullStep_Right+0x226>
    161c:	80 ed       	ldi	r24, 0xD0	; 208
    161e:	97 e0       	ldi	r25, 0x07	; 7
    1620:	a0 e0       	ldi	r26, 0x00	; 0
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	89 83       	std	Y+1, r24	; 0x01
    1626:	9a 83       	std	Y+2, r25	; 0x02
    1628:	ab 83       	std	Y+3, r26	; 0x03
    162a:	bc 83       	std	Y+4, r27	; 0x04
    162c:	0c c0       	rjmp	.+24     	; 0x1646 <STPR_FullStep_Right+0x200>
    162e:	00 00       	nop
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	9a 81       	ldd	r25, Y+2	; 0x02
    1634:	ab 81       	ldd	r26, Y+3	; 0x03
    1636:	bc 81       	ldd	r27, Y+4	; 0x04
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	a1 09       	sbc	r26, r1
    163c:	b1 09       	sbc	r27, r1
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	9a 83       	std	Y+2, r25	; 0x02
    1642:	ab 83       	std	Y+3, r26	; 0x03
    1644:	bc 83       	std	Y+4, r27	; 0x04
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	9a 81       	ldd	r25, Y+2	; 0x02
    164a:	ab 81       	ldd	r26, Y+3	; 0x03
    164c:	bc 81       	ldd	r27, Y+4	; 0x04
    164e:	00 97       	sbiw	r24, 0x00	; 0
    1650:	a1 05       	cpc	r26, r1
    1652:	b1 05       	cpc	r27, r1
    1654:	61 f7       	brne	.-40     	; 0x162e <STPR_FullStep_Right+0x1e8>
    1656:	8d 81       	ldd	r24, Y+5	; 0x05
    1658:	9e 81       	ldd	r25, Y+6	; 0x06
    165a:	af 81       	ldd	r26, Y+7	; 0x07
    165c:	b8 85       	ldd	r27, Y+8	; 0x08
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	a1 09       	sbc	r26, r1
    1662:	b1 09       	sbc	r27, r1
    1664:	8d 83       	std	Y+5, r24	; 0x05
    1666:	9e 83       	std	Y+6, r25	; 0x06
    1668:	af 83       	std	Y+7, r26	; 0x07
    166a:	b8 87       	std	Y+8, r27	; 0x08
    166c:	8d 81       	ldd	r24, Y+5	; 0x05
    166e:	9e 81       	ldd	r25, Y+6	; 0x06
    1670:	af 81       	ldd	r26, Y+7	; 0x07
    1672:	b8 85       	ldd	r27, Y+8	; 0x08
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	a1 05       	cpc	r26, r1
    1678:	b1 05       	cpc	r27, r1
    167a:	81 f6       	brne	.-96     	; 0x161c <STPR_FullStep_Right+0x1d6>
	DIO_enuWritePin(STPR_COIL_3,DIO_LOW);
    167c:	8b e1       	ldi	r24, 0x1B	; 27
    167e:	60 e0       	ldi	r22, 0x00	; 0
    1680:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
}
    1684:	a1 96       	adiw	r28, 0x21	; 33
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <STPR_FullStep_Left>:

void STPR_FullStep_Left(u32 speed)
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	a4 97       	sbiw	r28, 0x24	; 36
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	cd bf       	out	0x3d, r28	; 61
    16aa:	69 a3       	std	Y+33, r22	; 0x21
    16ac:	7a a3       	std	Y+34, r23	; 0x22
    16ae:	8b a3       	std	Y+35, r24	; 0x23
    16b0:	9c a3       	std	Y+36, r25	; 0x24
	//full step
	DIO_enuWritePin(STPR_COIL_3,DIO_HIGH); //activate coil 4
    16b2:	8b e1       	ldi	r24, 0x1B	; 27
    16b4:	61 e0       	ldi	r22, 0x01	; 1
    16b6:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	Delay_ms(speed);
    16ba:	89 a1       	ldd	r24, Y+33	; 0x21
    16bc:	9a a1       	ldd	r25, Y+34	; 0x22
    16be:	ab a1       	ldd	r26, Y+35	; 0x23
    16c0:	bc a1       	ldd	r27, Y+36	; 0x24
    16c2:	68 94       	set
    16c4:	12 f8       	bld	r1, 2
    16c6:	b6 95       	lsr	r27
    16c8:	a7 95       	ror	r26
    16ca:	97 95       	ror	r25
    16cc:	87 95       	ror	r24
    16ce:	16 94       	lsr	r1
    16d0:	d1 f7       	brne	.-12     	; 0x16c6 <STPR_FullStep_Left+0x30>
    16d2:	8d 8f       	std	Y+29, r24	; 0x1d
    16d4:	9e 8f       	std	Y+30, r25	; 0x1e
    16d6:	af 8f       	std	Y+31, r26	; 0x1f
    16d8:	b8 a3       	std	Y+32, r27	; 0x20
    16da:	28 c0       	rjmp	.+80     	; 0x172c <STPR_FullStep_Left+0x96>
    16dc:	80 ed       	ldi	r24, 0xD0	; 208
    16de:	97 e0       	ldi	r25, 0x07	; 7
    16e0:	a0 e0       	ldi	r26, 0x00	; 0
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	89 8f       	std	Y+25, r24	; 0x19
    16e6:	9a 8f       	std	Y+26, r25	; 0x1a
    16e8:	ab 8f       	std	Y+27, r26	; 0x1b
    16ea:	bc 8f       	std	Y+28, r27	; 0x1c
    16ec:	0c c0       	rjmp	.+24     	; 0x1706 <STPR_FullStep_Left+0x70>
    16ee:	00 00       	nop
    16f0:	89 8d       	ldd	r24, Y+25	; 0x19
    16f2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    16f4:	ab 8d       	ldd	r26, Y+27	; 0x1b
    16f6:	bc 8d       	ldd	r27, Y+28	; 0x1c
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	a1 09       	sbc	r26, r1
    16fc:	b1 09       	sbc	r27, r1
    16fe:	89 8f       	std	Y+25, r24	; 0x19
    1700:	9a 8f       	std	Y+26, r25	; 0x1a
    1702:	ab 8f       	std	Y+27, r26	; 0x1b
    1704:	bc 8f       	std	Y+28, r27	; 0x1c
    1706:	89 8d       	ldd	r24, Y+25	; 0x19
    1708:	9a 8d       	ldd	r25, Y+26	; 0x1a
    170a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    170c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    170e:	00 97       	sbiw	r24, 0x00	; 0
    1710:	a1 05       	cpc	r26, r1
    1712:	b1 05       	cpc	r27, r1
    1714:	61 f7       	brne	.-40     	; 0x16ee <STPR_FullStep_Left+0x58>
    1716:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1718:	9e 8d       	ldd	r25, Y+30	; 0x1e
    171a:	af 8d       	ldd	r26, Y+31	; 0x1f
    171c:	b8 a1       	ldd	r27, Y+32	; 0x20
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	a1 09       	sbc	r26, r1
    1722:	b1 09       	sbc	r27, r1
    1724:	8d 8f       	std	Y+29, r24	; 0x1d
    1726:	9e 8f       	std	Y+30, r25	; 0x1e
    1728:	af 8f       	std	Y+31, r26	; 0x1f
    172a:	b8 a3       	std	Y+32, r27	; 0x20
    172c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    172e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1730:	af 8d       	ldd	r26, Y+31	; 0x1f
    1732:	b8 a1       	ldd	r27, Y+32	; 0x20
    1734:	00 97       	sbiw	r24, 0x00	; 0
    1736:	a1 05       	cpc	r26, r1
    1738:	b1 05       	cpc	r27, r1
    173a:	81 f6       	brne	.-96     	; 0x16dc <STPR_FullStep_Left+0x46>
	DIO_enuWritePin(STPR_COIL_3,DIO_LOW);
    173c:	8b e1       	ldi	r24, 0x1B	; 27
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_2,DIO_HIGH); //activate coil 3
    1744:	8a e1       	ldi	r24, 0x1A	; 26
    1746:	61 e0       	ldi	r22, 0x01	; 1
    1748:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	Delay_ms(speed);
    174c:	89 a1       	ldd	r24, Y+33	; 0x21
    174e:	9a a1       	ldd	r25, Y+34	; 0x22
    1750:	ab a1       	ldd	r26, Y+35	; 0x23
    1752:	bc a1       	ldd	r27, Y+36	; 0x24
    1754:	68 94       	set
    1756:	12 f8       	bld	r1, 2
    1758:	b6 95       	lsr	r27
    175a:	a7 95       	ror	r26
    175c:	97 95       	ror	r25
    175e:	87 95       	ror	r24
    1760:	16 94       	lsr	r1
    1762:	d1 f7       	brne	.-12     	; 0x1758 <STPR_FullStep_Left+0xc2>
    1764:	8d 8b       	std	Y+21, r24	; 0x15
    1766:	9e 8b       	std	Y+22, r25	; 0x16
    1768:	af 8b       	std	Y+23, r26	; 0x17
    176a:	b8 8f       	std	Y+24, r27	; 0x18
    176c:	28 c0       	rjmp	.+80     	; 0x17be <STPR_FullStep_Left+0x128>
    176e:	80 ed       	ldi	r24, 0xD0	; 208
    1770:	97 e0       	ldi	r25, 0x07	; 7
    1772:	a0 e0       	ldi	r26, 0x00	; 0
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	89 8b       	std	Y+17, r24	; 0x11
    1778:	9a 8b       	std	Y+18, r25	; 0x12
    177a:	ab 8b       	std	Y+19, r26	; 0x13
    177c:	bc 8b       	std	Y+20, r27	; 0x14
    177e:	0c c0       	rjmp	.+24     	; 0x1798 <STPR_FullStep_Left+0x102>
    1780:	00 00       	nop
    1782:	89 89       	ldd	r24, Y+17	; 0x11
    1784:	9a 89       	ldd	r25, Y+18	; 0x12
    1786:	ab 89       	ldd	r26, Y+19	; 0x13
    1788:	bc 89       	ldd	r27, Y+20	; 0x14
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	a1 09       	sbc	r26, r1
    178e:	b1 09       	sbc	r27, r1
    1790:	89 8b       	std	Y+17, r24	; 0x11
    1792:	9a 8b       	std	Y+18, r25	; 0x12
    1794:	ab 8b       	std	Y+19, r26	; 0x13
    1796:	bc 8b       	std	Y+20, r27	; 0x14
    1798:	89 89       	ldd	r24, Y+17	; 0x11
    179a:	9a 89       	ldd	r25, Y+18	; 0x12
    179c:	ab 89       	ldd	r26, Y+19	; 0x13
    179e:	bc 89       	ldd	r27, Y+20	; 0x14
    17a0:	00 97       	sbiw	r24, 0x00	; 0
    17a2:	a1 05       	cpc	r26, r1
    17a4:	b1 05       	cpc	r27, r1
    17a6:	61 f7       	brne	.-40     	; 0x1780 <STPR_FullStep_Left+0xea>
    17a8:	8d 89       	ldd	r24, Y+21	; 0x15
    17aa:	9e 89       	ldd	r25, Y+22	; 0x16
    17ac:	af 89       	ldd	r26, Y+23	; 0x17
    17ae:	b8 8d       	ldd	r27, Y+24	; 0x18
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	a1 09       	sbc	r26, r1
    17b4:	b1 09       	sbc	r27, r1
    17b6:	8d 8b       	std	Y+21, r24	; 0x15
    17b8:	9e 8b       	std	Y+22, r25	; 0x16
    17ba:	af 8b       	std	Y+23, r26	; 0x17
    17bc:	b8 8f       	std	Y+24, r27	; 0x18
    17be:	8d 89       	ldd	r24, Y+21	; 0x15
    17c0:	9e 89       	ldd	r25, Y+22	; 0x16
    17c2:	af 89       	ldd	r26, Y+23	; 0x17
    17c4:	b8 8d       	ldd	r27, Y+24	; 0x18
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	a1 05       	cpc	r26, r1
    17ca:	b1 05       	cpc	r27, r1
    17cc:	81 f6       	brne	.-96     	; 0x176e <STPR_FullStep_Left+0xd8>
	DIO_enuWritePin(STPR_COIL_2,DIO_LOW);
    17ce:	8a e1       	ldi	r24, 0x1A	; 26
    17d0:	60 e0       	ldi	r22, 0x00	; 0
    17d2:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_1,DIO_HIGH);//activate coil 2
    17d6:	89 e1       	ldi	r24, 0x19	; 25
    17d8:	61 e0       	ldi	r22, 0x01	; 1
    17da:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	Delay_ms(speed);
    17de:	89 a1       	ldd	r24, Y+33	; 0x21
    17e0:	9a a1       	ldd	r25, Y+34	; 0x22
    17e2:	ab a1       	ldd	r26, Y+35	; 0x23
    17e4:	bc a1       	ldd	r27, Y+36	; 0x24
    17e6:	68 94       	set
    17e8:	12 f8       	bld	r1, 2
    17ea:	b6 95       	lsr	r27
    17ec:	a7 95       	ror	r26
    17ee:	97 95       	ror	r25
    17f0:	87 95       	ror	r24
    17f2:	16 94       	lsr	r1
    17f4:	d1 f7       	brne	.-12     	; 0x17ea <STPR_FullStep_Left+0x154>
    17f6:	8d 87       	std	Y+13, r24	; 0x0d
    17f8:	9e 87       	std	Y+14, r25	; 0x0e
    17fa:	af 87       	std	Y+15, r26	; 0x0f
    17fc:	b8 8b       	std	Y+16, r27	; 0x10
    17fe:	28 c0       	rjmp	.+80     	; 0x1850 <STPR_FullStep_Left+0x1ba>
    1800:	80 ed       	ldi	r24, 0xD0	; 208
    1802:	97 e0       	ldi	r25, 0x07	; 7
    1804:	a0 e0       	ldi	r26, 0x00	; 0
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	89 87       	std	Y+9, r24	; 0x09
    180a:	9a 87       	std	Y+10, r25	; 0x0a
    180c:	ab 87       	std	Y+11, r26	; 0x0b
    180e:	bc 87       	std	Y+12, r27	; 0x0c
    1810:	0c c0       	rjmp	.+24     	; 0x182a <STPR_FullStep_Left+0x194>
    1812:	00 00       	nop
    1814:	89 85       	ldd	r24, Y+9	; 0x09
    1816:	9a 85       	ldd	r25, Y+10	; 0x0a
    1818:	ab 85       	ldd	r26, Y+11	; 0x0b
    181a:	bc 85       	ldd	r27, Y+12	; 0x0c
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	a1 09       	sbc	r26, r1
    1820:	b1 09       	sbc	r27, r1
    1822:	89 87       	std	Y+9, r24	; 0x09
    1824:	9a 87       	std	Y+10, r25	; 0x0a
    1826:	ab 87       	std	Y+11, r26	; 0x0b
    1828:	bc 87       	std	Y+12, r27	; 0x0c
    182a:	89 85       	ldd	r24, Y+9	; 0x09
    182c:	9a 85       	ldd	r25, Y+10	; 0x0a
    182e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1830:	bc 85       	ldd	r27, Y+12	; 0x0c
    1832:	00 97       	sbiw	r24, 0x00	; 0
    1834:	a1 05       	cpc	r26, r1
    1836:	b1 05       	cpc	r27, r1
    1838:	61 f7       	brne	.-40     	; 0x1812 <STPR_FullStep_Left+0x17c>
    183a:	8d 85       	ldd	r24, Y+13	; 0x0d
    183c:	9e 85       	ldd	r25, Y+14	; 0x0e
    183e:	af 85       	ldd	r26, Y+15	; 0x0f
    1840:	b8 89       	ldd	r27, Y+16	; 0x10
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	a1 09       	sbc	r26, r1
    1846:	b1 09       	sbc	r27, r1
    1848:	8d 87       	std	Y+13, r24	; 0x0d
    184a:	9e 87       	std	Y+14, r25	; 0x0e
    184c:	af 87       	std	Y+15, r26	; 0x0f
    184e:	b8 8b       	std	Y+16, r27	; 0x10
    1850:	8d 85       	ldd	r24, Y+13	; 0x0d
    1852:	9e 85       	ldd	r25, Y+14	; 0x0e
    1854:	af 85       	ldd	r26, Y+15	; 0x0f
    1856:	b8 89       	ldd	r27, Y+16	; 0x10
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	a1 05       	cpc	r26, r1
    185c:	b1 05       	cpc	r27, r1
    185e:	81 f6       	brne	.-96     	; 0x1800 <STPR_FullStep_Left+0x16a>
	DIO_enuWritePin(STPR_COIL_1,DIO_LOW);
    1860:	89 e1       	ldi	r24, 0x19	; 25
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_0,DIO_HIGH); //activate coil 1
    1868:	88 e1       	ldi	r24, 0x18	; 24
    186a:	61 e0       	ldi	r22, 0x01	; 1
    186c:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	Delay_ms(speed);
    1870:	89 a1       	ldd	r24, Y+33	; 0x21
    1872:	9a a1       	ldd	r25, Y+34	; 0x22
    1874:	ab a1       	ldd	r26, Y+35	; 0x23
    1876:	bc a1       	ldd	r27, Y+36	; 0x24
    1878:	68 94       	set
    187a:	12 f8       	bld	r1, 2
    187c:	b6 95       	lsr	r27
    187e:	a7 95       	ror	r26
    1880:	97 95       	ror	r25
    1882:	87 95       	ror	r24
    1884:	16 94       	lsr	r1
    1886:	d1 f7       	brne	.-12     	; 0x187c <STPR_FullStep_Left+0x1e6>
    1888:	8d 83       	std	Y+5, r24	; 0x05
    188a:	9e 83       	std	Y+6, r25	; 0x06
    188c:	af 83       	std	Y+7, r26	; 0x07
    188e:	b8 87       	std	Y+8, r27	; 0x08
    1890:	28 c0       	rjmp	.+80     	; 0x18e2 <STPR_FullStep_Left+0x24c>
    1892:	80 ed       	ldi	r24, 0xD0	; 208
    1894:	97 e0       	ldi	r25, 0x07	; 7
    1896:	a0 e0       	ldi	r26, 0x00	; 0
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	89 83       	std	Y+1, r24	; 0x01
    189c:	9a 83       	std	Y+2, r25	; 0x02
    189e:	ab 83       	std	Y+3, r26	; 0x03
    18a0:	bc 83       	std	Y+4, r27	; 0x04
    18a2:	0c c0       	rjmp	.+24     	; 0x18bc <STPR_FullStep_Left+0x226>
    18a4:	00 00       	nop
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	9a 81       	ldd	r25, Y+2	; 0x02
    18aa:	ab 81       	ldd	r26, Y+3	; 0x03
    18ac:	bc 81       	ldd	r27, Y+4	; 0x04
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	a1 09       	sbc	r26, r1
    18b2:	b1 09       	sbc	r27, r1
    18b4:	89 83       	std	Y+1, r24	; 0x01
    18b6:	9a 83       	std	Y+2, r25	; 0x02
    18b8:	ab 83       	std	Y+3, r26	; 0x03
    18ba:	bc 83       	std	Y+4, r27	; 0x04
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	9a 81       	ldd	r25, Y+2	; 0x02
    18c0:	ab 81       	ldd	r26, Y+3	; 0x03
    18c2:	bc 81       	ldd	r27, Y+4	; 0x04
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	a1 05       	cpc	r26, r1
    18c8:	b1 05       	cpc	r27, r1
    18ca:	61 f7       	brne	.-40     	; 0x18a4 <STPR_FullStep_Left+0x20e>
    18cc:	8d 81       	ldd	r24, Y+5	; 0x05
    18ce:	9e 81       	ldd	r25, Y+6	; 0x06
    18d0:	af 81       	ldd	r26, Y+7	; 0x07
    18d2:	b8 85       	ldd	r27, Y+8	; 0x08
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	a1 09       	sbc	r26, r1
    18d8:	b1 09       	sbc	r27, r1
    18da:	8d 83       	std	Y+5, r24	; 0x05
    18dc:	9e 83       	std	Y+6, r25	; 0x06
    18de:	af 83       	std	Y+7, r26	; 0x07
    18e0:	b8 87       	std	Y+8, r27	; 0x08
    18e2:	8d 81       	ldd	r24, Y+5	; 0x05
    18e4:	9e 81       	ldd	r25, Y+6	; 0x06
    18e6:	af 81       	ldd	r26, Y+7	; 0x07
    18e8:	b8 85       	ldd	r27, Y+8	; 0x08
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	a1 05       	cpc	r26, r1
    18ee:	b1 05       	cpc	r27, r1
    18f0:	81 f6       	brne	.-96     	; 0x1892 <STPR_FullStep_Left+0x1fc>
	DIO_enuWritePin(STPR_COIL_0,DIO_LOW);
    18f2:	88 e1       	ldi	r24, 0x18	; 24
    18f4:	60 e0       	ldi	r22, 0x00	; 0
    18f6:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
}
    18fa:	a4 96       	adiw	r28, 0x24	; 36
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <STPR_HalfStep_Right>:

void STPR_HalfStep_Right(u8 speed)
{
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	c9 54       	subi	r28, 0x49	; 73
    1916:	d0 40       	sbci	r29, 0x00	; 0
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	fe 01       	movw	r30, r28
    1924:	e7 5b       	subi	r30, 0xB7	; 183
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	80 83       	st	Z, r24

	DIO_enuWritePin(STPR_COIL_0,DIO_HIGH); //activate coil 1
    192a:	88 e1       	ldi	r24, 0x18	; 24
    192c:	61 e0       	ldi	r22, 0x01	; 1
    192e:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	Delay_ms(speed);
    1932:	fe 01       	movw	r30, r28
    1934:	e7 5b       	subi	r30, 0xB7	; 183
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	80 81       	ld	r24, Z
    193a:	86 95       	lsr	r24
    193c:	86 95       	lsr	r24
    193e:	86 95       	lsr	r24
    1940:	fe 01       	movw	r30, r28
    1942:	eb 5b       	subi	r30, 0xBB	; 187
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	88 2f       	mov	r24, r24
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a0 e0       	ldi	r26, 0x00	; 0
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	80 83       	st	Z, r24
    1950:	91 83       	std	Z+1, r25	; 0x01
    1952:	a2 83       	std	Z+2, r26	; 0x02
    1954:	b3 83       	std	Z+3, r27	; 0x03
    1956:	3c c0       	rjmp	.+120    	; 0x19d0 <STPR_HalfStep_Right+0xc4>
    1958:	fe 01       	movw	r30, r28
    195a:	ef 5b       	subi	r30, 0xBF	; 191
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	80 ed       	ldi	r24, 0xD0	; 208
    1960:	97 e0       	ldi	r25, 0x07	; 7
    1962:	a0 e0       	ldi	r26, 0x00	; 0
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	80 83       	st	Z, r24
    1968:	91 83       	std	Z+1, r25	; 0x01
    196a:	a2 83       	std	Z+2, r26	; 0x02
    196c:	b3 83       	std	Z+3, r27	; 0x03
    196e:	13 c0       	rjmp	.+38     	; 0x1996 <STPR_HalfStep_Right+0x8a>
    1970:	00 00       	nop
    1972:	9e 01       	movw	r18, r28
    1974:	2f 5b       	subi	r18, 0xBF	; 191
    1976:	3f 4f       	sbci	r19, 0xFF	; 255
    1978:	fe 01       	movw	r30, r28
    197a:	ef 5b       	subi	r30, 0xBF	; 191
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	80 81       	ld	r24, Z
    1980:	91 81       	ldd	r25, Z+1	; 0x01
    1982:	a2 81       	ldd	r26, Z+2	; 0x02
    1984:	b3 81       	ldd	r27, Z+3	; 0x03
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	a1 09       	sbc	r26, r1
    198a:	b1 09       	sbc	r27, r1
    198c:	f9 01       	movw	r30, r18
    198e:	80 83       	st	Z, r24
    1990:	91 83       	std	Z+1, r25	; 0x01
    1992:	a2 83       	std	Z+2, r26	; 0x02
    1994:	b3 83       	std	Z+3, r27	; 0x03
    1996:	fe 01       	movw	r30, r28
    1998:	ef 5b       	subi	r30, 0xBF	; 191
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	80 81       	ld	r24, Z
    199e:	91 81       	ldd	r25, Z+1	; 0x01
    19a0:	a2 81       	ldd	r26, Z+2	; 0x02
    19a2:	b3 81       	ldd	r27, Z+3	; 0x03
    19a4:	00 97       	sbiw	r24, 0x00	; 0
    19a6:	a1 05       	cpc	r26, r1
    19a8:	b1 05       	cpc	r27, r1
    19aa:	11 f7       	brne	.-60     	; 0x1970 <STPR_HalfStep_Right+0x64>
    19ac:	9e 01       	movw	r18, r28
    19ae:	2b 5b       	subi	r18, 0xBB	; 187
    19b0:	3f 4f       	sbci	r19, 0xFF	; 255
    19b2:	fe 01       	movw	r30, r28
    19b4:	eb 5b       	subi	r30, 0xBB	; 187
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	80 81       	ld	r24, Z
    19ba:	91 81       	ldd	r25, Z+1	; 0x01
    19bc:	a2 81       	ldd	r26, Z+2	; 0x02
    19be:	b3 81       	ldd	r27, Z+3	; 0x03
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	a1 09       	sbc	r26, r1
    19c4:	b1 09       	sbc	r27, r1
    19c6:	f9 01       	movw	r30, r18
    19c8:	80 83       	st	Z, r24
    19ca:	91 83       	std	Z+1, r25	; 0x01
    19cc:	a2 83       	std	Z+2, r26	; 0x02
    19ce:	b3 83       	std	Z+3, r27	; 0x03
    19d0:	fe 01       	movw	r30, r28
    19d2:	eb 5b       	subi	r30, 0xBB	; 187
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	80 81       	ld	r24, Z
    19d8:	91 81       	ldd	r25, Z+1	; 0x01
    19da:	a2 81       	ldd	r26, Z+2	; 0x02
    19dc:	b3 81       	ldd	r27, Z+3	; 0x03
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	a1 05       	cpc	r26, r1
    19e2:	b1 05       	cpc	r27, r1
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <STPR_HalfStep_Right+0xdc>
    19e6:	b8 cf       	rjmp	.-144    	; 0x1958 <STPR_HalfStep_Right+0x4c>
	DIO_enuWritePin(STPR_COIL_0,DIO_LOW);
    19e8:	88 e1       	ldi	r24, 0x18	; 24
    19ea:	60 e0       	ldi	r22, 0x00	; 0
    19ec:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_0,DIO_HIGH);//activate coil 1,2
    19f0:	88 e1       	ldi	r24, 0x18	; 24
    19f2:	61 e0       	ldi	r22, 0x01	; 1
    19f4:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_1,DIO_HIGH);
    19f8:	89 e1       	ldi	r24, 0x19	; 25
    19fa:	61 e0       	ldi	r22, 0x01	; 1
    19fc:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	Delay_ms(speed);
    1a00:	fe 01       	movw	r30, r28
    1a02:	e7 5b       	subi	r30, 0xB7	; 183
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	80 81       	ld	r24, Z
    1a08:	86 95       	lsr	r24
    1a0a:	86 95       	lsr	r24
    1a0c:	86 95       	lsr	r24
    1a0e:	88 2f       	mov	r24, r24
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	a0 e0       	ldi	r26, 0x00	; 0
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	fe 01       	movw	r30, r28
    1a18:	fd 96       	adiw	r30, 0x3d	; 61
    1a1a:	80 83       	st	Z, r24
    1a1c:	91 83       	std	Z+1, r25	; 0x01
    1a1e:	a2 83       	std	Z+2, r26	; 0x02
    1a20:	b3 83       	std	Z+3, r27	; 0x03
    1a22:	2c c0       	rjmp	.+88     	; 0x1a7c <STPR_HalfStep_Right+0x170>
    1a24:	80 ed       	ldi	r24, 0xD0	; 208
    1a26:	97 e0       	ldi	r25, 0x07	; 7
    1a28:	a0 e0       	ldi	r26, 0x00	; 0
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	89 af       	std	Y+57, r24	; 0x39
    1a2e:	9a af       	std	Y+58, r25	; 0x3a
    1a30:	ab af       	std	Y+59, r26	; 0x3b
    1a32:	bc af       	std	Y+60, r27	; 0x3c
    1a34:	0c c0       	rjmp	.+24     	; 0x1a4e <STPR_HalfStep_Right+0x142>
    1a36:	00 00       	nop
    1a38:	89 ad       	ldd	r24, Y+57	; 0x39
    1a3a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a3c:	ab ad       	ldd	r26, Y+59	; 0x3b
    1a3e:	bc ad       	ldd	r27, Y+60	; 0x3c
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	a1 09       	sbc	r26, r1
    1a44:	b1 09       	sbc	r27, r1
    1a46:	89 af       	std	Y+57, r24	; 0x39
    1a48:	9a af       	std	Y+58, r25	; 0x3a
    1a4a:	ab af       	std	Y+59, r26	; 0x3b
    1a4c:	bc af       	std	Y+60, r27	; 0x3c
    1a4e:	89 ad       	ldd	r24, Y+57	; 0x39
    1a50:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a52:	ab ad       	ldd	r26, Y+59	; 0x3b
    1a54:	bc ad       	ldd	r27, Y+60	; 0x3c
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	a1 05       	cpc	r26, r1
    1a5a:	b1 05       	cpc	r27, r1
    1a5c:	61 f7       	brne	.-40     	; 0x1a36 <STPR_HalfStep_Right+0x12a>
    1a5e:	fe 01       	movw	r30, r28
    1a60:	fd 96       	adiw	r30, 0x3d	; 61
    1a62:	80 81       	ld	r24, Z
    1a64:	91 81       	ldd	r25, Z+1	; 0x01
    1a66:	a2 81       	ldd	r26, Z+2	; 0x02
    1a68:	b3 81       	ldd	r27, Z+3	; 0x03
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	a1 09       	sbc	r26, r1
    1a6e:	b1 09       	sbc	r27, r1
    1a70:	fe 01       	movw	r30, r28
    1a72:	fd 96       	adiw	r30, 0x3d	; 61
    1a74:	80 83       	st	Z, r24
    1a76:	91 83       	std	Z+1, r25	; 0x01
    1a78:	a2 83       	std	Z+2, r26	; 0x02
    1a7a:	b3 83       	std	Z+3, r27	; 0x03
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	fd 96       	adiw	r30, 0x3d	; 61
    1a80:	80 81       	ld	r24, Z
    1a82:	91 81       	ldd	r25, Z+1	; 0x01
    1a84:	a2 81       	ldd	r26, Z+2	; 0x02
    1a86:	b3 81       	ldd	r27, Z+3	; 0x03
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	a1 05       	cpc	r26, r1
    1a8c:	b1 05       	cpc	r27, r1
    1a8e:	51 f6       	brne	.-108    	; 0x1a24 <STPR_HalfStep_Right+0x118>
	DIO_enuWritePin(STPR_COIL_0,DIO_LOW);//deactivate coil 1,2
    1a90:	88 e1       	ldi	r24, 0x18	; 24
    1a92:	60 e0       	ldi	r22, 0x00	; 0
    1a94:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_1,DIO_LOW);
    1a98:	89 e1       	ldi	r24, 0x19	; 25
    1a9a:	60 e0       	ldi	r22, 0x00	; 0
    1a9c:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_1,DIO_HIGH);//activate coil 2
    1aa0:	89 e1       	ldi	r24, 0x19	; 25
    1aa2:	61 e0       	ldi	r22, 0x01	; 1
    1aa4:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	Delay_ms(speed);
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	e7 5b       	subi	r30, 0xB7	; 183
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	80 81       	ld	r24, Z
    1ab0:	86 95       	lsr	r24
    1ab2:	86 95       	lsr	r24
    1ab4:	86 95       	lsr	r24
    1ab6:	88 2f       	mov	r24, r24
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	a0 e0       	ldi	r26, 0x00	; 0
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	8d ab       	std	Y+53, r24	; 0x35
    1ac0:	9e ab       	std	Y+54, r25	; 0x36
    1ac2:	af ab       	std	Y+55, r26	; 0x37
    1ac4:	b8 af       	std	Y+56, r27	; 0x38
    1ac6:	28 c0       	rjmp	.+80     	; 0x1b18 <STPR_HalfStep_Right+0x20c>
    1ac8:	80 ed       	ldi	r24, 0xD0	; 208
    1aca:	97 e0       	ldi	r25, 0x07	; 7
    1acc:	a0 e0       	ldi	r26, 0x00	; 0
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	89 ab       	std	Y+49, r24	; 0x31
    1ad2:	9a ab       	std	Y+50, r25	; 0x32
    1ad4:	ab ab       	std	Y+51, r26	; 0x33
    1ad6:	bc ab       	std	Y+52, r27	; 0x34
    1ad8:	0c c0       	rjmp	.+24     	; 0x1af2 <STPR_HalfStep_Right+0x1e6>
    1ada:	00 00       	nop
    1adc:	89 a9       	ldd	r24, Y+49	; 0x31
    1ade:	9a a9       	ldd	r25, Y+50	; 0x32
    1ae0:	ab a9       	ldd	r26, Y+51	; 0x33
    1ae2:	bc a9       	ldd	r27, Y+52	; 0x34
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	a1 09       	sbc	r26, r1
    1ae8:	b1 09       	sbc	r27, r1
    1aea:	89 ab       	std	Y+49, r24	; 0x31
    1aec:	9a ab       	std	Y+50, r25	; 0x32
    1aee:	ab ab       	std	Y+51, r26	; 0x33
    1af0:	bc ab       	std	Y+52, r27	; 0x34
    1af2:	89 a9       	ldd	r24, Y+49	; 0x31
    1af4:	9a a9       	ldd	r25, Y+50	; 0x32
    1af6:	ab a9       	ldd	r26, Y+51	; 0x33
    1af8:	bc a9       	ldd	r27, Y+52	; 0x34
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	a1 05       	cpc	r26, r1
    1afe:	b1 05       	cpc	r27, r1
    1b00:	61 f7       	brne	.-40     	; 0x1ada <STPR_HalfStep_Right+0x1ce>
    1b02:	8d a9       	ldd	r24, Y+53	; 0x35
    1b04:	9e a9       	ldd	r25, Y+54	; 0x36
    1b06:	af a9       	ldd	r26, Y+55	; 0x37
    1b08:	b8 ad       	ldd	r27, Y+56	; 0x38
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	a1 09       	sbc	r26, r1
    1b0e:	b1 09       	sbc	r27, r1
    1b10:	8d ab       	std	Y+53, r24	; 0x35
    1b12:	9e ab       	std	Y+54, r25	; 0x36
    1b14:	af ab       	std	Y+55, r26	; 0x37
    1b16:	b8 af       	std	Y+56, r27	; 0x38
    1b18:	8d a9       	ldd	r24, Y+53	; 0x35
    1b1a:	9e a9       	ldd	r25, Y+54	; 0x36
    1b1c:	af a9       	ldd	r26, Y+55	; 0x37
    1b1e:	b8 ad       	ldd	r27, Y+56	; 0x38
    1b20:	00 97       	sbiw	r24, 0x00	; 0
    1b22:	a1 05       	cpc	r26, r1
    1b24:	b1 05       	cpc	r27, r1
    1b26:	81 f6       	brne	.-96     	; 0x1ac8 <STPR_HalfStep_Right+0x1bc>
	DIO_enuWritePin(STPR_COIL_1,DIO_LOW);
    1b28:	89 e1       	ldi	r24, 0x19	; 25
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_1,DIO_HIGH); //activate coil 2,3
    1b30:	89 e1       	ldi	r24, 0x19	; 25
    1b32:	61 e0       	ldi	r22, 0x01	; 1
    1b34:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_2,DIO_HIGH);
    1b38:	8a e1       	ldi	r24, 0x1A	; 26
    1b3a:	61 e0       	ldi	r22, 0x01	; 1
    1b3c:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	Delay_ms(speed);
    1b40:	fe 01       	movw	r30, r28
    1b42:	e7 5b       	subi	r30, 0xB7	; 183
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	80 81       	ld	r24, Z
    1b48:	86 95       	lsr	r24
    1b4a:	86 95       	lsr	r24
    1b4c:	86 95       	lsr	r24
    1b4e:	88 2f       	mov	r24, r24
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	a0 e0       	ldi	r26, 0x00	; 0
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	8d a7       	std	Y+45, r24	; 0x2d
    1b58:	9e a7       	std	Y+46, r25	; 0x2e
    1b5a:	af a7       	std	Y+47, r26	; 0x2f
    1b5c:	b8 ab       	std	Y+48, r27	; 0x30
    1b5e:	28 c0       	rjmp	.+80     	; 0x1bb0 <STPR_HalfStep_Right+0x2a4>
    1b60:	80 ed       	ldi	r24, 0xD0	; 208
    1b62:	97 e0       	ldi	r25, 0x07	; 7
    1b64:	a0 e0       	ldi	r26, 0x00	; 0
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	89 a7       	std	Y+41, r24	; 0x29
    1b6a:	9a a7       	std	Y+42, r25	; 0x2a
    1b6c:	ab a7       	std	Y+43, r26	; 0x2b
    1b6e:	bc a7       	std	Y+44, r27	; 0x2c
    1b70:	0c c0       	rjmp	.+24     	; 0x1b8a <STPR_HalfStep_Right+0x27e>
    1b72:	00 00       	nop
    1b74:	89 a5       	ldd	r24, Y+41	; 0x29
    1b76:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b78:	ab a5       	ldd	r26, Y+43	; 0x2b
    1b7a:	bc a5       	ldd	r27, Y+44	; 0x2c
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	a1 09       	sbc	r26, r1
    1b80:	b1 09       	sbc	r27, r1
    1b82:	89 a7       	std	Y+41, r24	; 0x29
    1b84:	9a a7       	std	Y+42, r25	; 0x2a
    1b86:	ab a7       	std	Y+43, r26	; 0x2b
    1b88:	bc a7       	std	Y+44, r27	; 0x2c
    1b8a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b8e:	ab a5       	ldd	r26, Y+43	; 0x2b
    1b90:	bc a5       	ldd	r27, Y+44	; 0x2c
    1b92:	00 97       	sbiw	r24, 0x00	; 0
    1b94:	a1 05       	cpc	r26, r1
    1b96:	b1 05       	cpc	r27, r1
    1b98:	61 f7       	brne	.-40     	; 0x1b72 <STPR_HalfStep_Right+0x266>
    1b9a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b9c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b9e:	af a5       	ldd	r26, Y+47	; 0x2f
    1ba0:	b8 a9       	ldd	r27, Y+48	; 0x30
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	a1 09       	sbc	r26, r1
    1ba6:	b1 09       	sbc	r27, r1
    1ba8:	8d a7       	std	Y+45, r24	; 0x2d
    1baa:	9e a7       	std	Y+46, r25	; 0x2e
    1bac:	af a7       	std	Y+47, r26	; 0x2f
    1bae:	b8 ab       	std	Y+48, r27	; 0x30
    1bb0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bb2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bb4:	af a5       	ldd	r26, Y+47	; 0x2f
    1bb6:	b8 a9       	ldd	r27, Y+48	; 0x30
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	a1 05       	cpc	r26, r1
    1bbc:	b1 05       	cpc	r27, r1
    1bbe:	81 f6       	brne	.-96     	; 0x1b60 <STPR_HalfStep_Right+0x254>
	DIO_enuWritePin(STPR_COIL_1,DIO_LOW); //deactivate coil 2,3
    1bc0:	89 e1       	ldi	r24, 0x19	; 25
    1bc2:	60 e0       	ldi	r22, 0x00	; 0
    1bc4:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_2,DIO_LOW);
    1bc8:	8a e1       	ldi	r24, 0x1A	; 26
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_2,DIO_HIGH); //activate coil 3
    1bd0:	8a e1       	ldi	r24, 0x1A	; 26
    1bd2:	61 e0       	ldi	r22, 0x01	; 1
    1bd4:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	Delay_ms(speed);
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e7 5b       	subi	r30, 0xB7	; 183
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	80 81       	ld	r24, Z
    1be0:	86 95       	lsr	r24
    1be2:	86 95       	lsr	r24
    1be4:	86 95       	lsr	r24
    1be6:	88 2f       	mov	r24, r24
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	a0 e0       	ldi	r26, 0x00	; 0
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	8d a3       	std	Y+37, r24	; 0x25
    1bf0:	9e a3       	std	Y+38, r25	; 0x26
    1bf2:	af a3       	std	Y+39, r26	; 0x27
    1bf4:	b8 a7       	std	Y+40, r27	; 0x28
    1bf6:	28 c0       	rjmp	.+80     	; 0x1c48 <STPR_HalfStep_Right+0x33c>
    1bf8:	80 ed       	ldi	r24, 0xD0	; 208
    1bfa:	97 e0       	ldi	r25, 0x07	; 7
    1bfc:	a0 e0       	ldi	r26, 0x00	; 0
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	89 a3       	std	Y+33, r24	; 0x21
    1c02:	9a a3       	std	Y+34, r25	; 0x22
    1c04:	ab a3       	std	Y+35, r26	; 0x23
    1c06:	bc a3       	std	Y+36, r27	; 0x24
    1c08:	0c c0       	rjmp	.+24     	; 0x1c22 <STPR_HalfStep_Right+0x316>
    1c0a:	00 00       	nop
    1c0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c0e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c10:	ab a1       	ldd	r26, Y+35	; 0x23
    1c12:	bc a1       	ldd	r27, Y+36	; 0x24
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	a1 09       	sbc	r26, r1
    1c18:	b1 09       	sbc	r27, r1
    1c1a:	89 a3       	std	Y+33, r24	; 0x21
    1c1c:	9a a3       	std	Y+34, r25	; 0x22
    1c1e:	ab a3       	std	Y+35, r26	; 0x23
    1c20:	bc a3       	std	Y+36, r27	; 0x24
    1c22:	89 a1       	ldd	r24, Y+33	; 0x21
    1c24:	9a a1       	ldd	r25, Y+34	; 0x22
    1c26:	ab a1       	ldd	r26, Y+35	; 0x23
    1c28:	bc a1       	ldd	r27, Y+36	; 0x24
    1c2a:	00 97       	sbiw	r24, 0x00	; 0
    1c2c:	a1 05       	cpc	r26, r1
    1c2e:	b1 05       	cpc	r27, r1
    1c30:	61 f7       	brne	.-40     	; 0x1c0a <STPR_HalfStep_Right+0x2fe>
    1c32:	8d a1       	ldd	r24, Y+37	; 0x25
    1c34:	9e a1       	ldd	r25, Y+38	; 0x26
    1c36:	af a1       	ldd	r26, Y+39	; 0x27
    1c38:	b8 a5       	ldd	r27, Y+40	; 0x28
    1c3a:	01 97       	sbiw	r24, 0x01	; 1
    1c3c:	a1 09       	sbc	r26, r1
    1c3e:	b1 09       	sbc	r27, r1
    1c40:	8d a3       	std	Y+37, r24	; 0x25
    1c42:	9e a3       	std	Y+38, r25	; 0x26
    1c44:	af a3       	std	Y+39, r26	; 0x27
    1c46:	b8 a7       	std	Y+40, r27	; 0x28
    1c48:	8d a1       	ldd	r24, Y+37	; 0x25
    1c4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c4c:	af a1       	ldd	r26, Y+39	; 0x27
    1c4e:	b8 a5       	ldd	r27, Y+40	; 0x28
    1c50:	00 97       	sbiw	r24, 0x00	; 0
    1c52:	a1 05       	cpc	r26, r1
    1c54:	b1 05       	cpc	r27, r1
    1c56:	81 f6       	brne	.-96     	; 0x1bf8 <STPR_HalfStep_Right+0x2ec>
	DIO_enuWritePin(STPR_COIL_2,DIO_LOW);
    1c58:	8a e1       	ldi	r24, 0x1A	; 26
    1c5a:	60 e0       	ldi	r22, 0x00	; 0
    1c5c:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_2,DIO_HIGH); //activate coil 3,4
    1c60:	8a e1       	ldi	r24, 0x1A	; 26
    1c62:	61 e0       	ldi	r22, 0x01	; 1
    1c64:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_3,DIO_HIGH);
    1c68:	8b e1       	ldi	r24, 0x1B	; 27
    1c6a:	61 e0       	ldi	r22, 0x01	; 1
    1c6c:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	Delay_ms(speed);
    1c70:	fe 01       	movw	r30, r28
    1c72:	e7 5b       	subi	r30, 0xB7	; 183
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	80 81       	ld	r24, Z
    1c78:	86 95       	lsr	r24
    1c7a:	86 95       	lsr	r24
    1c7c:	86 95       	lsr	r24
    1c7e:	88 2f       	mov	r24, r24
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	a0 e0       	ldi	r26, 0x00	; 0
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	8d 8f       	std	Y+29, r24	; 0x1d
    1c88:	9e 8f       	std	Y+30, r25	; 0x1e
    1c8a:	af 8f       	std	Y+31, r26	; 0x1f
    1c8c:	b8 a3       	std	Y+32, r27	; 0x20
    1c8e:	28 c0       	rjmp	.+80     	; 0x1ce0 <STPR_HalfStep_Right+0x3d4>
    1c90:	80 ed       	ldi	r24, 0xD0	; 208
    1c92:	97 e0       	ldi	r25, 0x07	; 7
    1c94:	a0 e0       	ldi	r26, 0x00	; 0
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	89 8f       	std	Y+25, r24	; 0x19
    1c9a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c9c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c9e:	bc 8f       	std	Y+28, r27	; 0x1c
    1ca0:	0c c0       	rjmp	.+24     	; 0x1cba <STPR_HalfStep_Right+0x3ae>
    1ca2:	00 00       	nop
    1ca4:	89 8d       	ldd	r24, Y+25	; 0x19
    1ca6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ca8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1caa:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	a1 09       	sbc	r26, r1
    1cb0:	b1 09       	sbc	r27, r1
    1cb2:	89 8f       	std	Y+25, r24	; 0x19
    1cb4:	9a 8f       	std	Y+26, r25	; 0x1a
    1cb6:	ab 8f       	std	Y+27, r26	; 0x1b
    1cb8:	bc 8f       	std	Y+28, r27	; 0x1c
    1cba:	89 8d       	ldd	r24, Y+25	; 0x19
    1cbc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1cbe:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1cc0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	a1 05       	cpc	r26, r1
    1cc6:	b1 05       	cpc	r27, r1
    1cc8:	61 f7       	brne	.-40     	; 0x1ca2 <STPR_HalfStep_Right+0x396>
    1cca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ccc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cce:	af 8d       	ldd	r26, Y+31	; 0x1f
    1cd0:	b8 a1       	ldd	r27, Y+32	; 0x20
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	a1 09       	sbc	r26, r1
    1cd6:	b1 09       	sbc	r27, r1
    1cd8:	8d 8f       	std	Y+29, r24	; 0x1d
    1cda:	9e 8f       	std	Y+30, r25	; 0x1e
    1cdc:	af 8f       	std	Y+31, r26	; 0x1f
    1cde:	b8 a3       	std	Y+32, r27	; 0x20
    1ce0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ce2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ce4:	af 8d       	ldd	r26, Y+31	; 0x1f
    1ce6:	b8 a1       	ldd	r27, Y+32	; 0x20
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	a1 05       	cpc	r26, r1
    1cec:	b1 05       	cpc	r27, r1
    1cee:	81 f6       	brne	.-96     	; 0x1c90 <STPR_HalfStep_Right+0x384>
	DIO_enuWritePin(STPR_COIL_2,DIO_LOW); //deactivate coil 3,4
    1cf0:	8a e1       	ldi	r24, 0x1A	; 26
    1cf2:	60 e0       	ldi	r22, 0x00	; 0
    1cf4:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_3,DIO_LOW);
    1cf8:	8b e1       	ldi	r24, 0x1B	; 27
    1cfa:	60 e0       	ldi	r22, 0x00	; 0
    1cfc:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_3,DIO_HIGH); //activate coil 4
    1d00:	8b e1       	ldi	r24, 0x1B	; 27
    1d02:	61 e0       	ldi	r22, 0x01	; 1
    1d04:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	Delay_ms(speed);
    1d08:	fe 01       	movw	r30, r28
    1d0a:	e7 5b       	subi	r30, 0xB7	; 183
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	80 81       	ld	r24, Z
    1d10:	86 95       	lsr	r24
    1d12:	86 95       	lsr	r24
    1d14:	86 95       	lsr	r24
    1d16:	88 2f       	mov	r24, r24
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	a0 e0       	ldi	r26, 0x00	; 0
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	8d 8b       	std	Y+21, r24	; 0x15
    1d20:	9e 8b       	std	Y+22, r25	; 0x16
    1d22:	af 8b       	std	Y+23, r26	; 0x17
    1d24:	b8 8f       	std	Y+24, r27	; 0x18
    1d26:	28 c0       	rjmp	.+80     	; 0x1d78 <STPR_HalfStep_Right+0x46c>
    1d28:	80 ed       	ldi	r24, 0xD0	; 208
    1d2a:	97 e0       	ldi	r25, 0x07	; 7
    1d2c:	a0 e0       	ldi	r26, 0x00	; 0
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	89 8b       	std	Y+17, r24	; 0x11
    1d32:	9a 8b       	std	Y+18, r25	; 0x12
    1d34:	ab 8b       	std	Y+19, r26	; 0x13
    1d36:	bc 8b       	std	Y+20, r27	; 0x14
    1d38:	0c c0       	rjmp	.+24     	; 0x1d52 <STPR_HalfStep_Right+0x446>
    1d3a:	00 00       	nop
    1d3c:	89 89       	ldd	r24, Y+17	; 0x11
    1d3e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d40:	ab 89       	ldd	r26, Y+19	; 0x13
    1d42:	bc 89       	ldd	r27, Y+20	; 0x14
    1d44:	01 97       	sbiw	r24, 0x01	; 1
    1d46:	a1 09       	sbc	r26, r1
    1d48:	b1 09       	sbc	r27, r1
    1d4a:	89 8b       	std	Y+17, r24	; 0x11
    1d4c:	9a 8b       	std	Y+18, r25	; 0x12
    1d4e:	ab 8b       	std	Y+19, r26	; 0x13
    1d50:	bc 8b       	std	Y+20, r27	; 0x14
    1d52:	89 89       	ldd	r24, Y+17	; 0x11
    1d54:	9a 89       	ldd	r25, Y+18	; 0x12
    1d56:	ab 89       	ldd	r26, Y+19	; 0x13
    1d58:	bc 89       	ldd	r27, Y+20	; 0x14
    1d5a:	00 97       	sbiw	r24, 0x00	; 0
    1d5c:	a1 05       	cpc	r26, r1
    1d5e:	b1 05       	cpc	r27, r1
    1d60:	61 f7       	brne	.-40     	; 0x1d3a <STPR_HalfStep_Right+0x42e>
    1d62:	8d 89       	ldd	r24, Y+21	; 0x15
    1d64:	9e 89       	ldd	r25, Y+22	; 0x16
    1d66:	af 89       	ldd	r26, Y+23	; 0x17
    1d68:	b8 8d       	ldd	r27, Y+24	; 0x18
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	a1 09       	sbc	r26, r1
    1d6e:	b1 09       	sbc	r27, r1
    1d70:	8d 8b       	std	Y+21, r24	; 0x15
    1d72:	9e 8b       	std	Y+22, r25	; 0x16
    1d74:	af 8b       	std	Y+23, r26	; 0x17
    1d76:	b8 8f       	std	Y+24, r27	; 0x18
    1d78:	8d 89       	ldd	r24, Y+21	; 0x15
    1d7a:	9e 89       	ldd	r25, Y+22	; 0x16
    1d7c:	af 89       	ldd	r26, Y+23	; 0x17
    1d7e:	b8 8d       	ldd	r27, Y+24	; 0x18
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	a1 05       	cpc	r26, r1
    1d84:	b1 05       	cpc	r27, r1
    1d86:	81 f6       	brne	.-96     	; 0x1d28 <STPR_HalfStep_Right+0x41c>
	DIO_enuWritePin(STPR_COIL_3,DIO_LOW);
    1d88:	8b e1       	ldi	r24, 0x1B	; 27
    1d8a:	60 e0       	ldi	r22, 0x00	; 0
    1d8c:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_0,DIO_HIGH);  //activate coil 1,4
    1d90:	88 e1       	ldi	r24, 0x18	; 24
    1d92:	61 e0       	ldi	r22, 0x01	; 1
    1d94:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_3,DIO_HIGH);
    1d98:	8b e1       	ldi	r24, 0x1B	; 27
    1d9a:	61 e0       	ldi	r22, 0x01	; 1
    1d9c:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	Delay_ms(speed);
    1da0:	fe 01       	movw	r30, r28
    1da2:	e7 5b       	subi	r30, 0xB7	; 183
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	80 81       	ld	r24, Z
    1da8:	86 95       	lsr	r24
    1daa:	86 95       	lsr	r24
    1dac:	86 95       	lsr	r24
    1dae:	88 2f       	mov	r24, r24
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	a0 e0       	ldi	r26, 0x00	; 0
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	8d 87       	std	Y+13, r24	; 0x0d
    1db8:	9e 87       	std	Y+14, r25	; 0x0e
    1dba:	af 87       	std	Y+15, r26	; 0x0f
    1dbc:	b8 8b       	std	Y+16, r27	; 0x10
    1dbe:	28 c0       	rjmp	.+80     	; 0x1e10 <STPR_HalfStep_Right+0x504>
    1dc0:	80 ed       	ldi	r24, 0xD0	; 208
    1dc2:	97 e0       	ldi	r25, 0x07	; 7
    1dc4:	a0 e0       	ldi	r26, 0x00	; 0
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	89 87       	std	Y+9, r24	; 0x09
    1dca:	9a 87       	std	Y+10, r25	; 0x0a
    1dcc:	ab 87       	std	Y+11, r26	; 0x0b
    1dce:	bc 87       	std	Y+12, r27	; 0x0c
    1dd0:	0c c0       	rjmp	.+24     	; 0x1dea <STPR_HalfStep_Right+0x4de>
    1dd2:	00 00       	nop
    1dd4:	89 85       	ldd	r24, Y+9	; 0x09
    1dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd8:	ab 85       	ldd	r26, Y+11	; 0x0b
    1dda:	bc 85       	ldd	r27, Y+12	; 0x0c
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	a1 09       	sbc	r26, r1
    1de0:	b1 09       	sbc	r27, r1
    1de2:	89 87       	std	Y+9, r24	; 0x09
    1de4:	9a 87       	std	Y+10, r25	; 0x0a
    1de6:	ab 87       	std	Y+11, r26	; 0x0b
    1de8:	bc 87       	std	Y+12, r27	; 0x0c
    1dea:	89 85       	ldd	r24, Y+9	; 0x09
    1dec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dee:	ab 85       	ldd	r26, Y+11	; 0x0b
    1df0:	bc 85       	ldd	r27, Y+12	; 0x0c
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	a1 05       	cpc	r26, r1
    1df6:	b1 05       	cpc	r27, r1
    1df8:	61 f7       	brne	.-40     	; 0x1dd2 <STPR_HalfStep_Right+0x4c6>
    1dfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dfe:	af 85       	ldd	r26, Y+15	; 0x0f
    1e00:	b8 89       	ldd	r27, Y+16	; 0x10
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	a1 09       	sbc	r26, r1
    1e06:	b1 09       	sbc	r27, r1
    1e08:	8d 87       	std	Y+13, r24	; 0x0d
    1e0a:	9e 87       	std	Y+14, r25	; 0x0e
    1e0c:	af 87       	std	Y+15, r26	; 0x0f
    1e0e:	b8 8b       	std	Y+16, r27	; 0x10
    1e10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e14:	af 85       	ldd	r26, Y+15	; 0x0f
    1e16:	b8 89       	ldd	r27, Y+16	; 0x10
    1e18:	00 97       	sbiw	r24, 0x00	; 0
    1e1a:	a1 05       	cpc	r26, r1
    1e1c:	b1 05       	cpc	r27, r1
    1e1e:	81 f6       	brne	.-96     	; 0x1dc0 <STPR_HalfStep_Right+0x4b4>
	DIO_enuWritePin(STPR_COIL_0,DIO_LOW);  //deactivate coil 1,4
    1e20:	88 e1       	ldi	r24, 0x18	; 24
    1e22:	60 e0       	ldi	r22, 0x00	; 0
    1e24:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_3,DIO_LOW);
    1e28:	8b e1       	ldi	r24, 0x1B	; 27
    1e2a:	60 e0       	ldi	r22, 0x00	; 0
    1e2c:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_0,DIO_HIGH);
    1e30:	88 e1       	ldi	r24, 0x18	; 24
    1e32:	61 e0       	ldi	r22, 0x01	; 1
    1e34:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	Delay_ms(speed);
    1e38:	fe 01       	movw	r30, r28
    1e3a:	e7 5b       	subi	r30, 0xB7	; 183
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	80 81       	ld	r24, Z
    1e40:	86 95       	lsr	r24
    1e42:	86 95       	lsr	r24
    1e44:	86 95       	lsr	r24
    1e46:	88 2f       	mov	r24, r24
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	a0 e0       	ldi	r26, 0x00	; 0
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	8d 83       	std	Y+5, r24	; 0x05
    1e50:	9e 83       	std	Y+6, r25	; 0x06
    1e52:	af 83       	std	Y+7, r26	; 0x07
    1e54:	b8 87       	std	Y+8, r27	; 0x08
    1e56:	28 c0       	rjmp	.+80     	; 0x1ea8 <STPR_HalfStep_Right+0x59c>
    1e58:	80 ed       	ldi	r24, 0xD0	; 208
    1e5a:	97 e0       	ldi	r25, 0x07	; 7
    1e5c:	a0 e0       	ldi	r26, 0x00	; 0
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	89 83       	std	Y+1, r24	; 0x01
    1e62:	9a 83       	std	Y+2, r25	; 0x02
    1e64:	ab 83       	std	Y+3, r26	; 0x03
    1e66:	bc 83       	std	Y+4, r27	; 0x04
    1e68:	0c c0       	rjmp	.+24     	; 0x1e82 <STPR_HalfStep_Right+0x576>
    1e6a:	00 00       	nop
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e70:	ab 81       	ldd	r26, Y+3	; 0x03
    1e72:	bc 81       	ldd	r27, Y+4	; 0x04
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	a1 09       	sbc	r26, r1
    1e78:	b1 09       	sbc	r27, r1
    1e7a:	89 83       	std	Y+1, r24	; 0x01
    1e7c:	9a 83       	std	Y+2, r25	; 0x02
    1e7e:	ab 83       	std	Y+3, r26	; 0x03
    1e80:	bc 83       	std	Y+4, r27	; 0x04
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	9a 81       	ldd	r25, Y+2	; 0x02
    1e86:	ab 81       	ldd	r26, Y+3	; 0x03
    1e88:	bc 81       	ldd	r27, Y+4	; 0x04
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	a1 05       	cpc	r26, r1
    1e8e:	b1 05       	cpc	r27, r1
    1e90:	61 f7       	brne	.-40     	; 0x1e6a <STPR_HalfStep_Right+0x55e>
    1e92:	8d 81       	ldd	r24, Y+5	; 0x05
    1e94:	9e 81       	ldd	r25, Y+6	; 0x06
    1e96:	af 81       	ldd	r26, Y+7	; 0x07
    1e98:	b8 85       	ldd	r27, Y+8	; 0x08
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	a1 09       	sbc	r26, r1
    1e9e:	b1 09       	sbc	r27, r1
    1ea0:	8d 83       	std	Y+5, r24	; 0x05
    1ea2:	9e 83       	std	Y+6, r25	; 0x06
    1ea4:	af 83       	std	Y+7, r26	; 0x07
    1ea6:	b8 87       	std	Y+8, r27	; 0x08
    1ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1eac:	af 81       	ldd	r26, Y+7	; 0x07
    1eae:	b8 85       	ldd	r27, Y+8	; 0x08
    1eb0:	00 97       	sbiw	r24, 0x00	; 0
    1eb2:	a1 05       	cpc	r26, r1
    1eb4:	b1 05       	cpc	r27, r1
    1eb6:	81 f6       	brne	.-96     	; 0x1e58 <STPR_HalfStep_Right+0x54c>
}
    1eb8:	c7 5b       	subi	r28, 0xB7	; 183
    1eba:	df 4f       	sbci	r29, 0xFF	; 255
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	cd bf       	out	0x3d, r28	; 61
    1ec6:	cf 91       	pop	r28
    1ec8:	df 91       	pop	r29
    1eca:	08 95       	ret

00001ecc <STPR_HalfStep_Left>:

void STPR_HalfStep_Left(u8 speed)
{
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	c1 54       	subi	r28, 0x41	; 65
    1ed6:	d0 40       	sbci	r29, 0x00	; 0
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
    1ee2:	fe 01       	movw	r30, r28
    1ee4:	ef 5b       	subi	r30, 0xBF	; 191
    1ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee8:	80 83       	st	Z, r24
	//half step
	DIO_enuWritePin(STPR_COIL_0,DIO_HIGH);  //deactivate coil 1,4
    1eea:	88 e1       	ldi	r24, 0x18	; 24
    1eec:	61 e0       	ldi	r22, 0x01	; 1
    1eee:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_3,DIO_HIGH);
    1ef2:	8b e1       	ldi	r24, 0x1B	; 27
    1ef4:	61 e0       	ldi	r22, 0x01	; 1
    1ef6:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	Delay_ms(speed);
    1efa:	fe 01       	movw	r30, r28
    1efc:	ef 5b       	subi	r30, 0xBF	; 191
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	80 81       	ld	r24, Z
    1f02:	86 95       	lsr	r24
    1f04:	86 95       	lsr	r24
    1f06:	86 95       	lsr	r24
    1f08:	88 2f       	mov	r24, r24
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	a0 e0       	ldi	r26, 0x00	; 0
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	fe 01       	movw	r30, r28
    1f12:	fd 96       	adiw	r30, 0x3d	; 61
    1f14:	80 83       	st	Z, r24
    1f16:	91 83       	std	Z+1, r25	; 0x01
    1f18:	a2 83       	std	Z+2, r26	; 0x02
    1f1a:	b3 83       	std	Z+3, r27	; 0x03
    1f1c:	2c c0       	rjmp	.+88     	; 0x1f76 <STPR_HalfStep_Left+0xaa>
    1f1e:	80 ed       	ldi	r24, 0xD0	; 208
    1f20:	97 e0       	ldi	r25, 0x07	; 7
    1f22:	a0 e0       	ldi	r26, 0x00	; 0
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	89 af       	std	Y+57, r24	; 0x39
    1f28:	9a af       	std	Y+58, r25	; 0x3a
    1f2a:	ab af       	std	Y+59, r26	; 0x3b
    1f2c:	bc af       	std	Y+60, r27	; 0x3c
    1f2e:	0c c0       	rjmp	.+24     	; 0x1f48 <STPR_HalfStep_Left+0x7c>
    1f30:	00 00       	nop
    1f32:	89 ad       	ldd	r24, Y+57	; 0x39
    1f34:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f36:	ab ad       	ldd	r26, Y+59	; 0x3b
    1f38:	bc ad       	ldd	r27, Y+60	; 0x3c
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	a1 09       	sbc	r26, r1
    1f3e:	b1 09       	sbc	r27, r1
    1f40:	89 af       	std	Y+57, r24	; 0x39
    1f42:	9a af       	std	Y+58, r25	; 0x3a
    1f44:	ab af       	std	Y+59, r26	; 0x3b
    1f46:	bc af       	std	Y+60, r27	; 0x3c
    1f48:	89 ad       	ldd	r24, Y+57	; 0x39
    1f4a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f4c:	ab ad       	ldd	r26, Y+59	; 0x3b
    1f4e:	bc ad       	ldd	r27, Y+60	; 0x3c
    1f50:	00 97       	sbiw	r24, 0x00	; 0
    1f52:	a1 05       	cpc	r26, r1
    1f54:	b1 05       	cpc	r27, r1
    1f56:	61 f7       	brne	.-40     	; 0x1f30 <STPR_HalfStep_Left+0x64>
    1f58:	fe 01       	movw	r30, r28
    1f5a:	fd 96       	adiw	r30, 0x3d	; 61
    1f5c:	80 81       	ld	r24, Z
    1f5e:	91 81       	ldd	r25, Z+1	; 0x01
    1f60:	a2 81       	ldd	r26, Z+2	; 0x02
    1f62:	b3 81       	ldd	r27, Z+3	; 0x03
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	a1 09       	sbc	r26, r1
    1f68:	b1 09       	sbc	r27, r1
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	fd 96       	adiw	r30, 0x3d	; 61
    1f6e:	80 83       	st	Z, r24
    1f70:	91 83       	std	Z+1, r25	; 0x01
    1f72:	a2 83       	std	Z+2, r26	; 0x02
    1f74:	b3 83       	std	Z+3, r27	; 0x03
    1f76:	fe 01       	movw	r30, r28
    1f78:	fd 96       	adiw	r30, 0x3d	; 61
    1f7a:	80 81       	ld	r24, Z
    1f7c:	91 81       	ldd	r25, Z+1	; 0x01
    1f7e:	a2 81       	ldd	r26, Z+2	; 0x02
    1f80:	b3 81       	ldd	r27, Z+3	; 0x03
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	a1 05       	cpc	r26, r1
    1f86:	b1 05       	cpc	r27, r1
    1f88:	51 f6       	brne	.-108    	; 0x1f1e <STPR_HalfStep_Left+0x52>
	DIO_enuWritePin(STPR_COIL_0,DIO_LOW);  //deactivate coil 1,4
    1f8a:	88 e1       	ldi	r24, 0x18	; 24
    1f8c:	60 e0       	ldi	r22, 0x00	; 0
    1f8e:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_3,DIO_LOW);
    1f92:	8b e1       	ldi	r24, 0x1B	; 27
    1f94:	60 e0       	ldi	r22, 0x00	; 0
    1f96:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_3,DIO_HIGH);  //activate coil 4
    1f9a:	8b e1       	ldi	r24, 0x1B	; 27
    1f9c:	61 e0       	ldi	r22, 0x01	; 1
    1f9e:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	Delay_ms(speed);
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	ef 5b       	subi	r30, 0xBF	; 191
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	80 81       	ld	r24, Z
    1faa:	86 95       	lsr	r24
    1fac:	86 95       	lsr	r24
    1fae:	86 95       	lsr	r24
    1fb0:	88 2f       	mov	r24, r24
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	a0 e0       	ldi	r26, 0x00	; 0
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	8d ab       	std	Y+53, r24	; 0x35
    1fba:	9e ab       	std	Y+54, r25	; 0x36
    1fbc:	af ab       	std	Y+55, r26	; 0x37
    1fbe:	b8 af       	std	Y+56, r27	; 0x38
    1fc0:	28 c0       	rjmp	.+80     	; 0x2012 <STPR_HalfStep_Left+0x146>
    1fc2:	80 ed       	ldi	r24, 0xD0	; 208
    1fc4:	97 e0       	ldi	r25, 0x07	; 7
    1fc6:	a0 e0       	ldi	r26, 0x00	; 0
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	89 ab       	std	Y+49, r24	; 0x31
    1fcc:	9a ab       	std	Y+50, r25	; 0x32
    1fce:	ab ab       	std	Y+51, r26	; 0x33
    1fd0:	bc ab       	std	Y+52, r27	; 0x34
    1fd2:	0c c0       	rjmp	.+24     	; 0x1fec <STPR_HalfStep_Left+0x120>
    1fd4:	00 00       	nop
    1fd6:	89 a9       	ldd	r24, Y+49	; 0x31
    1fd8:	9a a9       	ldd	r25, Y+50	; 0x32
    1fda:	ab a9       	ldd	r26, Y+51	; 0x33
    1fdc:	bc a9       	ldd	r27, Y+52	; 0x34
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	a1 09       	sbc	r26, r1
    1fe2:	b1 09       	sbc	r27, r1
    1fe4:	89 ab       	std	Y+49, r24	; 0x31
    1fe6:	9a ab       	std	Y+50, r25	; 0x32
    1fe8:	ab ab       	std	Y+51, r26	; 0x33
    1fea:	bc ab       	std	Y+52, r27	; 0x34
    1fec:	89 a9       	ldd	r24, Y+49	; 0x31
    1fee:	9a a9       	ldd	r25, Y+50	; 0x32
    1ff0:	ab a9       	ldd	r26, Y+51	; 0x33
    1ff2:	bc a9       	ldd	r27, Y+52	; 0x34
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	a1 05       	cpc	r26, r1
    1ff8:	b1 05       	cpc	r27, r1
    1ffa:	61 f7       	brne	.-40     	; 0x1fd4 <STPR_HalfStep_Left+0x108>
    1ffc:	8d a9       	ldd	r24, Y+53	; 0x35
    1ffe:	9e a9       	ldd	r25, Y+54	; 0x36
    2000:	af a9       	ldd	r26, Y+55	; 0x37
    2002:	b8 ad       	ldd	r27, Y+56	; 0x38
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	a1 09       	sbc	r26, r1
    2008:	b1 09       	sbc	r27, r1
    200a:	8d ab       	std	Y+53, r24	; 0x35
    200c:	9e ab       	std	Y+54, r25	; 0x36
    200e:	af ab       	std	Y+55, r26	; 0x37
    2010:	b8 af       	std	Y+56, r27	; 0x38
    2012:	8d a9       	ldd	r24, Y+53	; 0x35
    2014:	9e a9       	ldd	r25, Y+54	; 0x36
    2016:	af a9       	ldd	r26, Y+55	; 0x37
    2018:	b8 ad       	ldd	r27, Y+56	; 0x38
    201a:	00 97       	sbiw	r24, 0x00	; 0
    201c:	a1 05       	cpc	r26, r1
    201e:	b1 05       	cpc	r27, r1
    2020:	81 f6       	brne	.-96     	; 0x1fc2 <STPR_HalfStep_Left+0xf6>
	DIO_enuWritePin(STPR_COIL_3,DIO_LOW);
    2022:	8b e1       	ldi	r24, 0x1B	; 27
    2024:	60 e0       	ldi	r22, 0x00	; 0
    2026:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_3,DIO_HIGH); //activate coil 3,4
    202a:	8b e1       	ldi	r24, 0x1B	; 27
    202c:	61 e0       	ldi	r22, 0x01	; 1
    202e:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_2,DIO_HIGH);
    2032:	8a e1       	ldi	r24, 0x1A	; 26
    2034:	61 e0       	ldi	r22, 0x01	; 1
    2036:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	Delay_ms(speed);
    203a:	fe 01       	movw	r30, r28
    203c:	ef 5b       	subi	r30, 0xBF	; 191
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	80 81       	ld	r24, Z
    2042:	86 95       	lsr	r24
    2044:	86 95       	lsr	r24
    2046:	86 95       	lsr	r24
    2048:	88 2f       	mov	r24, r24
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	a0 e0       	ldi	r26, 0x00	; 0
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	8d a7       	std	Y+45, r24	; 0x2d
    2052:	9e a7       	std	Y+46, r25	; 0x2e
    2054:	af a7       	std	Y+47, r26	; 0x2f
    2056:	b8 ab       	std	Y+48, r27	; 0x30
    2058:	28 c0       	rjmp	.+80     	; 0x20aa <STPR_HalfStep_Left+0x1de>
    205a:	80 ed       	ldi	r24, 0xD0	; 208
    205c:	97 e0       	ldi	r25, 0x07	; 7
    205e:	a0 e0       	ldi	r26, 0x00	; 0
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	89 a7       	std	Y+41, r24	; 0x29
    2064:	9a a7       	std	Y+42, r25	; 0x2a
    2066:	ab a7       	std	Y+43, r26	; 0x2b
    2068:	bc a7       	std	Y+44, r27	; 0x2c
    206a:	0c c0       	rjmp	.+24     	; 0x2084 <STPR_HalfStep_Left+0x1b8>
    206c:	00 00       	nop
    206e:	89 a5       	ldd	r24, Y+41	; 0x29
    2070:	9a a5       	ldd	r25, Y+42	; 0x2a
    2072:	ab a5       	ldd	r26, Y+43	; 0x2b
    2074:	bc a5       	ldd	r27, Y+44	; 0x2c
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	a1 09       	sbc	r26, r1
    207a:	b1 09       	sbc	r27, r1
    207c:	89 a7       	std	Y+41, r24	; 0x29
    207e:	9a a7       	std	Y+42, r25	; 0x2a
    2080:	ab a7       	std	Y+43, r26	; 0x2b
    2082:	bc a7       	std	Y+44, r27	; 0x2c
    2084:	89 a5       	ldd	r24, Y+41	; 0x29
    2086:	9a a5       	ldd	r25, Y+42	; 0x2a
    2088:	ab a5       	ldd	r26, Y+43	; 0x2b
    208a:	bc a5       	ldd	r27, Y+44	; 0x2c
    208c:	00 97       	sbiw	r24, 0x00	; 0
    208e:	a1 05       	cpc	r26, r1
    2090:	b1 05       	cpc	r27, r1
    2092:	61 f7       	brne	.-40     	; 0x206c <STPR_HalfStep_Left+0x1a0>
    2094:	8d a5       	ldd	r24, Y+45	; 0x2d
    2096:	9e a5       	ldd	r25, Y+46	; 0x2e
    2098:	af a5       	ldd	r26, Y+47	; 0x2f
    209a:	b8 a9       	ldd	r27, Y+48	; 0x30
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	a1 09       	sbc	r26, r1
    20a0:	b1 09       	sbc	r27, r1
    20a2:	8d a7       	std	Y+45, r24	; 0x2d
    20a4:	9e a7       	std	Y+46, r25	; 0x2e
    20a6:	af a7       	std	Y+47, r26	; 0x2f
    20a8:	b8 ab       	std	Y+48, r27	; 0x30
    20aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    20ac:	9e a5       	ldd	r25, Y+46	; 0x2e
    20ae:	af a5       	ldd	r26, Y+47	; 0x2f
    20b0:	b8 a9       	ldd	r27, Y+48	; 0x30
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	a1 05       	cpc	r26, r1
    20b6:	b1 05       	cpc	r27, r1
    20b8:	81 f6       	brne	.-96     	; 0x205a <STPR_HalfStep_Left+0x18e>
	DIO_enuWritePin(STPR_COIL_3,DIO_LOW); //deactivate coil 3,4
    20ba:	8b e1       	ldi	r24, 0x1B	; 27
    20bc:	60 e0       	ldi	r22, 0x00	; 0
    20be:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_2,DIO_LOW);
    20c2:	8a e1       	ldi	r24, 0x1A	; 26
    20c4:	60 e0       	ldi	r22, 0x00	; 0
    20c6:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_2,DIO_HIGH);//activate coil 3
    20ca:	8a e1       	ldi	r24, 0x1A	; 26
    20cc:	61 e0       	ldi	r22, 0x01	; 1
    20ce:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	Delay_ms(speed);
    20d2:	fe 01       	movw	r30, r28
    20d4:	ef 5b       	subi	r30, 0xBF	; 191
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	80 81       	ld	r24, Z
    20da:	86 95       	lsr	r24
    20dc:	86 95       	lsr	r24
    20de:	86 95       	lsr	r24
    20e0:	88 2f       	mov	r24, r24
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	a0 e0       	ldi	r26, 0x00	; 0
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	8d a3       	std	Y+37, r24	; 0x25
    20ea:	9e a3       	std	Y+38, r25	; 0x26
    20ec:	af a3       	std	Y+39, r26	; 0x27
    20ee:	b8 a7       	std	Y+40, r27	; 0x28
    20f0:	28 c0       	rjmp	.+80     	; 0x2142 <STPR_HalfStep_Left+0x276>
    20f2:	80 ed       	ldi	r24, 0xD0	; 208
    20f4:	97 e0       	ldi	r25, 0x07	; 7
    20f6:	a0 e0       	ldi	r26, 0x00	; 0
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	89 a3       	std	Y+33, r24	; 0x21
    20fc:	9a a3       	std	Y+34, r25	; 0x22
    20fe:	ab a3       	std	Y+35, r26	; 0x23
    2100:	bc a3       	std	Y+36, r27	; 0x24
    2102:	0c c0       	rjmp	.+24     	; 0x211c <STPR_HalfStep_Left+0x250>
    2104:	00 00       	nop
    2106:	89 a1       	ldd	r24, Y+33	; 0x21
    2108:	9a a1       	ldd	r25, Y+34	; 0x22
    210a:	ab a1       	ldd	r26, Y+35	; 0x23
    210c:	bc a1       	ldd	r27, Y+36	; 0x24
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	a1 09       	sbc	r26, r1
    2112:	b1 09       	sbc	r27, r1
    2114:	89 a3       	std	Y+33, r24	; 0x21
    2116:	9a a3       	std	Y+34, r25	; 0x22
    2118:	ab a3       	std	Y+35, r26	; 0x23
    211a:	bc a3       	std	Y+36, r27	; 0x24
    211c:	89 a1       	ldd	r24, Y+33	; 0x21
    211e:	9a a1       	ldd	r25, Y+34	; 0x22
    2120:	ab a1       	ldd	r26, Y+35	; 0x23
    2122:	bc a1       	ldd	r27, Y+36	; 0x24
    2124:	00 97       	sbiw	r24, 0x00	; 0
    2126:	a1 05       	cpc	r26, r1
    2128:	b1 05       	cpc	r27, r1
    212a:	61 f7       	brne	.-40     	; 0x2104 <STPR_HalfStep_Left+0x238>
    212c:	8d a1       	ldd	r24, Y+37	; 0x25
    212e:	9e a1       	ldd	r25, Y+38	; 0x26
    2130:	af a1       	ldd	r26, Y+39	; 0x27
    2132:	b8 a5       	ldd	r27, Y+40	; 0x28
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	a1 09       	sbc	r26, r1
    2138:	b1 09       	sbc	r27, r1
    213a:	8d a3       	std	Y+37, r24	; 0x25
    213c:	9e a3       	std	Y+38, r25	; 0x26
    213e:	af a3       	std	Y+39, r26	; 0x27
    2140:	b8 a7       	std	Y+40, r27	; 0x28
    2142:	8d a1       	ldd	r24, Y+37	; 0x25
    2144:	9e a1       	ldd	r25, Y+38	; 0x26
    2146:	af a1       	ldd	r26, Y+39	; 0x27
    2148:	b8 a5       	ldd	r27, Y+40	; 0x28
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	a1 05       	cpc	r26, r1
    214e:	b1 05       	cpc	r27, r1
    2150:	81 f6       	brne	.-96     	; 0x20f2 <STPR_HalfStep_Left+0x226>
	DIO_enuWritePin(STPR_COIL_2,DIO_LOW);
    2152:	8a e1       	ldi	r24, 0x1A	; 26
    2154:	60 e0       	ldi	r22, 0x00	; 0
    2156:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_2,DIO_HIGH); //activate coil 2,3
    215a:	8a e1       	ldi	r24, 0x1A	; 26
    215c:	61 e0       	ldi	r22, 0x01	; 1
    215e:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_1,DIO_HIGH);
    2162:	89 e1       	ldi	r24, 0x19	; 25
    2164:	61 e0       	ldi	r22, 0x01	; 1
    2166:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	Delay_ms(speed);
    216a:	fe 01       	movw	r30, r28
    216c:	ef 5b       	subi	r30, 0xBF	; 191
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	80 81       	ld	r24, Z
    2172:	86 95       	lsr	r24
    2174:	86 95       	lsr	r24
    2176:	86 95       	lsr	r24
    2178:	88 2f       	mov	r24, r24
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	a0 e0       	ldi	r26, 0x00	; 0
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	8d 8f       	std	Y+29, r24	; 0x1d
    2182:	9e 8f       	std	Y+30, r25	; 0x1e
    2184:	af 8f       	std	Y+31, r26	; 0x1f
    2186:	b8 a3       	std	Y+32, r27	; 0x20
    2188:	28 c0       	rjmp	.+80     	; 0x21da <STPR_HalfStep_Left+0x30e>
    218a:	80 ed       	ldi	r24, 0xD0	; 208
    218c:	97 e0       	ldi	r25, 0x07	; 7
    218e:	a0 e0       	ldi	r26, 0x00	; 0
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	89 8f       	std	Y+25, r24	; 0x19
    2194:	9a 8f       	std	Y+26, r25	; 0x1a
    2196:	ab 8f       	std	Y+27, r26	; 0x1b
    2198:	bc 8f       	std	Y+28, r27	; 0x1c
    219a:	0c c0       	rjmp	.+24     	; 0x21b4 <STPR_HalfStep_Left+0x2e8>
    219c:	00 00       	nop
    219e:	89 8d       	ldd	r24, Y+25	; 0x19
    21a0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    21a2:	ab 8d       	ldd	r26, Y+27	; 0x1b
    21a4:	bc 8d       	ldd	r27, Y+28	; 0x1c
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	a1 09       	sbc	r26, r1
    21aa:	b1 09       	sbc	r27, r1
    21ac:	89 8f       	std	Y+25, r24	; 0x19
    21ae:	9a 8f       	std	Y+26, r25	; 0x1a
    21b0:	ab 8f       	std	Y+27, r26	; 0x1b
    21b2:	bc 8f       	std	Y+28, r27	; 0x1c
    21b4:	89 8d       	ldd	r24, Y+25	; 0x19
    21b6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    21b8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    21ba:	bc 8d       	ldd	r27, Y+28	; 0x1c
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	a1 05       	cpc	r26, r1
    21c0:	b1 05       	cpc	r27, r1
    21c2:	61 f7       	brne	.-40     	; 0x219c <STPR_HalfStep_Left+0x2d0>
    21c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21c8:	af 8d       	ldd	r26, Y+31	; 0x1f
    21ca:	b8 a1       	ldd	r27, Y+32	; 0x20
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	a1 09       	sbc	r26, r1
    21d0:	b1 09       	sbc	r27, r1
    21d2:	8d 8f       	std	Y+29, r24	; 0x1d
    21d4:	9e 8f       	std	Y+30, r25	; 0x1e
    21d6:	af 8f       	std	Y+31, r26	; 0x1f
    21d8:	b8 a3       	std	Y+32, r27	; 0x20
    21da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21de:	af 8d       	ldd	r26, Y+31	; 0x1f
    21e0:	b8 a1       	ldd	r27, Y+32	; 0x20
    21e2:	00 97       	sbiw	r24, 0x00	; 0
    21e4:	a1 05       	cpc	r26, r1
    21e6:	b1 05       	cpc	r27, r1
    21e8:	81 f6       	brne	.-96     	; 0x218a <STPR_HalfStep_Left+0x2be>
	DIO_enuWritePin(STPR_COIL_2,DIO_LOW); //deactivate coil 2,3
    21ea:	8a e1       	ldi	r24, 0x1A	; 26
    21ec:	60 e0       	ldi	r22, 0x00	; 0
    21ee:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_1,DIO_LOW);
    21f2:	89 e1       	ldi	r24, 0x19	; 25
    21f4:	60 e0       	ldi	r22, 0x00	; 0
    21f6:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_1,DIO_HIGH);//activate coil 2
    21fa:	89 e1       	ldi	r24, 0x19	; 25
    21fc:	61 e0       	ldi	r22, 0x01	; 1
    21fe:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	Delay_ms(speed);
    2202:	fe 01       	movw	r30, r28
    2204:	ef 5b       	subi	r30, 0xBF	; 191
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	80 81       	ld	r24, Z
    220a:	86 95       	lsr	r24
    220c:	86 95       	lsr	r24
    220e:	86 95       	lsr	r24
    2210:	88 2f       	mov	r24, r24
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	a0 e0       	ldi	r26, 0x00	; 0
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	8d 8b       	std	Y+21, r24	; 0x15
    221a:	9e 8b       	std	Y+22, r25	; 0x16
    221c:	af 8b       	std	Y+23, r26	; 0x17
    221e:	b8 8f       	std	Y+24, r27	; 0x18
    2220:	28 c0       	rjmp	.+80     	; 0x2272 <STPR_HalfStep_Left+0x3a6>
    2222:	80 ed       	ldi	r24, 0xD0	; 208
    2224:	97 e0       	ldi	r25, 0x07	; 7
    2226:	a0 e0       	ldi	r26, 0x00	; 0
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	89 8b       	std	Y+17, r24	; 0x11
    222c:	9a 8b       	std	Y+18, r25	; 0x12
    222e:	ab 8b       	std	Y+19, r26	; 0x13
    2230:	bc 8b       	std	Y+20, r27	; 0x14
    2232:	0c c0       	rjmp	.+24     	; 0x224c <STPR_HalfStep_Left+0x380>
    2234:	00 00       	nop
    2236:	89 89       	ldd	r24, Y+17	; 0x11
    2238:	9a 89       	ldd	r25, Y+18	; 0x12
    223a:	ab 89       	ldd	r26, Y+19	; 0x13
    223c:	bc 89       	ldd	r27, Y+20	; 0x14
    223e:	01 97       	sbiw	r24, 0x01	; 1
    2240:	a1 09       	sbc	r26, r1
    2242:	b1 09       	sbc	r27, r1
    2244:	89 8b       	std	Y+17, r24	; 0x11
    2246:	9a 8b       	std	Y+18, r25	; 0x12
    2248:	ab 8b       	std	Y+19, r26	; 0x13
    224a:	bc 8b       	std	Y+20, r27	; 0x14
    224c:	89 89       	ldd	r24, Y+17	; 0x11
    224e:	9a 89       	ldd	r25, Y+18	; 0x12
    2250:	ab 89       	ldd	r26, Y+19	; 0x13
    2252:	bc 89       	ldd	r27, Y+20	; 0x14
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	a1 05       	cpc	r26, r1
    2258:	b1 05       	cpc	r27, r1
    225a:	61 f7       	brne	.-40     	; 0x2234 <STPR_HalfStep_Left+0x368>
    225c:	8d 89       	ldd	r24, Y+21	; 0x15
    225e:	9e 89       	ldd	r25, Y+22	; 0x16
    2260:	af 89       	ldd	r26, Y+23	; 0x17
    2262:	b8 8d       	ldd	r27, Y+24	; 0x18
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	a1 09       	sbc	r26, r1
    2268:	b1 09       	sbc	r27, r1
    226a:	8d 8b       	std	Y+21, r24	; 0x15
    226c:	9e 8b       	std	Y+22, r25	; 0x16
    226e:	af 8b       	std	Y+23, r26	; 0x17
    2270:	b8 8f       	std	Y+24, r27	; 0x18
    2272:	8d 89       	ldd	r24, Y+21	; 0x15
    2274:	9e 89       	ldd	r25, Y+22	; 0x16
    2276:	af 89       	ldd	r26, Y+23	; 0x17
    2278:	b8 8d       	ldd	r27, Y+24	; 0x18
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	a1 05       	cpc	r26, r1
    227e:	b1 05       	cpc	r27, r1
    2280:	81 f6       	brne	.-96     	; 0x2222 <STPR_HalfStep_Left+0x356>
	DIO_enuWritePin(STPR_COIL_1,DIO_LOW);
    2282:	89 e1       	ldi	r24, 0x19	; 25
    2284:	60 e0       	ldi	r22, 0x00	; 0
    2286:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_1,DIO_HIGH); //activate coil 1,2
    228a:	89 e1       	ldi	r24, 0x19	; 25
    228c:	61 e0       	ldi	r22, 0x01	; 1
    228e:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_0,DIO_HIGH);
    2292:	88 e1       	ldi	r24, 0x18	; 24
    2294:	61 e0       	ldi	r22, 0x01	; 1
    2296:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	Delay_ms(speed);
    229a:	fe 01       	movw	r30, r28
    229c:	ef 5b       	subi	r30, 0xBF	; 191
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	80 81       	ld	r24, Z
    22a2:	86 95       	lsr	r24
    22a4:	86 95       	lsr	r24
    22a6:	86 95       	lsr	r24
    22a8:	88 2f       	mov	r24, r24
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	a0 e0       	ldi	r26, 0x00	; 0
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	8d 87       	std	Y+13, r24	; 0x0d
    22b2:	9e 87       	std	Y+14, r25	; 0x0e
    22b4:	af 87       	std	Y+15, r26	; 0x0f
    22b6:	b8 8b       	std	Y+16, r27	; 0x10
    22b8:	28 c0       	rjmp	.+80     	; 0x230a <STPR_HalfStep_Left+0x43e>
    22ba:	80 ed       	ldi	r24, 0xD0	; 208
    22bc:	97 e0       	ldi	r25, 0x07	; 7
    22be:	a0 e0       	ldi	r26, 0x00	; 0
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	89 87       	std	Y+9, r24	; 0x09
    22c4:	9a 87       	std	Y+10, r25	; 0x0a
    22c6:	ab 87       	std	Y+11, r26	; 0x0b
    22c8:	bc 87       	std	Y+12, r27	; 0x0c
    22ca:	0c c0       	rjmp	.+24     	; 0x22e4 <STPR_HalfStep_Left+0x418>
    22cc:	00 00       	nop
    22ce:	89 85       	ldd	r24, Y+9	; 0x09
    22d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d2:	ab 85       	ldd	r26, Y+11	; 0x0b
    22d4:	bc 85       	ldd	r27, Y+12	; 0x0c
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	a1 09       	sbc	r26, r1
    22da:	b1 09       	sbc	r27, r1
    22dc:	89 87       	std	Y+9, r24	; 0x09
    22de:	9a 87       	std	Y+10, r25	; 0x0a
    22e0:	ab 87       	std	Y+11, r26	; 0x0b
    22e2:	bc 87       	std	Y+12, r27	; 0x0c
    22e4:	89 85       	ldd	r24, Y+9	; 0x09
    22e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e8:	ab 85       	ldd	r26, Y+11	; 0x0b
    22ea:	bc 85       	ldd	r27, Y+12	; 0x0c
    22ec:	00 97       	sbiw	r24, 0x00	; 0
    22ee:	a1 05       	cpc	r26, r1
    22f0:	b1 05       	cpc	r27, r1
    22f2:	61 f7       	brne	.-40     	; 0x22cc <STPR_HalfStep_Left+0x400>
    22f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f8:	af 85       	ldd	r26, Y+15	; 0x0f
    22fa:	b8 89       	ldd	r27, Y+16	; 0x10
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	a1 09       	sbc	r26, r1
    2300:	b1 09       	sbc	r27, r1
    2302:	8d 87       	std	Y+13, r24	; 0x0d
    2304:	9e 87       	std	Y+14, r25	; 0x0e
    2306:	af 87       	std	Y+15, r26	; 0x0f
    2308:	b8 8b       	std	Y+16, r27	; 0x10
    230a:	8d 85       	ldd	r24, Y+13	; 0x0d
    230c:	9e 85       	ldd	r25, Y+14	; 0x0e
    230e:	af 85       	ldd	r26, Y+15	; 0x0f
    2310:	b8 89       	ldd	r27, Y+16	; 0x10
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	a1 05       	cpc	r26, r1
    2316:	b1 05       	cpc	r27, r1
    2318:	81 f6       	brne	.-96     	; 0x22ba <STPR_HalfStep_Left+0x3ee>
	DIO_enuWritePin(STPR_COIL_1,DIO_LOW); //deactivate coil 1,2
    231a:	89 e1       	ldi	r24, 0x19	; 25
    231c:	60 e0       	ldi	r22, 0x00	; 0
    231e:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_0,DIO_LOW);
    2322:	88 e1       	ldi	r24, 0x18	; 24
    2324:	60 e0       	ldi	r22, 0x00	; 0
    2326:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_0,DIO_HIGH); //activate coil 1
    232a:	88 e1       	ldi	r24, 0x18	; 24
    232c:	61 e0       	ldi	r22, 0x01	; 1
    232e:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	Delay_ms(speed);
    2332:	fe 01       	movw	r30, r28
    2334:	ef 5b       	subi	r30, 0xBF	; 191
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	80 81       	ld	r24, Z
    233a:	86 95       	lsr	r24
    233c:	86 95       	lsr	r24
    233e:	86 95       	lsr	r24
    2340:	88 2f       	mov	r24, r24
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	a0 e0       	ldi	r26, 0x00	; 0
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	8d 83       	std	Y+5, r24	; 0x05
    234a:	9e 83       	std	Y+6, r25	; 0x06
    234c:	af 83       	std	Y+7, r26	; 0x07
    234e:	b8 87       	std	Y+8, r27	; 0x08
    2350:	28 c0       	rjmp	.+80     	; 0x23a2 <STPR_HalfStep_Left+0x4d6>
    2352:	80 ed       	ldi	r24, 0xD0	; 208
    2354:	97 e0       	ldi	r25, 0x07	; 7
    2356:	a0 e0       	ldi	r26, 0x00	; 0
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	9a 83       	std	Y+2, r25	; 0x02
    235e:	ab 83       	std	Y+3, r26	; 0x03
    2360:	bc 83       	std	Y+4, r27	; 0x04
    2362:	0c c0       	rjmp	.+24     	; 0x237c <STPR_HalfStep_Left+0x4b0>
    2364:	00 00       	nop
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	9a 81       	ldd	r25, Y+2	; 0x02
    236a:	ab 81       	ldd	r26, Y+3	; 0x03
    236c:	bc 81       	ldd	r27, Y+4	; 0x04
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	a1 09       	sbc	r26, r1
    2372:	b1 09       	sbc	r27, r1
    2374:	89 83       	std	Y+1, r24	; 0x01
    2376:	9a 83       	std	Y+2, r25	; 0x02
    2378:	ab 83       	std	Y+3, r26	; 0x03
    237a:	bc 83       	std	Y+4, r27	; 0x04
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	9a 81       	ldd	r25, Y+2	; 0x02
    2380:	ab 81       	ldd	r26, Y+3	; 0x03
    2382:	bc 81       	ldd	r27, Y+4	; 0x04
    2384:	00 97       	sbiw	r24, 0x00	; 0
    2386:	a1 05       	cpc	r26, r1
    2388:	b1 05       	cpc	r27, r1
    238a:	61 f7       	brne	.-40     	; 0x2364 <STPR_HalfStep_Left+0x498>
    238c:	8d 81       	ldd	r24, Y+5	; 0x05
    238e:	9e 81       	ldd	r25, Y+6	; 0x06
    2390:	af 81       	ldd	r26, Y+7	; 0x07
    2392:	b8 85       	ldd	r27, Y+8	; 0x08
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	a1 09       	sbc	r26, r1
    2398:	b1 09       	sbc	r27, r1
    239a:	8d 83       	std	Y+5, r24	; 0x05
    239c:	9e 83       	std	Y+6, r25	; 0x06
    239e:	af 83       	std	Y+7, r26	; 0x07
    23a0:	b8 87       	std	Y+8, r27	; 0x08
    23a2:	8d 81       	ldd	r24, Y+5	; 0x05
    23a4:	9e 81       	ldd	r25, Y+6	; 0x06
    23a6:	af 81       	ldd	r26, Y+7	; 0x07
    23a8:	b8 85       	ldd	r27, Y+8	; 0x08
    23aa:	00 97       	sbiw	r24, 0x00	; 0
    23ac:	a1 05       	cpc	r26, r1
    23ae:	b1 05       	cpc	r27, r1
    23b0:	81 f6       	brne	.-96     	; 0x2352 <STPR_HalfStep_Left+0x486>

}
    23b2:	cf 5b       	subi	r28, 0xBF	; 191
    23b4:	df 4f       	sbci	r29, 0xFF	; 255
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	de bf       	out	0x3e, r29	; 62
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	cd bf       	out	0x3d, r28	; 61
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <STPR_Stop>:




void STPR_Stop(void)
{
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
    23ce:	28 97       	sbiw	r28, 0x08	; 8
    23d0:	0f b6       	in	r0, 0x3f	; 63
    23d2:	f8 94       	cli
    23d4:	de bf       	out	0x3e, r29	; 62
    23d6:	0f be       	out	0x3f, r0	; 63
    23d8:	cd bf       	out	0x3d, r28	; 61
	u8 allPins[4] = {STPR_COIL_0, STPR_COIL_1, STPR_COIL_2, STPR_COIL_3};
    23da:	88 e1       	ldi	r24, 0x18	; 24
    23dc:	89 83       	std	Y+1, r24	; 0x01
    23de:	89 e1       	ldi	r24, 0x19	; 25
    23e0:	8a 83       	std	Y+2, r24	; 0x02
    23e2:	8a e1       	ldi	r24, 0x1A	; 26
    23e4:	8b 83       	std	Y+3, r24	; 0x03
    23e6:	8b e1       	ldi	r24, 0x1B	; 27
    23e8:	8c 83       	std	Y+4, r24	; 0x04
	u8 disableAll[4] = {DIO_LOW};
    23ea:	1d 82       	std	Y+5, r1	; 0x05
    23ec:	1e 82       	std	Y+6, r1	; 0x06
    23ee:	1f 82       	std	Y+7, r1	; 0x07
    23f0:	18 86       	std	Y+8, r1	; 0x08
	DIO_enuWriteGroup(allPins, disableAll, 4); //disable all coils
    23f2:	9e 01       	movw	r18, r28
    23f4:	2b 5f       	subi	r18, 0xFB	; 251
    23f6:	3f 4f       	sbci	r19, 0xFF	; 255
    23f8:	ce 01       	movw	r24, r28
    23fa:	01 96       	adiw	r24, 0x01	; 1
    23fc:	b9 01       	movw	r22, r18
    23fe:	44 e0       	ldi	r20, 0x04	; 4
    2400:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_enuWriteGroup>

}
    2404:	28 96       	adiw	r28, 0x08	; 8
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <Sev_Display>:
#include "SEV_cfg.h"
#include "SEV_priv.h"



tenuErrorStatus Sev_Display(u8 u8sevIndex, u8 u8num){
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
    241e:	62 97       	sbiw	r28, 0x12	; 18
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	de bf       	out	0x3e, r29	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	cd bf       	out	0x3d, r28	; 61
    242a:	8c 87       	std	Y+12, r24	; 0x0c
    242c:	6d 87       	std	Y+13, r22	; 0x0d
    tenuErrorStatus enuReturnLoc = EOK;
    242e:	19 82       	std	Y+1, r1	; 0x01
    u8 au8Cathode[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
    2430:	ce 01       	movw	r24, r28
    2432:	02 96       	adiw	r24, 0x02	; 2
    2434:	9f 87       	std	Y+15, r25	; 0x0f
    2436:	8e 87       	std	Y+14, r24	; 0x0e
    2438:	e0 e9       	ldi	r30, 0x90	; 144
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	f9 8b       	std	Y+17, r31	; 0x11
    243e:	e8 8b       	std	Y+16, r30	; 0x10
    2440:	fa e0       	ldi	r31, 0x0A	; 10
    2442:	fa 8b       	std	Y+18, r31	; 0x12
    2444:	e8 89       	ldd	r30, Y+16	; 0x10
    2446:	f9 89       	ldd	r31, Y+17	; 0x11
    2448:	00 80       	ld	r0, Z
    244a:	88 89       	ldd	r24, Y+16	; 0x10
    244c:	99 89       	ldd	r25, Y+17	; 0x11
    244e:	01 96       	adiw	r24, 0x01	; 1
    2450:	99 8b       	std	Y+17, r25	; 0x11
    2452:	88 8b       	std	Y+16, r24	; 0x10
    2454:	ee 85       	ldd	r30, Y+14	; 0x0e
    2456:	ff 85       	ldd	r31, Y+15	; 0x0f
    2458:	00 82       	st	Z, r0
    245a:	8e 85       	ldd	r24, Y+14	; 0x0e
    245c:	9f 85       	ldd	r25, Y+15	; 0x0f
    245e:	01 96       	adiw	r24, 0x01	; 1
    2460:	9f 87       	std	Y+15, r25	; 0x0f
    2462:	8e 87       	std	Y+14, r24	; 0x0e
    2464:	9a 89       	ldd	r25, Y+18	; 0x12
    2466:	91 50       	subi	r25, 0x01	; 1
    2468:	9a 8b       	std	Y+18, r25	; 0x12
    246a:	ea 89       	ldd	r30, Y+18	; 0x12
    246c:	ee 23       	and	r30, r30
    246e:	51 f7       	brne	.-44     	; 0x2444 <Sev_Display+0x2e>
    if(u8sevIndex < MAX_SEV_SEGMENT){
    2470:	8c 85       	ldd	r24, Y+12	; 0x0c
    2472:	82 30       	cpi	r24, 0x02	; 2
    2474:	98 f5       	brcc	.+102    	; 0x24dc <Sev_Display+0xc6>
        if(u8num < 10){
    2476:	8d 85       	ldd	r24, Y+13	; 0x0d
    2478:	8a 30       	cpi	r24, 0x0A	; 10
    247a:	90 f5       	brcc	.+100    	; 0x24e0 <Sev_Display+0xca>
            if(SEV_ConfigSet[u8sevIndex].common_mode == Common_Cathode){
    247c:	8c 85       	ldd	r24, Y+12	; 0x0c
    247e:	28 2f       	mov	r18, r24
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	c9 01       	movw	r24, r18
    2484:	88 0f       	add	r24, r24
    2486:	99 1f       	adc	r25, r25
    2488:	88 0f       	add	r24, r24
    248a:	99 1f       	adc	r25, r25
    248c:	88 0f       	add	r24, r24
    248e:	99 1f       	adc	r25, r25
    2490:	82 0f       	add	r24, r18
    2492:	93 1f       	adc	r25, r19
    2494:	fc 01       	movw	r30, r24
    2496:	e0 59       	subi	r30, 0x90	; 144
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	80 81       	ld	r24, Z
    249c:	88 23       	and	r24, r24
    249e:	71 f4       	brne	.+28     	; 0x24bc <Sev_Display+0xa6>
            	PutOnBus(u8sevIndex, au8Cathode[u8num]);
    24a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a2:	28 2f       	mov	r18, r24
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	ce 01       	movw	r24, r28
    24a8:	02 96       	adiw	r24, 0x02	; 2
    24aa:	fc 01       	movw	r30, r24
    24ac:	e2 0f       	add	r30, r18
    24ae:	f3 1f       	adc	r31, r19
    24b0:	90 81       	ld	r25, Z
    24b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    24b4:	69 2f       	mov	r22, r25
    24b6:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <PutOnBus>
    24ba:	12 c0       	rjmp	.+36     	; 0x24e0 <Sev_Display+0xca>
            }
            else{
            	PutOnBus(u8sevIndex, ~au8Cathode[u8num]);
    24bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24be:	28 2f       	mov	r18, r24
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	ce 01       	movw	r24, r28
    24c4:	02 96       	adiw	r24, 0x02	; 2
    24c6:	fc 01       	movw	r30, r24
    24c8:	e2 0f       	add	r30, r18
    24ca:	f3 1f       	adc	r31, r19
    24cc:	80 81       	ld	r24, Z
    24ce:	98 2f       	mov	r25, r24
    24d0:	90 95       	com	r25
    24d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    24d4:	69 2f       	mov	r22, r25
    24d6:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <PutOnBus>
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <Sev_Display+0xca>
            }
        }
    }else{
        enuReturnLoc = PARAM_OUT_RANGE;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	89 83       	std	Y+1, r24	; 0x01
    }
    return enuReturnLoc;
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    24e2:	62 96       	adiw	r28, 0x12	; 18
    24e4:	0f b6       	in	r0, 0x3f	; 63
    24e6:	f8 94       	cli
    24e8:	de bf       	out	0x3e, r29	; 62
    24ea:	0f be       	out	0x3f, r0	; 63
    24ec:	cd bf       	out	0x3d, r28	; 61
    24ee:	cf 91       	pop	r28
    24f0:	df 91       	pop	r29
    24f2:	08 95       	ret

000024f4 <PutOnBus>:

static void PutOnBus(u8 u8sevIndex, u8 u8num){
    24f4:	df 93       	push	r29
    24f6:	cf 93       	push	r28
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
    24fc:	2a 97       	sbiw	r28, 0x0a	; 10
    24fe:	0f b6       	in	r0, 0x3f	; 63
    2500:	f8 94       	cli
    2502:	de bf       	out	0x3e, r29	; 62
    2504:	0f be       	out	0x3f, r0	; 63
    2506:	cd bf       	out	0x3d, r28	; 61
    2508:	89 87       	std	Y+9, r24	; 0x09
    250a:	6a 87       	std	Y+10, r22	; 0x0a
    u8 u8Num[7]; //0x0011 1111
	u8 cntr;
	for(cntr = 0; cntr < 7; cntr++){
    250c:	19 82       	std	Y+1, r1	; 0x01
    250e:	1b c0       	rjmp	.+54     	; 0x2546 <PutOnBus+0x52>
		u8Num[cntr] = GET_BIT(u8num, cntr);
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	48 2f       	mov	r20, r24
    2514:	50 e0       	ldi	r21, 0x00	; 0
    2516:	8a 85       	ldd	r24, Y+10	; 0x0a
    2518:	28 2f       	mov	r18, r24
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	88 2f       	mov	r24, r24
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	b9 01       	movw	r22, r18
    2524:	02 c0       	rjmp	.+4      	; 0x252a <PutOnBus+0x36>
    2526:	75 95       	asr	r23
    2528:	67 95       	ror	r22
    252a:	8a 95       	dec	r24
    252c:	e2 f7       	brpl	.-8      	; 0x2526 <PutOnBus+0x32>
    252e:	cb 01       	movw	r24, r22
    2530:	28 2f       	mov	r18, r24
    2532:	21 70       	andi	r18, 0x01	; 1
    2534:	ce 01       	movw	r24, r28
    2536:	02 96       	adiw	r24, 0x02	; 2
    2538:	fc 01       	movw	r30, r24
    253a:	e4 0f       	add	r30, r20
    253c:	f5 1f       	adc	r31, r21
    253e:	20 83       	st	Z, r18
}

static void PutOnBus(u8 u8sevIndex, u8 u8num){
    u8 u8Num[7]; //0x0011 1111
	u8 cntr;
	for(cntr = 0; cntr < 7; cntr++){
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	8f 5f       	subi	r24, 0xFF	; 255
    2544:	89 83       	std	Y+1, r24	; 0x01
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	87 30       	cpi	r24, 0x07	; 7
    254a:	10 f3       	brcs	.-60     	; 0x2510 <PutOnBus+0x1c>
		u8Num[cntr] = GET_BIT(u8num, cntr);
	}
    DIO_enuWriteGroup(SEV_ConfigSet[u8sevIndex].Au8Pin, u8Num, 7 );
    254c:	89 85       	ldd	r24, Y+9	; 0x09
    254e:	28 2f       	mov	r18, r24
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	c9 01       	movw	r24, r18
    2554:	88 0f       	add	r24, r24
    2556:	99 1f       	adc	r25, r25
    2558:	88 0f       	add	r24, r24
    255a:	99 1f       	adc	r25, r25
    255c:	88 0f       	add	r24, r24
    255e:	99 1f       	adc	r25, r25
    2560:	82 0f       	add	r24, r18
    2562:	93 1f       	adc	r25, r19
    2564:	88 59       	subi	r24, 0x98	; 152
    2566:	9f 4f       	sbci	r25, 0xFF	; 255
    2568:	9e 01       	movw	r18, r28
    256a:	2e 5f       	subi	r18, 0xFE	; 254
    256c:	3f 4f       	sbci	r19, 0xFF	; 255
    256e:	b9 01       	movw	r22, r18
    2570:	47 e0       	ldi	r20, 0x07	; 7
    2572:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_enuWriteGroup>
}
    2576:	2a 96       	adiw	r28, 0x0a	; 10
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	f8 94       	cli
    257c:	de bf       	out	0x3e, r29	; 62
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	cd bf       	out	0x3d, r28	; 61
    2582:	cf 91       	pop	r28
    2584:	df 91       	pop	r29
    2586:	08 95       	ret

00002588 <Sev_PowerOn>:

tenuErrorStatus Sev_PowerOn(u8 u8sevIndex){
    2588:	df 93       	push	r29
    258a:	cf 93       	push	r28
    258c:	00 d0       	rcall	.+0      	; 0x258e <Sev_PowerOn+0x6>
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	8a 83       	std	Y+2, r24	; 0x02
    tenuErrorStatus enuReturnLoc = EOK;
    2594:	19 82       	std	Y+1, r1	; 0x01
    
    if(u8sevIndex < MAX_SEV_SEGMENT){
    2596:	8a 81       	ldd	r24, Y+2	; 0x02
    2598:	82 30       	cpi	r24, 0x02	; 2
    259a:	e0 f5       	brcc	.+120    	; 0x2614 <Sev_PowerOn+0x8c>
        if(SEV_ConfigSet[u8sevIndex].common_mode == Common_Cathode){
    259c:	8a 81       	ldd	r24, Y+2	; 0x02
    259e:	28 2f       	mov	r18, r24
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	c9 01       	movw	r24, r18
    25a4:	88 0f       	add	r24, r24
    25a6:	99 1f       	adc	r25, r25
    25a8:	88 0f       	add	r24, r24
    25aa:	99 1f       	adc	r25, r25
    25ac:	88 0f       	add	r24, r24
    25ae:	99 1f       	adc	r25, r25
    25b0:	82 0f       	add	r24, r18
    25b2:	93 1f       	adc	r25, r19
    25b4:	fc 01       	movw	r30, r24
    25b6:	e0 59       	subi	r30, 0x90	; 144
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	80 81       	ld	r24, Z
    25bc:	88 23       	and	r24, r24
    25be:	a9 f4       	brne	.+42     	; 0x25ea <Sev_PowerOn+0x62>
            enuReturnLoc = DIO_enuWritePin(SEV_ConfigSet[u8sevIndex].common, Common_Cathode);
    25c0:	8a 81       	ldd	r24, Y+2	; 0x02
    25c2:	28 2f       	mov	r18, r24
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	c9 01       	movw	r24, r18
    25c8:	88 0f       	add	r24, r24
    25ca:	99 1f       	adc	r25, r25
    25cc:	88 0f       	add	r24, r24
    25ce:	99 1f       	adc	r25, r25
    25d0:	88 0f       	add	r24, r24
    25d2:	99 1f       	adc	r25, r25
    25d4:	82 0f       	add	r24, r18
    25d6:	93 1f       	adc	r25, r19
    25d8:	fc 01       	movw	r30, r24
    25da:	e1 59       	subi	r30, 0x91	; 145
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	80 81       	ld	r24, Z
    25e0:	60 e0       	ldi	r22, 0x00	; 0
    25e2:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
    25e6:	89 83       	std	Y+1, r24	; 0x01
    25e8:	17 c0       	rjmp	.+46     	; 0x2618 <Sev_PowerOn+0x90>
        }else{
        	 enuReturnLoc = DIO_enuWritePin(SEV_ConfigSet[u8sevIndex].common, Common_Anode);
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	28 2f       	mov	r18, r24
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	c9 01       	movw	r24, r18
    25f2:	88 0f       	add	r24, r24
    25f4:	99 1f       	adc	r25, r25
    25f6:	88 0f       	add	r24, r24
    25f8:	99 1f       	adc	r25, r25
    25fa:	88 0f       	add	r24, r24
    25fc:	99 1f       	adc	r25, r25
    25fe:	82 0f       	add	r24, r18
    2600:	93 1f       	adc	r25, r19
    2602:	fc 01       	movw	r30, r24
    2604:	e1 59       	subi	r30, 0x91	; 145
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	80 81       	ld	r24, Z
    260a:	61 e0       	ldi	r22, 0x01	; 1
    260c:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
    2610:	89 83       	std	Y+1, r24	; 0x01
    2612:	02 c0       	rjmp	.+4      	; 0x2618 <Sev_PowerOn+0x90>
        }
       
    }else{
        enuReturnLoc = PARAM_OUT_RANGE;
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	89 83       	std	Y+1, r24	; 0x01
    }
    return enuReturnLoc;
    2618:	89 81       	ldd	r24, Y+1	; 0x01
}
    261a:	0f 90       	pop	r0
    261c:	0f 90       	pop	r0
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <Sev_PowerOff>:

tenuErrorStatus Sev_PowerOff(u8 u8sevIndex){
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	00 d0       	rcall	.+0      	; 0x262a <Sev_PowerOff+0x6>
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	8a 83       	std	Y+2, r24	; 0x02
    tenuErrorStatus enuReturnLoc = EOK;
    2630:	19 82       	std	Y+1, r1	; 0x01
    
    if(u8sevIndex < MAX_SEV_SEGMENT){
    2632:	8a 81       	ldd	r24, Y+2	; 0x02
    2634:	82 30       	cpi	r24, 0x02	; 2
    2636:	e0 f5       	brcc	.+120    	; 0x26b0 <Sev_PowerOff+0x8c>
        if(SEV_ConfigSet[u8sevIndex].common_mode == Common_Cathode){
    2638:	8a 81       	ldd	r24, Y+2	; 0x02
    263a:	28 2f       	mov	r18, r24
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	c9 01       	movw	r24, r18
    2640:	88 0f       	add	r24, r24
    2642:	99 1f       	adc	r25, r25
    2644:	88 0f       	add	r24, r24
    2646:	99 1f       	adc	r25, r25
    2648:	88 0f       	add	r24, r24
    264a:	99 1f       	adc	r25, r25
    264c:	82 0f       	add	r24, r18
    264e:	93 1f       	adc	r25, r19
    2650:	fc 01       	movw	r30, r24
    2652:	e0 59       	subi	r30, 0x90	; 144
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	80 81       	ld	r24, Z
    2658:	88 23       	and	r24, r24
    265a:	a9 f4       	brne	.+42     	; 0x2686 <Sev_PowerOff+0x62>
        	 enuReturnLoc = DIO_enuWritePin(SEV_ConfigSet[u8sevIndex].common, Common_Anode);
    265c:	8a 81       	ldd	r24, Y+2	; 0x02
    265e:	28 2f       	mov	r18, r24
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	c9 01       	movw	r24, r18
    2664:	88 0f       	add	r24, r24
    2666:	99 1f       	adc	r25, r25
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	88 0f       	add	r24, r24
    266e:	99 1f       	adc	r25, r25
    2670:	82 0f       	add	r24, r18
    2672:	93 1f       	adc	r25, r19
    2674:	fc 01       	movw	r30, r24
    2676:	e1 59       	subi	r30, 0x91	; 145
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	80 81       	ld	r24, Z
    267c:	61 e0       	ldi	r22, 0x01	; 1
    267e:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
    2682:	89 83       	std	Y+1, r24	; 0x01
    2684:	17 c0       	rjmp	.+46     	; 0x26b4 <Sev_PowerOff+0x90>
        }else{
        	 enuReturnLoc = DIO_enuWritePin(SEV_ConfigSet[u8sevIndex].common, Common_Cathode);
    2686:	8a 81       	ldd	r24, Y+2	; 0x02
    2688:	28 2f       	mov	r18, r24
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	c9 01       	movw	r24, r18
    268e:	88 0f       	add	r24, r24
    2690:	99 1f       	adc	r25, r25
    2692:	88 0f       	add	r24, r24
    2694:	99 1f       	adc	r25, r25
    2696:	88 0f       	add	r24, r24
    2698:	99 1f       	adc	r25, r25
    269a:	82 0f       	add	r24, r18
    269c:	93 1f       	adc	r25, r19
    269e:	fc 01       	movw	r30, r24
    26a0:	e1 59       	subi	r30, 0x91	; 145
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	80 81       	ld	r24, Z
    26a6:	60 e0       	ldi	r22, 0x00	; 0
    26a8:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
    26ac:	89 83       	std	Y+1, r24	; 0x01
    26ae:	02 c0       	rjmp	.+4      	; 0x26b4 <Sev_PowerOff+0x90>
        }
       
    }else{
        enuReturnLoc = PARAM_OUT_RANGE;
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	89 83       	std	Y+1, r24	; 0x01
    }
    return enuReturnLoc;
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    26b6:	0f 90       	pop	r0
    26b8:	0f 90       	pop	r0
    26ba:	cf 91       	pop	r28
    26bc:	df 91       	pop	r29
    26be:	08 95       	ret

000026c0 <PutOnLCD>:
#include "../../MCAL/DIO/DIO.h"
#include "LCD_interface.h"
#include "LCD_Extra.h"
u8 REG[8] = {LCD_D0, LCD_D1, LCD_D2, LCD_D3, LCD_D4, LCD_D5, LCD_D6, LCD_D7};

void PutOnLCD(u8* u8REG, u8 u8num){
    26c0:	df 93       	push	r29
    26c2:	cf 93       	push	r28
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	2c 97       	sbiw	r28, 0x0c	; 12
    26ca:	0f b6       	in	r0, 0x3f	; 63
    26cc:	f8 94       	cli
    26ce:	de bf       	out	0x3e, r29	; 62
    26d0:	0f be       	out	0x3f, r0	; 63
    26d2:	cd bf       	out	0x3d, r28	; 61
    26d4:	9b 87       	std	Y+11, r25	; 0x0b
    26d6:	8a 87       	std	Y+10, r24	; 0x0a
    26d8:	6c 87       	std	Y+12, r22	; 0x0c
    u8 u8Num[8]; //0x0011 1111
  	u8 cntr;
  	for(cntr = 0; cntr < 8; cntr++){
    26da:	19 82       	std	Y+1, r1	; 0x01
    26dc:	1b c0       	rjmp	.+54     	; 0x2714 <PutOnLCD+0x54>
  		u8Num[cntr] = GET_BIT(u8num, cntr);
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	48 2f       	mov	r20, r24
    26e2:	50 e0       	ldi	r21, 0x00	; 0
    26e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    26e6:	28 2f       	mov	r18, r24
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
    26ec:	88 2f       	mov	r24, r24
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	b9 01       	movw	r22, r18
    26f2:	02 c0       	rjmp	.+4      	; 0x26f8 <PutOnLCD+0x38>
    26f4:	75 95       	asr	r23
    26f6:	67 95       	ror	r22
    26f8:	8a 95       	dec	r24
    26fa:	e2 f7       	brpl	.-8      	; 0x26f4 <PutOnLCD+0x34>
    26fc:	cb 01       	movw	r24, r22
    26fe:	28 2f       	mov	r18, r24
    2700:	21 70       	andi	r18, 0x01	; 1
    2702:	ce 01       	movw	r24, r28
    2704:	02 96       	adiw	r24, 0x02	; 2
    2706:	fc 01       	movw	r30, r24
    2708:	e4 0f       	add	r30, r20
    270a:	f5 1f       	adc	r31, r21
    270c:	20 83       	st	Z, r18
u8 REG[8] = {LCD_D0, LCD_D1, LCD_D2, LCD_D3, LCD_D4, LCD_D5, LCD_D6, LCD_D7};

void PutOnLCD(u8* u8REG, u8 u8num){
    u8 u8Num[8]; //0x0011 1111
  	u8 cntr;
  	for(cntr = 0; cntr < 8; cntr++){
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	8f 5f       	subi	r24, 0xFF	; 255
    2712:	89 83       	std	Y+1, r24	; 0x01
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	88 30       	cpi	r24, 0x08	; 8
    2718:	10 f3       	brcs	.-60     	; 0x26de <PutOnLCD+0x1e>
  		u8Num[cntr] = GET_BIT(u8num, cntr);
  	}
    DIO_enuWriteGroup(u8REG, u8Num, 8);
    271a:	8a 85       	ldd	r24, Y+10	; 0x0a
    271c:	9b 85       	ldd	r25, Y+11	; 0x0b
    271e:	9e 01       	movw	r18, r28
    2720:	2e 5f       	subi	r18, 0xFE	; 254
    2722:	3f 4f       	sbci	r19, 0xFF	; 255
    2724:	b9 01       	movw	r22, r18
    2726:	48 e0       	ldi	r20, 0x08	; 8
    2728:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_enuWriteGroup>
}
    272c:	2c 96       	adiw	r28, 0x0c	; 12
    272e:	0f b6       	in	r0, 0x3f	; 63
    2730:	f8 94       	cli
    2732:	de bf       	out	0x3e, r29	; 62
    2734:	0f be       	out	0x3f, r0	; 63
    2736:	cd bf       	out	0x3d, r28	; 61
    2738:	cf 91       	pop	r28
    273a:	df 91       	pop	r29
    273c:	08 95       	ret

0000273e <LCD_vidInit>:
/* Description! Apply initialization sequence for LCD module                           */
/* Input      ! Nothing                                                                */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidInit(void)
{
    273e:	0f 93       	push	r16
    2740:	1f 93       	push	r17
    2742:	df 93       	push	r29
    2744:	cf 93       	push	r28
    2746:	cd b7       	in	r28, 0x3d	; 61
    2748:	de b7       	in	r29, 0x3e	; 62
    274a:	c4 55       	subi	r28, 0x54	; 84
    274c:	d0 40       	sbci	r29, 0x00	; 0
    274e:	0f b6       	in	r0, 0x3f	; 63
    2750:	f8 94       	cli
    2752:	de bf       	out	0x3e, r29	; 62
    2754:	0f be       	out	0x3f, r0	; 63
    2756:	cd bf       	out	0x3d, r28	; 61
    2758:	fe 01       	movw	r30, r28
    275a:	ef 5a       	subi	r30, 0xAF	; 175
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	a0 ef       	ldi	r26, 0xF0	; 240
    2764:	b1 e4       	ldi	r27, 0x41	; 65
    2766:	80 83       	st	Z, r24
    2768:	91 83       	std	Z+1, r25	; 0x01
    276a:	a2 83       	std	Z+2, r26	; 0x02
    276c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    276e:	8e 01       	movw	r16, r28
    2770:	03 5b       	subi	r16, 0xB3	; 179
    2772:	1f 4f       	sbci	r17, 0xFF	; 255
    2774:	fe 01       	movw	r30, r28
    2776:	ef 5a       	subi	r30, 0xAF	; 175
    2778:	ff 4f       	sbci	r31, 0xFF	; 255
    277a:	60 81       	ld	r22, Z
    277c:	71 81       	ldd	r23, Z+1	; 0x01
    277e:	82 81       	ldd	r24, Z+2	; 0x02
    2780:	93 81       	ldd	r25, Z+3	; 0x03
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	4a e7       	ldi	r20, 0x7A	; 122
    2788:	55 e4       	ldi	r21, 0x45	; 69
    278a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	f8 01       	movw	r30, r16
    2794:	80 83       	st	Z, r24
    2796:	91 83       	std	Z+1, r25	; 0x01
    2798:	a2 83       	std	Z+2, r26	; 0x02
    279a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    279c:	fe 01       	movw	r30, r28
    279e:	e3 5b       	subi	r30, 0xB3	; 179
    27a0:	ff 4f       	sbci	r31, 0xFF	; 255
    27a2:	60 81       	ld	r22, Z
    27a4:	71 81       	ldd	r23, Z+1	; 0x01
    27a6:	82 81       	ldd	r24, Z+2	; 0x02
    27a8:	93 81       	ldd	r25, Z+3	; 0x03
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	40 e8       	ldi	r20, 0x80	; 128
    27b0:	5f e3       	ldi	r21, 0x3F	; 63
    27b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27b6:	88 23       	and	r24, r24
    27b8:	44 f4       	brge	.+16     	; 0x27ca <LCD_vidInit+0x8c>
		__ticks = 1;
    27ba:	fe 01       	movw	r30, r28
    27bc:	e5 5b       	subi	r30, 0xB5	; 181
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	91 83       	std	Z+1, r25	; 0x01
    27c6:	80 83       	st	Z, r24
    27c8:	64 c0       	rjmp	.+200    	; 0x2892 <LCD_vidInit+0x154>
	else if (__tmp > 65535)
    27ca:	fe 01       	movw	r30, r28
    27cc:	e3 5b       	subi	r30, 0xB3	; 179
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	60 81       	ld	r22, Z
    27d2:	71 81       	ldd	r23, Z+1	; 0x01
    27d4:	82 81       	ldd	r24, Z+2	; 0x02
    27d6:	93 81       	ldd	r25, Z+3	; 0x03
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	3f ef       	ldi	r19, 0xFF	; 255
    27dc:	4f e7       	ldi	r20, 0x7F	; 127
    27de:	57 e4       	ldi	r21, 0x47	; 71
    27e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27e4:	18 16       	cp	r1, r24
    27e6:	0c f0       	brlt	.+2      	; 0x27ea <LCD_vidInit+0xac>
    27e8:	43 c0       	rjmp	.+134    	; 0x2870 <LCD_vidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ea:	fe 01       	movw	r30, r28
    27ec:	ef 5a       	subi	r30, 0xAF	; 175
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	60 81       	ld	r22, Z
    27f2:	71 81       	ldd	r23, Z+1	; 0x01
    27f4:	82 81       	ldd	r24, Z+2	; 0x02
    27f6:	93 81       	ldd	r25, Z+3	; 0x03
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	40 e2       	ldi	r20, 0x20	; 32
    27fe:	51 e4       	ldi	r21, 0x41	; 65
    2800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	8e 01       	movw	r16, r28
    280a:	05 5b       	subi	r16, 0xB5	; 181
    280c:	1f 4f       	sbci	r17, 0xFF	; 255
    280e:	bc 01       	movw	r22, r24
    2810:	cd 01       	movw	r24, r26
    2812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	f8 01       	movw	r30, r16
    281c:	91 83       	std	Z+1, r25	; 0x01
    281e:	80 83       	st	Z, r24
    2820:	1f c0       	rjmp	.+62     	; 0x2860 <LCD_vidInit+0x122>
    2822:	fe 01       	movw	r30, r28
    2824:	e7 5b       	subi	r30, 0xB7	; 183
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	80 e9       	ldi	r24, 0x90	; 144
    282a:	91 e0       	ldi	r25, 0x01	; 1
    282c:	91 83       	std	Z+1, r25	; 0x01
    282e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2830:	fe 01       	movw	r30, r28
    2832:	e7 5b       	subi	r30, 0xB7	; 183
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	80 81       	ld	r24, Z
    2838:	91 81       	ldd	r25, Z+1	; 0x01
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	f1 f7       	brne	.-4      	; 0x283a <LCD_vidInit+0xfc>
    283e:	fe 01       	movw	r30, r28
    2840:	e7 5b       	subi	r30, 0xB7	; 183
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	91 83       	std	Z+1, r25	; 0x01
    2846:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2848:	de 01       	movw	r26, r28
    284a:	a5 5b       	subi	r26, 0xB5	; 181
    284c:	bf 4f       	sbci	r27, 0xFF	; 255
    284e:	fe 01       	movw	r30, r28
    2850:	e5 5b       	subi	r30, 0xB5	; 181
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	80 81       	ld	r24, Z
    2856:	91 81       	ldd	r25, Z+1	; 0x01
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	11 96       	adiw	r26, 0x01	; 1
    285c:	9c 93       	st	X, r25
    285e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2860:	fe 01       	movw	r30, r28
    2862:	e5 5b       	subi	r30, 0xB5	; 181
    2864:	ff 4f       	sbci	r31, 0xFF	; 255
    2866:	80 81       	ld	r24, Z
    2868:	91 81       	ldd	r25, Z+1	; 0x01
    286a:	00 97       	sbiw	r24, 0x00	; 0
    286c:	d1 f6       	brne	.-76     	; 0x2822 <LCD_vidInit+0xe4>
    286e:	27 c0       	rjmp	.+78     	; 0x28be <LCD_vidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2870:	8e 01       	movw	r16, r28
    2872:	05 5b       	subi	r16, 0xB5	; 181
    2874:	1f 4f       	sbci	r17, 0xFF	; 255
    2876:	fe 01       	movw	r30, r28
    2878:	e3 5b       	subi	r30, 0xB3	; 179
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	60 81       	ld	r22, Z
    287e:	71 81       	ldd	r23, Z+1	; 0x01
    2880:	82 81       	ldd	r24, Z+2	; 0x02
    2882:	93 81       	ldd	r25, Z+3	; 0x03
    2884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	f8 01       	movw	r30, r16
    288e:	91 83       	std	Z+1, r25	; 0x01
    2890:	80 83       	st	Z, r24
    2892:	de 01       	movw	r26, r28
    2894:	a9 5b       	subi	r26, 0xB9	; 185
    2896:	bf 4f       	sbci	r27, 0xFF	; 255
    2898:	fe 01       	movw	r30, r28
    289a:	e5 5b       	subi	r30, 0xB5	; 181
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	80 81       	ld	r24, Z
    28a0:	91 81       	ldd	r25, Z+1	; 0x01
    28a2:	8d 93       	st	X+, r24
    28a4:	9c 93       	st	X, r25
    28a6:	fe 01       	movw	r30, r28
    28a8:	e9 5b       	subi	r30, 0xB9	; 185
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	80 81       	ld	r24, Z
    28ae:	91 81       	ldd	r25, Z+1	; 0x01
    28b0:	01 97       	sbiw	r24, 0x01	; 1
    28b2:	f1 f7       	brne	.-4      	; 0x28b0 <LCD_vidInit+0x172>
    28b4:	fe 01       	movw	r30, r28
    28b6:	e9 5b       	subi	r30, 0xB9	; 185
    28b8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ba:	91 83       	std	Z+1, r25	; 0x01
    28bc:	80 83       	st	Z, r24
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Return Home  */
	LCD_vidSendCommand(lcd_Home);
    28be:	82 e0       	ldi	r24, 0x02	; 2
    28c0:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <LCD_vidSendCommand>
    28c4:	fe 01       	movw	r30, r28
    28c6:	ed 5b       	subi	r30, 0xBD	; 189
    28c8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	a0 e7       	ldi	r26, 0x70	; 112
    28d0:	b1 e4       	ldi	r27, 0x41	; 65
    28d2:	80 83       	st	Z, r24
    28d4:	91 83       	std	Z+1, r25	; 0x01
    28d6:	a2 83       	std	Z+2, r26	; 0x02
    28d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28da:	8e 01       	movw	r16, r28
    28dc:	01 5c       	subi	r16, 0xC1	; 193
    28de:	1f 4f       	sbci	r17, 0xFF	; 255
    28e0:	fe 01       	movw	r30, r28
    28e2:	ed 5b       	subi	r30, 0xBD	; 189
    28e4:	ff 4f       	sbci	r31, 0xFF	; 255
    28e6:	60 81       	ld	r22, Z
    28e8:	71 81       	ldd	r23, Z+1	; 0x01
    28ea:	82 81       	ldd	r24, Z+2	; 0x02
    28ec:	93 81       	ldd	r25, Z+3	; 0x03
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	4a e7       	ldi	r20, 0x7A	; 122
    28f4:	55 e4       	ldi	r21, 0x45	; 69
    28f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	f8 01       	movw	r30, r16
    2900:	80 83       	st	Z, r24
    2902:	91 83       	std	Z+1, r25	; 0x01
    2904:	a2 83       	std	Z+2, r26	; 0x02
    2906:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2908:	fe 01       	movw	r30, r28
    290a:	ff 96       	adiw	r30, 0x3f	; 63
    290c:	60 81       	ld	r22, Z
    290e:	71 81       	ldd	r23, Z+1	; 0x01
    2910:	82 81       	ldd	r24, Z+2	; 0x02
    2912:	93 81       	ldd	r25, Z+3	; 0x03
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	40 e8       	ldi	r20, 0x80	; 128
    291a:	5f e3       	ldi	r21, 0x3F	; 63
    291c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2920:	88 23       	and	r24, r24
    2922:	2c f4       	brge	.+10     	; 0x292e <LCD_vidInit+0x1f0>
		__ticks = 1;
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	9e af       	std	Y+62, r25	; 0x3e
    292a:	8d af       	std	Y+61, r24	; 0x3d
    292c:	46 c0       	rjmp	.+140    	; 0x29ba <LCD_vidInit+0x27c>
	else if (__tmp > 65535)
    292e:	fe 01       	movw	r30, r28
    2930:	ff 96       	adiw	r30, 0x3f	; 63
    2932:	60 81       	ld	r22, Z
    2934:	71 81       	ldd	r23, Z+1	; 0x01
    2936:	82 81       	ldd	r24, Z+2	; 0x02
    2938:	93 81       	ldd	r25, Z+3	; 0x03
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	3f ef       	ldi	r19, 0xFF	; 255
    293e:	4f e7       	ldi	r20, 0x7F	; 127
    2940:	57 e4       	ldi	r21, 0x47	; 71
    2942:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2946:	18 16       	cp	r1, r24
    2948:	64 f5       	brge	.+88     	; 0x29a2 <LCD_vidInit+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294a:	fe 01       	movw	r30, r28
    294c:	ed 5b       	subi	r30, 0xBD	; 189
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	60 81       	ld	r22, Z
    2952:	71 81       	ldd	r23, Z+1	; 0x01
    2954:	82 81       	ldd	r24, Z+2	; 0x02
    2956:	93 81       	ldd	r25, Z+3	; 0x03
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	40 e2       	ldi	r20, 0x20	; 32
    295e:	51 e4       	ldi	r21, 0x41	; 65
    2960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	bc 01       	movw	r22, r24
    296a:	cd 01       	movw	r24, r26
    296c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	9e af       	std	Y+62, r25	; 0x3e
    2976:	8d af       	std	Y+61, r24	; 0x3d
    2978:	0f c0       	rjmp	.+30     	; 0x2998 <LCD_vidInit+0x25a>
    297a:	80 e9       	ldi	r24, 0x90	; 144
    297c:	91 e0       	ldi	r25, 0x01	; 1
    297e:	9c af       	std	Y+60, r25	; 0x3c
    2980:	8b af       	std	Y+59, r24	; 0x3b
    2982:	8b ad       	ldd	r24, Y+59	; 0x3b
    2984:	9c ad       	ldd	r25, Y+60	; 0x3c
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	f1 f7       	brne	.-4      	; 0x2986 <LCD_vidInit+0x248>
    298a:	9c af       	std	Y+60, r25	; 0x3c
    298c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    298e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2990:	9e ad       	ldd	r25, Y+62	; 0x3e
    2992:	01 97       	sbiw	r24, 0x01	; 1
    2994:	9e af       	std	Y+62, r25	; 0x3e
    2996:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2998:	8d ad       	ldd	r24, Y+61	; 0x3d
    299a:	9e ad       	ldd	r25, Y+62	; 0x3e
    299c:	00 97       	sbiw	r24, 0x00	; 0
    299e:	69 f7       	brne	.-38     	; 0x297a <LCD_vidInit+0x23c>
    29a0:	16 c0       	rjmp	.+44     	; 0x29ce <LCD_vidInit+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a2:	fe 01       	movw	r30, r28
    29a4:	ff 96       	adiw	r30, 0x3f	; 63
    29a6:	60 81       	ld	r22, Z
    29a8:	71 81       	ldd	r23, Z+1	; 0x01
    29aa:	82 81       	ldd	r24, Z+2	; 0x02
    29ac:	93 81       	ldd	r25, Z+3	; 0x03
    29ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	9e af       	std	Y+62, r25	; 0x3e
    29b8:	8d af       	std	Y+61, r24	; 0x3d
    29ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    29bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    29be:	9a af       	std	Y+58, r25	; 0x3a
    29c0:	89 af       	std	Y+57, r24	; 0x39
    29c2:	89 ad       	ldd	r24, Y+57	; 0x39
    29c4:	9a ad       	ldd	r25, Y+58	; 0x3a
    29c6:	01 97       	sbiw	r24, 0x01	; 1
    29c8:	f1 f7       	brne	.-4      	; 0x29c6 <LCD_vidInit+0x288>
    29ca:	9a af       	std	Y+58, r25	; 0x3a
    29cc:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(15);

	/* Function Set  */
	LCD_vidSendCommand(lcd_FunctionSet8bit);
    29ce:	88 e3       	ldi	r24, 0x38	; 56
    29d0:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <LCD_vidSendCommand>
    29d4:	80 e0       	ldi	r24, 0x00	; 0
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	a0 e8       	ldi	r26, 0x80	; 128
    29da:	bf e3       	ldi	r27, 0x3F	; 63
    29dc:	8d ab       	std	Y+53, r24	; 0x35
    29de:	9e ab       	std	Y+54, r25	; 0x36
    29e0:	af ab       	std	Y+55, r26	; 0x37
    29e2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29e4:	6d a9       	ldd	r22, Y+53	; 0x35
    29e6:	7e a9       	ldd	r23, Y+54	; 0x36
    29e8:	8f a9       	ldd	r24, Y+55	; 0x37
    29ea:	98 ad       	ldd	r25, Y+56	; 0x38
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	4a e7       	ldi	r20, 0x7A	; 122
    29f2:	55 e4       	ldi	r21, 0x45	; 69
    29f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f8:	dc 01       	movw	r26, r24
    29fa:	cb 01       	movw	r24, r22
    29fc:	89 ab       	std	Y+49, r24	; 0x31
    29fe:	9a ab       	std	Y+50, r25	; 0x32
    2a00:	ab ab       	std	Y+51, r26	; 0x33
    2a02:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a04:	69 a9       	ldd	r22, Y+49	; 0x31
    2a06:	7a a9       	ldd	r23, Y+50	; 0x32
    2a08:	8b a9       	ldd	r24, Y+51	; 0x33
    2a0a:	9c a9       	ldd	r25, Y+52	; 0x34
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	40 e8       	ldi	r20, 0x80	; 128
    2a12:	5f e3       	ldi	r21, 0x3F	; 63
    2a14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a18:	88 23       	and	r24, r24
    2a1a:	2c f4       	brge	.+10     	; 0x2a26 <LCD_vidInit+0x2e8>
		__ticks = 1;
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	98 ab       	std	Y+48, r25	; 0x30
    2a22:	8f a7       	std	Y+47, r24	; 0x2f
    2a24:	3f c0       	rjmp	.+126    	; 0x2aa4 <LCD_vidInit+0x366>
	else if (__tmp > 65535)
    2a26:	69 a9       	ldd	r22, Y+49	; 0x31
    2a28:	7a a9       	ldd	r23, Y+50	; 0x32
    2a2a:	8b a9       	ldd	r24, Y+51	; 0x33
    2a2c:	9c a9       	ldd	r25, Y+52	; 0x34
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	3f ef       	ldi	r19, 0xFF	; 255
    2a32:	4f e7       	ldi	r20, 0x7F	; 127
    2a34:	57 e4       	ldi	r21, 0x47	; 71
    2a36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a3a:	18 16       	cp	r1, r24
    2a3c:	4c f5       	brge	.+82     	; 0x2a90 <LCD_vidInit+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a3e:	6d a9       	ldd	r22, Y+53	; 0x35
    2a40:	7e a9       	ldd	r23, Y+54	; 0x36
    2a42:	8f a9       	ldd	r24, Y+55	; 0x37
    2a44:	98 ad       	ldd	r25, Y+56	; 0x38
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	40 e2       	ldi	r20, 0x20	; 32
    2a4c:	51 e4       	ldi	r21, 0x41	; 65
    2a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a52:	dc 01       	movw	r26, r24
    2a54:	cb 01       	movw	r24, r22
    2a56:	bc 01       	movw	r22, r24
    2a58:	cd 01       	movw	r24, r26
    2a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	98 ab       	std	Y+48, r25	; 0x30
    2a64:	8f a7       	std	Y+47, r24	; 0x2f
    2a66:	0f c0       	rjmp	.+30     	; 0x2a86 <LCD_vidInit+0x348>
    2a68:	80 e9       	ldi	r24, 0x90	; 144
    2a6a:	91 e0       	ldi	r25, 0x01	; 1
    2a6c:	9e a7       	std	Y+46, r25	; 0x2e
    2a6e:	8d a7       	std	Y+45, r24	; 0x2d
    2a70:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a72:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a74:	01 97       	sbiw	r24, 0x01	; 1
    2a76:	f1 f7       	brne	.-4      	; 0x2a74 <LCD_vidInit+0x336>
    2a78:	9e a7       	std	Y+46, r25	; 0x2e
    2a7a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a7e:	98 a9       	ldd	r25, Y+48	; 0x30
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	98 ab       	std	Y+48, r25	; 0x30
    2a84:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a86:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a88:	98 a9       	ldd	r25, Y+48	; 0x30
    2a8a:	00 97       	sbiw	r24, 0x00	; 0
    2a8c:	69 f7       	brne	.-38     	; 0x2a68 <LCD_vidInit+0x32a>
    2a8e:	14 c0       	rjmp	.+40     	; 0x2ab8 <LCD_vidInit+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a90:	69 a9       	ldd	r22, Y+49	; 0x31
    2a92:	7a a9       	ldd	r23, Y+50	; 0x32
    2a94:	8b a9       	ldd	r24, Y+51	; 0x33
    2a96:	9c a9       	ldd	r25, Y+52	; 0x34
    2a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	98 ab       	std	Y+48, r25	; 0x30
    2aa2:	8f a7       	std	Y+47, r24	; 0x2f
    2aa4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aa6:	98 a9       	ldd	r25, Y+48	; 0x30
    2aa8:	9c a7       	std	Y+44, r25	; 0x2c
    2aaa:	8b a7       	std	Y+43, r24	; 0x2b
    2aac:	8b a5       	ldd	r24, Y+43	; 0x2b
    2aae:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ab0:	01 97       	sbiw	r24, 0x01	; 1
    2ab2:	f1 f7       	brne	.-4      	; 0x2ab0 <LCD_vidInit+0x372>
    2ab4:	9c a7       	std	Y+44, r25	; 0x2c
    2ab6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/* Display ON OFF Control */
	LCD_vidSendCommand(lcd_DisplayOn);
    2ab8:	8c e0       	ldi	r24, 0x0C	; 12
    2aba:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <LCD_vidSendCommand>
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	a0 e8       	ldi	r26, 0x80	; 128
    2ac4:	bf e3       	ldi	r27, 0x3F	; 63
    2ac6:	8f a3       	std	Y+39, r24	; 0x27
    2ac8:	98 a7       	std	Y+40, r25	; 0x28
    2aca:	a9 a7       	std	Y+41, r26	; 0x29
    2acc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ace:	6f a1       	ldd	r22, Y+39	; 0x27
    2ad0:	78 a5       	ldd	r23, Y+40	; 0x28
    2ad2:	89 a5       	ldd	r24, Y+41	; 0x29
    2ad4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	4a e7       	ldi	r20, 0x7A	; 122
    2adc:	55 e4       	ldi	r21, 0x45	; 69
    2ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	8b a3       	std	Y+35, r24	; 0x23
    2ae8:	9c a3       	std	Y+36, r25	; 0x24
    2aea:	ad a3       	std	Y+37, r26	; 0x25
    2aec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2aee:	6b a1       	ldd	r22, Y+35	; 0x23
    2af0:	7c a1       	ldd	r23, Y+36	; 0x24
    2af2:	8d a1       	ldd	r24, Y+37	; 0x25
    2af4:	9e a1       	ldd	r25, Y+38	; 0x26
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	40 e8       	ldi	r20, 0x80	; 128
    2afc:	5f e3       	ldi	r21, 0x3F	; 63
    2afe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b02:	88 23       	and	r24, r24
    2b04:	2c f4       	brge	.+10     	; 0x2b10 <LCD_vidInit+0x3d2>
		__ticks = 1;
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	9a a3       	std	Y+34, r25	; 0x22
    2b0c:	89 a3       	std	Y+33, r24	; 0x21
    2b0e:	3f c0       	rjmp	.+126    	; 0x2b8e <LCD_vidInit+0x450>
	else if (__tmp > 65535)
    2b10:	6b a1       	ldd	r22, Y+35	; 0x23
    2b12:	7c a1       	ldd	r23, Y+36	; 0x24
    2b14:	8d a1       	ldd	r24, Y+37	; 0x25
    2b16:	9e a1       	ldd	r25, Y+38	; 0x26
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	3f ef       	ldi	r19, 0xFF	; 255
    2b1c:	4f e7       	ldi	r20, 0x7F	; 127
    2b1e:	57 e4       	ldi	r21, 0x47	; 71
    2b20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b24:	18 16       	cp	r1, r24
    2b26:	4c f5       	brge	.+82     	; 0x2b7a <LCD_vidInit+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b28:	6f a1       	ldd	r22, Y+39	; 0x27
    2b2a:	78 a5       	ldd	r23, Y+40	; 0x28
    2b2c:	89 a5       	ldd	r24, Y+41	; 0x29
    2b2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	40 e2       	ldi	r20, 0x20	; 32
    2b36:	51 e4       	ldi	r21, 0x41	; 65
    2b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	bc 01       	movw	r22, r24
    2b42:	cd 01       	movw	r24, r26
    2b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	9a a3       	std	Y+34, r25	; 0x22
    2b4e:	89 a3       	std	Y+33, r24	; 0x21
    2b50:	0f c0       	rjmp	.+30     	; 0x2b70 <LCD_vidInit+0x432>
    2b52:	80 e9       	ldi	r24, 0x90	; 144
    2b54:	91 e0       	ldi	r25, 0x01	; 1
    2b56:	98 a3       	std	Y+32, r25	; 0x20
    2b58:	8f 8f       	std	Y+31, r24	; 0x1f
    2b5a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b5c:	98 a1       	ldd	r25, Y+32	; 0x20
    2b5e:	01 97       	sbiw	r24, 0x01	; 1
    2b60:	f1 f7       	brne	.-4      	; 0x2b5e <LCD_vidInit+0x420>
    2b62:	98 a3       	std	Y+32, r25	; 0x20
    2b64:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b66:	89 a1       	ldd	r24, Y+33	; 0x21
    2b68:	9a a1       	ldd	r25, Y+34	; 0x22
    2b6a:	01 97       	sbiw	r24, 0x01	; 1
    2b6c:	9a a3       	std	Y+34, r25	; 0x22
    2b6e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b70:	89 a1       	ldd	r24, Y+33	; 0x21
    2b72:	9a a1       	ldd	r25, Y+34	; 0x22
    2b74:	00 97       	sbiw	r24, 0x00	; 0
    2b76:	69 f7       	brne	.-38     	; 0x2b52 <LCD_vidInit+0x414>
    2b78:	14 c0       	rjmp	.+40     	; 0x2ba2 <LCD_vidInit+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b7a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b7c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b7e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b80:	9e a1       	ldd	r25, Y+38	; 0x26
    2b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	9a a3       	std	Y+34, r25	; 0x22
    2b8c:	89 a3       	std	Y+33, r24	; 0x21
    2b8e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b90:	9a a1       	ldd	r25, Y+34	; 0x22
    2b92:	9e 8f       	std	Y+30, r25	; 0x1e
    2b94:	8d 8f       	std	Y+29, r24	; 0x1d
    2b96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b98:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	f1 f7       	brne	.-4      	; 0x2b9a <LCD_vidInit+0x45c>
    2b9e:	9e 8f       	std	Y+30, r25	; 0x1e
    2ba0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* Clear Display */
	LCD_vidSendCommand(lcd_Clear);
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <LCD_vidSendCommand>
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	a0 e7       	ldi	r26, 0x70	; 112
    2bae:	b1 e4       	ldi	r27, 0x41	; 65
    2bb0:	89 8f       	std	Y+25, r24	; 0x19
    2bb2:	9a 8f       	std	Y+26, r25	; 0x1a
    2bb4:	ab 8f       	std	Y+27, r26	; 0x1b
    2bb6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bb8:	69 8d       	ldd	r22, Y+25	; 0x19
    2bba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	4a e7       	ldi	r20, 0x7A	; 122
    2bc6:	55 e4       	ldi	r21, 0x45	; 69
    2bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	8d 8b       	std	Y+21, r24	; 0x15
    2bd2:	9e 8b       	std	Y+22, r25	; 0x16
    2bd4:	af 8b       	std	Y+23, r26	; 0x17
    2bd6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bd8:	6d 89       	ldd	r22, Y+21	; 0x15
    2bda:	7e 89       	ldd	r23, Y+22	; 0x16
    2bdc:	8f 89       	ldd	r24, Y+23	; 0x17
    2bde:	98 8d       	ldd	r25, Y+24	; 0x18
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	40 e8       	ldi	r20, 0x80	; 128
    2be6:	5f e3       	ldi	r21, 0x3F	; 63
    2be8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bec:	88 23       	and	r24, r24
    2bee:	2c f4       	brge	.+10     	; 0x2bfa <LCD_vidInit+0x4bc>
		__ticks = 1;
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	9c 8b       	std	Y+20, r25	; 0x14
    2bf6:	8b 8b       	std	Y+19, r24	; 0x13
    2bf8:	3f c0       	rjmp	.+126    	; 0x2c78 <LCD_vidInit+0x53a>
	else if (__tmp > 65535)
    2bfa:	6d 89       	ldd	r22, Y+21	; 0x15
    2bfc:	7e 89       	ldd	r23, Y+22	; 0x16
    2bfe:	8f 89       	ldd	r24, Y+23	; 0x17
    2c00:	98 8d       	ldd	r25, Y+24	; 0x18
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	3f ef       	ldi	r19, 0xFF	; 255
    2c06:	4f e7       	ldi	r20, 0x7F	; 127
    2c08:	57 e4       	ldi	r21, 0x47	; 71
    2c0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c0e:	18 16       	cp	r1, r24
    2c10:	4c f5       	brge	.+82     	; 0x2c64 <LCD_vidInit+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c12:	69 8d       	ldd	r22, Y+25	; 0x19
    2c14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	40 e2       	ldi	r20, 0x20	; 32
    2c20:	51 e4       	ldi	r21, 0x41	; 65
    2c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	bc 01       	movw	r22, r24
    2c2c:	cd 01       	movw	r24, r26
    2c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	9c 8b       	std	Y+20, r25	; 0x14
    2c38:	8b 8b       	std	Y+19, r24	; 0x13
    2c3a:	0f c0       	rjmp	.+30     	; 0x2c5a <LCD_vidInit+0x51c>
    2c3c:	80 e9       	ldi	r24, 0x90	; 144
    2c3e:	91 e0       	ldi	r25, 0x01	; 1
    2c40:	9a 8b       	std	Y+18, r25	; 0x12
    2c42:	89 8b       	std	Y+17, r24	; 0x11
    2c44:	89 89       	ldd	r24, Y+17	; 0x11
    2c46:	9a 89       	ldd	r25, Y+18	; 0x12
    2c48:	01 97       	sbiw	r24, 0x01	; 1
    2c4a:	f1 f7       	brne	.-4      	; 0x2c48 <LCD_vidInit+0x50a>
    2c4c:	9a 8b       	std	Y+18, r25	; 0x12
    2c4e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c50:	8b 89       	ldd	r24, Y+19	; 0x13
    2c52:	9c 89       	ldd	r25, Y+20	; 0x14
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	9c 8b       	std	Y+20, r25	; 0x14
    2c58:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c5e:	00 97       	sbiw	r24, 0x00	; 0
    2c60:	69 f7       	brne	.-38     	; 0x2c3c <LCD_vidInit+0x4fe>
    2c62:	14 c0       	rjmp	.+40     	; 0x2c8c <LCD_vidInit+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c64:	6d 89       	ldd	r22, Y+21	; 0x15
    2c66:	7e 89       	ldd	r23, Y+22	; 0x16
    2c68:	8f 89       	ldd	r24, Y+23	; 0x17
    2c6a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	9c 8b       	std	Y+20, r25	; 0x14
    2c76:	8b 8b       	std	Y+19, r24	; 0x13
    2c78:	8b 89       	ldd	r24, Y+19	; 0x13
    2c7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c7c:	98 8b       	std	Y+16, r25	; 0x10
    2c7e:	8f 87       	std	Y+15, r24	; 0x0f
    2c80:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c82:	98 89       	ldd	r25, Y+16	; 0x10
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	f1 f7       	brne	.-4      	; 0x2c84 <LCD_vidInit+0x546>
    2c88:	98 8b       	std	Y+16, r25	; 0x10
    2c8a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(15);

	/* Entry Mode Set  */
	LCD_vidSendCommand(lcd_EntryMode);
    2c8c:	86 e0       	ldi	r24, 0x06	; 6
    2c8e:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <LCD_vidSendCommand>
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	a0 e0       	ldi	r26, 0x00	; 0
    2c98:	b0 e4       	ldi	r27, 0x40	; 64
    2c9a:	8b 87       	std	Y+11, r24	; 0x0b
    2c9c:	9c 87       	std	Y+12, r25	; 0x0c
    2c9e:	ad 87       	std	Y+13, r26	; 0x0d
    2ca0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ca4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	4a e7       	ldi	r20, 0x7A	; 122
    2cb0:	55 e4       	ldi	r21, 0x45	; 69
    2cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	8f 83       	std	Y+7, r24	; 0x07
    2cbc:	98 87       	std	Y+8, r25	; 0x08
    2cbe:	a9 87       	std	Y+9, r26	; 0x09
    2cc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc4:	78 85       	ldd	r23, Y+8	; 0x08
    2cc6:	89 85       	ldd	r24, Y+9	; 0x09
    2cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	40 e8       	ldi	r20, 0x80	; 128
    2cd0:	5f e3       	ldi	r21, 0x3F	; 63
    2cd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cd6:	88 23       	and	r24, r24
    2cd8:	2c f4       	brge	.+10     	; 0x2ce4 <LCD_vidInit+0x5a6>
		__ticks = 1;
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	9e 83       	std	Y+6, r25	; 0x06
    2ce0:	8d 83       	std	Y+5, r24	; 0x05
    2ce2:	3f c0       	rjmp	.+126    	; 0x2d62 <LCD_vidInit+0x624>
	else if (__tmp > 65535)
    2ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce6:	78 85       	ldd	r23, Y+8	; 0x08
    2ce8:	89 85       	ldd	r24, Y+9	; 0x09
    2cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	3f ef       	ldi	r19, 0xFF	; 255
    2cf0:	4f e7       	ldi	r20, 0x7F	; 127
    2cf2:	57 e4       	ldi	r21, 0x47	; 71
    2cf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cf8:	18 16       	cp	r1, r24
    2cfa:	4c f5       	brge	.+82     	; 0x2d4e <LCD_vidInit+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	40 e2       	ldi	r20, 0x20	; 32
    2d0a:	51 e4       	ldi	r21, 0x41	; 65
    2d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	bc 01       	movw	r22, r24
    2d16:	cd 01       	movw	r24, r26
    2d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	9e 83       	std	Y+6, r25	; 0x06
    2d22:	8d 83       	std	Y+5, r24	; 0x05
    2d24:	0f c0       	rjmp	.+30     	; 0x2d44 <LCD_vidInit+0x606>
    2d26:	80 e9       	ldi	r24, 0x90	; 144
    2d28:	91 e0       	ldi	r25, 0x01	; 1
    2d2a:	9c 83       	std	Y+4, r25	; 0x04
    2d2c:	8b 83       	std	Y+3, r24	; 0x03
    2d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d30:	9c 81       	ldd	r25, Y+4	; 0x04
    2d32:	01 97       	sbiw	r24, 0x01	; 1
    2d34:	f1 f7       	brne	.-4      	; 0x2d32 <LCD_vidInit+0x5f4>
    2d36:	9c 83       	std	Y+4, r25	; 0x04
    2d38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	9e 83       	std	Y+6, r25	; 0x06
    2d42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d44:	8d 81       	ldd	r24, Y+5	; 0x05
    2d46:	9e 81       	ldd	r25, Y+6	; 0x06
    2d48:	00 97       	sbiw	r24, 0x00	; 0
    2d4a:	69 f7       	brne	.-38     	; 0x2d26 <LCD_vidInit+0x5e8>
    2d4c:	14 c0       	rjmp	.+40     	; 0x2d76 <LCD_vidInit+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d50:	78 85       	ldd	r23, Y+8	; 0x08
    2d52:	89 85       	ldd	r24, Y+9	; 0x09
    2d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	9e 83       	std	Y+6, r25	; 0x06
    2d60:	8d 83       	std	Y+5, r24	; 0x05
    2d62:	8d 81       	ldd	r24, Y+5	; 0x05
    2d64:	9e 81       	ldd	r25, Y+6	; 0x06
    2d66:	9a 83       	std	Y+2, r25	; 0x02
    2d68:	89 83       	std	Y+1, r24	; 0x01
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <LCD_vidInit+0x630>
    2d72:	9a 83       	std	Y+2, r25	; 0x02
    2d74:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    2d76:	cc 5a       	subi	r28, 0xAC	; 172
    2d78:	df 4f       	sbci	r29, 0xFF	; 255
    2d7a:	0f b6       	in	r0, 0x3f	; 63
    2d7c:	f8 94       	cli
    2d7e:	de bf       	out	0x3e, r29	; 62
    2d80:	0f be       	out	0x3f, r0	; 63
    2d82:	cd bf       	out	0x3d, r28	; 61
    2d84:	cf 91       	pop	r28
    2d86:	df 91       	pop	r29
    2d88:	1f 91       	pop	r17
    2d8a:	0f 91       	pop	r16
    2d8c:	08 95       	ret

00002d8e <LCD_vidSendCommand>:
/* Description! Interface to send the configuration commands to the LCD Driver         */
/* Input      ! Command number                                                         */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidSendCommand(u8 u8CmdCpy)
{
    2d8e:	df 93       	push	r29
    2d90:	cf 93       	push	r28
    2d92:	cd b7       	in	r28, 0x3d	; 61
    2d94:	de b7       	in	r29, 0x3e	; 62
    2d96:	6d 97       	sbiw	r28, 0x1d	; 29
    2d98:	0f b6       	in	r0, 0x3f	; 63
    2d9a:	f8 94       	cli
    2d9c:	de bf       	out	0x3e, r29	; 62
    2d9e:	0f be       	out	0x3f, r0	; 63
    2da0:	cd bf       	out	0x3d, r28	; 61
    2da2:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Set RS to LOW */
	DIO_enuWritePin(LCD_RS, DIO_LOW);
    2da4:	85 e0       	ldi	r24, 0x05	; 5
    2da6:	60 e0       	ldi	r22, 0x00	; 0
    2da8:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>

	/* Set R/W to LOW */
	DIO_enuWritePin(LCD_RW, DIO_LOW);
    2dac:	84 e0       	ldi	r24, 0x04	; 4
    2dae:	60 e0       	ldi	r22, 0x00	; 0
    2db0:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>

	/* Set E to HIGH  */
	DIO_enuWritePin(LCD_EN, DIO_HIGH);
    2db4:	83 e0       	ldi	r24, 0x03	; 3
    2db6:	61 e0       	ldi	r22, 0x01	; 1
    2db8:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>

	/* Load Command on Data bus */

	PutOnLCD(REG, u8CmdCpy);
    2dbc:	8a e7       	ldi	r24, 0x7A	; 122
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2dc2:	0e 94 60 13 	call	0x26c0	; 0x26c0 <PutOnLCD>



	/* Set E to LOW */
	DIO_enuWritePin(LCD_EN, DIO_LOW);
    2dc6:	83 e0       	ldi	r24, 0x03	; 3
    2dc8:	60 e0       	ldi	r22, 0x00	; 0
    2dca:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
    2dce:	80 e0       	ldi	r24, 0x00	; 0
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	a0 ea       	ldi	r26, 0xA0	; 160
    2dd4:	b0 e4       	ldi	r27, 0x40	; 64
    2dd6:	89 8f       	std	Y+25, r24	; 0x19
    2dd8:	9a 8f       	std	Y+26, r25	; 0x1a
    2dda:	ab 8f       	std	Y+27, r26	; 0x1b
    2ddc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dde:	69 8d       	ldd	r22, Y+25	; 0x19
    2de0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2de2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2de4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	4a e7       	ldi	r20, 0x7A	; 122
    2dec:	55 e4       	ldi	r21, 0x45	; 69
    2dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	8d 8b       	std	Y+21, r24	; 0x15
    2df8:	9e 8b       	std	Y+22, r25	; 0x16
    2dfa:	af 8b       	std	Y+23, r26	; 0x17
    2dfc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dfe:	6d 89       	ldd	r22, Y+21	; 0x15
    2e00:	7e 89       	ldd	r23, Y+22	; 0x16
    2e02:	8f 89       	ldd	r24, Y+23	; 0x17
    2e04:	98 8d       	ldd	r25, Y+24	; 0x18
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	40 e8       	ldi	r20, 0x80	; 128
    2e0c:	5f e3       	ldi	r21, 0x3F	; 63
    2e0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e12:	88 23       	and	r24, r24
    2e14:	2c f4       	brge	.+10     	; 0x2e20 <LCD_vidSendCommand+0x92>
		__ticks = 1;
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	9c 8b       	std	Y+20, r25	; 0x14
    2e1c:	8b 8b       	std	Y+19, r24	; 0x13
    2e1e:	3f c0       	rjmp	.+126    	; 0x2e9e <LCD_vidSendCommand+0x110>
	else if (__tmp > 65535)
    2e20:	6d 89       	ldd	r22, Y+21	; 0x15
    2e22:	7e 89       	ldd	r23, Y+22	; 0x16
    2e24:	8f 89       	ldd	r24, Y+23	; 0x17
    2e26:	98 8d       	ldd	r25, Y+24	; 0x18
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	3f ef       	ldi	r19, 0xFF	; 255
    2e2c:	4f e7       	ldi	r20, 0x7F	; 127
    2e2e:	57 e4       	ldi	r21, 0x47	; 71
    2e30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e34:	18 16       	cp	r1, r24
    2e36:	4c f5       	brge	.+82     	; 0x2e8a <LCD_vidSendCommand+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e38:	69 8d       	ldd	r22, Y+25	; 0x19
    2e3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	40 e2       	ldi	r20, 0x20	; 32
    2e46:	51 e4       	ldi	r21, 0x41	; 65
    2e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	bc 01       	movw	r22, r24
    2e52:	cd 01       	movw	r24, r26
    2e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	9c 8b       	std	Y+20, r25	; 0x14
    2e5e:	8b 8b       	std	Y+19, r24	; 0x13
    2e60:	0f c0       	rjmp	.+30     	; 0x2e80 <LCD_vidSendCommand+0xf2>
    2e62:	80 e9       	ldi	r24, 0x90	; 144
    2e64:	91 e0       	ldi	r25, 0x01	; 1
    2e66:	9a 8b       	std	Y+18, r25	; 0x12
    2e68:	89 8b       	std	Y+17, r24	; 0x11
    2e6a:	89 89       	ldd	r24, Y+17	; 0x11
    2e6c:	9a 89       	ldd	r25, Y+18	; 0x12
    2e6e:	01 97       	sbiw	r24, 0x01	; 1
    2e70:	f1 f7       	brne	.-4      	; 0x2e6e <LCD_vidSendCommand+0xe0>
    2e72:	9a 8b       	std	Y+18, r25	; 0x12
    2e74:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e76:	8b 89       	ldd	r24, Y+19	; 0x13
    2e78:	9c 89       	ldd	r25, Y+20	; 0x14
    2e7a:	01 97       	sbiw	r24, 0x01	; 1
    2e7c:	9c 8b       	std	Y+20, r25	; 0x14
    2e7e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e80:	8b 89       	ldd	r24, Y+19	; 0x13
    2e82:	9c 89       	ldd	r25, Y+20	; 0x14
    2e84:	00 97       	sbiw	r24, 0x00	; 0
    2e86:	69 f7       	brne	.-38     	; 0x2e62 <LCD_vidSendCommand+0xd4>
    2e88:	14 c0       	rjmp	.+40     	; 0x2eb2 <LCD_vidSendCommand+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e90:	98 8d       	ldd	r25, Y+24	; 0x18
    2e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	9c 8b       	std	Y+20, r25	; 0x14
    2e9c:	8b 8b       	std	Y+19, r24	; 0x13
    2e9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2ea0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ea2:	98 8b       	std	Y+16, r25	; 0x10
    2ea4:	8f 87       	std	Y+15, r24	; 0x0f
    2ea6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ea8:	98 89       	ldd	r25, Y+16	; 0x10
    2eaa:	01 97       	sbiw	r24, 0x01	; 1
    2eac:	f1 f7       	brne	.-4      	; 0x2eaa <LCD_vidSendCommand+0x11c>
    2eae:	98 8b       	std	Y+16, r25	; 0x10
    2eb0:	8f 87       	std	Y+15, r24	; 0x0f

	/* Wait for E to settle */
	_delay_ms(5);

	/* Set E to HIGH */
	DIO_enuWritePin(LCD_EN, DIO_HIGH);
    2eb2:	83 e0       	ldi	r24, 0x03	; 3
    2eb4:	61 e0       	ldi	r22, 0x01	; 1
    2eb6:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	a0 e2       	ldi	r26, 0x20	; 32
    2ec0:	b1 e4       	ldi	r27, 0x41	; 65
    2ec2:	8b 87       	std	Y+11, r24	; 0x0b
    2ec4:	9c 87       	std	Y+12, r25	; 0x0c
    2ec6:	ad 87       	std	Y+13, r26	; 0x0d
    2ec8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ecc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ece:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	4a e7       	ldi	r20, 0x7A	; 122
    2ed8:	55 e4       	ldi	r21, 0x45	; 69
    2eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	8f 83       	std	Y+7, r24	; 0x07
    2ee4:	98 87       	std	Y+8, r25	; 0x08
    2ee6:	a9 87       	std	Y+9, r26	; 0x09
    2ee8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eea:	6f 81       	ldd	r22, Y+7	; 0x07
    2eec:	78 85       	ldd	r23, Y+8	; 0x08
    2eee:	89 85       	ldd	r24, Y+9	; 0x09
    2ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	40 e8       	ldi	r20, 0x80	; 128
    2ef8:	5f e3       	ldi	r21, 0x3F	; 63
    2efa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2efe:	88 23       	and	r24, r24
    2f00:	2c f4       	brge	.+10     	; 0x2f0c <LCD_vidSendCommand+0x17e>
		__ticks = 1;
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	9e 83       	std	Y+6, r25	; 0x06
    2f08:	8d 83       	std	Y+5, r24	; 0x05
    2f0a:	3f c0       	rjmp	.+126    	; 0x2f8a <LCD_vidSendCommand+0x1fc>
	else if (__tmp > 65535)
    2f0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f0e:	78 85       	ldd	r23, Y+8	; 0x08
    2f10:	89 85       	ldd	r24, Y+9	; 0x09
    2f12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	3f ef       	ldi	r19, 0xFF	; 255
    2f18:	4f e7       	ldi	r20, 0x7F	; 127
    2f1a:	57 e4       	ldi	r21, 0x47	; 71
    2f1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f20:	18 16       	cp	r1, r24
    2f22:	4c f5       	brge	.+82     	; 0x2f76 <LCD_vidSendCommand+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	40 e2       	ldi	r20, 0x20	; 32
    2f32:	51 e4       	ldi	r21, 0x41	; 65
    2f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f38:	dc 01       	movw	r26, r24
    2f3a:	cb 01       	movw	r24, r22
    2f3c:	bc 01       	movw	r22, r24
    2f3e:	cd 01       	movw	r24, r26
    2f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	9e 83       	std	Y+6, r25	; 0x06
    2f4a:	8d 83       	std	Y+5, r24	; 0x05
    2f4c:	0f c0       	rjmp	.+30     	; 0x2f6c <LCD_vidSendCommand+0x1de>
    2f4e:	80 e9       	ldi	r24, 0x90	; 144
    2f50:	91 e0       	ldi	r25, 0x01	; 1
    2f52:	9c 83       	std	Y+4, r25	; 0x04
    2f54:	8b 83       	std	Y+3, r24	; 0x03
    2f56:	8b 81       	ldd	r24, Y+3	; 0x03
    2f58:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5a:	01 97       	sbiw	r24, 0x01	; 1
    2f5c:	f1 f7       	brne	.-4      	; 0x2f5a <LCD_vidSendCommand+0x1cc>
    2f5e:	9c 83       	std	Y+4, r25	; 0x04
    2f60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f62:	8d 81       	ldd	r24, Y+5	; 0x05
    2f64:	9e 81       	ldd	r25, Y+6	; 0x06
    2f66:	01 97       	sbiw	r24, 0x01	; 1
    2f68:	9e 83       	std	Y+6, r25	; 0x06
    2f6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f70:	00 97       	sbiw	r24, 0x00	; 0
    2f72:	69 f7       	brne	.-38     	; 0x2f4e <LCD_vidSendCommand+0x1c0>
    2f74:	14 c0       	rjmp	.+40     	; 0x2f9e <LCD_vidSendCommand+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f76:	6f 81       	ldd	r22, Y+7	; 0x07
    2f78:	78 85       	ldd	r23, Y+8	; 0x08
    2f7a:	89 85       	ldd	r24, Y+9	; 0x09
    2f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	9e 83       	std	Y+6, r25	; 0x06
    2f88:	8d 83       	std	Y+5, r24	; 0x05
    2f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8e:	9a 83       	std	Y+2, r25	; 0x02
    2f90:	89 83       	std	Y+1, r24	; 0x01
    2f92:	89 81       	ldd	r24, Y+1	; 0x01
    2f94:	9a 81       	ldd	r25, Y+2	; 0x02
    2f96:	01 97       	sbiw	r24, 0x01	; 1
    2f98:	f1 f7       	brne	.-4      	; 0x2f96 <LCD_vidSendCommand+0x208>
    2f9a:	9a 83       	std	Y+2, r25	; 0x02
    2f9c:	89 83       	std	Y+1, r24	; 0x01

	/* Delay for 10ms to let the LCD execute command */
	_delay_ms(10);

}
    2f9e:	6d 96       	adiw	r28, 0x1d	; 29
    2fa0:	0f b6       	in	r0, 0x3f	; 63
    2fa2:	f8 94       	cli
    2fa4:	de bf       	out	0x3e, r29	; 62
    2fa6:	0f be       	out	0x3f, r0	; 63
    2fa8:	cd bf       	out	0x3d, r28	; 61
    2faa:	cf 91       	pop	r28
    2fac:	df 91       	pop	r29
    2fae:	08 95       	ret

00002fb0 <LCD_vidWriteCharctr>:
/* Description! Interface to write character on LCD screen                             */
/* Input      ! Data to send                                                           */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidWriteCharctr(u8 u8DataCpy)
{
    2fb0:	df 93       	push	r29
    2fb2:	cf 93       	push	r28
    2fb4:	cd b7       	in	r28, 0x3d	; 61
    2fb6:	de b7       	in	r29, 0x3e	; 62
    2fb8:	6d 97       	sbiw	r28, 0x1d	; 29
    2fba:	0f b6       	in	r0, 0x3f	; 63
    2fbc:	f8 94       	cli
    2fbe:	de bf       	out	0x3e, r29	; 62
    2fc0:	0f be       	out	0x3f, r0	; 63
    2fc2:	cd bf       	out	0x3d, r28	; 61
    2fc4:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Set RS to HIG */
	DIO_enuWritePin(LCD_RS, DIO_HIGH);
    2fc6:	85 e0       	ldi	r24, 0x05	; 5
    2fc8:	61 e0       	ldi	r22, 0x01	; 1
    2fca:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>

	/* Set R/W to LOW */
	DIO_enuWritePin(LCD_RW, DIO_LOW);
    2fce:	84 e0       	ldi	r24, 0x04	; 4
    2fd0:	60 e0       	ldi	r22, 0x00	; 0
    2fd2:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>

	/* Set E to HIGH */
	DIO_enuWritePin(LCD_EN, DIO_HIGH);
    2fd6:	83 e0       	ldi	r24, 0x03	; 3
    2fd8:	61 e0       	ldi	r22, 0x01	; 1
    2fda:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>

	/* Load Command on Data bus */
	PutOnLCD(REG, u8DataCpy);
    2fde:	8a e7       	ldi	r24, 0x7A	; 122
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2fe4:	0e 94 60 13 	call	0x26c0	; 0x26c0 <PutOnLCD>

	/* Set E to LOW */
	DIO_enuWritePin(LCD_EN, DIO_LOW);
    2fe8:	83 e0       	ldi	r24, 0x03	; 3
    2fea:	60 e0       	ldi	r22, 0x00	; 0
    2fec:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
    2ff0:	80 e0       	ldi	r24, 0x00	; 0
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	a0 ea       	ldi	r26, 0xA0	; 160
    2ff6:	b0 e4       	ldi	r27, 0x40	; 64
    2ff8:	89 8f       	std	Y+25, r24	; 0x19
    2ffa:	9a 8f       	std	Y+26, r25	; 0x1a
    2ffc:	ab 8f       	std	Y+27, r26	; 0x1b
    2ffe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3000:	69 8d       	ldd	r22, Y+25	; 0x19
    3002:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3004:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3006:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	4a e7       	ldi	r20, 0x7A	; 122
    300e:	55 e4       	ldi	r21, 0x45	; 69
    3010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3014:	dc 01       	movw	r26, r24
    3016:	cb 01       	movw	r24, r22
    3018:	8d 8b       	std	Y+21, r24	; 0x15
    301a:	9e 8b       	std	Y+22, r25	; 0x16
    301c:	af 8b       	std	Y+23, r26	; 0x17
    301e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3020:	6d 89       	ldd	r22, Y+21	; 0x15
    3022:	7e 89       	ldd	r23, Y+22	; 0x16
    3024:	8f 89       	ldd	r24, Y+23	; 0x17
    3026:	98 8d       	ldd	r25, Y+24	; 0x18
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	40 e8       	ldi	r20, 0x80	; 128
    302e:	5f e3       	ldi	r21, 0x3F	; 63
    3030:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3034:	88 23       	and	r24, r24
    3036:	2c f4       	brge	.+10     	; 0x3042 <LCD_vidWriteCharctr+0x92>
		__ticks = 1;
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	9c 8b       	std	Y+20, r25	; 0x14
    303e:	8b 8b       	std	Y+19, r24	; 0x13
    3040:	3f c0       	rjmp	.+126    	; 0x30c0 <LCD_vidWriteCharctr+0x110>
	else if (__tmp > 65535)
    3042:	6d 89       	ldd	r22, Y+21	; 0x15
    3044:	7e 89       	ldd	r23, Y+22	; 0x16
    3046:	8f 89       	ldd	r24, Y+23	; 0x17
    3048:	98 8d       	ldd	r25, Y+24	; 0x18
    304a:	20 e0       	ldi	r18, 0x00	; 0
    304c:	3f ef       	ldi	r19, 0xFF	; 255
    304e:	4f e7       	ldi	r20, 0x7F	; 127
    3050:	57 e4       	ldi	r21, 0x47	; 71
    3052:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3056:	18 16       	cp	r1, r24
    3058:	4c f5       	brge	.+82     	; 0x30ac <LCD_vidWriteCharctr+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    305a:	69 8d       	ldd	r22, Y+25	; 0x19
    305c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    305e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3060:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	40 e2       	ldi	r20, 0x20	; 32
    3068:	51 e4       	ldi	r21, 0x41	; 65
    306a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	bc 01       	movw	r22, r24
    3074:	cd 01       	movw	r24, r26
    3076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	9c 8b       	std	Y+20, r25	; 0x14
    3080:	8b 8b       	std	Y+19, r24	; 0x13
    3082:	0f c0       	rjmp	.+30     	; 0x30a2 <LCD_vidWriteCharctr+0xf2>
    3084:	80 e9       	ldi	r24, 0x90	; 144
    3086:	91 e0       	ldi	r25, 0x01	; 1
    3088:	9a 8b       	std	Y+18, r25	; 0x12
    308a:	89 8b       	std	Y+17, r24	; 0x11
    308c:	89 89       	ldd	r24, Y+17	; 0x11
    308e:	9a 89       	ldd	r25, Y+18	; 0x12
    3090:	01 97       	sbiw	r24, 0x01	; 1
    3092:	f1 f7       	brne	.-4      	; 0x3090 <LCD_vidWriteCharctr+0xe0>
    3094:	9a 8b       	std	Y+18, r25	; 0x12
    3096:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3098:	8b 89       	ldd	r24, Y+19	; 0x13
    309a:	9c 89       	ldd	r25, Y+20	; 0x14
    309c:	01 97       	sbiw	r24, 0x01	; 1
    309e:	9c 8b       	std	Y+20, r25	; 0x14
    30a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30a2:	8b 89       	ldd	r24, Y+19	; 0x13
    30a4:	9c 89       	ldd	r25, Y+20	; 0x14
    30a6:	00 97       	sbiw	r24, 0x00	; 0
    30a8:	69 f7       	brne	.-38     	; 0x3084 <LCD_vidWriteCharctr+0xd4>
    30aa:	14 c0       	rjmp	.+40     	; 0x30d4 <LCD_vidWriteCharctr+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ac:	6d 89       	ldd	r22, Y+21	; 0x15
    30ae:	7e 89       	ldd	r23, Y+22	; 0x16
    30b0:	8f 89       	ldd	r24, Y+23	; 0x17
    30b2:	98 8d       	ldd	r25, Y+24	; 0x18
    30b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	9c 8b       	std	Y+20, r25	; 0x14
    30be:	8b 8b       	std	Y+19, r24	; 0x13
    30c0:	8b 89       	ldd	r24, Y+19	; 0x13
    30c2:	9c 89       	ldd	r25, Y+20	; 0x14
    30c4:	98 8b       	std	Y+16, r25	; 0x10
    30c6:	8f 87       	std	Y+15, r24	; 0x0f
    30c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    30ca:	98 89       	ldd	r25, Y+16	; 0x10
    30cc:	01 97       	sbiw	r24, 0x01	; 1
    30ce:	f1 f7       	brne	.-4      	; 0x30cc <LCD_vidWriteCharctr+0x11c>
    30d0:	98 8b       	std	Y+16, r25	; 0x10
    30d2:	8f 87       	std	Y+15, r24	; 0x0f

	/* Wait for E to settle */
	_delay_ms(5);

	/* Set E to HIGH */
	DIO_enuWritePin(LCD_EN, DIO_HIGH);
    30d4:	83 e0       	ldi	r24, 0x03	; 3
    30d6:	61 e0       	ldi	r22, 0x01	; 1
    30d8:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	a0 e2       	ldi	r26, 0x20	; 32
    30e2:	b1 e4       	ldi	r27, 0x41	; 65
    30e4:	8b 87       	std	Y+11, r24	; 0x0b
    30e6:	9c 87       	std	Y+12, r25	; 0x0c
    30e8:	ad 87       	std	Y+13, r26	; 0x0d
    30ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    30ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    30f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    30f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	4a e7       	ldi	r20, 0x7A	; 122
    30fa:	55 e4       	ldi	r21, 0x45	; 69
    30fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	8f 83       	std	Y+7, r24	; 0x07
    3106:	98 87       	std	Y+8, r25	; 0x08
    3108:	a9 87       	std	Y+9, r26	; 0x09
    310a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    310c:	6f 81       	ldd	r22, Y+7	; 0x07
    310e:	78 85       	ldd	r23, Y+8	; 0x08
    3110:	89 85       	ldd	r24, Y+9	; 0x09
    3112:	9a 85       	ldd	r25, Y+10	; 0x0a
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	40 e8       	ldi	r20, 0x80	; 128
    311a:	5f e3       	ldi	r21, 0x3F	; 63
    311c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3120:	88 23       	and	r24, r24
    3122:	2c f4       	brge	.+10     	; 0x312e <LCD_vidWriteCharctr+0x17e>
		__ticks = 1;
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	9e 83       	std	Y+6, r25	; 0x06
    312a:	8d 83       	std	Y+5, r24	; 0x05
    312c:	3f c0       	rjmp	.+126    	; 0x31ac <LCD_vidWriteCharctr+0x1fc>
	else if (__tmp > 65535)
    312e:	6f 81       	ldd	r22, Y+7	; 0x07
    3130:	78 85       	ldd	r23, Y+8	; 0x08
    3132:	89 85       	ldd	r24, Y+9	; 0x09
    3134:	9a 85       	ldd	r25, Y+10	; 0x0a
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	3f ef       	ldi	r19, 0xFF	; 255
    313a:	4f e7       	ldi	r20, 0x7F	; 127
    313c:	57 e4       	ldi	r21, 0x47	; 71
    313e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3142:	18 16       	cp	r1, r24
    3144:	4c f5       	brge	.+82     	; 0x3198 <LCD_vidWriteCharctr+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3146:	6b 85       	ldd	r22, Y+11	; 0x0b
    3148:	7c 85       	ldd	r23, Y+12	; 0x0c
    314a:	8d 85       	ldd	r24, Y+13	; 0x0d
    314c:	9e 85       	ldd	r25, Y+14	; 0x0e
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	40 e2       	ldi	r20, 0x20	; 32
    3154:	51 e4       	ldi	r21, 0x41	; 65
    3156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	bc 01       	movw	r22, r24
    3160:	cd 01       	movw	r24, r26
    3162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	9e 83       	std	Y+6, r25	; 0x06
    316c:	8d 83       	std	Y+5, r24	; 0x05
    316e:	0f c0       	rjmp	.+30     	; 0x318e <LCD_vidWriteCharctr+0x1de>
    3170:	80 e9       	ldi	r24, 0x90	; 144
    3172:	91 e0       	ldi	r25, 0x01	; 1
    3174:	9c 83       	std	Y+4, r25	; 0x04
    3176:	8b 83       	std	Y+3, r24	; 0x03
    3178:	8b 81       	ldd	r24, Y+3	; 0x03
    317a:	9c 81       	ldd	r25, Y+4	; 0x04
    317c:	01 97       	sbiw	r24, 0x01	; 1
    317e:	f1 f7       	brne	.-4      	; 0x317c <LCD_vidWriteCharctr+0x1cc>
    3180:	9c 83       	std	Y+4, r25	; 0x04
    3182:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3184:	8d 81       	ldd	r24, Y+5	; 0x05
    3186:	9e 81       	ldd	r25, Y+6	; 0x06
    3188:	01 97       	sbiw	r24, 0x01	; 1
    318a:	9e 83       	std	Y+6, r25	; 0x06
    318c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    318e:	8d 81       	ldd	r24, Y+5	; 0x05
    3190:	9e 81       	ldd	r25, Y+6	; 0x06
    3192:	00 97       	sbiw	r24, 0x00	; 0
    3194:	69 f7       	brne	.-38     	; 0x3170 <LCD_vidWriteCharctr+0x1c0>
    3196:	14 c0       	rjmp	.+40     	; 0x31c0 <LCD_vidWriteCharctr+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3198:	6f 81       	ldd	r22, Y+7	; 0x07
    319a:	78 85       	ldd	r23, Y+8	; 0x08
    319c:	89 85       	ldd	r24, Y+9	; 0x09
    319e:	9a 85       	ldd	r25, Y+10	; 0x0a
    31a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a4:	dc 01       	movw	r26, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	9e 83       	std	Y+6, r25	; 0x06
    31aa:	8d 83       	std	Y+5, r24	; 0x05
    31ac:	8d 81       	ldd	r24, Y+5	; 0x05
    31ae:	9e 81       	ldd	r25, Y+6	; 0x06
    31b0:	9a 83       	std	Y+2, r25	; 0x02
    31b2:	89 83       	std	Y+1, r24	; 0x01
    31b4:	89 81       	ldd	r24, Y+1	; 0x01
    31b6:	9a 81       	ldd	r25, Y+2	; 0x02
    31b8:	01 97       	sbiw	r24, 0x01	; 1
    31ba:	f1 f7       	brne	.-4      	; 0x31b8 <LCD_vidWriteCharctr+0x208>
    31bc:	9a 83       	std	Y+2, r25	; 0x02
    31be:	89 83       	std	Y+1, r24	; 0x01

	/* Delay to let the LCD Display the character */
	_delay_ms(10);

}
    31c0:	6d 96       	adiw	r28, 0x1d	; 29
    31c2:	0f b6       	in	r0, 0x3f	; 63
    31c4:	f8 94       	cli
    31c6:	de bf       	out	0x3e, r29	; 62
    31c8:	0f be       	out	0x3f, r0	; 63
    31ca:	cd bf       	out	0x3d, r28	; 61
    31cc:	cf 91       	pop	r28
    31ce:	df 91       	pop	r29
    31d0:	08 95       	ret

000031d2 <LCD_vidWriteString>:
/* Description! Interface to write string on LCD screen                                */
/* Input      ! Pointer to the string                                                  */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidWriteString (u8* pu8StringCpy, u8 u8Index)
{
    31d2:	df 93       	push	r29
    31d4:	cf 93       	push	r28
    31d6:	cd b7       	in	r28, 0x3d	; 61
    31d8:	de b7       	in	r29, 0x3e	; 62
    31da:	62 97       	sbiw	r28, 0x12	; 18
    31dc:	0f b6       	in	r0, 0x3f	; 63
    31de:	f8 94       	cli
    31e0:	de bf       	out	0x3e, r29	; 62
    31e2:	0f be       	out	0x3f, r0	; 63
    31e4:	cd bf       	out	0x3d, r28	; 61
    31e6:	99 8b       	std	Y+17, r25	; 0x11
    31e8:	88 8b       	std	Y+16, r24	; 0x10
    31ea:	6a 8b       	std	Y+18, r22	; 0x12

//	/* Local loop index */
//	u8 u8Index = 0;
	u8 iteration=0;
    31ec:	1f 86       	std	Y+15, r1	; 0x0f
//	while (pu8StringCpy[u8Index] != '\0')
	for (iteration=0; iteration<u8Index ; iteration++)
    31ee:	1f 86       	std	Y+15, r1	; 0x0f
    31f0:	80 c0       	rjmp	.+256    	; 0x32f2 <LCD_vidWriteString+0x120>
	{

		/* Write Character on LCD */
		LCD_vidWriteCharctr(pu8StringCpy[iteration]);
    31f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    31f4:	28 2f       	mov	r18, r24
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	88 89       	ldd	r24, Y+16	; 0x10
    31fa:	99 89       	ldd	r25, Y+17	; 0x11
    31fc:	fc 01       	movw	r30, r24
    31fe:	e2 0f       	add	r30, r18
    3200:	f3 1f       	adc	r31, r19
    3202:	80 81       	ld	r24, Z
    3204:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <LCD_vidWriteCharctr>
    3208:	80 e0       	ldi	r24, 0x00	; 0
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	a0 e0       	ldi	r26, 0x00	; 0
    320e:	b0 e4       	ldi	r27, 0x40	; 64
    3210:	8b 87       	std	Y+11, r24	; 0x0b
    3212:	9c 87       	std	Y+12, r25	; 0x0c
    3214:	ad 87       	std	Y+13, r26	; 0x0d
    3216:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3218:	6b 85       	ldd	r22, Y+11	; 0x0b
    321a:	7c 85       	ldd	r23, Y+12	; 0x0c
    321c:	8d 85       	ldd	r24, Y+13	; 0x0d
    321e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	4a e7       	ldi	r20, 0x7A	; 122
    3226:	55 e4       	ldi	r21, 0x45	; 69
    3228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	8f 83       	std	Y+7, r24	; 0x07
    3232:	98 87       	std	Y+8, r25	; 0x08
    3234:	a9 87       	std	Y+9, r26	; 0x09
    3236:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3238:	6f 81       	ldd	r22, Y+7	; 0x07
    323a:	78 85       	ldd	r23, Y+8	; 0x08
    323c:	89 85       	ldd	r24, Y+9	; 0x09
    323e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	40 e8       	ldi	r20, 0x80	; 128
    3246:	5f e3       	ldi	r21, 0x3F	; 63
    3248:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    324c:	88 23       	and	r24, r24
    324e:	2c f4       	brge	.+10     	; 0x325a <LCD_vidWriteString+0x88>
		__ticks = 1;
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	9e 83       	std	Y+6, r25	; 0x06
    3256:	8d 83       	std	Y+5, r24	; 0x05
    3258:	3f c0       	rjmp	.+126    	; 0x32d8 <LCD_vidWriteString+0x106>
	else if (__tmp > 65535)
    325a:	6f 81       	ldd	r22, Y+7	; 0x07
    325c:	78 85       	ldd	r23, Y+8	; 0x08
    325e:	89 85       	ldd	r24, Y+9	; 0x09
    3260:	9a 85       	ldd	r25, Y+10	; 0x0a
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	3f ef       	ldi	r19, 0xFF	; 255
    3266:	4f e7       	ldi	r20, 0x7F	; 127
    3268:	57 e4       	ldi	r21, 0x47	; 71
    326a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    326e:	18 16       	cp	r1, r24
    3270:	4c f5       	brge	.+82     	; 0x32c4 <LCD_vidWriteString+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3272:	6b 85       	ldd	r22, Y+11	; 0x0b
    3274:	7c 85       	ldd	r23, Y+12	; 0x0c
    3276:	8d 85       	ldd	r24, Y+13	; 0x0d
    3278:	9e 85       	ldd	r25, Y+14	; 0x0e
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	40 e2       	ldi	r20, 0x20	; 32
    3280:	51 e4       	ldi	r21, 0x41	; 65
    3282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	bc 01       	movw	r22, r24
    328c:	cd 01       	movw	r24, r26
    328e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	9e 83       	std	Y+6, r25	; 0x06
    3298:	8d 83       	std	Y+5, r24	; 0x05
    329a:	0f c0       	rjmp	.+30     	; 0x32ba <LCD_vidWriteString+0xe8>
    329c:	80 e9       	ldi	r24, 0x90	; 144
    329e:	91 e0       	ldi	r25, 0x01	; 1
    32a0:	9c 83       	std	Y+4, r25	; 0x04
    32a2:	8b 83       	std	Y+3, r24	; 0x03
    32a4:	8b 81       	ldd	r24, Y+3	; 0x03
    32a6:	9c 81       	ldd	r25, Y+4	; 0x04
    32a8:	01 97       	sbiw	r24, 0x01	; 1
    32aa:	f1 f7       	brne	.-4      	; 0x32a8 <LCD_vidWriteString+0xd6>
    32ac:	9c 83       	std	Y+4, r25	; 0x04
    32ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32b0:	8d 81       	ldd	r24, Y+5	; 0x05
    32b2:	9e 81       	ldd	r25, Y+6	; 0x06
    32b4:	01 97       	sbiw	r24, 0x01	; 1
    32b6:	9e 83       	std	Y+6, r25	; 0x06
    32b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ba:	8d 81       	ldd	r24, Y+5	; 0x05
    32bc:	9e 81       	ldd	r25, Y+6	; 0x06
    32be:	00 97       	sbiw	r24, 0x00	; 0
    32c0:	69 f7       	brne	.-38     	; 0x329c <LCD_vidWriteString+0xca>
    32c2:	14 c0       	rjmp	.+40     	; 0x32ec <LCD_vidWriteString+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c4:	6f 81       	ldd	r22, Y+7	; 0x07
    32c6:	78 85       	ldd	r23, Y+8	; 0x08
    32c8:	89 85       	ldd	r24, Y+9	; 0x09
    32ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    32cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	9e 83       	std	Y+6, r25	; 0x06
    32d6:	8d 83       	std	Y+5, r24	; 0x05
    32d8:	8d 81       	ldd	r24, Y+5	; 0x05
    32da:	9e 81       	ldd	r25, Y+6	; 0x06
    32dc:	9a 83       	std	Y+2, r25	; 0x02
    32de:	89 83       	std	Y+1, r24	; 0x01
    32e0:	89 81       	ldd	r24, Y+1	; 0x01
    32e2:	9a 81       	ldd	r25, Y+2	; 0x02
    32e4:	01 97       	sbiw	r24, 0x01	; 1
    32e6:	f1 f7       	brne	.-4      	; 0x32e4 <LCD_vidWriteString+0x112>
    32e8:	9a 83       	std	Y+2, r25	; 0x02
    32ea:	89 83       	std	Y+1, r24	; 0x01

//	/* Local loop index */
//	u8 u8Index = 0;
	u8 iteration=0;
//	while (pu8StringCpy[u8Index] != '\0')
	for (iteration=0; iteration<u8Index ; iteration++)
    32ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    32ee:	8f 5f       	subi	r24, 0xFF	; 255
    32f0:	8f 87       	std	Y+15, r24	; 0x0f
    32f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    32f4:	8a 89       	ldd	r24, Y+18	; 0x12
    32f6:	98 17       	cp	r25, r24
    32f8:	08 f4       	brcc	.+2      	; 0x32fc <LCD_vidWriteString+0x12a>
    32fa:	7b cf       	rjmp	.-266    	; 0x31f2 <LCD_vidWriteString+0x20>

		/* Delay to let the LCD show the character */
		_delay_ms(2);
	}

}
    32fc:	62 96       	adiw	r28, 0x12	; 18
    32fe:	0f b6       	in	r0, 0x3f	; 63
    3300:	f8 94       	cli
    3302:	de bf       	out	0x3e, r29	; 62
    3304:	0f be       	out	0x3f, r0	; 63
    3306:	cd bf       	out	0x3d, r28	; 61
    3308:	cf 91       	pop	r28
    330a:	df 91       	pop	r29
    330c:	08 95       	ret

0000330e <Gotoxy>:
/* Description! Interface to start the writing process at certain digit in the LCD     */
/* Input      ! Y = Row position , X = Column position                                 */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void Gotoxy (u8 Y,u8 X)
{
    330e:	df 93       	push	r29
    3310:	cf 93       	push	r28
    3312:	00 d0       	rcall	.+0      	; 0x3314 <Gotoxy+0x6>
    3314:	00 d0       	rcall	.+0      	; 0x3316 <Gotoxy+0x8>
    3316:	cd b7       	in	r28, 0x3d	; 61
    3318:	de b7       	in	r29, 0x3e	; 62
    331a:	89 83       	std	Y+1, r24	; 0x01
    331c:	6a 83       	std	Y+2, r22	; 0x02
	if (X>0 && X<=16)
    331e:	8a 81       	ldd	r24, Y+2	; 0x02
    3320:	88 23       	and	r24, r24
    3322:	e1 f0       	breq	.+56     	; 0x335c <Gotoxy+0x4e>
    3324:	8a 81       	ldd	r24, Y+2	; 0x02
    3326:	81 31       	cpi	r24, 0x11	; 17
    3328:	c8 f4       	brcc	.+50     	; 0x335c <Gotoxy+0x4e>
	{
	    switch(Y)
    332a:	89 81       	ldd	r24, Y+1	; 0x01
    332c:	28 2f       	mov	r18, r24
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	3c 83       	std	Y+4, r19	; 0x04
    3332:	2b 83       	std	Y+3, r18	; 0x03
    3334:	8b 81       	ldd	r24, Y+3	; 0x03
    3336:	9c 81       	ldd	r25, Y+4	; 0x04
    3338:	81 30       	cpi	r24, 0x01	; 1
    333a:	91 05       	cpc	r25, r1
    333c:	31 f0       	breq	.+12     	; 0x334a <Gotoxy+0x3c>
    333e:	2b 81       	ldd	r18, Y+3	; 0x03
    3340:	3c 81       	ldd	r19, Y+4	; 0x04
    3342:	22 30       	cpi	r18, 0x02	; 2
    3344:	31 05       	cpc	r19, r1
    3346:	31 f0       	breq	.+12     	; 0x3354 <Gotoxy+0x46>
    3348:	09 c0       	rjmp	.+18     	; 0x335c <Gotoxy+0x4e>
	    {
		    case 1:
		    	LCD_vidSendCommand(X+127);
    334a:	8a 81       	ldd	r24, Y+2	; 0x02
    334c:	81 58       	subi	r24, 0x81	; 129
    334e:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <LCD_vidSendCommand>
    3352:	04 c0       	rjmp	.+8      	; 0x335c <Gotoxy+0x4e>
		    break;
		    case 2:
		    	LCD_vidSendCommand(X+191);
    3354:	8a 81       	ldd	r24, Y+2	; 0x02
    3356:	81 54       	subi	r24, 0x41	; 65
    3358:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <LCD_vidSendCommand>
		    break;
		    default:
		    break;
	    }
	}
}
    335c:	0f 90       	pop	r0
    335e:	0f 90       	pop	r0
    3360:	0f 90       	pop	r0
    3362:	0f 90       	pop	r0
    3364:	cf 91       	pop	r28
    3366:	df 91       	pop	r29
    3368:	08 95       	ret

0000336a <LCD_vidWriteExtraChar>:
/* Description! Interface to write extra characters saved in the CGRAM                 */
/* Input      ! Y = Row position , X = Column position                                 */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidWriteExtraChar (u8 Y,u8 X)
{
    336a:	df 93       	push	r29
    336c:	cf 93       	push	r28
    336e:	cd b7       	in	r28, 0x3d	; 61
    3370:	de b7       	in	r29, 0x3e	; 62
    3372:	62 97       	sbiw	r28, 0x12	; 18
    3374:	0f b6       	in	r0, 0x3f	; 63
    3376:	f8 94       	cli
    3378:	de bf       	out	0x3e, r29	; 62
    337a:	0f be       	out	0x3f, r0	; 63
    337c:	cd bf       	out	0x3d, r28	; 61
    337e:	89 8b       	std	Y+17, r24	; 0x11
    3380:	6a 8b       	std	Y+18, r22	; 0x12
    u8 iteration1,iteration2;

    /*DDRAM-->CGRAM*/
    LCD_vidSendCommand(64);
    3382:	80 e4       	ldi	r24, 0x40	; 64
    3384:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <LCD_vidSendCommand>
	for(iteration1=0 ; iteration1<64 ; iteration1++)
    3388:	18 8a       	std	Y+16, r1	; 0x10
    338a:	0c c0       	rjmp	.+24     	; 0x33a4 <LCD_vidWriteExtraChar+0x3a>
	{
		LCD_vidWriteCharctr(ExtraChar[iteration1]);
    338c:	88 89       	ldd	r24, Y+16	; 0x10
    338e:	88 2f       	mov	r24, r24
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	fc 01       	movw	r30, r24
    3394:	e6 56       	subi	r30, 0x66	; 102
    3396:	ff 4f       	sbci	r31, 0xFF	; 255
    3398:	80 81       	ld	r24, Z
    339a:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <LCD_vidWriteCharctr>
{
    u8 iteration1,iteration2;

    /*DDRAM-->CGRAM*/
    LCD_vidSendCommand(64);
	for(iteration1=0 ; iteration1<64 ; iteration1++)
    339e:	88 89       	ldd	r24, Y+16	; 0x10
    33a0:	8f 5f       	subi	r24, 0xFF	; 255
    33a2:	88 8b       	std	Y+16, r24	; 0x10
    33a4:	88 89       	ldd	r24, Y+16	; 0x10
    33a6:	80 34       	cpi	r24, 0x40	; 64
    33a8:	88 f3       	brcs	.-30     	; 0x338c <LCD_vidWriteExtraChar+0x22>
	{
		LCD_vidWriteCharctr(ExtraChar[iteration1]);
	}
	/*CGRAM-->DDRAM*/
	LCD_vidSendCommand(128);
    33aa:	80 e8       	ldi	r24, 0x80	; 128
    33ac:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <LCD_vidSendCommand>
	Gotoxy(Y,X);
    33b0:	89 89       	ldd	r24, Y+17	; 0x11
    33b2:	6a 89       	ldd	r22, Y+18	; 0x12
    33b4:	0e 94 87 19 	call	0x330e	; 0x330e <Gotoxy>
	/*First eight character which saved at CGRAM*/
	for (iteration2=0; iteration2<=7 ; iteration2++)
    33b8:	1f 86       	std	Y+15, r1	; 0x0f
    33ba:	78 c0       	rjmp	.+240    	; 0x34ac <LCD_vidWriteExtraChar+0x142>
	{
		/* Write bytes of DDRAM */
		LCD_vidWriteCharctr(iteration2);
    33bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    33be:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <LCD_vidWriteCharctr>
    33c2:	80 e0       	ldi	r24, 0x00	; 0
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	a0 ea       	ldi	r26, 0xA0	; 160
    33c8:	b0 e4       	ldi	r27, 0x40	; 64
    33ca:	8b 87       	std	Y+11, r24	; 0x0b
    33cc:	9c 87       	std	Y+12, r25	; 0x0c
    33ce:	ad 87       	std	Y+13, r26	; 0x0d
    33d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    33d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    33d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	4a e7       	ldi	r20, 0x7A	; 122
    33e0:	55 e4       	ldi	r21, 0x45	; 69
    33e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e6:	dc 01       	movw	r26, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	8f 83       	std	Y+7, r24	; 0x07
    33ec:	98 87       	std	Y+8, r25	; 0x08
    33ee:	a9 87       	std	Y+9, r26	; 0x09
    33f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33f2:	6f 81       	ldd	r22, Y+7	; 0x07
    33f4:	78 85       	ldd	r23, Y+8	; 0x08
    33f6:	89 85       	ldd	r24, Y+9	; 0x09
    33f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	40 e8       	ldi	r20, 0x80	; 128
    3400:	5f e3       	ldi	r21, 0x3F	; 63
    3402:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3406:	88 23       	and	r24, r24
    3408:	2c f4       	brge	.+10     	; 0x3414 <LCD_vidWriteExtraChar+0xaa>
		__ticks = 1;
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	9e 83       	std	Y+6, r25	; 0x06
    3410:	8d 83       	std	Y+5, r24	; 0x05
    3412:	3f c0       	rjmp	.+126    	; 0x3492 <LCD_vidWriteExtraChar+0x128>
	else if (__tmp > 65535)
    3414:	6f 81       	ldd	r22, Y+7	; 0x07
    3416:	78 85       	ldd	r23, Y+8	; 0x08
    3418:	89 85       	ldd	r24, Y+9	; 0x09
    341a:	9a 85       	ldd	r25, Y+10	; 0x0a
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	3f ef       	ldi	r19, 0xFF	; 255
    3420:	4f e7       	ldi	r20, 0x7F	; 127
    3422:	57 e4       	ldi	r21, 0x47	; 71
    3424:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3428:	18 16       	cp	r1, r24
    342a:	4c f5       	brge	.+82     	; 0x347e <LCD_vidWriteExtraChar+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342c:	6b 85       	ldd	r22, Y+11	; 0x0b
    342e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3430:	8d 85       	ldd	r24, Y+13	; 0x0d
    3432:	9e 85       	ldd	r25, Y+14	; 0x0e
    3434:	20 e0       	ldi	r18, 0x00	; 0
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	40 e2       	ldi	r20, 0x20	; 32
    343a:	51 e4       	ldi	r21, 0x41	; 65
    343c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	bc 01       	movw	r22, r24
    3446:	cd 01       	movw	r24, r26
    3448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344c:	dc 01       	movw	r26, r24
    344e:	cb 01       	movw	r24, r22
    3450:	9e 83       	std	Y+6, r25	; 0x06
    3452:	8d 83       	std	Y+5, r24	; 0x05
    3454:	0f c0       	rjmp	.+30     	; 0x3474 <LCD_vidWriteExtraChar+0x10a>
    3456:	80 e9       	ldi	r24, 0x90	; 144
    3458:	91 e0       	ldi	r25, 0x01	; 1
    345a:	9c 83       	std	Y+4, r25	; 0x04
    345c:	8b 83       	std	Y+3, r24	; 0x03
    345e:	8b 81       	ldd	r24, Y+3	; 0x03
    3460:	9c 81       	ldd	r25, Y+4	; 0x04
    3462:	01 97       	sbiw	r24, 0x01	; 1
    3464:	f1 f7       	brne	.-4      	; 0x3462 <LCD_vidWriteExtraChar+0xf8>
    3466:	9c 83       	std	Y+4, r25	; 0x04
    3468:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    346a:	8d 81       	ldd	r24, Y+5	; 0x05
    346c:	9e 81       	ldd	r25, Y+6	; 0x06
    346e:	01 97       	sbiw	r24, 0x01	; 1
    3470:	9e 83       	std	Y+6, r25	; 0x06
    3472:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3474:	8d 81       	ldd	r24, Y+5	; 0x05
    3476:	9e 81       	ldd	r25, Y+6	; 0x06
    3478:	00 97       	sbiw	r24, 0x00	; 0
    347a:	69 f7       	brne	.-38     	; 0x3456 <LCD_vidWriteExtraChar+0xec>
    347c:	14 c0       	rjmp	.+40     	; 0x34a6 <LCD_vidWriteExtraChar+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    347e:	6f 81       	ldd	r22, Y+7	; 0x07
    3480:	78 85       	ldd	r23, Y+8	; 0x08
    3482:	89 85       	ldd	r24, Y+9	; 0x09
    3484:	9a 85       	ldd	r25, Y+10	; 0x0a
    3486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    348a:	dc 01       	movw	r26, r24
    348c:	cb 01       	movw	r24, r22
    348e:	9e 83       	std	Y+6, r25	; 0x06
    3490:	8d 83       	std	Y+5, r24	; 0x05
    3492:	8d 81       	ldd	r24, Y+5	; 0x05
    3494:	9e 81       	ldd	r25, Y+6	; 0x06
    3496:	9a 83       	std	Y+2, r25	; 0x02
    3498:	89 83       	std	Y+1, r24	; 0x01
    349a:	89 81       	ldd	r24, Y+1	; 0x01
    349c:	9a 81       	ldd	r25, Y+2	; 0x02
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	f1 f7       	brne	.-4      	; 0x349e <LCD_vidWriteExtraChar+0x134>
    34a2:	9a 83       	std	Y+2, r25	; 0x02
    34a4:	89 83       	std	Y+1, r24	; 0x01
	}
	/*CGRAM-->DDRAM*/
	LCD_vidSendCommand(128);
	Gotoxy(Y,X);
	/*First eight character which saved at CGRAM*/
	for (iteration2=0; iteration2<=7 ; iteration2++)
    34a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    34a8:	8f 5f       	subi	r24, 0xFF	; 255
    34aa:	8f 87       	std	Y+15, r24	; 0x0f
    34ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    34ae:	88 30       	cpi	r24, 0x08	; 8
    34b0:	08 f4       	brcc	.+2      	; 0x34b4 <LCD_vidWriteExtraChar+0x14a>
    34b2:	84 cf       	rjmp	.-248    	; 0x33bc <LCD_vidWriteExtraChar+0x52>
		/* Write bytes of DDRAM */
		LCD_vidWriteCharctr(iteration2);

		_delay_ms(5);
	}
}
    34b4:	62 96       	adiw	r28, 0x12	; 18
    34b6:	0f b6       	in	r0, 0x3f	; 63
    34b8:	f8 94       	cli
    34ba:	de bf       	out	0x3e, r29	; 62
    34bc:	0f be       	out	0x3f, r0	; 63
    34be:	cd bf       	out	0x3d, r28	; 61
    34c0:	cf 91       	pop	r28
    34c2:	df 91       	pop	r29
    34c4:	08 95       	ret

000034c6 <LCD_voidWriteCommand>:
* Description : write command to LCD
* Arguments   : u8 Command
* return      : void
*/
  void LCD_voidWriteCommand(u8 u8Command)
  {
    34c6:	df 93       	push	r29
    34c8:	cf 93       	push	r28
    34ca:	cd b7       	in	r28, 0x3d	; 61
    34cc:	de b7       	in	r29, 0x3e	; 62
    34ce:	63 97       	sbiw	r28, 0x13	; 19
    34d0:	0f b6       	in	r0, 0x3f	; 63
    34d2:	f8 94       	cli
    34d4:	de bf       	out	0x3e, r29	; 62
    34d6:	0f be       	out	0x3f, r0	; 63
    34d8:	cd bf       	out	0x3d, r28	; 61
    34da:	8b 8b       	std	Y+19, r24	; 0x13
 	 /*Set RW pin 0 (Write Mode selected)*/
	  DIO_enuWritePin(LCD_RW, DIO_LOW);
    34dc:	86 e1       	ldi	r24, 0x16	; 22
    34de:	60 e0       	ldi	r22, 0x00	; 0
    34e0:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
 	 /*Set RS pin 0 (Instruction register selected)*/
	  DIO_enuWritePin(LCD_RW, DIO_LOW);
    34e4:	86 e1       	ldi	r24, 0x16	; 22
    34e6:	60 e0       	ldi	r22, 0x00	; 0
    34e8:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
 	 /*output first 4 bits instruction data to Data Bus*/
 	 for(u8 i=4;i<8;i++)
    34ec:	84 e0       	ldi	r24, 0x04	; 4
    34ee:	8a 8b       	std	Y+18, r24	; 0x12
    34f0:	1b c0       	rjmp	.+54     	; 0x3528 <LCD_voidWriteCommand+0x62>
 	 {
 		 /*Output value of Instruction bit i at Data Register DIO Pin i*/
 		upperBoundVal[i-4] = GET_BIT(u8Command, i);
    34f2:	8a 89       	ldd	r24, Y+18	; 0x12
    34f4:	88 2f       	mov	r24, r24
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	ac 01       	movw	r20, r24
    34fa:	44 50       	subi	r20, 0x04	; 4
    34fc:	50 40       	sbci	r21, 0x00	; 0
    34fe:	8b 89       	ldd	r24, Y+19	; 0x13
    3500:	28 2f       	mov	r18, r24
    3502:	30 e0       	ldi	r19, 0x00	; 0
    3504:	8a 89       	ldd	r24, Y+18	; 0x12
    3506:	88 2f       	mov	r24, r24
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	b9 01       	movw	r22, r18
    350c:	02 c0       	rjmp	.+4      	; 0x3512 <LCD_voidWriteCommand+0x4c>
    350e:	75 95       	asr	r23
    3510:	67 95       	ror	r22
    3512:	8a 95       	dec	r24
    3514:	e2 f7       	brpl	.-8      	; 0x350e <LCD_voidWriteCommand+0x48>
    3516:	cb 01       	movw	r24, r22
    3518:	81 70       	andi	r24, 0x01	; 1
    351a:	fa 01       	movw	r30, r20
    351c:	e8 51       	subi	r30, 0x18	; 24
    351e:	ff 4f       	sbci	r31, 0xFF	; 255
    3520:	80 83       	st	Z, r24
 	 /*Set RW pin 0 (Write Mode selected)*/
	  DIO_enuWritePin(LCD_RW, DIO_LOW);
 	 /*Set RS pin 0 (Instruction register selected)*/
	  DIO_enuWritePin(LCD_RW, DIO_LOW);
 	 /*output first 4 bits instruction data to Data Bus*/
 	 for(u8 i=4;i<8;i++)
    3522:	8a 89       	ldd	r24, Y+18	; 0x12
    3524:	8f 5f       	subi	r24, 0xFF	; 255
    3526:	8a 8b       	std	Y+18, r24	; 0x12
    3528:	8a 89       	ldd	r24, Y+18	; 0x12
    352a:	88 30       	cpi	r24, 0x08	; 8
    352c:	10 f3       	brcs	.-60     	; 0x34f2 <LCD_voidWriteCommand+0x2c>
 	 {
 		 /*Output value of Instruction bit i at Data Register DIO Pin i*/
 		upperBoundVal[i-4] = GET_BIT(u8Command, i);

 	 }
 	 DIO_enuWriteGroup(upperBoundGroup, upperBoundVal, 4);
    352e:	84 e8       	ldi	r24, 0x84	; 132
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	28 ee       	ldi	r18, 0xE8	; 232
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	b9 01       	movw	r22, r18
    3538:	44 e0       	ldi	r20, 0x04	; 4
    353a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_enuWriteGroup>
 	 /*latch sent data*/
 	 /*Set EN pin 1 (LCD Read data )*/
 	 DIO_enuWritePin(LCD_EN, DIO_HIGH);
    353e:	85 e1       	ldi	r24, 0x15	; 21
    3540:	61 e0       	ldi	r22, 0x01	; 1
    3542:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
 	 //_delay_ms(2);
 	 Delay_ms(2);
    3546:	1e 86       	std	Y+14, r1	; 0x0e
    3548:	1f 86       	std	Y+15, r1	; 0x0f
    354a:	18 8a       	std	Y+16, r1	; 0x10
    354c:	19 8a       	std	Y+17, r1	; 0x11
    354e:	28 c0       	rjmp	.+80     	; 0x35a0 <LCD_voidWriteCommand+0xda>
    3550:	80 ed       	ldi	r24, 0xD0	; 208
    3552:	97 e0       	ldi	r25, 0x07	; 7
    3554:	a0 e0       	ldi	r26, 0x00	; 0
    3556:	b0 e0       	ldi	r27, 0x00	; 0
    3558:	8a 87       	std	Y+10, r24	; 0x0a
    355a:	9b 87       	std	Y+11, r25	; 0x0b
    355c:	ac 87       	std	Y+12, r26	; 0x0c
    355e:	bd 87       	std	Y+13, r27	; 0x0d
    3560:	0c c0       	rjmp	.+24     	; 0x357a <LCD_voidWriteCommand+0xb4>
    3562:	00 00       	nop
    3564:	8a 85       	ldd	r24, Y+10	; 0x0a
    3566:	9b 85       	ldd	r25, Y+11	; 0x0b
    3568:	ac 85       	ldd	r26, Y+12	; 0x0c
    356a:	bd 85       	ldd	r27, Y+13	; 0x0d
    356c:	01 97       	sbiw	r24, 0x01	; 1
    356e:	a1 09       	sbc	r26, r1
    3570:	b1 09       	sbc	r27, r1
    3572:	8a 87       	std	Y+10, r24	; 0x0a
    3574:	9b 87       	std	Y+11, r25	; 0x0b
    3576:	ac 87       	std	Y+12, r26	; 0x0c
    3578:	bd 87       	std	Y+13, r27	; 0x0d
    357a:	8a 85       	ldd	r24, Y+10	; 0x0a
    357c:	9b 85       	ldd	r25, Y+11	; 0x0b
    357e:	ac 85       	ldd	r26, Y+12	; 0x0c
    3580:	bd 85       	ldd	r27, Y+13	; 0x0d
    3582:	00 97       	sbiw	r24, 0x00	; 0
    3584:	a1 05       	cpc	r26, r1
    3586:	b1 05       	cpc	r27, r1
    3588:	61 f7       	brne	.-40     	; 0x3562 <LCD_voidWriteCommand+0x9c>
    358a:	8e 85       	ldd	r24, Y+14	; 0x0e
    358c:	9f 85       	ldd	r25, Y+15	; 0x0f
    358e:	a8 89       	ldd	r26, Y+16	; 0x10
    3590:	b9 89       	ldd	r27, Y+17	; 0x11
    3592:	01 97       	sbiw	r24, 0x01	; 1
    3594:	a1 09       	sbc	r26, r1
    3596:	b1 09       	sbc	r27, r1
    3598:	8e 87       	std	Y+14, r24	; 0x0e
    359a:	9f 87       	std	Y+15, r25	; 0x0f
    359c:	a8 8b       	std	Y+16, r26	; 0x10
    359e:	b9 8b       	std	Y+17, r27	; 0x11
    35a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    35a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    35a4:	a8 89       	ldd	r26, Y+16	; 0x10
    35a6:	b9 89       	ldd	r27, Y+17	; 0x11
    35a8:	00 97       	sbiw	r24, 0x00	; 0
    35aa:	a1 05       	cpc	r26, r1
    35ac:	b1 05       	cpc	r27, r1
    35ae:	81 f6       	brne	.-96     	; 0x3550 <LCD_voidWriteCommand+0x8a>
 	 /*Set EN pin 0 (LCD Write data to its reg)*/
 	 DIO_enuWritePin(LCD_EN, DIO_LOW);
    35b0:	85 e1       	ldi	r24, 0x15	; 21
    35b2:	60 e0       	ldi	r22, 0x00	; 0
    35b4:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>

 	 /*output second 4 bits instruction to data bus*/
 	 for(u8 i=0;i<4;i++)
    35b8:	19 86       	std	Y+9, r1	; 0x09
    35ba:	18 c0       	rjmp	.+48     	; 0x35ec <LCD_voidWriteCommand+0x126>
 	 {
 		 /*Output value of Instruction bit i at Data Register DIO Pin i*/
 		upperBoundVal[i] = GET_BIT(u8Command, i);
    35bc:	89 85       	ldd	r24, Y+9	; 0x09
    35be:	48 2f       	mov	r20, r24
    35c0:	50 e0       	ldi	r21, 0x00	; 0
    35c2:	8b 89       	ldd	r24, Y+19	; 0x13
    35c4:	28 2f       	mov	r18, r24
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	89 85       	ldd	r24, Y+9	; 0x09
    35ca:	88 2f       	mov	r24, r24
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	b9 01       	movw	r22, r18
    35d0:	02 c0       	rjmp	.+4      	; 0x35d6 <LCD_voidWriteCommand+0x110>
    35d2:	75 95       	asr	r23
    35d4:	67 95       	ror	r22
    35d6:	8a 95       	dec	r24
    35d8:	e2 f7       	brpl	.-8      	; 0x35d2 <LCD_voidWriteCommand+0x10c>
    35da:	cb 01       	movw	r24, r22
    35dc:	81 70       	andi	r24, 0x01	; 1
    35de:	fa 01       	movw	r30, r20
    35e0:	e8 51       	subi	r30, 0x18	; 24
    35e2:	ff 4f       	sbci	r31, 0xFF	; 255
    35e4:	80 83       	st	Z, r24
 	 Delay_ms(2);
 	 /*Set EN pin 0 (LCD Write data to its reg)*/
 	 DIO_enuWritePin(LCD_EN, DIO_LOW);

 	 /*output second 4 bits instruction to data bus*/
 	 for(u8 i=0;i<4;i++)
    35e6:	89 85       	ldd	r24, Y+9	; 0x09
    35e8:	8f 5f       	subi	r24, 0xFF	; 255
    35ea:	89 87       	std	Y+9, r24	; 0x09
    35ec:	89 85       	ldd	r24, Y+9	; 0x09
    35ee:	84 30       	cpi	r24, 0x04	; 4
    35f0:	28 f3       	brcs	.-54     	; 0x35bc <LCD_voidWriteCommand+0xf6>
 	 {
 		 /*Output value of Instruction bit i at Data Register DIO Pin i*/
 		upperBoundVal[i] = GET_BIT(u8Command, i);
 	 }
 	 DIO_enuWriteGroup(upperBoundGroup, upperBoundVal, 4);
    35f2:	84 e8       	ldi	r24, 0x84	; 132
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	28 ee       	ldi	r18, 0xE8	; 232
    35f8:	30 e0       	ldi	r19, 0x00	; 0
    35fa:	b9 01       	movw	r22, r18
    35fc:	44 e0       	ldi	r20, 0x04	; 4
    35fe:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_enuWriteGroup>
 	 /*latch sent data*/
 	 /*Set EN pin 1 (LCD Read data )*/
 	 DIO_enuWritePin(LCD_EN, DIO_HIGH);
    3602:	85 e1       	ldi	r24, 0x15	; 21
    3604:	61 e0       	ldi	r22, 0x01	; 1
    3606:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
 	 //_delay_ms(2);
 	 Delay_ms(2);
    360a:	1d 82       	std	Y+5, r1	; 0x05
    360c:	1e 82       	std	Y+6, r1	; 0x06
    360e:	1f 82       	std	Y+7, r1	; 0x07
    3610:	18 86       	std	Y+8, r1	; 0x08
    3612:	28 c0       	rjmp	.+80     	; 0x3664 <LCD_voidWriteCommand+0x19e>
    3614:	80 ed       	ldi	r24, 0xD0	; 208
    3616:	97 e0       	ldi	r25, 0x07	; 7
    3618:	a0 e0       	ldi	r26, 0x00	; 0
    361a:	b0 e0       	ldi	r27, 0x00	; 0
    361c:	89 83       	std	Y+1, r24	; 0x01
    361e:	9a 83       	std	Y+2, r25	; 0x02
    3620:	ab 83       	std	Y+3, r26	; 0x03
    3622:	bc 83       	std	Y+4, r27	; 0x04
    3624:	0c c0       	rjmp	.+24     	; 0x363e <LCD_voidWriteCommand+0x178>
    3626:	00 00       	nop
    3628:	89 81       	ldd	r24, Y+1	; 0x01
    362a:	9a 81       	ldd	r25, Y+2	; 0x02
    362c:	ab 81       	ldd	r26, Y+3	; 0x03
    362e:	bc 81       	ldd	r27, Y+4	; 0x04
    3630:	01 97       	sbiw	r24, 0x01	; 1
    3632:	a1 09       	sbc	r26, r1
    3634:	b1 09       	sbc	r27, r1
    3636:	89 83       	std	Y+1, r24	; 0x01
    3638:	9a 83       	std	Y+2, r25	; 0x02
    363a:	ab 83       	std	Y+3, r26	; 0x03
    363c:	bc 83       	std	Y+4, r27	; 0x04
    363e:	89 81       	ldd	r24, Y+1	; 0x01
    3640:	9a 81       	ldd	r25, Y+2	; 0x02
    3642:	ab 81       	ldd	r26, Y+3	; 0x03
    3644:	bc 81       	ldd	r27, Y+4	; 0x04
    3646:	00 97       	sbiw	r24, 0x00	; 0
    3648:	a1 05       	cpc	r26, r1
    364a:	b1 05       	cpc	r27, r1
    364c:	61 f7       	brne	.-40     	; 0x3626 <LCD_voidWriteCommand+0x160>
    364e:	8d 81       	ldd	r24, Y+5	; 0x05
    3650:	9e 81       	ldd	r25, Y+6	; 0x06
    3652:	af 81       	ldd	r26, Y+7	; 0x07
    3654:	b8 85       	ldd	r27, Y+8	; 0x08
    3656:	01 97       	sbiw	r24, 0x01	; 1
    3658:	a1 09       	sbc	r26, r1
    365a:	b1 09       	sbc	r27, r1
    365c:	8d 83       	std	Y+5, r24	; 0x05
    365e:	9e 83       	std	Y+6, r25	; 0x06
    3660:	af 83       	std	Y+7, r26	; 0x07
    3662:	b8 87       	std	Y+8, r27	; 0x08
    3664:	8d 81       	ldd	r24, Y+5	; 0x05
    3666:	9e 81       	ldd	r25, Y+6	; 0x06
    3668:	af 81       	ldd	r26, Y+7	; 0x07
    366a:	b8 85       	ldd	r27, Y+8	; 0x08
    366c:	00 97       	sbiw	r24, 0x00	; 0
    366e:	a1 05       	cpc	r26, r1
    3670:	b1 05       	cpc	r27, r1
    3672:	81 f6       	brne	.-96     	; 0x3614 <LCD_voidWriteCommand+0x14e>
 	 /*Set EN pin 0 (LCD Write data to its reg)*/
 	 DIO_enuWritePin(LCD_EN, DIO_LOW);
    3674:	85 e1       	ldi	r24, 0x15	; 21
    3676:	60 e0       	ldi	r22, 0x00	; 0
    3678:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
}/*end of LCD_voidWriteCommand()*/
    367c:	63 96       	adiw	r28, 0x13	; 19
    367e:	0f b6       	in	r0, 0x3f	; 63
    3680:	f8 94       	cli
    3682:	de bf       	out	0x3e, r29	; 62
    3684:	0f be       	out	0x3f, r0	; 63
    3686:	cd bf       	out	0x3d, r28	; 61
    3688:	cf 91       	pop	r28
    368a:	df 91       	pop	r29
    368c:	08 95       	ret

0000368e <LCD_voidWriteData>:
* Description : write Data to LCD
* Arguments   : u8 Data
* return      : void
*/
void LCD_voidWriteData(u8 u8Data)
  {
    368e:	df 93       	push	r29
    3690:	cf 93       	push	r28
    3692:	cd b7       	in	r28, 0x3d	; 61
    3694:	de b7       	in	r29, 0x3e	; 62
    3696:	63 97       	sbiw	r28, 0x13	; 19
    3698:	0f b6       	in	r0, 0x3f	; 63
    369a:	f8 94       	cli
    369c:	de bf       	out	0x3e, r29	; 62
    369e:	0f be       	out	0x3f, r0	; 63
    36a0:	cd bf       	out	0x3d, r28	; 61
    36a2:	8b 8b       	std	Y+19, r24	; 0x13
 	 /*Set RW pin 0 (Write Mode selected)*/
	 DIO_enuWritePin(LCD_RW, DIO_LOW);
    36a4:	86 e1       	ldi	r24, 0x16	; 22
    36a6:	60 e0       	ldi	r22, 0x00	; 0
    36a8:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
 	 /*Set RS pin 1 (Data register selected)*/
 	 DIO_enuWritePin(LCD_RS, DIO_HIGH);
    36ac:	87 e1       	ldi	r24, 0x17	; 23
    36ae:	61 e0       	ldi	r22, 0x01	; 1
    36b0:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
 	 /*output first 4 Data bits to Data Bus*/
 	 for(u8 i=4;i<8;i++)
    36b4:	84 e0       	ldi	r24, 0x04	; 4
    36b6:	8a 8b       	std	Y+18, r24	; 0x12
    36b8:	1b c0       	rjmp	.+54     	; 0x36f0 <LCD_voidWriteData+0x62>
 	 {
 		 /*Output value of Data bit i at Data register DIO Pin i*/
 		 upperBoundVal[i-4] = GET_BIT(u8Data, i);
    36ba:	8a 89       	ldd	r24, Y+18	; 0x12
    36bc:	88 2f       	mov	r24, r24
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	ac 01       	movw	r20, r24
    36c2:	44 50       	subi	r20, 0x04	; 4
    36c4:	50 40       	sbci	r21, 0x00	; 0
    36c6:	8b 89       	ldd	r24, Y+19	; 0x13
    36c8:	28 2f       	mov	r18, r24
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	8a 89       	ldd	r24, Y+18	; 0x12
    36ce:	88 2f       	mov	r24, r24
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	b9 01       	movw	r22, r18
    36d4:	02 c0       	rjmp	.+4      	; 0x36da <LCD_voidWriteData+0x4c>
    36d6:	75 95       	asr	r23
    36d8:	67 95       	ror	r22
    36da:	8a 95       	dec	r24
    36dc:	e2 f7       	brpl	.-8      	; 0x36d6 <LCD_voidWriteData+0x48>
    36de:	cb 01       	movw	r24, r22
    36e0:	81 70       	andi	r24, 0x01	; 1
    36e2:	fa 01       	movw	r30, r20
    36e4:	e8 51       	subi	r30, 0x18	; 24
    36e6:	ff 4f       	sbci	r31, 0xFF	; 255
    36e8:	80 83       	st	Z, r24
 	 /*Set RW pin 0 (Write Mode selected)*/
	 DIO_enuWritePin(LCD_RW, DIO_LOW);
 	 /*Set RS pin 1 (Data register selected)*/
 	 DIO_enuWritePin(LCD_RS, DIO_HIGH);
 	 /*output first 4 Data bits to Data Bus*/
 	 for(u8 i=4;i<8;i++)
    36ea:	8a 89       	ldd	r24, Y+18	; 0x12
    36ec:	8f 5f       	subi	r24, 0xFF	; 255
    36ee:	8a 8b       	std	Y+18, r24	; 0x12
    36f0:	8a 89       	ldd	r24, Y+18	; 0x12
    36f2:	88 30       	cpi	r24, 0x08	; 8
    36f4:	10 f3       	brcs	.-60     	; 0x36ba <LCD_voidWriteData+0x2c>
 	 {
 		 /*Output value of Data bit i at Data register DIO Pin i*/
 		 upperBoundVal[i-4] = GET_BIT(u8Data, i);
 	 }
 	 DIO_enuWriteGroup(upperBoundGroup, upperBoundVal, 4);
    36f6:	84 e8       	ldi	r24, 0x84	; 132
    36f8:	90 e0       	ldi	r25, 0x00	; 0
    36fa:	28 ee       	ldi	r18, 0xE8	; 232
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	b9 01       	movw	r22, r18
    3700:	44 e0       	ldi	r20, 0x04	; 4
    3702:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_enuWriteGroup>
 	 /*latch sent data*/
 	 /*Set EN pin 1 (LCD Read data )*/
 	 DIO_enuWritePin(LCD_EN, DIO_HIGH);
    3706:	85 e1       	ldi	r24, 0x15	; 21
    3708:	61 e0       	ldi	r22, 0x01	; 1
    370a:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
 	 //_delay_ms(2);
 	 Delay_ms(2);
    370e:	1e 86       	std	Y+14, r1	; 0x0e
    3710:	1f 86       	std	Y+15, r1	; 0x0f
    3712:	18 8a       	std	Y+16, r1	; 0x10
    3714:	19 8a       	std	Y+17, r1	; 0x11
    3716:	28 c0       	rjmp	.+80     	; 0x3768 <LCD_voidWriteData+0xda>
    3718:	80 ed       	ldi	r24, 0xD0	; 208
    371a:	97 e0       	ldi	r25, 0x07	; 7
    371c:	a0 e0       	ldi	r26, 0x00	; 0
    371e:	b0 e0       	ldi	r27, 0x00	; 0
    3720:	8a 87       	std	Y+10, r24	; 0x0a
    3722:	9b 87       	std	Y+11, r25	; 0x0b
    3724:	ac 87       	std	Y+12, r26	; 0x0c
    3726:	bd 87       	std	Y+13, r27	; 0x0d
    3728:	0c c0       	rjmp	.+24     	; 0x3742 <LCD_voidWriteData+0xb4>
    372a:	00 00       	nop
    372c:	8a 85       	ldd	r24, Y+10	; 0x0a
    372e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3730:	ac 85       	ldd	r26, Y+12	; 0x0c
    3732:	bd 85       	ldd	r27, Y+13	; 0x0d
    3734:	01 97       	sbiw	r24, 0x01	; 1
    3736:	a1 09       	sbc	r26, r1
    3738:	b1 09       	sbc	r27, r1
    373a:	8a 87       	std	Y+10, r24	; 0x0a
    373c:	9b 87       	std	Y+11, r25	; 0x0b
    373e:	ac 87       	std	Y+12, r26	; 0x0c
    3740:	bd 87       	std	Y+13, r27	; 0x0d
    3742:	8a 85       	ldd	r24, Y+10	; 0x0a
    3744:	9b 85       	ldd	r25, Y+11	; 0x0b
    3746:	ac 85       	ldd	r26, Y+12	; 0x0c
    3748:	bd 85       	ldd	r27, Y+13	; 0x0d
    374a:	00 97       	sbiw	r24, 0x00	; 0
    374c:	a1 05       	cpc	r26, r1
    374e:	b1 05       	cpc	r27, r1
    3750:	61 f7       	brne	.-40     	; 0x372a <LCD_voidWriteData+0x9c>
    3752:	8e 85       	ldd	r24, Y+14	; 0x0e
    3754:	9f 85       	ldd	r25, Y+15	; 0x0f
    3756:	a8 89       	ldd	r26, Y+16	; 0x10
    3758:	b9 89       	ldd	r27, Y+17	; 0x11
    375a:	01 97       	sbiw	r24, 0x01	; 1
    375c:	a1 09       	sbc	r26, r1
    375e:	b1 09       	sbc	r27, r1
    3760:	8e 87       	std	Y+14, r24	; 0x0e
    3762:	9f 87       	std	Y+15, r25	; 0x0f
    3764:	a8 8b       	std	Y+16, r26	; 0x10
    3766:	b9 8b       	std	Y+17, r27	; 0x11
    3768:	8e 85       	ldd	r24, Y+14	; 0x0e
    376a:	9f 85       	ldd	r25, Y+15	; 0x0f
    376c:	a8 89       	ldd	r26, Y+16	; 0x10
    376e:	b9 89       	ldd	r27, Y+17	; 0x11
    3770:	00 97       	sbiw	r24, 0x00	; 0
    3772:	a1 05       	cpc	r26, r1
    3774:	b1 05       	cpc	r27, r1
    3776:	81 f6       	brne	.-96     	; 0x3718 <LCD_voidWriteData+0x8a>
 	 /*Set EN pin 0 (LCD Write data to its reg)*/
 	 DIO_enuWritePin(LCD_EN, DIO_LOW);
    3778:	85 e1       	ldi	r24, 0x15	; 21
    377a:	60 e0       	ldi	r22, 0x00	; 0
    377c:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>

 	 /*output second 4 bits Data to data bus*/
 	 for(u8 i=0;i<4;i++)
    3780:	19 86       	std	Y+9, r1	; 0x09
    3782:	18 c0       	rjmp	.+48     	; 0x37b4 <LCD_voidWriteData+0x126>
 	 {
 		 /*Output value of Data bit i at Data register DIO Pin i*/
 		 upperBoundVal[i] = GET_BIT(u8Data, i);
    3784:	89 85       	ldd	r24, Y+9	; 0x09
    3786:	48 2f       	mov	r20, r24
    3788:	50 e0       	ldi	r21, 0x00	; 0
    378a:	8b 89       	ldd	r24, Y+19	; 0x13
    378c:	28 2f       	mov	r18, r24
    378e:	30 e0       	ldi	r19, 0x00	; 0
    3790:	89 85       	ldd	r24, Y+9	; 0x09
    3792:	88 2f       	mov	r24, r24
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	b9 01       	movw	r22, r18
    3798:	02 c0       	rjmp	.+4      	; 0x379e <LCD_voidWriteData+0x110>
    379a:	75 95       	asr	r23
    379c:	67 95       	ror	r22
    379e:	8a 95       	dec	r24
    37a0:	e2 f7       	brpl	.-8      	; 0x379a <LCD_voidWriteData+0x10c>
    37a2:	cb 01       	movw	r24, r22
    37a4:	81 70       	andi	r24, 0x01	; 1
    37a6:	fa 01       	movw	r30, r20
    37a8:	e8 51       	subi	r30, 0x18	; 24
    37aa:	ff 4f       	sbci	r31, 0xFF	; 255
    37ac:	80 83       	st	Z, r24
 	 Delay_ms(2);
 	 /*Set EN pin 0 (LCD Write data to its reg)*/
 	 DIO_enuWritePin(LCD_EN, DIO_LOW);

 	 /*output second 4 bits Data to data bus*/
 	 for(u8 i=0;i<4;i++)
    37ae:	89 85       	ldd	r24, Y+9	; 0x09
    37b0:	8f 5f       	subi	r24, 0xFF	; 255
    37b2:	89 87       	std	Y+9, r24	; 0x09
    37b4:	89 85       	ldd	r24, Y+9	; 0x09
    37b6:	84 30       	cpi	r24, 0x04	; 4
    37b8:	28 f3       	brcs	.-54     	; 0x3784 <LCD_voidWriteData+0xf6>
 	 {
 		 /*Output value of Data bit i at Data register DIO Pin i*/
 		 upperBoundVal[i] = GET_BIT(u8Data, i);
 	 }
 	 DIO_enuWriteGroup(upperBoundGroup, upperBoundVal, 4);
    37ba:	84 e8       	ldi	r24, 0x84	; 132
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	28 ee       	ldi	r18, 0xE8	; 232
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	b9 01       	movw	r22, r18
    37c4:	44 e0       	ldi	r20, 0x04	; 4
    37c6:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_enuWriteGroup>
 	 /*latch sent data*/
 	 /*Set EN pin 1 (LCD Read data)*/
 	 DIO_enuWritePin(LCD_EN, DIO_HIGH);
    37ca:	85 e1       	ldi	r24, 0x15	; 21
    37cc:	61 e0       	ldi	r22, 0x01	; 1
    37ce:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
 	 //_delay_ms(2);
 	 Delay_ms(2);
    37d2:	1d 82       	std	Y+5, r1	; 0x05
    37d4:	1e 82       	std	Y+6, r1	; 0x06
    37d6:	1f 82       	std	Y+7, r1	; 0x07
    37d8:	18 86       	std	Y+8, r1	; 0x08
    37da:	28 c0       	rjmp	.+80     	; 0x382c <LCD_voidWriteData+0x19e>
    37dc:	80 ed       	ldi	r24, 0xD0	; 208
    37de:	97 e0       	ldi	r25, 0x07	; 7
    37e0:	a0 e0       	ldi	r26, 0x00	; 0
    37e2:	b0 e0       	ldi	r27, 0x00	; 0
    37e4:	89 83       	std	Y+1, r24	; 0x01
    37e6:	9a 83       	std	Y+2, r25	; 0x02
    37e8:	ab 83       	std	Y+3, r26	; 0x03
    37ea:	bc 83       	std	Y+4, r27	; 0x04
    37ec:	0c c0       	rjmp	.+24     	; 0x3806 <LCD_voidWriteData+0x178>
    37ee:	00 00       	nop
    37f0:	89 81       	ldd	r24, Y+1	; 0x01
    37f2:	9a 81       	ldd	r25, Y+2	; 0x02
    37f4:	ab 81       	ldd	r26, Y+3	; 0x03
    37f6:	bc 81       	ldd	r27, Y+4	; 0x04
    37f8:	01 97       	sbiw	r24, 0x01	; 1
    37fa:	a1 09       	sbc	r26, r1
    37fc:	b1 09       	sbc	r27, r1
    37fe:	89 83       	std	Y+1, r24	; 0x01
    3800:	9a 83       	std	Y+2, r25	; 0x02
    3802:	ab 83       	std	Y+3, r26	; 0x03
    3804:	bc 83       	std	Y+4, r27	; 0x04
    3806:	89 81       	ldd	r24, Y+1	; 0x01
    3808:	9a 81       	ldd	r25, Y+2	; 0x02
    380a:	ab 81       	ldd	r26, Y+3	; 0x03
    380c:	bc 81       	ldd	r27, Y+4	; 0x04
    380e:	00 97       	sbiw	r24, 0x00	; 0
    3810:	a1 05       	cpc	r26, r1
    3812:	b1 05       	cpc	r27, r1
    3814:	61 f7       	brne	.-40     	; 0x37ee <LCD_voidWriteData+0x160>
    3816:	8d 81       	ldd	r24, Y+5	; 0x05
    3818:	9e 81       	ldd	r25, Y+6	; 0x06
    381a:	af 81       	ldd	r26, Y+7	; 0x07
    381c:	b8 85       	ldd	r27, Y+8	; 0x08
    381e:	01 97       	sbiw	r24, 0x01	; 1
    3820:	a1 09       	sbc	r26, r1
    3822:	b1 09       	sbc	r27, r1
    3824:	8d 83       	std	Y+5, r24	; 0x05
    3826:	9e 83       	std	Y+6, r25	; 0x06
    3828:	af 83       	std	Y+7, r26	; 0x07
    382a:	b8 87       	std	Y+8, r27	; 0x08
    382c:	8d 81       	ldd	r24, Y+5	; 0x05
    382e:	9e 81       	ldd	r25, Y+6	; 0x06
    3830:	af 81       	ldd	r26, Y+7	; 0x07
    3832:	b8 85       	ldd	r27, Y+8	; 0x08
    3834:	00 97       	sbiw	r24, 0x00	; 0
    3836:	a1 05       	cpc	r26, r1
    3838:	b1 05       	cpc	r27, r1
    383a:	81 f6       	brne	.-96     	; 0x37dc <LCD_voidWriteData+0x14e>
 	 /*Set EN pin 0 (LCD Write data to its reg)*/
 	 DIO_enuWritePin(LCD_EN, DIO_LOW);
    383c:	85 e1       	ldi	r24, 0x15	; 21
    383e:	60 e0       	ldi	r22, 0x00	; 0
    3840:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>

  }/*end of LCD_voidWriteData()*/
    3844:	63 96       	adiw	r28, 0x13	; 19
    3846:	0f b6       	in	r0, 0x3f	; 63
    3848:	f8 94       	cli
    384a:	de bf       	out	0x3e, r29	; 62
    384c:	0f be       	out	0x3f, r0	; 63
    384e:	cd bf       	out	0x3d, r28	; 61
    3850:	cf 91       	pop	r28
    3852:	df 91       	pop	r29
    3854:	08 95       	ret

00003856 <LCD_voidInitialize>:

 #endif /*end of Mode select*/


void LCD_voidInitialize(void)
{
    3856:	df 93       	push	r29
    3858:	cf 93       	push	r28
    385a:	cd b7       	in	r28, 0x3d	; 61
    385c:	de b7       	in	r29, 0x3e	; 62
    385e:	a8 97       	sbiw	r28, 0x28	; 40
    3860:	0f b6       	in	r0, 0x3f	; 63
    3862:	f8 94       	cli
    3864:	de bf       	out	0x3e, r29	; 62
    3866:	0f be       	out	0x3f, r0	; 63
    3868:	cd bf       	out	0x3d, r28	; 61

	 //_delay_ms(50);
	 Delay_ms(50);
    386a:	86 e0       	ldi	r24, 0x06	; 6
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	a0 e0       	ldi	r26, 0x00	; 0
    3870:	b0 e0       	ldi	r27, 0x00	; 0
    3872:	8d a3       	std	Y+37, r24	; 0x25
    3874:	9e a3       	std	Y+38, r25	; 0x26
    3876:	af a3       	std	Y+39, r26	; 0x27
    3878:	b8 a7       	std	Y+40, r27	; 0x28
    387a:	28 c0       	rjmp	.+80     	; 0x38cc <LCD_voidInitialize+0x76>
    387c:	80 ed       	ldi	r24, 0xD0	; 208
    387e:	97 e0       	ldi	r25, 0x07	; 7
    3880:	a0 e0       	ldi	r26, 0x00	; 0
    3882:	b0 e0       	ldi	r27, 0x00	; 0
    3884:	89 a3       	std	Y+33, r24	; 0x21
    3886:	9a a3       	std	Y+34, r25	; 0x22
    3888:	ab a3       	std	Y+35, r26	; 0x23
    388a:	bc a3       	std	Y+36, r27	; 0x24
    388c:	0c c0       	rjmp	.+24     	; 0x38a6 <LCD_voidInitialize+0x50>
    388e:	00 00       	nop
    3890:	89 a1       	ldd	r24, Y+33	; 0x21
    3892:	9a a1       	ldd	r25, Y+34	; 0x22
    3894:	ab a1       	ldd	r26, Y+35	; 0x23
    3896:	bc a1       	ldd	r27, Y+36	; 0x24
    3898:	01 97       	sbiw	r24, 0x01	; 1
    389a:	a1 09       	sbc	r26, r1
    389c:	b1 09       	sbc	r27, r1
    389e:	89 a3       	std	Y+33, r24	; 0x21
    38a0:	9a a3       	std	Y+34, r25	; 0x22
    38a2:	ab a3       	std	Y+35, r26	; 0x23
    38a4:	bc a3       	std	Y+36, r27	; 0x24
    38a6:	89 a1       	ldd	r24, Y+33	; 0x21
    38a8:	9a a1       	ldd	r25, Y+34	; 0x22
    38aa:	ab a1       	ldd	r26, Y+35	; 0x23
    38ac:	bc a1       	ldd	r27, Y+36	; 0x24
    38ae:	00 97       	sbiw	r24, 0x00	; 0
    38b0:	a1 05       	cpc	r26, r1
    38b2:	b1 05       	cpc	r27, r1
    38b4:	61 f7       	brne	.-40     	; 0x388e <LCD_voidInitialize+0x38>
    38b6:	8d a1       	ldd	r24, Y+37	; 0x25
    38b8:	9e a1       	ldd	r25, Y+38	; 0x26
    38ba:	af a1       	ldd	r26, Y+39	; 0x27
    38bc:	b8 a5       	ldd	r27, Y+40	; 0x28
    38be:	01 97       	sbiw	r24, 0x01	; 1
    38c0:	a1 09       	sbc	r26, r1
    38c2:	b1 09       	sbc	r27, r1
    38c4:	8d a3       	std	Y+37, r24	; 0x25
    38c6:	9e a3       	std	Y+38, r25	; 0x26
    38c8:	af a3       	std	Y+39, r26	; 0x27
    38ca:	b8 a7       	std	Y+40, r27	; 0x28
    38cc:	8d a1       	ldd	r24, Y+37	; 0x25
    38ce:	9e a1       	ldd	r25, Y+38	; 0x26
    38d0:	af a1       	ldd	r26, Y+39	; 0x27
    38d2:	b8 a5       	ldd	r27, Y+40	; 0x28
    38d4:	00 97       	sbiw	r24, 0x00	; 0
    38d6:	a1 05       	cpc	r26, r1
    38d8:	b1 05       	cpc	r27, r1
    38da:	81 f6       	brne	.-96     	; 0x387c <LCD_voidInitialize+0x26>

	 /*==============================================================
	  * Choose font size and number of lines
	  *==============================================================*/
	 /*Set Font size value 5*7 dots or 5*10 dots*/
	  L_UTILS_SET_BIT_VALUE(FontSizeAndLineCommand,LCD_FONT_BIT,LCD_FONT_SIZE);
    38dc:	80 91 83 00 	lds	r24, 0x0083
    38e0:	8b 7f       	andi	r24, 0xFB	; 251
    38e2:	80 93 83 00 	sts	0x0083, r24
	 /*Set number of lines 1 or 2*/
	  L_UTILS_SET_BIT_VALUE(FontSizeAndLineCommand,LCD_LINE_BIT,LCD_LINE_MODE);
    38e6:	80 91 83 00 	lds	r24, 0x0083
    38ea:	88 60       	ori	r24, 0x08	; 8
    38ec:	80 93 83 00 	sts	0x0083, r24
	 /*====================================
	  * 4Bit Mode initialization
	  *====================================*/
    #elif (LCD_MODE == LCD_4BIT)
		/*send 4BIT Function set instruction two times*/
		LCD_voidWriteCommand(LCD_FN_SET_4BIT);
    38f0:	82 e2       	ldi	r24, 0x22	; 34
    38f2:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <LCD_voidWriteCommand>
		/*send Function set instruction for font and number of lines*/
		LCD_voidWriteCommand(FontSizeAndLineCommand);
    38f6:	80 91 83 00 	lds	r24, 0x0083
    38fa:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <LCD_voidWriteCommand>
		//_delay_ms(1);
		Delay_ms(1);
    38fe:	1d 8e       	std	Y+29, r1	; 0x1d
    3900:	1e 8e       	std	Y+30, r1	; 0x1e
    3902:	1f 8e       	std	Y+31, r1	; 0x1f
    3904:	18 a2       	std	Y+32, r1	; 0x20
    3906:	28 c0       	rjmp	.+80     	; 0x3958 <LCD_voidInitialize+0x102>
    3908:	80 ed       	ldi	r24, 0xD0	; 208
    390a:	97 e0       	ldi	r25, 0x07	; 7
    390c:	a0 e0       	ldi	r26, 0x00	; 0
    390e:	b0 e0       	ldi	r27, 0x00	; 0
    3910:	89 8f       	std	Y+25, r24	; 0x19
    3912:	9a 8f       	std	Y+26, r25	; 0x1a
    3914:	ab 8f       	std	Y+27, r26	; 0x1b
    3916:	bc 8f       	std	Y+28, r27	; 0x1c
    3918:	0c c0       	rjmp	.+24     	; 0x3932 <LCD_voidInitialize+0xdc>
    391a:	00 00       	nop
    391c:	89 8d       	ldd	r24, Y+25	; 0x19
    391e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3920:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3922:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3924:	01 97       	sbiw	r24, 0x01	; 1
    3926:	a1 09       	sbc	r26, r1
    3928:	b1 09       	sbc	r27, r1
    392a:	89 8f       	std	Y+25, r24	; 0x19
    392c:	9a 8f       	std	Y+26, r25	; 0x1a
    392e:	ab 8f       	std	Y+27, r26	; 0x1b
    3930:	bc 8f       	std	Y+28, r27	; 0x1c
    3932:	89 8d       	ldd	r24, Y+25	; 0x19
    3934:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3936:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3938:	bc 8d       	ldd	r27, Y+28	; 0x1c
    393a:	00 97       	sbiw	r24, 0x00	; 0
    393c:	a1 05       	cpc	r26, r1
    393e:	b1 05       	cpc	r27, r1
    3940:	61 f7       	brne	.-40     	; 0x391a <LCD_voidInitialize+0xc4>
    3942:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3944:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3946:	af 8d       	ldd	r26, Y+31	; 0x1f
    3948:	b8 a1       	ldd	r27, Y+32	; 0x20
    394a:	01 97       	sbiw	r24, 0x01	; 1
    394c:	a1 09       	sbc	r26, r1
    394e:	b1 09       	sbc	r27, r1
    3950:	8d 8f       	std	Y+29, r24	; 0x1d
    3952:	9e 8f       	std	Y+30, r25	; 0x1e
    3954:	af 8f       	std	Y+31, r26	; 0x1f
    3956:	b8 a3       	std	Y+32, r27	; 0x20
    3958:	8d 8d       	ldd	r24, Y+29	; 0x1d
    395a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    395c:	af 8d       	ldd	r26, Y+31	; 0x1f
    395e:	b8 a1       	ldd	r27, Y+32	; 0x20
    3960:	00 97       	sbiw	r24, 0x00	; 0
    3962:	a1 05       	cpc	r26, r1
    3964:	b1 05       	cpc	r27, r1
    3966:	81 f6       	brne	.-96     	; 0x3908 <LCD_voidInitialize+0xb2>
	 #endif

	 /*send Display ON OFF instruction*/
	 LCD_voidWriteCommand(DisplayAndCursorCommand);
    3968:	80 91 82 00 	lds	r24, 0x0082
    396c:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <LCD_voidWriteCommand>
	 //_delay_ms(1);
	 Delay_ms(1);
    3970:	1d 8a       	std	Y+21, r1	; 0x15
    3972:	1e 8a       	std	Y+22, r1	; 0x16
    3974:	1f 8a       	std	Y+23, r1	; 0x17
    3976:	18 8e       	std	Y+24, r1	; 0x18
    3978:	28 c0       	rjmp	.+80     	; 0x39ca <LCD_voidInitialize+0x174>
    397a:	80 ed       	ldi	r24, 0xD0	; 208
    397c:	97 e0       	ldi	r25, 0x07	; 7
    397e:	a0 e0       	ldi	r26, 0x00	; 0
    3980:	b0 e0       	ldi	r27, 0x00	; 0
    3982:	89 8b       	std	Y+17, r24	; 0x11
    3984:	9a 8b       	std	Y+18, r25	; 0x12
    3986:	ab 8b       	std	Y+19, r26	; 0x13
    3988:	bc 8b       	std	Y+20, r27	; 0x14
    398a:	0c c0       	rjmp	.+24     	; 0x39a4 <LCD_voidInitialize+0x14e>
    398c:	00 00       	nop
    398e:	89 89       	ldd	r24, Y+17	; 0x11
    3990:	9a 89       	ldd	r25, Y+18	; 0x12
    3992:	ab 89       	ldd	r26, Y+19	; 0x13
    3994:	bc 89       	ldd	r27, Y+20	; 0x14
    3996:	01 97       	sbiw	r24, 0x01	; 1
    3998:	a1 09       	sbc	r26, r1
    399a:	b1 09       	sbc	r27, r1
    399c:	89 8b       	std	Y+17, r24	; 0x11
    399e:	9a 8b       	std	Y+18, r25	; 0x12
    39a0:	ab 8b       	std	Y+19, r26	; 0x13
    39a2:	bc 8b       	std	Y+20, r27	; 0x14
    39a4:	89 89       	ldd	r24, Y+17	; 0x11
    39a6:	9a 89       	ldd	r25, Y+18	; 0x12
    39a8:	ab 89       	ldd	r26, Y+19	; 0x13
    39aa:	bc 89       	ldd	r27, Y+20	; 0x14
    39ac:	00 97       	sbiw	r24, 0x00	; 0
    39ae:	a1 05       	cpc	r26, r1
    39b0:	b1 05       	cpc	r27, r1
    39b2:	61 f7       	brne	.-40     	; 0x398c <LCD_voidInitialize+0x136>
    39b4:	8d 89       	ldd	r24, Y+21	; 0x15
    39b6:	9e 89       	ldd	r25, Y+22	; 0x16
    39b8:	af 89       	ldd	r26, Y+23	; 0x17
    39ba:	b8 8d       	ldd	r27, Y+24	; 0x18
    39bc:	01 97       	sbiw	r24, 0x01	; 1
    39be:	a1 09       	sbc	r26, r1
    39c0:	b1 09       	sbc	r27, r1
    39c2:	8d 8b       	std	Y+21, r24	; 0x15
    39c4:	9e 8b       	std	Y+22, r25	; 0x16
    39c6:	af 8b       	std	Y+23, r26	; 0x17
    39c8:	b8 8f       	std	Y+24, r27	; 0x18
    39ca:	8d 89       	ldd	r24, Y+21	; 0x15
    39cc:	9e 89       	ldd	r25, Y+22	; 0x16
    39ce:	af 89       	ldd	r26, Y+23	; 0x17
    39d0:	b8 8d       	ldd	r27, Y+24	; 0x18
    39d2:	00 97       	sbiw	r24, 0x00	; 0
    39d4:	a1 05       	cpc	r26, r1
    39d6:	b1 05       	cpc	r27, r1
    39d8:	81 f6       	brne	.-96     	; 0x397a <LCD_voidInitialize+0x124>
	 /*send Display clear instruction*/
	 LCD_voidWriteCommand(LCD_DISP_CLEAR);
    39da:	81 e0       	ldi	r24, 0x01	; 1
    39dc:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <LCD_voidWriteCommand>
	 //_delay_ms(2);
	 Delay_ms(2);
    39e0:	1d 86       	std	Y+13, r1	; 0x0d
    39e2:	1e 86       	std	Y+14, r1	; 0x0e
    39e4:	1f 86       	std	Y+15, r1	; 0x0f
    39e6:	18 8a       	std	Y+16, r1	; 0x10
    39e8:	28 c0       	rjmp	.+80     	; 0x3a3a <LCD_voidInitialize+0x1e4>
    39ea:	80 ed       	ldi	r24, 0xD0	; 208
    39ec:	97 e0       	ldi	r25, 0x07	; 7
    39ee:	a0 e0       	ldi	r26, 0x00	; 0
    39f0:	b0 e0       	ldi	r27, 0x00	; 0
    39f2:	89 87       	std	Y+9, r24	; 0x09
    39f4:	9a 87       	std	Y+10, r25	; 0x0a
    39f6:	ab 87       	std	Y+11, r26	; 0x0b
    39f8:	bc 87       	std	Y+12, r27	; 0x0c
    39fa:	0c c0       	rjmp	.+24     	; 0x3a14 <LCD_voidInitialize+0x1be>
    39fc:	00 00       	nop
    39fe:	89 85       	ldd	r24, Y+9	; 0x09
    3a00:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a02:	ab 85       	ldd	r26, Y+11	; 0x0b
    3a04:	bc 85       	ldd	r27, Y+12	; 0x0c
    3a06:	01 97       	sbiw	r24, 0x01	; 1
    3a08:	a1 09       	sbc	r26, r1
    3a0a:	b1 09       	sbc	r27, r1
    3a0c:	89 87       	std	Y+9, r24	; 0x09
    3a0e:	9a 87       	std	Y+10, r25	; 0x0a
    3a10:	ab 87       	std	Y+11, r26	; 0x0b
    3a12:	bc 87       	std	Y+12, r27	; 0x0c
    3a14:	89 85       	ldd	r24, Y+9	; 0x09
    3a16:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a18:	ab 85       	ldd	r26, Y+11	; 0x0b
    3a1a:	bc 85       	ldd	r27, Y+12	; 0x0c
    3a1c:	00 97       	sbiw	r24, 0x00	; 0
    3a1e:	a1 05       	cpc	r26, r1
    3a20:	b1 05       	cpc	r27, r1
    3a22:	61 f7       	brne	.-40     	; 0x39fc <LCD_voidInitialize+0x1a6>
    3a24:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a26:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a28:	af 85       	ldd	r26, Y+15	; 0x0f
    3a2a:	b8 89       	ldd	r27, Y+16	; 0x10
    3a2c:	01 97       	sbiw	r24, 0x01	; 1
    3a2e:	a1 09       	sbc	r26, r1
    3a30:	b1 09       	sbc	r27, r1
    3a32:	8d 87       	std	Y+13, r24	; 0x0d
    3a34:	9e 87       	std	Y+14, r25	; 0x0e
    3a36:	af 87       	std	Y+15, r26	; 0x0f
    3a38:	b8 8b       	std	Y+16, r27	; 0x10
    3a3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a3e:	af 85       	ldd	r26, Y+15	; 0x0f
    3a40:	b8 89       	ldd	r27, Y+16	; 0x10
    3a42:	00 97       	sbiw	r24, 0x00	; 0
    3a44:	a1 05       	cpc	r26, r1
    3a46:	b1 05       	cpc	r27, r1
    3a48:	81 f6       	brne	.-96     	; 0x39ea <LCD_voidInitialize+0x194>
	 /*send ENTRY MODE set instruction*/
	 LCD_voidWriteCommand(LCD_ENTRY_MODE);
    3a4a:	86 e0       	ldi	r24, 0x06	; 6
    3a4c:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <LCD_voidWriteCommand>
	 //_delay_ms(2);
	 Delay_ms(2);
    3a50:	1d 82       	std	Y+5, r1	; 0x05
    3a52:	1e 82       	std	Y+6, r1	; 0x06
    3a54:	1f 82       	std	Y+7, r1	; 0x07
    3a56:	18 86       	std	Y+8, r1	; 0x08
    3a58:	28 c0       	rjmp	.+80     	; 0x3aaa <LCD_voidInitialize+0x254>
    3a5a:	80 ed       	ldi	r24, 0xD0	; 208
    3a5c:	97 e0       	ldi	r25, 0x07	; 7
    3a5e:	a0 e0       	ldi	r26, 0x00	; 0
    3a60:	b0 e0       	ldi	r27, 0x00	; 0
    3a62:	89 83       	std	Y+1, r24	; 0x01
    3a64:	9a 83       	std	Y+2, r25	; 0x02
    3a66:	ab 83       	std	Y+3, r26	; 0x03
    3a68:	bc 83       	std	Y+4, r27	; 0x04
    3a6a:	0c c0       	rjmp	.+24     	; 0x3a84 <LCD_voidInitialize+0x22e>
    3a6c:	00 00       	nop
    3a6e:	89 81       	ldd	r24, Y+1	; 0x01
    3a70:	9a 81       	ldd	r25, Y+2	; 0x02
    3a72:	ab 81       	ldd	r26, Y+3	; 0x03
    3a74:	bc 81       	ldd	r27, Y+4	; 0x04
    3a76:	01 97       	sbiw	r24, 0x01	; 1
    3a78:	a1 09       	sbc	r26, r1
    3a7a:	b1 09       	sbc	r27, r1
    3a7c:	89 83       	std	Y+1, r24	; 0x01
    3a7e:	9a 83       	std	Y+2, r25	; 0x02
    3a80:	ab 83       	std	Y+3, r26	; 0x03
    3a82:	bc 83       	std	Y+4, r27	; 0x04
    3a84:	89 81       	ldd	r24, Y+1	; 0x01
    3a86:	9a 81       	ldd	r25, Y+2	; 0x02
    3a88:	ab 81       	ldd	r26, Y+3	; 0x03
    3a8a:	bc 81       	ldd	r27, Y+4	; 0x04
    3a8c:	00 97       	sbiw	r24, 0x00	; 0
    3a8e:	a1 05       	cpc	r26, r1
    3a90:	b1 05       	cpc	r27, r1
    3a92:	61 f7       	brne	.-40     	; 0x3a6c <LCD_voidInitialize+0x216>
    3a94:	8d 81       	ldd	r24, Y+5	; 0x05
    3a96:	9e 81       	ldd	r25, Y+6	; 0x06
    3a98:	af 81       	ldd	r26, Y+7	; 0x07
    3a9a:	b8 85       	ldd	r27, Y+8	; 0x08
    3a9c:	01 97       	sbiw	r24, 0x01	; 1
    3a9e:	a1 09       	sbc	r26, r1
    3aa0:	b1 09       	sbc	r27, r1
    3aa2:	8d 83       	std	Y+5, r24	; 0x05
    3aa4:	9e 83       	std	Y+6, r25	; 0x06
    3aa6:	af 83       	std	Y+7, r26	; 0x07
    3aa8:	b8 87       	std	Y+8, r27	; 0x08
    3aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    3aac:	9e 81       	ldd	r25, Y+6	; 0x06
    3aae:	af 81       	ldd	r26, Y+7	; 0x07
    3ab0:	b8 85       	ldd	r27, Y+8	; 0x08
    3ab2:	00 97       	sbiw	r24, 0x00	; 0
    3ab4:	a1 05       	cpc	r26, r1
    3ab6:	b1 05       	cpc	r27, r1
    3ab8:	81 f6       	brne	.-96     	; 0x3a5a <LCD_voidInitialize+0x204>


	 /*return to DDRAM address 1*/
	 LCD_voidWriteCommand(LCD_DDRAM_ADD1);
    3aba:	80 e8       	ldi	r24, 0x80	; 128
    3abc:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <LCD_voidWriteCommand>

}/*end of LCD_u8Initialize()*/
    3ac0:	a8 96       	adiw	r28, 0x28	; 40
    3ac2:	0f b6       	in	r0, 0x3f	; 63
    3ac4:	f8 94       	cli
    3ac6:	de bf       	out	0x3e, r29	; 62
    3ac8:	0f be       	out	0x3f, r0	; 63
    3aca:	cd bf       	out	0x3d, r28	; 61
    3acc:	cf 91       	pop	r28
    3ace:	df 91       	pop	r29
    3ad0:	08 95       	ret

00003ad2 <LCD_voidClear>:

void LCD_voidClear(void)
{
    3ad2:	df 93       	push	r29
    3ad4:	cf 93       	push	r28
    3ad6:	cd b7       	in	r28, 0x3d	; 61
    3ad8:	de b7       	in	r29, 0x3e	; 62
	  /*send Display clear instruction*/
	  LCD_voidWriteCommand(LCD_DISP_CLEAR);
    3ada:	81 e0       	ldi	r24, 0x01	; 1
    3adc:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <LCD_voidWriteCommand>

}/*end of LCD_voidClear()*/
    3ae0:	cf 91       	pop	r28
    3ae2:	df 91       	pop	r29
    3ae4:	08 95       	ret

00003ae6 <LCD_voidReturnHome>:


void LCD_voidReturnHome(void)
{
    3ae6:	df 93       	push	r29
    3ae8:	cf 93       	push	r28
    3aea:	cd b7       	in	r28, 0x3d	; 61
    3aec:	de b7       	in	r29, 0x3e	; 62
  /*send Return home instruction*/
  LCD_voidWriteCommand(LCD_RET_HOME);
    3aee:	82 e0       	ldi	r24, 0x02	; 2
    3af0:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <LCD_voidWriteCommand>

}/*end of LCD_voidReturnHome()*/
    3af4:	cf 91       	pop	r28
    3af6:	df 91       	pop	r29
    3af8:	08 95       	ret

00003afa <LCD_voidSelectLine>:

void LCD_voidSelectLine(u8 u8Line)
{
    3afa:	df 93       	push	r29
    3afc:	cf 93       	push	r28
    3afe:	00 d0       	rcall	.+0      	; 0x3b00 <LCD_voidSelectLine+0x6>
    3b00:	0f 92       	push	r0
    3b02:	cd b7       	in	r28, 0x3d	; 61
    3b04:	de b7       	in	r29, 0x3e	; 62
    3b06:	89 83       	std	Y+1, r24	; 0x01
  /*choose line*/
  switch(u8Line)
    3b08:	89 81       	ldd	r24, Y+1	; 0x01
    3b0a:	28 2f       	mov	r18, r24
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	3b 83       	std	Y+3, r19	; 0x03
    3b10:	2a 83       	std	Y+2, r18	; 0x02
    3b12:	8a 81       	ldd	r24, Y+2	; 0x02
    3b14:	9b 81       	ldd	r25, Y+3	; 0x03
    3b16:	81 30       	cpi	r24, 0x01	; 1
    3b18:	91 05       	cpc	r25, r1
    3b1a:	31 f0       	breq	.+12     	; 0x3b28 <LCD_voidSelectLine+0x2e>
    3b1c:	2a 81       	ldd	r18, Y+2	; 0x02
    3b1e:	3b 81       	ldd	r19, Y+3	; 0x03
    3b20:	22 30       	cpi	r18, 0x02	; 2
    3b22:	31 05       	cpc	r19, r1
    3b24:	29 f0       	breq	.+10     	; 0x3b30 <LCD_voidSelectLine+0x36>
    3b26:	07 c0       	rjmp	.+14     	; 0x3b36 <LCD_voidSelectLine+0x3c>
  {
	  case LCD_LINE1 : {  LCD_voidWriteCommand(LCD_DDRAM_ADD1); } break;
    3b28:	80 e8       	ldi	r24, 0x80	; 128
    3b2a:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <LCD_voidWriteCommand>
    3b2e:	03 c0       	rjmp	.+6      	; 0x3b36 <LCD_voidSelectLine+0x3c>
	  case LCD_LINE2 : {  LCD_voidWriteCommand(LCD_DDRAM_ADD2); } break;
    3b30:	80 ec       	ldi	r24, 0xC0	; 192
    3b32:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <LCD_voidWriteCommand>

  }/*end of line switch case*/

}/*end of LCD_voidSelectLine()*/
    3b36:	0f 90       	pop	r0
    3b38:	0f 90       	pop	r0
    3b3a:	0f 90       	pop	r0
    3b3c:	cf 91       	pop	r28
    3b3e:	df 91       	pop	r29
    3b40:	08 95       	ret

00003b42 <LCD_voidSetCursorPosition>:

void LCD_voidSetCursorPosition(u8 u8Line,u8 u8Position)
{
    3b42:	df 93       	push	r29
    3b44:	cf 93       	push	r28
    3b46:	00 d0       	rcall	.+0      	; 0x3b48 <LCD_voidSetCursorPosition+0x6>
    3b48:	00 d0       	rcall	.+0      	; 0x3b4a <LCD_voidSetCursorPosition+0x8>
    3b4a:	cd b7       	in	r28, 0x3d	; 61
    3b4c:	de b7       	in	r29, 0x3e	; 62
    3b4e:	89 83       	std	Y+1, r24	; 0x01
    3b50:	6a 83       	std	Y+2, r22	; 0x02
  /*choose line*/
  switch(u8Line)
    3b52:	89 81       	ldd	r24, Y+1	; 0x01
    3b54:	28 2f       	mov	r18, r24
    3b56:	30 e0       	ldi	r19, 0x00	; 0
    3b58:	3c 83       	std	Y+4, r19	; 0x04
    3b5a:	2b 83       	std	Y+3, r18	; 0x03
    3b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b60:	81 30       	cpi	r24, 0x01	; 1
    3b62:	91 05       	cpc	r25, r1
    3b64:	31 f0       	breq	.+12     	; 0x3b72 <LCD_voidSetCursorPosition+0x30>
    3b66:	2b 81       	ldd	r18, Y+3	; 0x03
    3b68:	3c 81       	ldd	r19, Y+4	; 0x04
    3b6a:	22 30       	cpi	r18, 0x02	; 2
    3b6c:	31 05       	cpc	r19, r1
    3b6e:	31 f0       	breq	.+12     	; 0x3b7c <LCD_voidSetCursorPosition+0x3a>
    3b70:	09 c0       	rjmp	.+18     	; 0x3b84 <LCD_voidSetCursorPosition+0x42>
  {
	  case LCD_LINE1 : { LCD_voidWriteCommand(LCD_DDRAM_ADD1+ u8Position -1); } break;
    3b72:	8a 81       	ldd	r24, Y+2	; 0x02
    3b74:	81 58       	subi	r24, 0x81	; 129
    3b76:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <LCD_voidWriteCommand>
    3b7a:	04 c0       	rjmp	.+8      	; 0x3b84 <LCD_voidSetCursorPosition+0x42>
	  case LCD_LINE2 : { LCD_voidWriteCommand(LCD_DDRAM_ADD2+ u8Position -1); } break;
    3b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b7e:	81 54       	subi	r24, 0x41	; 65
    3b80:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <LCD_voidWriteCommand>

  }/*end of line switch case*/

}/*end of LCD_voidSetCursorPosition()*/
    3b84:	0f 90       	pop	r0
    3b86:	0f 90       	pop	r0
    3b88:	0f 90       	pop	r0
    3b8a:	0f 90       	pop	r0
    3b8c:	cf 91       	pop	r28
    3b8e:	df 91       	pop	r29
    3b90:	08 95       	ret

00003b92 <LCD_voidDisplayChar>:


void LCD_voidDisplayChar(u8 u8CharData)
{
    3b92:	df 93       	push	r29
    3b94:	cf 93       	push	r28
    3b96:	0f 92       	push	r0
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
    3b9c:	89 83       	std	Y+1, r24	; 0x01
  /*check character type*/
  if( (u8CharData >= 0) && (u8CharData < 10) )
    3b9e:	89 81       	ldd	r24, Y+1	; 0x01
    3ba0:	8a 30       	cpi	r24, 0x0A	; 10
    3ba2:	28 f4       	brcc	.+10     	; 0x3bae <LCD_voidDisplayChar+0x1c>
  {
	  /*if character is number*/
	  LCD_voidWriteData((u8CharData+'0'));
    3ba4:	89 81       	ldd	r24, Y+1	; 0x01
    3ba6:	80 5d       	subi	r24, 0xD0	; 208
    3ba8:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_voidWriteData>
    3bac:	03 c0       	rjmp	.+6      	; 0x3bb4 <LCD_voidDisplayChar+0x22>

  }
  else
  {
	  /*if character is char*/
	  LCD_voidWriteData(u8CharData);
    3bae:	89 81       	ldd	r24, Y+1	; 0x01
    3bb0:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_voidWriteData>

  }/*end of character type check*/


}/*end of LCD_voidDisplayChar*/
    3bb4:	0f 90       	pop	r0
    3bb6:	cf 91       	pop	r28
    3bb8:	df 91       	pop	r29
    3bba:	08 95       	ret

00003bbc <LCD_voidShiftRight>:



void LCD_voidShiftRight(void)
{
    3bbc:	df 93       	push	r29
    3bbe:	cf 93       	push	r28
    3bc0:	cd b7       	in	r28, 0x3d	; 61
    3bc2:	de b7       	in	r29, 0x3e	; 62
	  /*send shift right instruction*/
	  LCD_voidWriteCommand(LCD_DISP_SHIFT_RIGHT);
    3bc4:	8c e1       	ldi	r24, 0x1C	; 28
    3bc6:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <LCD_voidWriteCommand>

}/*end of LCD_voidShiftRight()*/
    3bca:	cf 91       	pop	r28
    3bcc:	df 91       	pop	r29
    3bce:	08 95       	ret

00003bd0 <LCD_voidShiftLeft>:


void LCD_voidShiftLeft(void)
{
    3bd0:	df 93       	push	r29
    3bd2:	cf 93       	push	r28
    3bd4:	cd b7       	in	r28, 0x3d	; 61
    3bd6:	de b7       	in	r29, 0x3e	; 62
	 /*send shift left instruction*/
	 LCD_voidWriteCommand(LCD_DISP_SHIFT_LEFT);
    3bd8:	88 e1       	ldi	r24, 0x18	; 24
    3bda:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <LCD_voidWriteCommand>

}/*end of LCD_voidShiftLeft()*/
    3bde:	cf 91       	pop	r28
    3be0:	df 91       	pop	r29
    3be2:	08 95       	ret

00003be4 <LCD_voidCursorShiftRight>:


void LCD_voidCursorShiftRight(u8 u8Steps)
{
    3be4:	df 93       	push	r29
    3be6:	cf 93       	push	r28
    3be8:	00 d0       	rcall	.+0      	; 0x3bea <LCD_voidCursorShiftRight+0x6>
    3bea:	cd b7       	in	r28, 0x3d	; 61
    3bec:	de b7       	in	r29, 0x3e	; 62
    3bee:	8a 83       	std	Y+2, r24	; 0x02
	  /*loop steps*/
	  for(u8 i = 0 ; i < u8Steps ; i++)
    3bf0:	19 82       	std	Y+1, r1	; 0x01
    3bf2:	06 c0       	rjmp	.+12     	; 0x3c00 <LCD_voidCursorShiftRight+0x1c>
	  {
		  /*Shift cursor one step right instruction*/
		  LCD_voidWriteCommand(LCD_CURSOR_SHIFT_RIGHT);
    3bf4:	84 e1       	ldi	r24, 0x14	; 20
    3bf6:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <LCD_voidWriteCommand>


void LCD_voidCursorShiftRight(u8 u8Steps)
{
	  /*loop steps*/
	  for(u8 i = 0 ; i < u8Steps ; i++)
    3bfa:	89 81       	ldd	r24, Y+1	; 0x01
    3bfc:	8f 5f       	subi	r24, 0xFF	; 255
    3bfe:	89 83       	std	Y+1, r24	; 0x01
    3c00:	99 81       	ldd	r25, Y+1	; 0x01
    3c02:	8a 81       	ldd	r24, Y+2	; 0x02
    3c04:	98 17       	cp	r25, r24
    3c06:	b0 f3       	brcs	.-20     	; 0x3bf4 <LCD_voidCursorShiftRight+0x10>
		  /*Shift cursor one step right instruction*/
		  LCD_voidWriteCommand(LCD_CURSOR_SHIFT_RIGHT);

	  }/*end of steps for loop*/

}/*end of LCD_voidCursorShiftRight()*/
    3c08:	0f 90       	pop	r0
    3c0a:	0f 90       	pop	r0
    3c0c:	cf 91       	pop	r28
    3c0e:	df 91       	pop	r29
    3c10:	08 95       	ret

00003c12 <LCD_voidCursorShiftLeft>:


void LCD_voidCursorShiftLeft(u8 u8Steps)
{
    3c12:	df 93       	push	r29
    3c14:	cf 93       	push	r28
    3c16:	00 d0       	rcall	.+0      	; 0x3c18 <LCD_voidCursorShiftLeft+0x6>
    3c18:	cd b7       	in	r28, 0x3d	; 61
    3c1a:	de b7       	in	r29, 0x3e	; 62
    3c1c:	8a 83       	std	Y+2, r24	; 0x02
	  /*loop steps*/
	  for(u8 i = 0 ; i < u8Steps ; i++)
    3c1e:	19 82       	std	Y+1, r1	; 0x01
    3c20:	06 c0       	rjmp	.+12     	; 0x3c2e <LCD_voidCursorShiftLeft+0x1c>
	  {
		  /*Shift cursor one step Left instruction*/
		  LCD_voidWriteCommand(LCD_CURSOR_SHIFT_LEFT);
    3c22:	80 e1       	ldi	r24, 0x10	; 16
    3c24:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <LCD_voidWriteCommand>


void LCD_voidCursorShiftLeft(u8 u8Steps)
{
	  /*loop steps*/
	  for(u8 i = 0 ; i < u8Steps ; i++)
    3c28:	89 81       	ldd	r24, Y+1	; 0x01
    3c2a:	8f 5f       	subi	r24, 0xFF	; 255
    3c2c:	89 83       	std	Y+1, r24	; 0x01
    3c2e:	99 81       	ldd	r25, Y+1	; 0x01
    3c30:	8a 81       	ldd	r24, Y+2	; 0x02
    3c32:	98 17       	cp	r25, r24
    3c34:	b0 f3       	brcs	.-20     	; 0x3c22 <LCD_voidCursorShiftLeft+0x10>
		  /*Shift cursor one step Left instruction*/
		  LCD_voidWriteCommand(LCD_CURSOR_SHIFT_LEFT);

	  }/*end of steps for loop*/

}/*end of LCD_voidCursorShiftLeft()*/
    3c36:	0f 90       	pop	r0
    3c38:	0f 90       	pop	r0
    3c3a:	cf 91       	pop	r28
    3c3c:	df 91       	pop	r29
    3c3e:	08 95       	ret

00003c40 <LCD_voidCursorDisplayOnOff>:
* Description : set cursor display on and off
* Arguments   : Status : HLCD_ON or HLCD_OFF
* return      : void
*/
void LCD_voidCursorDisplayOnOff(u8 u8Status)
{
    3c40:	df 93       	push	r29
    3c42:	cf 93       	push	r28
    3c44:	0f 92       	push	r0
    3c46:	cd b7       	in	r28, 0x3d	; 61
    3c48:	de b7       	in	r29, 0x3e	; 62
    3c4a:	89 83       	std	Y+1, r24	; 0x01
	  /*Set Display status value (on or off)*/
	  L_UTILS_SET_BIT_VALUE(DisplayAndCursorCommand,LCD_CURSOR_BIT,u8Status);
    3c4c:	89 81       	ldd	r24, Y+1	; 0x01
    3c4e:	88 23       	and	r24, r24
    3c50:	31 f4       	brne	.+12     	; 0x3c5e <LCD_voidCursorDisplayOnOff+0x1e>
    3c52:	80 91 82 00 	lds	r24, 0x0082
    3c56:	8d 7f       	andi	r24, 0xFD	; 253
    3c58:	80 93 82 00 	sts	0x0082, r24
    3c5c:	05 c0       	rjmp	.+10     	; 0x3c68 <LCD_voidCursorDisplayOnOff+0x28>
    3c5e:	80 91 82 00 	lds	r24, 0x0082
    3c62:	82 60       	ori	r24, 0x02	; 2
    3c64:	80 93 82 00 	sts	0x0082, r24
	  /*Send command*/
	  LCD_voidWriteCommand(DisplayAndCursorCommand);
    3c68:	80 91 82 00 	lds	r24, 0x0082
    3c6c:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <LCD_voidWriteCommand>

}/*end of LCD_voidCursorDisplayOnOff()*/
    3c70:	0f 90       	pop	r0
    3c72:	cf 91       	pop	r28
    3c74:	df 91       	pop	r29
    3c76:	08 95       	ret

00003c78 <LCD_voidCursorBlinkOnOff>:


void LCD_voidCursorBlinkOnOff(u8 u8Status)
{
    3c78:	df 93       	push	r29
    3c7a:	cf 93       	push	r28
    3c7c:	0f 92       	push	r0
    3c7e:	cd b7       	in	r28, 0x3d	; 61
    3c80:	de b7       	in	r29, 0x3e	; 62
    3c82:	89 83       	std	Y+1, r24	; 0x01
	  /*Set Cursor status value (on or off)*/
	  L_UTILS_SET_BIT_VALUE(DisplayAndCursorCommand,LCD_BLINK_BIT,u8Status);
    3c84:	89 81       	ldd	r24, Y+1	; 0x01
    3c86:	88 23       	and	r24, r24
    3c88:	31 f4       	brne	.+12     	; 0x3c96 <LCD_voidCursorBlinkOnOff+0x1e>
    3c8a:	80 91 82 00 	lds	r24, 0x0082
    3c8e:	8e 7f       	andi	r24, 0xFE	; 254
    3c90:	80 93 82 00 	sts	0x0082, r24
    3c94:	05 c0       	rjmp	.+10     	; 0x3ca0 <LCD_voidCursorBlinkOnOff+0x28>
    3c96:	80 91 82 00 	lds	r24, 0x0082
    3c9a:	81 60       	ori	r24, 0x01	; 1
    3c9c:	80 93 82 00 	sts	0x0082, r24
	  /*Send command*/
	  LCD_voidWriteCommand(DisplayAndCursorCommand);
    3ca0:	80 91 82 00 	lds	r24, 0x0082
    3ca4:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <LCD_voidWriteCommand>

}/*end of LCD_voidCursorBlinkOnOff()*/
    3ca8:	0f 90       	pop	r0
    3caa:	cf 91       	pop	r28
    3cac:	df 91       	pop	r29
    3cae:	08 95       	ret

00003cb0 <LCD_voidScreenDisplayOnOff>:



void LCD_voidScreenDisplayOnOff(u8 u8Status)
{
    3cb0:	df 93       	push	r29
    3cb2:	cf 93       	push	r28
    3cb4:	0f 92       	push	r0
    3cb6:	cd b7       	in	r28, 0x3d	; 61
    3cb8:	de b7       	in	r29, 0x3e	; 62
    3cba:	89 83       	std	Y+1, r24	; 0x01
	  /*Set Display status value (on or off)*/
	  L_UTILS_SET_BIT_VALUE(DisplayAndCursorCommand,LCD_DISP_BIT,u8Status);
    3cbc:	89 81       	ldd	r24, Y+1	; 0x01
    3cbe:	88 23       	and	r24, r24
    3cc0:	31 f4       	brne	.+12     	; 0x3cce <LCD_voidScreenDisplayOnOff+0x1e>
    3cc2:	80 91 82 00 	lds	r24, 0x0082
    3cc6:	8b 7f       	andi	r24, 0xFB	; 251
    3cc8:	80 93 82 00 	sts	0x0082, r24
    3ccc:	05 c0       	rjmp	.+10     	; 0x3cd8 <LCD_voidScreenDisplayOnOff+0x28>
    3cce:	80 91 82 00 	lds	r24, 0x0082
    3cd2:	84 60       	ori	r24, 0x04	; 4
    3cd4:	80 93 82 00 	sts	0x0082, r24
	  /*Send command*/
	  LCD_voidWriteCommand(DisplayAndCursorCommand);
    3cd8:	80 91 82 00 	lds	r24, 0x0082
    3cdc:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <LCD_voidWriteCommand>

}/*end of LCD_voidDisplayOnOff()*/
    3ce0:	0f 90       	pop	r0
    3ce2:	cf 91       	pop	r28
    3ce4:	df 91       	pop	r29
    3ce6:	08 95       	ret

00003ce8 <PutOnBusLCD>:
#include "LCD.h"
#include "LCD_cfg.h"
#include "LCD_priv.h"
u8 DataREG[8] = {LCD_D0, LCD_D1, LCD_D2, LCD_D3, LCD_D4, LCD_D5, LCD_D6, LCD_D7};
u8 DataVal[8] = {DIO_LOW};
void PutOnBusLCD(u8* u8DataREG, u8 u8num){
    3ce8:	df 93       	push	r29
    3cea:	cf 93       	push	r28
    3cec:	cd b7       	in	r28, 0x3d	; 61
    3cee:	de b7       	in	r29, 0x3e	; 62
    3cf0:	2c 97       	sbiw	r28, 0x0c	; 12
    3cf2:	0f b6       	in	r0, 0x3f	; 63
    3cf4:	f8 94       	cli
    3cf6:	de bf       	out	0x3e, r29	; 62
    3cf8:	0f be       	out	0x3f, r0	; 63
    3cfa:	cd bf       	out	0x3d, r28	; 61
    3cfc:	9b 87       	std	Y+11, r25	; 0x0b
    3cfe:	8a 87       	std	Y+10, r24	; 0x0a
    3d00:	6c 87       	std	Y+12, r22	; 0x0c
    u8 u8Num[8]; //0x0011 1111
  	u8 cntr;
  	for(cntr = 0; cntr < 8; cntr++){
    3d02:	19 82       	std	Y+1, r1	; 0x01
    3d04:	1b c0       	rjmp	.+54     	; 0x3d3c <PutOnBusLCD+0x54>
  		u8Num[cntr] = GET_BIT(u8num, cntr);
    3d06:	89 81       	ldd	r24, Y+1	; 0x01
    3d08:	48 2f       	mov	r20, r24
    3d0a:	50 e0       	ldi	r21, 0x00	; 0
    3d0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d0e:	28 2f       	mov	r18, r24
    3d10:	30 e0       	ldi	r19, 0x00	; 0
    3d12:	89 81       	ldd	r24, Y+1	; 0x01
    3d14:	88 2f       	mov	r24, r24
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	b9 01       	movw	r22, r18
    3d1a:	02 c0       	rjmp	.+4      	; 0x3d20 <PutOnBusLCD+0x38>
    3d1c:	75 95       	asr	r23
    3d1e:	67 95       	ror	r22
    3d20:	8a 95       	dec	r24
    3d22:	e2 f7       	brpl	.-8      	; 0x3d1c <PutOnBusLCD+0x34>
    3d24:	cb 01       	movw	r24, r22
    3d26:	28 2f       	mov	r18, r24
    3d28:	21 70       	andi	r18, 0x01	; 1
    3d2a:	ce 01       	movw	r24, r28
    3d2c:	02 96       	adiw	r24, 0x02	; 2
    3d2e:	fc 01       	movw	r30, r24
    3d30:	e4 0f       	add	r30, r20
    3d32:	f5 1f       	adc	r31, r21
    3d34:	20 83       	st	Z, r18
u8 DataREG[8] = {LCD_D0, LCD_D1, LCD_D2, LCD_D3, LCD_D4, LCD_D5, LCD_D6, LCD_D7};
u8 DataVal[8] = {DIO_LOW};
void PutOnBusLCD(u8* u8DataREG, u8 u8num){
    u8 u8Num[8]; //0x0011 1111
  	u8 cntr;
  	for(cntr = 0; cntr < 8; cntr++){
    3d36:	89 81       	ldd	r24, Y+1	; 0x01
    3d38:	8f 5f       	subi	r24, 0xFF	; 255
    3d3a:	89 83       	std	Y+1, r24	; 0x01
    3d3c:	89 81       	ldd	r24, Y+1	; 0x01
    3d3e:	88 30       	cpi	r24, 0x08	; 8
    3d40:	10 f3       	brcs	.-60     	; 0x3d06 <PutOnBusLCD+0x1e>
  		u8Num[cntr] = GET_BIT(u8num, cntr);
  	}
    DIO_enuWriteGroup(u8DataREG, u8Num, 8);
    3d42:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d44:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d46:	9e 01       	movw	r18, r28
    3d48:	2e 5f       	subi	r18, 0xFE	; 254
    3d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d4c:	b9 01       	movw	r22, r18
    3d4e:	48 e0       	ldi	r20, 0x08	; 8
    3d50:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_enuWriteGroup>
}
    3d54:	2c 96       	adiw	r28, 0x0c	; 12
    3d56:	0f b6       	in	r0, 0x3f	; 63
    3d58:	f8 94       	cli
    3d5a:	de bf       	out	0x3e, r29	; 62
    3d5c:	0f be       	out	0x3f, r0	; 63
    3d5e:	cd bf       	out	0x3d, r28	; 61
    3d60:	cf 91       	pop	r28
    3d62:	df 91       	pop	r29
    3d64:	08 95       	ret

00003d66 <main>:
#include "../MCAL/DIO/DIO.h"
#include "../LIBS/BIT_MATH.h"
#include "../MCAL/DIO/DIO_priv.h"
#include "../LIBS/delay.h"

int main(){
    3d66:	df 93       	push	r29
    3d68:	cf 93       	push	r28
    3d6a:	0f 92       	push	r0
    3d6c:	cd b7       	in	r28, 0x3d	; 61
    3d6e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInit();
    3d70:	0e 94 ca 07 	call	0xf94	; 0xf94 <DIO_voidInit>

	DIO_enuStatePullup(DIO_PIN_NUM_24, DIO_HIGH);
    3d74:	88 e1       	ldi	r24, 0x18	; 24
    3d76:	61 e0       	ldi	r22, 0x01	; 1
    3d78:	0e 94 d6 09 	call	0x13ac	; 0x13ac <DIO_enuStatePullup>
	DIO_enuWritePin(DIO_PIN_NUM_25, DIO_LOW);
    3d7c:	89 e1       	ldi	r24, 0x19	; 25
    3d7e:	60 e0       	ldi	r22, 0x00	; 0
    3d80:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
	u8 out;
	while(1){
		DIO_enuReadPin(DIO_PIN_NUM_24, &out);
    3d84:	88 e1       	ldi	r24, 0x18	; 24
    3d86:	9e 01       	movw	r18, r28
    3d88:	2f 5f       	subi	r18, 0xFF	; 255
    3d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d8c:	b9 01       	movw	r22, r18
    3d8e:	0e 94 4c 09 	call	0x1298	; 0x1298 <DIO_enuReadPin>
		if(out == DIO_LOW){
    3d92:	89 81       	ldd	r24, Y+1	; 0x01
    3d94:	88 23       	and	r24, r24
    3d96:	29 f4       	brne	.+10     	; 0x3da2 <main+0x3c>
			DIO_enuWritePin(DIO_PIN_NUM_25, DIO_HIGH);
    3d98:	89 e1       	ldi	r24, 0x19	; 25
    3d9a:	61 e0       	ldi	r22, 0x01	; 1
    3d9c:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
    3da0:	f1 cf       	rjmp	.-30     	; 0x3d84 <main+0x1e>


		}else if(out == DIO_HIGH){
    3da2:	89 81       	ldd	r24, Y+1	; 0x01
    3da4:	81 30       	cpi	r24, 0x01	; 1
    3da6:	71 f7       	brne	.-36     	; 0x3d84 <main+0x1e>
			DIO_enuWritePin(DIO_PIN_NUM_25, DIO_LOW);
    3da8:	89 e1       	ldi	r24, 0x19	; 25
    3daa:	60 e0       	ldi	r22, 0x00	; 0
    3dac:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_enuWritePin>
    3db0:	e9 cf       	rjmp	.-46     	; 0x3d84 <main+0x1e>

00003db2 <__udivmodqi4>:
    3db2:	99 1b       	sub	r25, r25
    3db4:	79 e0       	ldi	r23, 0x09	; 9
    3db6:	04 c0       	rjmp	.+8      	; 0x3dc0 <__udivmodqi4_ep>

00003db8 <__udivmodqi4_loop>:
    3db8:	99 1f       	adc	r25, r25
    3dba:	96 17       	cp	r25, r22
    3dbc:	08 f0       	brcs	.+2      	; 0x3dc0 <__udivmodqi4_ep>
    3dbe:	96 1b       	sub	r25, r22

00003dc0 <__udivmodqi4_ep>:
    3dc0:	88 1f       	adc	r24, r24
    3dc2:	7a 95       	dec	r23
    3dc4:	c9 f7       	brne	.-14     	; 0x3db8 <__udivmodqi4_loop>
    3dc6:	80 95       	com	r24
    3dc8:	08 95       	ret

00003dca <__prologue_saves__>:
    3dca:	2f 92       	push	r2
    3dcc:	3f 92       	push	r3
    3dce:	4f 92       	push	r4
    3dd0:	5f 92       	push	r5
    3dd2:	6f 92       	push	r6
    3dd4:	7f 92       	push	r7
    3dd6:	8f 92       	push	r8
    3dd8:	9f 92       	push	r9
    3dda:	af 92       	push	r10
    3ddc:	bf 92       	push	r11
    3dde:	cf 92       	push	r12
    3de0:	df 92       	push	r13
    3de2:	ef 92       	push	r14
    3de4:	ff 92       	push	r15
    3de6:	0f 93       	push	r16
    3de8:	1f 93       	push	r17
    3dea:	cf 93       	push	r28
    3dec:	df 93       	push	r29
    3dee:	cd b7       	in	r28, 0x3d	; 61
    3df0:	de b7       	in	r29, 0x3e	; 62
    3df2:	ca 1b       	sub	r28, r26
    3df4:	db 0b       	sbc	r29, r27
    3df6:	0f b6       	in	r0, 0x3f	; 63
    3df8:	f8 94       	cli
    3dfa:	de bf       	out	0x3e, r29	; 62
    3dfc:	0f be       	out	0x3f, r0	; 63
    3dfe:	cd bf       	out	0x3d, r28	; 61
    3e00:	09 94       	ijmp

00003e02 <__epilogue_restores__>:
    3e02:	2a 88       	ldd	r2, Y+18	; 0x12
    3e04:	39 88       	ldd	r3, Y+17	; 0x11
    3e06:	48 88       	ldd	r4, Y+16	; 0x10
    3e08:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e0a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e0c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e10:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e12:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e14:	b9 84       	ldd	r11, Y+9	; 0x09
    3e16:	c8 84       	ldd	r12, Y+8	; 0x08
    3e18:	df 80       	ldd	r13, Y+7	; 0x07
    3e1a:	ee 80       	ldd	r14, Y+6	; 0x06
    3e1c:	fd 80       	ldd	r15, Y+5	; 0x05
    3e1e:	0c 81       	ldd	r16, Y+4	; 0x04
    3e20:	1b 81       	ldd	r17, Y+3	; 0x03
    3e22:	aa 81       	ldd	r26, Y+2	; 0x02
    3e24:	b9 81       	ldd	r27, Y+1	; 0x01
    3e26:	ce 0f       	add	r28, r30
    3e28:	d1 1d       	adc	r29, r1
    3e2a:	0f b6       	in	r0, 0x3f	; 63
    3e2c:	f8 94       	cli
    3e2e:	de bf       	out	0x3e, r29	; 62
    3e30:	0f be       	out	0x3f, r0	; 63
    3e32:	cd bf       	out	0x3d, r28	; 61
    3e34:	ed 01       	movw	r28, r26
    3e36:	08 95       	ret

00003e38 <_exit>:
    3e38:	f8 94       	cli

00003e3a <__stop_program>:
    3e3a:	ff cf       	rjmp	.-2      	; 0x3e3a <__stop_program>
