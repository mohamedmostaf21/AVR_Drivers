
AVR_DRIVERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d20  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000d20  00000d94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000014c4  00000000  00000000  00000db0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000fe4  00000000  00000000  00002274  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 b2 03 	call	0x764	; 0x764 <main>
  7a:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_voidInit>:
#include "DIO_priv.h"



void DIO_voidInit(void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
   DDRA = CONC(DIO_PIN_DIR_7 ,DIO_PIN_DIR_6 ,DIO_PIN_DIR_5 ,DIO_PIN_DIR_4 ,DIO_PIN_DIR_3 ,DIO_PIN_DIR_2 ,DIO_PIN_DIR_1 ,DIO_PIN_DIR_0 );
  8a:	ea e3       	ldi	r30, 0x3A	; 58
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	80 83       	st	Z, r24
   DDRB = CONC(DIO_PIN_DIR_15,DIO_PIN_DIR_14,DIO_PIN_DIR_13,DIO_PIN_DIR_12,DIO_PIN_DIR_11,DIO_PIN_DIR_10,DIO_PIN_DIR_9 ,DIO_PIN_DIR_8 );
  92:	e7 e3       	ldi	r30, 0x37	; 55
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	80 83       	st	Z, r24
   DDRC = CONC(DIO_PIN_DIR_23,DIO_PIN_DIR_22,DIO_PIN_DIR_21,DIO_PIN_DIR_20,DIO_PIN_DIR_19,DIO_PIN_DIR_18,DIO_PIN_DIR_17,DIO_PIN_DIR_16);
  9a:	e4 e3       	ldi	r30, 0x34	; 52
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	10 82       	st	Z, r1
   DDRD = CONC(DIO_PIN_DIR_31,DIO_PIN_DIR_30,DIO_PIN_DIR_29,DIO_PIN_DIR_28,DIO_PIN_DIR_27,DIO_PIN_DIR_26,DIO_PIN_DIR_25,DIO_PIN_DIR_24);
  a0:	e1 e3       	ldi	r30, 0x31	; 49
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	80 83       	st	Z, r24

}
  a8:	cf 91       	pop	r28
  aa:	df 91       	pop	r29
  ac:	08 95       	ret

000000ae <DIO_enuWritePin>:



tenuErrorStatus DIO_enuWritePin(u8 u8PinNumCpy,u8 u8PinValueCpy)
{
  ae:	df 93       	push	r29
  b0:	cf 93       	push	r28
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	2b 97       	sbiw	r28, 0x0b	; 11
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61
  c2:	8a 83       	std	Y+2, r24	; 0x02
  c4:	6b 83       	std	Y+3, r22	; 0x03

	tenuErrorStatus enuReturnStateLoc = EOK;
  c6:	19 82       	std	Y+1, r1	; 0x01
	if (u8PinNumCpy >= DIO_PIN_NUM_0 && u8PinNumCpy <= DIO_PIN_NUM_7)
  c8:	8a 81       	ldd	r24, Y+2	; 0x02
  ca:	88 30       	cpi	r24, 0x08	; 8
  cc:	d8 f5       	brcc	.+118    	; 0x144 <DIO_enuWritePin+0x96>
	{
		switch (u8PinValueCpy)
  ce:	8b 81       	ldd	r24, Y+3	; 0x03
  d0:	28 2f       	mov	r18, r24
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	3b 87       	std	Y+11, r19	; 0x0b
  d6:	2a 87       	std	Y+10, r18	; 0x0a
  d8:	8a 85       	ldd	r24, Y+10	; 0x0a
  da:	9b 85       	ldd	r25, Y+11	; 0x0b
  dc:	00 97       	sbiw	r24, 0x00	; 0
  de:	31 f0       	breq	.+12     	; 0xec <DIO_enuWritePin+0x3e>
  e0:	2a 85       	ldd	r18, Y+10	; 0x0a
  e2:	3b 85       	ldd	r19, Y+11	; 0x0b
  e4:	21 30       	cpi	r18, 0x01	; 1
  e6:	31 05       	cpc	r19, r1
  e8:	b1 f0       	breq	.+44     	; 0x116 <DIO_enuWritePin+0x68>
  ea:	29 c0       	rjmp	.+82     	; 0x13e <DIO_enuWritePin+0x90>
		{
			case DIO_LOW :
			 CLR_BIT (ODRA ,  u8PinNumCpy);
  ec:	ab e3       	ldi	r26, 0x3B	; 59
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	eb e3       	ldi	r30, 0x3B	; 59
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	48 2f       	mov	r20, r24
  f8:	8a 81       	ldd	r24, Y+2	; 0x02
  fa:	28 2f       	mov	r18, r24
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 2e       	mov	r0, r18
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_enuWritePin+0x5c>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_enuWritePin+0x58>
 10e:	80 95       	com	r24
 110:	84 23       	and	r24, r20
 112:	8c 93       	st	X, r24
 114:	f4 c0       	rjmp	.+488    	; 0x2fe <DIO_enuWritePin+0x250>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRA , u8PinNumCpy);
 116:	ab e3       	ldi	r26, 0x3B	; 59
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	eb e3       	ldi	r30, 0x3B	; 59
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	48 2f       	mov	r20, r24
 122:	8a 81       	ldd	r24, Y+2	; 0x02
 124:	28 2f       	mov	r18, r24
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 2e       	mov	r0, r18
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_enuWritePin+0x86>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	0a 94       	dec	r0
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_enuWritePin+0x82>
 138:	84 2b       	or	r24, r20
 13a:	8c 93       	st	X, r24
 13c:	e0 c0       	rjmp	.+448    	; 0x2fe <DIO_enuWritePin+0x250>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	89 83       	std	Y+1, r24	; 0x01
 142:	dd c0       	rjmp	.+442    	; 0x2fe <DIO_enuWritePin+0x250>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_8 && u8PinNumCpy <= DIO_PIN_NUM_15)
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	88 30       	cpi	r24, 0x08	; 8
 148:	08 f4       	brcc	.+2      	; 0x14c <DIO_enuWritePin+0x9e>
 14a:	45 c0       	rjmp	.+138    	; 0x1d6 <DIO_enuWritePin+0x128>
 14c:	8a 81       	ldd	r24, Y+2	; 0x02
 14e:	80 31       	cpi	r24, 0x10	; 16
 150:	08 f0       	brcs	.+2      	; 0x154 <DIO_enuWritePin+0xa6>
 152:	41 c0       	rjmp	.+130    	; 0x1d6 <DIO_enuWritePin+0x128>
	{
		switch (u8PinValueCpy)
 154:	8b 81       	ldd	r24, Y+3	; 0x03
 156:	28 2f       	mov	r18, r24
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	39 87       	std	Y+9, r19	; 0x09
 15c:	28 87       	std	Y+8, r18	; 0x08
 15e:	88 85       	ldd	r24, Y+8	; 0x08
 160:	99 85       	ldd	r25, Y+9	; 0x09
 162:	00 97       	sbiw	r24, 0x00	; 0
 164:	31 f0       	breq	.+12     	; 0x172 <DIO_enuWritePin+0xc4>
 166:	28 85       	ldd	r18, Y+8	; 0x08
 168:	39 85       	ldd	r19, Y+9	; 0x09
 16a:	21 30       	cpi	r18, 0x01	; 1
 16c:	31 05       	cpc	r19, r1
 16e:	c9 f0       	breq	.+50     	; 0x1a2 <DIO_enuWritePin+0xf4>
 170:	2f c0       	rjmp	.+94     	; 0x1d0 <DIO_enuWritePin+0x122>
		{
			case DIO_LOW :
			 CLR_BIT (ODRB ,  u8PinNumCpy%8); //0 1 2 3 4 5 6 7 => 8%8 = 0, 9%8 = 1, 10%8 = 2, 11%8 = 3, 12%8 = 4, 13%8 = 5, 14%8 = 6, 15%8 = 7
 172:	a8 e3       	ldi	r26, 0x38	; 56
 174:	b0 e0       	ldi	r27, 0x00	; 0
 176:	e8 e3       	ldi	r30, 0x38	; 56
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	48 2f       	mov	r20, r24
 17e:	8a 81       	ldd	r24, Y+2	; 0x02
 180:	88 2f       	mov	r24, r24
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	9c 01       	movw	r18, r24
 186:	27 70       	andi	r18, 0x07	; 7
 188:	30 70       	andi	r19, 0x00	; 0
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 2e       	mov	r0, r18
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_enuWritePin+0xe8>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	0a 94       	dec	r0
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_enuWritePin+0xe4>
 19a:	80 95       	com	r24
 19c:	84 23       	and	r24, r20
 19e:	8c 93       	st	X, r24
 1a0:	ae c0       	rjmp	.+348    	; 0x2fe <DIO_enuWritePin+0x250>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRB , u8PinNumCpy%8);
 1a2:	a8 e3       	ldi	r26, 0x38	; 56
 1a4:	b0 e0       	ldi	r27, 0x00	; 0
 1a6:	e8 e3       	ldi	r30, 0x38	; 56
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	48 2f       	mov	r20, r24
 1ae:	8a 81       	ldd	r24, Y+2	; 0x02
 1b0:	88 2f       	mov	r24, r24
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	9c 01       	movw	r18, r24
 1b6:	27 70       	andi	r18, 0x07	; 7
 1b8:	30 70       	andi	r19, 0x00	; 0
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 2e       	mov	r0, r18
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_enuWritePin+0x118>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	0a 94       	dec	r0
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_enuWritePin+0x114>
 1ca:	84 2b       	or	r24, r20
 1cc:	8c 93       	st	X, r24
 1ce:	97 c0       	rjmp	.+302    	; 0x2fe <DIO_enuWritePin+0x250>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	89 83       	std	Y+1, r24	; 0x01
 1d4:	94 c0       	rjmp	.+296    	; 0x2fe <DIO_enuWritePin+0x250>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_16 && u8PinNumCpy <= DIO_PIN_NUM_23)
 1d6:	8a 81       	ldd	r24, Y+2	; 0x02
 1d8:	80 31       	cpi	r24, 0x10	; 16
 1da:	08 f4       	brcc	.+2      	; 0x1de <DIO_enuWritePin+0x130>
 1dc:	45 c0       	rjmp	.+138    	; 0x268 <DIO_enuWritePin+0x1ba>
 1de:	8a 81       	ldd	r24, Y+2	; 0x02
 1e0:	88 31       	cpi	r24, 0x18	; 24
 1e2:	08 f0       	brcs	.+2      	; 0x1e6 <DIO_enuWritePin+0x138>
 1e4:	41 c0       	rjmp	.+130    	; 0x268 <DIO_enuWritePin+0x1ba>
	{
		switch (u8PinValueCpy)
 1e6:	8b 81       	ldd	r24, Y+3	; 0x03
 1e8:	28 2f       	mov	r18, r24
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	3f 83       	std	Y+7, r19	; 0x07
 1ee:	2e 83       	std	Y+6, r18	; 0x06
 1f0:	8e 81       	ldd	r24, Y+6	; 0x06
 1f2:	9f 81       	ldd	r25, Y+7	; 0x07
 1f4:	00 97       	sbiw	r24, 0x00	; 0
 1f6:	31 f0       	breq	.+12     	; 0x204 <DIO_enuWritePin+0x156>
 1f8:	2e 81       	ldd	r18, Y+6	; 0x06
 1fa:	3f 81       	ldd	r19, Y+7	; 0x07
 1fc:	21 30       	cpi	r18, 0x01	; 1
 1fe:	31 05       	cpc	r19, r1
 200:	c9 f0       	breq	.+50     	; 0x234 <DIO_enuWritePin+0x186>
 202:	2f c0       	rjmp	.+94     	; 0x262 <DIO_enuWritePin+0x1b4>
		{
			case DIO_LOW :
			 CLR_BIT (ODRC ,  u8PinNumCpy%8);
 204:	a5 e3       	ldi	r26, 0x35	; 53
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	e5 e3       	ldi	r30, 0x35	; 53
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	48 2f       	mov	r20, r24
 210:	8a 81       	ldd	r24, Y+2	; 0x02
 212:	88 2f       	mov	r24, r24
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	9c 01       	movw	r18, r24
 218:	27 70       	andi	r18, 0x07	; 7
 21a:	30 70       	andi	r19, 0x00	; 0
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 2e       	mov	r0, r18
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_enuWritePin+0x17a>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	0a 94       	dec	r0
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_enuWritePin+0x176>
 22c:	80 95       	com	r24
 22e:	84 23       	and	r24, r20
 230:	8c 93       	st	X, r24
 232:	65 c0       	rjmp	.+202    	; 0x2fe <DIO_enuWritePin+0x250>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRC , u8PinNumCpy%8);
 234:	a5 e3       	ldi	r26, 0x35	; 53
 236:	b0 e0       	ldi	r27, 0x00	; 0
 238:	e5 e3       	ldi	r30, 0x35	; 53
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	48 2f       	mov	r20, r24
 240:	8a 81       	ldd	r24, Y+2	; 0x02
 242:	88 2f       	mov	r24, r24
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	9c 01       	movw	r18, r24
 248:	27 70       	andi	r18, 0x07	; 7
 24a:	30 70       	andi	r19, 0x00	; 0
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 2e       	mov	r0, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_enuWritePin+0x1aa>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	0a 94       	dec	r0
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_enuWritePin+0x1a6>
 25c:	84 2b       	or	r24, r20
 25e:	8c 93       	st	X, r24
 260:	4e c0       	rjmp	.+156    	; 0x2fe <DIO_enuWritePin+0x250>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	89 83       	std	Y+1, r24	; 0x01
 266:	4b c0       	rjmp	.+150    	; 0x2fe <DIO_enuWritePin+0x250>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_24 && u8PinNumCpy <= DIO_PIN_NUM_31)
 268:	8a 81       	ldd	r24, Y+2	; 0x02
 26a:	88 31       	cpi	r24, 0x18	; 24
 26c:	08 f4       	brcc	.+2      	; 0x270 <DIO_enuWritePin+0x1c2>
 26e:	45 c0       	rjmp	.+138    	; 0x2fa <DIO_enuWritePin+0x24c>
 270:	8a 81       	ldd	r24, Y+2	; 0x02
 272:	80 32       	cpi	r24, 0x20	; 32
 274:	08 f0       	brcs	.+2      	; 0x278 <DIO_enuWritePin+0x1ca>
 276:	41 c0       	rjmp	.+130    	; 0x2fa <DIO_enuWritePin+0x24c>
	{
		switch (u8PinValueCpy)
 278:	8b 81       	ldd	r24, Y+3	; 0x03
 27a:	28 2f       	mov	r18, r24
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	3d 83       	std	Y+5, r19	; 0x05
 280:	2c 83       	std	Y+4, r18	; 0x04
 282:	8c 81       	ldd	r24, Y+4	; 0x04
 284:	9d 81       	ldd	r25, Y+5	; 0x05
 286:	00 97       	sbiw	r24, 0x00	; 0
 288:	31 f0       	breq	.+12     	; 0x296 <DIO_enuWritePin+0x1e8>
 28a:	2c 81       	ldd	r18, Y+4	; 0x04
 28c:	3d 81       	ldd	r19, Y+5	; 0x05
 28e:	21 30       	cpi	r18, 0x01	; 1
 290:	31 05       	cpc	r19, r1
 292:	c9 f0       	breq	.+50     	; 0x2c6 <DIO_enuWritePin+0x218>
 294:	2f c0       	rjmp	.+94     	; 0x2f4 <DIO_enuWritePin+0x246>
		{
			case DIO_LOW :
			 CLR_BIT (ODRD ,  u8PinNumCpy%8);
 296:	a2 e3       	ldi	r26, 0x32	; 50
 298:	b0 e0       	ldi	r27, 0x00	; 0
 29a:	e2 e3       	ldi	r30, 0x32	; 50
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	48 2f       	mov	r20, r24
 2a2:	8a 81       	ldd	r24, Y+2	; 0x02
 2a4:	88 2f       	mov	r24, r24
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	9c 01       	movw	r18, r24
 2aa:	27 70       	andi	r18, 0x07	; 7
 2ac:	30 70       	andi	r19, 0x00	; 0
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 2e       	mov	r0, r18
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_enuWritePin+0x20c>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	0a 94       	dec	r0
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_enuWritePin+0x208>
 2be:	80 95       	com	r24
 2c0:	84 23       	and	r24, r20
 2c2:	8c 93       	st	X, r24
 2c4:	1c c0       	rjmp	.+56     	; 0x2fe <DIO_enuWritePin+0x250>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRD , u8PinNumCpy%8);
 2c6:	a2 e3       	ldi	r26, 0x32	; 50
 2c8:	b0 e0       	ldi	r27, 0x00	; 0
 2ca:	e2 e3       	ldi	r30, 0x32	; 50
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	48 2f       	mov	r20, r24
 2d2:	8a 81       	ldd	r24, Y+2	; 0x02
 2d4:	88 2f       	mov	r24, r24
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	9c 01       	movw	r18, r24
 2da:	27 70       	andi	r18, 0x07	; 7
 2dc:	30 70       	andi	r19, 0x00	; 0
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 2e       	mov	r0, r18
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_enuWritePin+0x23c>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	0a 94       	dec	r0
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_enuWritePin+0x238>
 2ee:	84 2b       	or	r24, r20
 2f0:	8c 93       	st	X, r24
 2f2:	05 c0       	rjmp	.+10     	; 0x2fe <DIO_enuWritePin+0x250>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	89 83       	std	Y+1, r24	; 0x01
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_enuWritePin+0x250>
		}
	}
	else
	{
		enuReturnStateLoc = PARAM_OUT_RANGE ;
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuReturnStateLoc ;
 2fe:	89 81       	ldd	r24, Y+1	; 0x01

}
 300:	2b 96       	adiw	r28, 0x0b	; 11
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	f8 94       	cli
 306:	de bf       	out	0x3e, r29	; 62
 308:	0f be       	out	0x3f, r0	; 63
 30a:	cd bf       	out	0x3d, r28	; 61
 30c:	cf 91       	pop	r28
 30e:	df 91       	pop	r29
 310:	08 95       	ret

00000312 <DIO_enuReadPin>:
//#define GET_BIT(byte,pos) ( (byte >> pos) & 1 )
//4 => 0100 
//GET_BIT(4, 1)     0100 >> 1 = 00010 & 0001 = 0

tenuErrorStatus DIO_enuReadPin(u8 u8PinNumCpy ,u8 *pu8PinValueCpy )
{
 312:	df 93       	push	r29
 314:	cf 93       	push	r28
 316:	00 d0       	rcall	.+0      	; 0x318 <DIO_enuReadPin+0x6>
 318:	00 d0       	rcall	.+0      	; 0x31a <DIO_enuReadPin+0x8>
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
 31e:	8a 83       	std	Y+2, r24	; 0x02
 320:	7c 83       	std	Y+4, r23	; 0x04
 322:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuReturnStateLoc = EOK;
 324:	19 82       	std	Y+1, r1	; 0x01

	if (pu8PinValueCpy != NULL)
 326:	8b 81       	ldd	r24, Y+3	; 0x03
 328:	9c 81       	ldd	r25, Y+4	; 0x04
 32a:	00 97       	sbiw	r24, 0x00	; 0
 32c:	09 f4       	brne	.+2      	; 0x330 <DIO_enuReadPin+0x1e>
 32e:	6e c0       	rjmp	.+220    	; 0x40c <DIO_enuReadPin+0xfa>
	{
		//IDR
		if (u8PinNumCpy >= DIO_PIN_NUM_0 && u8PinNumCpy <= DIO_PIN_NUM_7)
 330:	8a 81       	ldd	r24, Y+2	; 0x02
 332:	88 30       	cpi	r24, 0x08	; 8
 334:	a0 f4       	brcc	.+40     	; 0x35e <DIO_enuReadPin+0x4c>
		{
			*pu8PinValueCpy  = GET_BIT(IDRA , u8PinNumCpy);
 336:	e9 e3       	ldi	r30, 0x39	; 57
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	28 2f       	mov	r18, r24
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	8a 81       	ldd	r24, Y+2	; 0x02
 342:	88 2f       	mov	r24, r24
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	a9 01       	movw	r20, r18
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_enuReadPin+0x3c>
 34a:	55 95       	asr	r21
 34c:	47 95       	ror	r20
 34e:	8a 95       	dec	r24
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_enuReadPin+0x38>
 352:	ca 01       	movw	r24, r20
 354:	81 70       	andi	r24, 0x01	; 1
 356:	eb 81       	ldd	r30, Y+3	; 0x03
 358:	fc 81       	ldd	r31, Y+4	; 0x04
 35a:	80 83       	st	Z, r24
 35c:	59 c0       	rjmp	.+178    	; 0x410 <DIO_enuReadPin+0xfe>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_8 && u8PinNumCpy <= DIO_PIN_NUM_15)
 35e:	8a 81       	ldd	r24, Y+2	; 0x02
 360:	88 30       	cpi	r24, 0x08	; 8
 362:	c8 f0       	brcs	.+50     	; 0x396 <DIO_enuReadPin+0x84>
 364:	8a 81       	ldd	r24, Y+2	; 0x02
 366:	80 31       	cpi	r24, 0x10	; 16
 368:	b0 f4       	brcc	.+44     	; 0x396 <DIO_enuReadPin+0x84>
		{
			*pu8PinValueCpy  = GET_BIT(IDRB , u8PinNumCpy%8);
 36a:	e6 e3       	ldi	r30, 0x36	; 54
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	28 2f       	mov	r18, r24
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	8a 81       	ldd	r24, Y+2	; 0x02
 376:	88 2f       	mov	r24, r24
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	87 70       	andi	r24, 0x07	; 7
 37c:	90 70       	andi	r25, 0x00	; 0
 37e:	a9 01       	movw	r20, r18
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_enuReadPin+0x74>
 382:	55 95       	asr	r21
 384:	47 95       	ror	r20
 386:	8a 95       	dec	r24
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_enuReadPin+0x70>
 38a:	ca 01       	movw	r24, r20
 38c:	81 70       	andi	r24, 0x01	; 1
 38e:	eb 81       	ldd	r30, Y+3	; 0x03
 390:	fc 81       	ldd	r31, Y+4	; 0x04
 392:	80 83       	st	Z, r24
 394:	3d c0       	rjmp	.+122    	; 0x410 <DIO_enuReadPin+0xfe>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_16 && u8PinNumCpy <= DIO_PIN_NUM_23)
 396:	8a 81       	ldd	r24, Y+2	; 0x02
 398:	80 31       	cpi	r24, 0x10	; 16
 39a:	c8 f0       	brcs	.+50     	; 0x3ce <DIO_enuReadPin+0xbc>
 39c:	8a 81       	ldd	r24, Y+2	; 0x02
 39e:	88 31       	cpi	r24, 0x18	; 24
 3a0:	b0 f4       	brcc	.+44     	; 0x3ce <DIO_enuReadPin+0xbc>
		{
			*pu8PinValueCpy  = GET_BIT(IDRC , u8PinNumCpy%8);
 3a2:	e3 e3       	ldi	r30, 0x33	; 51
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	28 2f       	mov	r18, r24
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	8a 81       	ldd	r24, Y+2	; 0x02
 3ae:	88 2f       	mov	r24, r24
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	87 70       	andi	r24, 0x07	; 7
 3b4:	90 70       	andi	r25, 0x00	; 0
 3b6:	a9 01       	movw	r20, r18
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_enuReadPin+0xac>
 3ba:	55 95       	asr	r21
 3bc:	47 95       	ror	r20
 3be:	8a 95       	dec	r24
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_enuReadPin+0xa8>
 3c2:	ca 01       	movw	r24, r20
 3c4:	81 70       	andi	r24, 0x01	; 1
 3c6:	eb 81       	ldd	r30, Y+3	; 0x03
 3c8:	fc 81       	ldd	r31, Y+4	; 0x04
 3ca:	80 83       	st	Z, r24
 3cc:	21 c0       	rjmp	.+66     	; 0x410 <DIO_enuReadPin+0xfe>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_24 && u8PinNumCpy <= DIO_PIN_NUM_31)
 3ce:	8a 81       	ldd	r24, Y+2	; 0x02
 3d0:	88 31       	cpi	r24, 0x18	; 24
 3d2:	c8 f0       	brcs	.+50     	; 0x406 <DIO_enuReadPin+0xf4>
 3d4:	8a 81       	ldd	r24, Y+2	; 0x02
 3d6:	80 32       	cpi	r24, 0x20	; 32
 3d8:	b0 f4       	brcc	.+44     	; 0x406 <DIO_enuReadPin+0xf4>
		{
			*pu8PinValueCpy  = GET_BIT(IDRD , u8PinNumCpy%8);
 3da:	e0 e3       	ldi	r30, 0x30	; 48
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	28 2f       	mov	r18, r24
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	8a 81       	ldd	r24, Y+2	; 0x02
 3e6:	88 2f       	mov	r24, r24
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	87 70       	andi	r24, 0x07	; 7
 3ec:	90 70       	andi	r25, 0x00	; 0
 3ee:	a9 01       	movw	r20, r18
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_enuReadPin+0xe4>
 3f2:	55 95       	asr	r21
 3f4:	47 95       	ror	r20
 3f6:	8a 95       	dec	r24
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_enuReadPin+0xe0>
 3fa:	ca 01       	movw	r24, r20
 3fc:	81 70       	andi	r24, 0x01	; 1
 3fe:	eb 81       	ldd	r30, Y+3	; 0x03
 400:	fc 81       	ldd	r31, Y+4	; 0x04
 402:	80 83       	st	Z, r24
 404:	05 c0       	rjmp	.+10     	; 0x410 <DIO_enuReadPin+0xfe>
		}
		else
		{
			enuReturnStateLoc = PARAM_OUT_RANGE ;
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	89 83       	std	Y+1, r24	; 0x01
 40a:	02 c0       	rjmp	.+4      	; 0x410 <DIO_enuReadPin+0xfe>
		}
	}
	else
	{
		enuReturnStateLoc = PARAM_NULL_PTR ;
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuReturnStateLoc ;
 410:	89 81       	ldd	r24, Y+1	; 0x01

}
 412:	0f 90       	pop	r0
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	0f 90       	pop	r0
 41a:	cf 91       	pop	r28
 41c:	df 91       	pop	r29
 41e:	08 95       	ret

00000420 <DIO_enuStatePullup>:

tenuErrorStatus DIO_enuStatePullup(u8 u8PinNumCpy, u8 u8StateCpy)
{
 420:	df 93       	push	r29
 422:	cf 93       	push	r28
 424:	00 d0       	rcall	.+0      	; 0x426 <DIO_enuStatePullup+0x6>
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62
 42a:	89 83       	std	Y+1, r24	; 0x01
 42c:	6a 83       	std	Y+2, r22	; 0x02
   return DIO_enuWritePin(u8PinNumCpy,u8StateCpy);
 42e:	89 81       	ldd	r24, Y+1	; 0x01
 430:	6a 81       	ldd	r22, Y+2	; 0x02
 432:	0e 94 57 00 	call	0xae	; 0xae <DIO_enuWritePin>
}
 436:	0f 90       	pop	r0
 438:	0f 90       	pop	r0
 43a:	cf 91       	pop	r28
 43c:	df 91       	pop	r29
 43e:	08 95       	ret

00000440 <DIO_enuWriteGroup>:



tenuErrorStatus DIO_enuWriteGroup(u8 *pau8PinNumCpy,u8 * pau8PinValueCpy , u8 u8SizeCpy)
{
 440:	df 93       	push	r29
 442:	cf 93       	push	r28
 444:	cd b7       	in	r28, 0x3d	; 61
 446:	de b7       	in	r29, 0x3e	; 62
 448:	27 97       	sbiw	r28, 0x07	; 7
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	f8 94       	cli
 44e:	de bf       	out	0x3e, r29	; 62
 450:	0f be       	out	0x3f, r0	; 63
 452:	cd bf       	out	0x3d, r28	; 61
 454:	9c 83       	std	Y+4, r25	; 0x04
 456:	8b 83       	std	Y+3, r24	; 0x03
 458:	7e 83       	std	Y+6, r23	; 0x06
 45a:	6d 83       	std	Y+5, r22	; 0x05
 45c:	4f 83       	std	Y+7, r20	; 0x07
	tenuErrorStatus enuReturnStateLoc = EOK;
 45e:	1a 82       	std	Y+2, r1	; 0x02
	u8 u8CntrLoc;
	for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
 460:	19 82       	std	Y+1, r1	; 0x01
 462:	1d c0       	rjmp	.+58     	; 0x49e <DIO_enuWriteGroup+0x5e>
	{
		enuReturnStateLoc = DIO_enuWritePin(pau8PinNumCpy[u8CntrLoc],pau8PinValueCpy[u8CntrLoc]);
 464:	89 81       	ldd	r24, Y+1	; 0x01
 466:	28 2f       	mov	r18, r24
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	8b 81       	ldd	r24, Y+3	; 0x03
 46c:	9c 81       	ldd	r25, Y+4	; 0x04
 46e:	fc 01       	movw	r30, r24
 470:	e2 0f       	add	r30, r18
 472:	f3 1f       	adc	r31, r19
 474:	40 81       	ld	r20, Z
 476:	89 81       	ldd	r24, Y+1	; 0x01
 478:	28 2f       	mov	r18, r24
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	8d 81       	ldd	r24, Y+5	; 0x05
 47e:	9e 81       	ldd	r25, Y+6	; 0x06
 480:	fc 01       	movw	r30, r24
 482:	e2 0f       	add	r30, r18
 484:	f3 1f       	adc	r31, r19
 486:	90 81       	ld	r25, Z
 488:	84 2f       	mov	r24, r20
 48a:	69 2f       	mov	r22, r25
 48c:	0e 94 57 00 	call	0xae	; 0xae <DIO_enuWritePin>
 490:	8a 83       	std	Y+2, r24	; 0x02
		if (enuReturnStateLoc != EOK)
 492:	8a 81       	ldd	r24, Y+2	; 0x02
 494:	88 23       	and	r24, r24
 496:	39 f4       	brne	.+14     	; 0x4a6 <DIO_enuWriteGroup+0x66>

tenuErrorStatus DIO_enuWriteGroup(u8 *pau8PinNumCpy,u8 * pau8PinValueCpy , u8 u8SizeCpy)
{
	tenuErrorStatus enuReturnStateLoc = EOK;
	u8 u8CntrLoc;
	for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
 498:	89 81       	ldd	r24, Y+1	; 0x01
 49a:	8f 5f       	subi	r24, 0xFF	; 255
 49c:	89 83       	std	Y+1, r24	; 0x01
 49e:	99 81       	ldd	r25, Y+1	; 0x01
 4a0:	8f 81       	ldd	r24, Y+7	; 0x07
 4a2:	98 17       	cp	r25, r24
 4a4:	f8 f2       	brcs	.-66     	; 0x464 <DIO_enuWriteGroup+0x24>
		if (enuReturnStateLoc != EOK)
		{
			break;
		}
	}
	return enuReturnStateLoc;
 4a6:	8a 81       	ldd	r24, Y+2	; 0x02
}
 4a8:	27 96       	adiw	r28, 0x07	; 7
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	f8 94       	cli
 4ae:	de bf       	out	0x3e, r29	; 62
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	cd bf       	out	0x3d, r28	; 61
 4b4:	cf 91       	pop	r28
 4b6:	df 91       	pop	r29
 4b8:	08 95       	ret

000004ba <Sev_Display>:
#include "SEV.h"
#include "../../LIBS/BIT_MATH.h"
#include "../../MCAL/DIO/DIO.h"


tenuErrorStatus Sev_Display(u8 u8sevIndex, u8 u8num){
 4ba:	df 93       	push	r29
 4bc:	cf 93       	push	r28
 4be:	cd b7       	in	r28, 0x3d	; 61
 4c0:	de b7       	in	r29, 0x3e	; 62
 4c2:	62 97       	sbiw	r28, 0x12	; 18
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	f8 94       	cli
 4c8:	de bf       	out	0x3e, r29	; 62
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	cd bf       	out	0x3d, r28	; 61
 4ce:	8c 87       	std	Y+12, r24	; 0x0c
 4d0:	6d 87       	std	Y+13, r22	; 0x0d
    tenuErrorStatus enuReturnLoc = EOK;
 4d2:	19 82       	std	Y+1, r1	; 0x01
    u8 au8Cathode[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
 4d4:	ce 01       	movw	r24, r28
 4d6:	02 96       	adiw	r24, 0x02	; 2
 4d8:	9f 87       	std	Y+15, r25	; 0x0f
 4da:	8e 87       	std	Y+14, r24	; 0x0e
 4dc:	e2 e7       	ldi	r30, 0x72	; 114
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	f9 8b       	std	Y+17, r31	; 0x11
 4e2:	e8 8b       	std	Y+16, r30	; 0x10
 4e4:	fa e0       	ldi	r31, 0x0A	; 10
 4e6:	fa 8b       	std	Y+18, r31	; 0x12
 4e8:	e8 89       	ldd	r30, Y+16	; 0x10
 4ea:	f9 89       	ldd	r31, Y+17	; 0x11
 4ec:	00 80       	ld	r0, Z
 4ee:	88 89       	ldd	r24, Y+16	; 0x10
 4f0:	99 89       	ldd	r25, Y+17	; 0x11
 4f2:	01 96       	adiw	r24, 0x01	; 1
 4f4:	99 8b       	std	Y+17, r25	; 0x11
 4f6:	88 8b       	std	Y+16, r24	; 0x10
 4f8:	ee 85       	ldd	r30, Y+14	; 0x0e
 4fa:	ff 85       	ldd	r31, Y+15	; 0x0f
 4fc:	00 82       	st	Z, r0
 4fe:	8e 85       	ldd	r24, Y+14	; 0x0e
 500:	9f 85       	ldd	r25, Y+15	; 0x0f
 502:	01 96       	adiw	r24, 0x01	; 1
 504:	9f 87       	std	Y+15, r25	; 0x0f
 506:	8e 87       	std	Y+14, r24	; 0x0e
 508:	9a 89       	ldd	r25, Y+18	; 0x12
 50a:	91 50       	subi	r25, 0x01	; 1
 50c:	9a 8b       	std	Y+18, r25	; 0x12
 50e:	ea 89       	ldd	r30, Y+18	; 0x12
 510:	ee 23       	and	r30, r30
 512:	51 f7       	brne	.-44     	; 0x4e8 <Sev_Display+0x2e>
    if(u8sevIndex <= MAX_SEV_SEGMENT){
 514:	8c 85       	ldd	r24, Y+12	; 0x0c
 516:	83 30       	cpi	r24, 0x03	; 3
 518:	98 f5       	brcc	.+102    	; 0x580 <Sev_Display+0xc6>
        if(u8num < 10){
 51a:	8d 85       	ldd	r24, Y+13	; 0x0d
 51c:	8a 30       	cpi	r24, 0x0A	; 10
 51e:	90 f5       	brcc	.+100    	; 0x584 <Sev_Display+0xca>
            if(SEV_ConfigSet[u8sevIndex].common_mode == Common_Cathode){
 520:	8c 85       	ldd	r24, Y+12	; 0x0c
 522:	28 2f       	mov	r18, r24
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	c9 01       	movw	r24, r18
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	82 0f       	add	r24, r18
 536:	93 1f       	adc	r25, r19
 538:	fc 01       	movw	r30, r24
 53a:	e8 59       	subi	r30, 0x98	; 152
 53c:	ff 4f       	sbci	r31, 0xFF	; 255
 53e:	80 81       	ld	r24, Z
 540:	88 23       	and	r24, r24
 542:	71 f4       	brne	.+28     	; 0x560 <Sev_Display+0xa6>
            	PutOnBus(u8sevIndex, au8Cathode[u8num]);
 544:	8d 85       	ldd	r24, Y+13	; 0x0d
 546:	28 2f       	mov	r18, r24
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	ce 01       	movw	r24, r28
 54c:	02 96       	adiw	r24, 0x02	; 2
 54e:	fc 01       	movw	r30, r24
 550:	e2 0f       	add	r30, r18
 552:	f3 1f       	adc	r31, r19
 554:	90 81       	ld	r25, Z
 556:	8c 85       	ldd	r24, Y+12	; 0x0c
 558:	69 2f       	mov	r22, r25
 55a:	0e 94 cc 02 	call	0x598	; 0x598 <PutOnBus>
 55e:	12 c0       	rjmp	.+36     	; 0x584 <Sev_Display+0xca>
            }
            else{
            	PutOnBus(u8sevIndex, ~au8Cathode[u8num]);
 560:	8d 85       	ldd	r24, Y+13	; 0x0d
 562:	28 2f       	mov	r18, r24
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	ce 01       	movw	r24, r28
 568:	02 96       	adiw	r24, 0x02	; 2
 56a:	fc 01       	movw	r30, r24
 56c:	e2 0f       	add	r30, r18
 56e:	f3 1f       	adc	r31, r19
 570:	80 81       	ld	r24, Z
 572:	98 2f       	mov	r25, r24
 574:	90 95       	com	r25
 576:	8c 85       	ldd	r24, Y+12	; 0x0c
 578:	69 2f       	mov	r22, r25
 57a:	0e 94 cc 02 	call	0x598	; 0x598 <PutOnBus>
 57e:	02 c0       	rjmp	.+4      	; 0x584 <Sev_Display+0xca>
            }
        }
    }else{
        enuReturnLoc = PARAM_OUT_RANGE;
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	89 83       	std	Y+1, r24	; 0x01
    }
    return enuReturnLoc;
 584:	89 81       	ldd	r24, Y+1	; 0x01
}
 586:	62 96       	adiw	r28, 0x12	; 18
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	f8 94       	cli
 58c:	de bf       	out	0x3e, r29	; 62
 58e:	0f be       	out	0x3f, r0	; 63
 590:	cd bf       	out	0x3d, r28	; 61
 592:	cf 91       	pop	r28
 594:	df 91       	pop	r29
 596:	08 95       	ret

00000598 <PutOnBus>:

static void PutOnBus(u8 u8sevIndex, u8 u8num){
 598:	df 93       	push	r29
 59a:	cf 93       	push	r28
 59c:	cd b7       	in	r28, 0x3d	; 61
 59e:	de b7       	in	r29, 0x3e	; 62
 5a0:	2a 97       	sbiw	r28, 0x0a	; 10
 5a2:	0f b6       	in	r0, 0x3f	; 63
 5a4:	f8 94       	cli
 5a6:	de bf       	out	0x3e, r29	; 62
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	cd bf       	out	0x3d, r28	; 61
 5ac:	89 87       	std	Y+9, r24	; 0x09
 5ae:	6a 87       	std	Y+10, r22	; 0x0a
    u8 u8Num[7]; //0x0011 1111
	u8 cntr;
	for(cntr = 0; cntr < 7; cntr++){
 5b0:	19 82       	std	Y+1, r1	; 0x01
 5b2:	1b c0       	rjmp	.+54     	; 0x5ea <PutOnBus+0x52>
		u8Num[cntr] = GET_BIT(u8num, cntr);
 5b4:	89 81       	ldd	r24, Y+1	; 0x01
 5b6:	48 2f       	mov	r20, r24
 5b8:	50 e0       	ldi	r21, 0x00	; 0
 5ba:	8a 85       	ldd	r24, Y+10	; 0x0a
 5bc:	28 2f       	mov	r18, r24
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	89 81       	ldd	r24, Y+1	; 0x01
 5c2:	88 2f       	mov	r24, r24
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	b9 01       	movw	r22, r18
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <PutOnBus+0x36>
 5ca:	75 95       	asr	r23
 5cc:	67 95       	ror	r22
 5ce:	8a 95       	dec	r24
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <PutOnBus+0x32>
 5d2:	cb 01       	movw	r24, r22
 5d4:	28 2f       	mov	r18, r24
 5d6:	21 70       	andi	r18, 0x01	; 1
 5d8:	ce 01       	movw	r24, r28
 5da:	02 96       	adiw	r24, 0x02	; 2
 5dc:	fc 01       	movw	r30, r24
 5de:	e4 0f       	add	r30, r20
 5e0:	f5 1f       	adc	r31, r21
 5e2:	20 83       	st	Z, r18
}

static void PutOnBus(u8 u8sevIndex, u8 u8num){
    u8 u8Num[7]; //0x0011 1111
	u8 cntr;
	for(cntr = 0; cntr < 7; cntr++){
 5e4:	89 81       	ldd	r24, Y+1	; 0x01
 5e6:	8f 5f       	subi	r24, 0xFF	; 255
 5e8:	89 83       	std	Y+1, r24	; 0x01
 5ea:	89 81       	ldd	r24, Y+1	; 0x01
 5ec:	87 30       	cpi	r24, 0x07	; 7
 5ee:	10 f3       	brcs	.-60     	; 0x5b4 <PutOnBus+0x1c>
		u8Num[cntr] = GET_BIT(u8num, cntr);
	}
    DIO_enuWriteGroup(SEV_ConfigSet[u8sevIndex].Au8Pin, u8Num, 7 );
 5f0:	89 85       	ldd	r24, Y+9	; 0x09
 5f2:	28 2f       	mov	r18, r24
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	c9 01       	movw	r24, r18
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	88 0f       	add	r24, r24
 5fe:	99 1f       	adc	r25, r25
 600:	88 0f       	add	r24, r24
 602:	99 1f       	adc	r25, r25
 604:	82 0f       	add	r24, r18
 606:	93 1f       	adc	r25, r19
 608:	80 5a       	subi	r24, 0xA0	; 160
 60a:	9f 4f       	sbci	r25, 0xFF	; 255
 60c:	9e 01       	movw	r18, r28
 60e:	2e 5f       	subi	r18, 0xFE	; 254
 610:	3f 4f       	sbci	r19, 0xFF	; 255
 612:	b9 01       	movw	r22, r18
 614:	47 e0       	ldi	r20, 0x07	; 7
 616:	0e 94 20 02 	call	0x440	; 0x440 <DIO_enuWriteGroup>
}
 61a:	2a 96       	adiw	r28, 0x0a	; 10
 61c:	0f b6       	in	r0, 0x3f	; 63
 61e:	f8 94       	cli
 620:	de bf       	out	0x3e, r29	; 62
 622:	0f be       	out	0x3f, r0	; 63
 624:	cd bf       	out	0x3d, r28	; 61
 626:	cf 91       	pop	r28
 628:	df 91       	pop	r29
 62a:	08 95       	ret

0000062c <Sev_PowerOn>:

tenuErrorStatus Sev_PowerOn(u8 u8sevIndex){
 62c:	df 93       	push	r29
 62e:	cf 93       	push	r28
 630:	00 d0       	rcall	.+0      	; 0x632 <Sev_PowerOn+0x6>
 632:	cd b7       	in	r28, 0x3d	; 61
 634:	de b7       	in	r29, 0x3e	; 62
 636:	8a 83       	std	Y+2, r24	; 0x02
    tenuErrorStatus enuReturnLoc = EOK;
 638:	19 82       	std	Y+1, r1	; 0x01
    
    if(u8sevIndex <= MAX_SEV_SEGMENT){
 63a:	8a 81       	ldd	r24, Y+2	; 0x02
 63c:	83 30       	cpi	r24, 0x03	; 3
 63e:	e0 f5       	brcc	.+120    	; 0x6b8 <Sev_PowerOn+0x8c>
        if(SEV_ConfigSet[u8sevIndex].common_mode == Common_Cathode){
 640:	8a 81       	ldd	r24, Y+2	; 0x02
 642:	28 2f       	mov	r18, r24
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	c9 01       	movw	r24, r18
 648:	88 0f       	add	r24, r24
 64a:	99 1f       	adc	r25, r25
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	82 0f       	add	r24, r18
 656:	93 1f       	adc	r25, r19
 658:	fc 01       	movw	r30, r24
 65a:	e8 59       	subi	r30, 0x98	; 152
 65c:	ff 4f       	sbci	r31, 0xFF	; 255
 65e:	80 81       	ld	r24, Z
 660:	88 23       	and	r24, r24
 662:	a9 f4       	brne	.+42     	; 0x68e <Sev_PowerOn+0x62>
            enuReturnLoc = DIO_enuWritePin(SEV_ConfigSet[u8sevIndex].common, Common_Cathode);
 664:	8a 81       	ldd	r24, Y+2	; 0x02
 666:	28 2f       	mov	r18, r24
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	c9 01       	movw	r24, r18
 66c:	88 0f       	add	r24, r24
 66e:	99 1f       	adc	r25, r25
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	82 0f       	add	r24, r18
 67a:	93 1f       	adc	r25, r19
 67c:	fc 01       	movw	r30, r24
 67e:	e9 59       	subi	r30, 0x99	; 153
 680:	ff 4f       	sbci	r31, 0xFF	; 255
 682:	80 81       	ld	r24, Z
 684:	60 e0       	ldi	r22, 0x00	; 0
 686:	0e 94 57 00 	call	0xae	; 0xae <DIO_enuWritePin>
 68a:	89 83       	std	Y+1, r24	; 0x01
 68c:	17 c0       	rjmp	.+46     	; 0x6bc <Sev_PowerOn+0x90>
        }else{
        	 enuReturnLoc = DIO_enuWritePin(SEV_ConfigSet[u8sevIndex].common, Common_Anode);
 68e:	8a 81       	ldd	r24, Y+2	; 0x02
 690:	28 2f       	mov	r18, r24
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	c9 01       	movw	r24, r18
 696:	88 0f       	add	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	88 0f       	add	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	88 0f       	add	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	82 0f       	add	r24, r18
 6a4:	93 1f       	adc	r25, r19
 6a6:	fc 01       	movw	r30, r24
 6a8:	e9 59       	subi	r30, 0x99	; 153
 6aa:	ff 4f       	sbci	r31, 0xFF	; 255
 6ac:	80 81       	ld	r24, Z
 6ae:	61 e0       	ldi	r22, 0x01	; 1
 6b0:	0e 94 57 00 	call	0xae	; 0xae <DIO_enuWritePin>
 6b4:	89 83       	std	Y+1, r24	; 0x01
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <Sev_PowerOn+0x90>
        }
       
    }else{
        enuReturnLoc = PARAM_OUT_RANGE;
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	89 83       	std	Y+1, r24	; 0x01
    }
    return enuReturnLoc;
 6bc:	89 81       	ldd	r24, Y+1	; 0x01
}
 6be:	0f 90       	pop	r0
 6c0:	0f 90       	pop	r0
 6c2:	cf 91       	pop	r28
 6c4:	df 91       	pop	r29
 6c6:	08 95       	ret

000006c8 <Sev_PowerOff>:

tenuErrorStatus Sev_PowerOff(u8 u8sevIndex){
 6c8:	df 93       	push	r29
 6ca:	cf 93       	push	r28
 6cc:	00 d0       	rcall	.+0      	; 0x6ce <Sev_PowerOff+0x6>
 6ce:	cd b7       	in	r28, 0x3d	; 61
 6d0:	de b7       	in	r29, 0x3e	; 62
 6d2:	8a 83       	std	Y+2, r24	; 0x02
    tenuErrorStatus enuReturnLoc = EOK;
 6d4:	19 82       	std	Y+1, r1	; 0x01
    
    if(u8sevIndex <= MAX_SEV_SEGMENT){
 6d6:	8a 81       	ldd	r24, Y+2	; 0x02
 6d8:	83 30       	cpi	r24, 0x03	; 3
 6da:	e0 f5       	brcc	.+120    	; 0x754 <Sev_PowerOff+0x8c>
        if(SEV_ConfigSet[u8sevIndex].common_mode == Common_Cathode){
 6dc:	8a 81       	ldd	r24, Y+2	; 0x02
 6de:	28 2f       	mov	r18, r24
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	c9 01       	movw	r24, r18
 6e4:	88 0f       	add	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	88 0f       	add	r24, r24
 6ea:	99 1f       	adc	r25, r25
 6ec:	88 0f       	add	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	82 0f       	add	r24, r18
 6f2:	93 1f       	adc	r25, r19
 6f4:	fc 01       	movw	r30, r24
 6f6:	e8 59       	subi	r30, 0x98	; 152
 6f8:	ff 4f       	sbci	r31, 0xFF	; 255
 6fa:	80 81       	ld	r24, Z
 6fc:	88 23       	and	r24, r24
 6fe:	a9 f4       	brne	.+42     	; 0x72a <Sev_PowerOff+0x62>
        	 enuReturnLoc = DIO_enuWritePin(SEV_ConfigSet[u8sevIndex].common, Common_Anode);
 700:	8a 81       	ldd	r24, Y+2	; 0x02
 702:	28 2f       	mov	r18, r24
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	c9 01       	movw	r24, r18
 708:	88 0f       	add	r24, r24
 70a:	99 1f       	adc	r25, r25
 70c:	88 0f       	add	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	88 0f       	add	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	82 0f       	add	r24, r18
 716:	93 1f       	adc	r25, r19
 718:	fc 01       	movw	r30, r24
 71a:	e9 59       	subi	r30, 0x99	; 153
 71c:	ff 4f       	sbci	r31, 0xFF	; 255
 71e:	80 81       	ld	r24, Z
 720:	61 e0       	ldi	r22, 0x01	; 1
 722:	0e 94 57 00 	call	0xae	; 0xae <DIO_enuWritePin>
 726:	89 83       	std	Y+1, r24	; 0x01
 728:	17 c0       	rjmp	.+46     	; 0x758 <Sev_PowerOff+0x90>
        }else{
        	 enuReturnLoc = DIO_enuWritePin(SEV_ConfigSet[u8sevIndex].common, Common_Cathode);
 72a:	8a 81       	ldd	r24, Y+2	; 0x02
 72c:	28 2f       	mov	r18, r24
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	c9 01       	movw	r24, r18
 732:	88 0f       	add	r24, r24
 734:	99 1f       	adc	r25, r25
 736:	88 0f       	add	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	88 0f       	add	r24, r24
 73c:	99 1f       	adc	r25, r25
 73e:	82 0f       	add	r24, r18
 740:	93 1f       	adc	r25, r19
 742:	fc 01       	movw	r30, r24
 744:	e9 59       	subi	r30, 0x99	; 153
 746:	ff 4f       	sbci	r31, 0xFF	; 255
 748:	80 81       	ld	r24, Z
 74a:	60 e0       	ldi	r22, 0x00	; 0
 74c:	0e 94 57 00 	call	0xae	; 0xae <DIO_enuWritePin>
 750:	89 83       	std	Y+1, r24	; 0x01
 752:	02 c0       	rjmp	.+4      	; 0x758 <Sev_PowerOff+0x90>
        }
       
    }else{
        enuReturnLoc = PARAM_OUT_RANGE;
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	89 83       	std	Y+1, r24	; 0x01
    }
    return enuReturnLoc;
 758:	89 81       	ldd	r24, Y+1	; 0x01
}
 75a:	0f 90       	pop	r0
 75c:	0f 90       	pop	r0
 75e:	cf 91       	pop	r28
 760:	df 91       	pop	r29
 762:	08 95       	ret

00000764 <main>:

#include "../MCAL/DIO/DIO.h"
#include "../HAL/SEVEN_SEGMENT/SEV.h"
#include "../LIBS/delay.h"
int main(){
 764:	df 93       	push	r29
 766:	cf 93       	push	r28
 768:	cd b7       	in	r28, 0x3d	; 61
 76a:	de b7       	in	r29, 0x3e	; 62
 76c:	c0 55       	subi	r28, 0x50	; 80
 76e:	d0 40       	sbci	r29, 0x00	; 0
 770:	0f b6       	in	r0, 0x3f	; 63
 772:	f8 94       	cli
 774:	de bf       	out	0x3e, r29	; 62
 776:	0f be       	out	0x3f, r0	; 63
 778:	cd bf       	out	0x3d, r28	; 61
	 DIO_voidInit();
 77a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_voidInit>
	//  //PB0, PB1
	// DIO_enuWritePin(DIO_PIN_NUM_24, DIO_HIGH);
	//  DIO_enuWritePin(DIO_PIN_NUM_9, DIO_LOW);

	 //segment 1
	 Sev_PowerOn(0);
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	0e 94 16 03 	call	0x62c	; 0x62c <Sev_PowerOn>
	//segment 2
	 Sev_PowerOn(1);
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	0e 94 16 03 	call	0x62c	; 0x62c <Sev_PowerOn>

	 //SEV_ConfigSet[1].common = 1;
	 while(1){
		Sev_Display(0, 0);
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	60 e0       	ldi	r22, 0x00	; 0
 78e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Sev_Display>
		Sev_Display(1, 0);
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	60 e0       	ldi	r22, 0x00	; 0
 796:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Sev_Display>
		Delay_ms(75);
 79a:	fe 01       	movw	r30, r28
 79c:	e3 5b       	subi	r30, 0xB3	; 179
 79e:	ff 4f       	sbci	r31, 0xFF	; 255
 7a0:	89 e0       	ldi	r24, 0x09	; 9
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	a0 e0       	ldi	r26, 0x00	; 0
 7a6:	b0 e0       	ldi	r27, 0x00	; 0
 7a8:	80 83       	st	Z, r24
 7aa:	91 83       	std	Z+1, r25	; 0x01
 7ac:	a2 83       	std	Z+2, r26	; 0x02
 7ae:	b3 83       	std	Z+3, r27	; 0x03
 7b0:	3c c0       	rjmp	.+120    	; 0x82a <main+0xc6>
 7b2:	fe 01       	movw	r30, r28
 7b4:	e7 5b       	subi	r30, 0xB7	; 183
 7b6:	ff 4f       	sbci	r31, 0xFF	; 255
 7b8:	80 ed       	ldi	r24, 0xD0	; 208
 7ba:	97 e0       	ldi	r25, 0x07	; 7
 7bc:	a0 e0       	ldi	r26, 0x00	; 0
 7be:	b0 e0       	ldi	r27, 0x00	; 0
 7c0:	80 83       	st	Z, r24
 7c2:	91 83       	std	Z+1, r25	; 0x01
 7c4:	a2 83       	std	Z+2, r26	; 0x02
 7c6:	b3 83       	std	Z+3, r27	; 0x03
 7c8:	13 c0       	rjmp	.+38     	; 0x7f0 <main+0x8c>
 7ca:	00 00       	nop
 7cc:	9e 01       	movw	r18, r28
 7ce:	27 5b       	subi	r18, 0xB7	; 183
 7d0:	3f 4f       	sbci	r19, 0xFF	; 255
 7d2:	fe 01       	movw	r30, r28
 7d4:	e7 5b       	subi	r30, 0xB7	; 183
 7d6:	ff 4f       	sbci	r31, 0xFF	; 255
 7d8:	80 81       	ld	r24, Z
 7da:	91 81       	ldd	r25, Z+1	; 0x01
 7dc:	a2 81       	ldd	r26, Z+2	; 0x02
 7de:	b3 81       	ldd	r27, Z+3	; 0x03
 7e0:	01 97       	sbiw	r24, 0x01	; 1
 7e2:	a1 09       	sbc	r26, r1
 7e4:	b1 09       	sbc	r27, r1
 7e6:	f9 01       	movw	r30, r18
 7e8:	80 83       	st	Z, r24
 7ea:	91 83       	std	Z+1, r25	; 0x01
 7ec:	a2 83       	std	Z+2, r26	; 0x02
 7ee:	b3 83       	std	Z+3, r27	; 0x03
 7f0:	fe 01       	movw	r30, r28
 7f2:	e7 5b       	subi	r30, 0xB7	; 183
 7f4:	ff 4f       	sbci	r31, 0xFF	; 255
 7f6:	80 81       	ld	r24, Z
 7f8:	91 81       	ldd	r25, Z+1	; 0x01
 7fa:	a2 81       	ldd	r26, Z+2	; 0x02
 7fc:	b3 81       	ldd	r27, Z+3	; 0x03
 7fe:	00 97       	sbiw	r24, 0x00	; 0
 800:	a1 05       	cpc	r26, r1
 802:	b1 05       	cpc	r27, r1
 804:	11 f7       	brne	.-60     	; 0x7ca <main+0x66>
 806:	9e 01       	movw	r18, r28
 808:	23 5b       	subi	r18, 0xB3	; 179
 80a:	3f 4f       	sbci	r19, 0xFF	; 255
 80c:	fe 01       	movw	r30, r28
 80e:	e3 5b       	subi	r30, 0xB3	; 179
 810:	ff 4f       	sbci	r31, 0xFF	; 255
 812:	80 81       	ld	r24, Z
 814:	91 81       	ldd	r25, Z+1	; 0x01
 816:	a2 81       	ldd	r26, Z+2	; 0x02
 818:	b3 81       	ldd	r27, Z+3	; 0x03
 81a:	01 97       	sbiw	r24, 0x01	; 1
 81c:	a1 09       	sbc	r26, r1
 81e:	b1 09       	sbc	r27, r1
 820:	f9 01       	movw	r30, r18
 822:	80 83       	st	Z, r24
 824:	91 83       	std	Z+1, r25	; 0x01
 826:	a2 83       	std	Z+2, r26	; 0x02
 828:	b3 83       	std	Z+3, r27	; 0x03
 82a:	fe 01       	movw	r30, r28
 82c:	e3 5b       	subi	r30, 0xB3	; 179
 82e:	ff 4f       	sbci	r31, 0xFF	; 255
 830:	80 81       	ld	r24, Z
 832:	91 81       	ldd	r25, Z+1	; 0x01
 834:	a2 81       	ldd	r26, Z+2	; 0x02
 836:	b3 81       	ldd	r27, Z+3	; 0x03
 838:	00 97       	sbiw	r24, 0x00	; 0
 83a:	a1 05       	cpc	r26, r1
 83c:	b1 05       	cpc	r27, r1
 83e:	09 f0       	breq	.+2      	; 0x842 <main+0xde>
 840:	b8 cf       	rjmp	.-144    	; 0x7b2 <main+0x4e>
		Sev_Display(0, 1);
 842:	80 e0       	ldi	r24, 0x00	; 0
 844:	61 e0       	ldi	r22, 0x01	; 1
 846:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Sev_Display>
		Sev_Display(1, 1);
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	61 e0       	ldi	r22, 0x01	; 1
 84e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Sev_Display>
		Delay_ms(75);
 852:	fe 01       	movw	r30, r28
 854:	eb 5b       	subi	r30, 0xBB	; 187
 856:	ff 4f       	sbci	r31, 0xFF	; 255
 858:	89 e0       	ldi	r24, 0x09	; 9
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	a0 e0       	ldi	r26, 0x00	; 0
 85e:	b0 e0       	ldi	r27, 0x00	; 0
 860:	80 83       	st	Z, r24
 862:	91 83       	std	Z+1, r25	; 0x01
 864:	a2 83       	std	Z+2, r26	; 0x02
 866:	b3 83       	std	Z+3, r27	; 0x03
 868:	3c c0       	rjmp	.+120    	; 0x8e2 <__stack+0x83>
 86a:	fe 01       	movw	r30, r28
 86c:	ef 5b       	subi	r30, 0xBF	; 191
 86e:	ff 4f       	sbci	r31, 0xFF	; 255
 870:	80 ed       	ldi	r24, 0xD0	; 208
 872:	97 e0       	ldi	r25, 0x07	; 7
 874:	a0 e0       	ldi	r26, 0x00	; 0
 876:	b0 e0       	ldi	r27, 0x00	; 0
 878:	80 83       	st	Z, r24
 87a:	91 83       	std	Z+1, r25	; 0x01
 87c:	a2 83       	std	Z+2, r26	; 0x02
 87e:	b3 83       	std	Z+3, r27	; 0x03
 880:	13 c0       	rjmp	.+38     	; 0x8a8 <__stack+0x49>
 882:	00 00       	nop
 884:	9e 01       	movw	r18, r28
 886:	2f 5b       	subi	r18, 0xBF	; 191
 888:	3f 4f       	sbci	r19, 0xFF	; 255
 88a:	fe 01       	movw	r30, r28
 88c:	ef 5b       	subi	r30, 0xBF	; 191
 88e:	ff 4f       	sbci	r31, 0xFF	; 255
 890:	80 81       	ld	r24, Z
 892:	91 81       	ldd	r25, Z+1	; 0x01
 894:	a2 81       	ldd	r26, Z+2	; 0x02
 896:	b3 81       	ldd	r27, Z+3	; 0x03
 898:	01 97       	sbiw	r24, 0x01	; 1
 89a:	a1 09       	sbc	r26, r1
 89c:	b1 09       	sbc	r27, r1
 89e:	f9 01       	movw	r30, r18
 8a0:	80 83       	st	Z, r24
 8a2:	91 83       	std	Z+1, r25	; 0x01
 8a4:	a2 83       	std	Z+2, r26	; 0x02
 8a6:	b3 83       	std	Z+3, r27	; 0x03
 8a8:	fe 01       	movw	r30, r28
 8aa:	ef 5b       	subi	r30, 0xBF	; 191
 8ac:	ff 4f       	sbci	r31, 0xFF	; 255
 8ae:	80 81       	ld	r24, Z
 8b0:	91 81       	ldd	r25, Z+1	; 0x01
 8b2:	a2 81       	ldd	r26, Z+2	; 0x02
 8b4:	b3 81       	ldd	r27, Z+3	; 0x03
 8b6:	00 97       	sbiw	r24, 0x00	; 0
 8b8:	a1 05       	cpc	r26, r1
 8ba:	b1 05       	cpc	r27, r1
 8bc:	11 f7       	brne	.-60     	; 0x882 <__stack+0x23>
 8be:	9e 01       	movw	r18, r28
 8c0:	2b 5b       	subi	r18, 0xBB	; 187
 8c2:	3f 4f       	sbci	r19, 0xFF	; 255
 8c4:	fe 01       	movw	r30, r28
 8c6:	eb 5b       	subi	r30, 0xBB	; 187
 8c8:	ff 4f       	sbci	r31, 0xFF	; 255
 8ca:	80 81       	ld	r24, Z
 8cc:	91 81       	ldd	r25, Z+1	; 0x01
 8ce:	a2 81       	ldd	r26, Z+2	; 0x02
 8d0:	b3 81       	ldd	r27, Z+3	; 0x03
 8d2:	01 97       	sbiw	r24, 0x01	; 1
 8d4:	a1 09       	sbc	r26, r1
 8d6:	b1 09       	sbc	r27, r1
 8d8:	f9 01       	movw	r30, r18
 8da:	80 83       	st	Z, r24
 8dc:	91 83       	std	Z+1, r25	; 0x01
 8de:	a2 83       	std	Z+2, r26	; 0x02
 8e0:	b3 83       	std	Z+3, r27	; 0x03
 8e2:	fe 01       	movw	r30, r28
 8e4:	eb 5b       	subi	r30, 0xBB	; 187
 8e6:	ff 4f       	sbci	r31, 0xFF	; 255
 8e8:	80 81       	ld	r24, Z
 8ea:	91 81       	ldd	r25, Z+1	; 0x01
 8ec:	a2 81       	ldd	r26, Z+2	; 0x02
 8ee:	b3 81       	ldd	r27, Z+3	; 0x03
 8f0:	00 97       	sbiw	r24, 0x00	; 0
 8f2:	a1 05       	cpc	r26, r1
 8f4:	b1 05       	cpc	r27, r1
 8f6:	09 f0       	breq	.+2      	; 0x8fa <__stack+0x9b>
 8f8:	b8 cf       	rjmp	.-144    	; 0x86a <__stack+0xb>
		Sev_Display(0, 2);
 8fa:	80 e0       	ldi	r24, 0x00	; 0
 8fc:	62 e0       	ldi	r22, 0x02	; 2
 8fe:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Sev_Display>
		Sev_Display(1, 2);
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	62 e0       	ldi	r22, 0x02	; 2
 906:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Sev_Display>
		Delay_ms(75);
 90a:	89 e0       	ldi	r24, 0x09	; 9
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	a0 e0       	ldi	r26, 0x00	; 0
 910:	b0 e0       	ldi	r27, 0x00	; 0
 912:	fe 01       	movw	r30, r28
 914:	fd 96       	adiw	r30, 0x3d	; 61
 916:	80 83       	st	Z, r24
 918:	91 83       	std	Z+1, r25	; 0x01
 91a:	a2 83       	std	Z+2, r26	; 0x02
 91c:	b3 83       	std	Z+3, r27	; 0x03
 91e:	2c c0       	rjmp	.+88     	; 0x978 <__stack+0x119>
 920:	80 ed       	ldi	r24, 0xD0	; 208
 922:	97 e0       	ldi	r25, 0x07	; 7
 924:	a0 e0       	ldi	r26, 0x00	; 0
 926:	b0 e0       	ldi	r27, 0x00	; 0
 928:	89 af       	std	Y+57, r24	; 0x39
 92a:	9a af       	std	Y+58, r25	; 0x3a
 92c:	ab af       	std	Y+59, r26	; 0x3b
 92e:	bc af       	std	Y+60, r27	; 0x3c
 930:	0c c0       	rjmp	.+24     	; 0x94a <__stack+0xeb>
 932:	00 00       	nop
 934:	89 ad       	ldd	r24, Y+57	; 0x39
 936:	9a ad       	ldd	r25, Y+58	; 0x3a
 938:	ab ad       	ldd	r26, Y+59	; 0x3b
 93a:	bc ad       	ldd	r27, Y+60	; 0x3c
 93c:	01 97       	sbiw	r24, 0x01	; 1
 93e:	a1 09       	sbc	r26, r1
 940:	b1 09       	sbc	r27, r1
 942:	89 af       	std	Y+57, r24	; 0x39
 944:	9a af       	std	Y+58, r25	; 0x3a
 946:	ab af       	std	Y+59, r26	; 0x3b
 948:	bc af       	std	Y+60, r27	; 0x3c
 94a:	89 ad       	ldd	r24, Y+57	; 0x39
 94c:	9a ad       	ldd	r25, Y+58	; 0x3a
 94e:	ab ad       	ldd	r26, Y+59	; 0x3b
 950:	bc ad       	ldd	r27, Y+60	; 0x3c
 952:	00 97       	sbiw	r24, 0x00	; 0
 954:	a1 05       	cpc	r26, r1
 956:	b1 05       	cpc	r27, r1
 958:	61 f7       	brne	.-40     	; 0x932 <__stack+0xd3>
 95a:	fe 01       	movw	r30, r28
 95c:	fd 96       	adiw	r30, 0x3d	; 61
 95e:	80 81       	ld	r24, Z
 960:	91 81       	ldd	r25, Z+1	; 0x01
 962:	a2 81       	ldd	r26, Z+2	; 0x02
 964:	b3 81       	ldd	r27, Z+3	; 0x03
 966:	01 97       	sbiw	r24, 0x01	; 1
 968:	a1 09       	sbc	r26, r1
 96a:	b1 09       	sbc	r27, r1
 96c:	fe 01       	movw	r30, r28
 96e:	fd 96       	adiw	r30, 0x3d	; 61
 970:	80 83       	st	Z, r24
 972:	91 83       	std	Z+1, r25	; 0x01
 974:	a2 83       	std	Z+2, r26	; 0x02
 976:	b3 83       	std	Z+3, r27	; 0x03
 978:	fe 01       	movw	r30, r28
 97a:	fd 96       	adiw	r30, 0x3d	; 61
 97c:	80 81       	ld	r24, Z
 97e:	91 81       	ldd	r25, Z+1	; 0x01
 980:	a2 81       	ldd	r26, Z+2	; 0x02
 982:	b3 81       	ldd	r27, Z+3	; 0x03
 984:	00 97       	sbiw	r24, 0x00	; 0
 986:	a1 05       	cpc	r26, r1
 988:	b1 05       	cpc	r27, r1
 98a:	51 f6       	brne	.-108    	; 0x920 <__stack+0xc1>
		Sev_Display(0, 3);
 98c:	80 e0       	ldi	r24, 0x00	; 0
 98e:	63 e0       	ldi	r22, 0x03	; 3
 990:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Sev_Display>
		Sev_Display(1, 3);
 994:	81 e0       	ldi	r24, 0x01	; 1
 996:	63 e0       	ldi	r22, 0x03	; 3
 998:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Sev_Display>
		Delay_ms(75);
 99c:	89 e0       	ldi	r24, 0x09	; 9
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	a0 e0       	ldi	r26, 0x00	; 0
 9a2:	b0 e0       	ldi	r27, 0x00	; 0
 9a4:	8d ab       	std	Y+53, r24	; 0x35
 9a6:	9e ab       	std	Y+54, r25	; 0x36
 9a8:	af ab       	std	Y+55, r26	; 0x37
 9aa:	b8 af       	std	Y+56, r27	; 0x38
 9ac:	28 c0       	rjmp	.+80     	; 0x9fe <__stack+0x19f>
 9ae:	80 ed       	ldi	r24, 0xD0	; 208
 9b0:	97 e0       	ldi	r25, 0x07	; 7
 9b2:	a0 e0       	ldi	r26, 0x00	; 0
 9b4:	b0 e0       	ldi	r27, 0x00	; 0
 9b6:	89 ab       	std	Y+49, r24	; 0x31
 9b8:	9a ab       	std	Y+50, r25	; 0x32
 9ba:	ab ab       	std	Y+51, r26	; 0x33
 9bc:	bc ab       	std	Y+52, r27	; 0x34
 9be:	0c c0       	rjmp	.+24     	; 0x9d8 <__stack+0x179>
 9c0:	00 00       	nop
 9c2:	89 a9       	ldd	r24, Y+49	; 0x31
 9c4:	9a a9       	ldd	r25, Y+50	; 0x32
 9c6:	ab a9       	ldd	r26, Y+51	; 0x33
 9c8:	bc a9       	ldd	r27, Y+52	; 0x34
 9ca:	01 97       	sbiw	r24, 0x01	; 1
 9cc:	a1 09       	sbc	r26, r1
 9ce:	b1 09       	sbc	r27, r1
 9d0:	89 ab       	std	Y+49, r24	; 0x31
 9d2:	9a ab       	std	Y+50, r25	; 0x32
 9d4:	ab ab       	std	Y+51, r26	; 0x33
 9d6:	bc ab       	std	Y+52, r27	; 0x34
 9d8:	89 a9       	ldd	r24, Y+49	; 0x31
 9da:	9a a9       	ldd	r25, Y+50	; 0x32
 9dc:	ab a9       	ldd	r26, Y+51	; 0x33
 9de:	bc a9       	ldd	r27, Y+52	; 0x34
 9e0:	00 97       	sbiw	r24, 0x00	; 0
 9e2:	a1 05       	cpc	r26, r1
 9e4:	b1 05       	cpc	r27, r1
 9e6:	61 f7       	brne	.-40     	; 0x9c0 <__stack+0x161>
 9e8:	8d a9       	ldd	r24, Y+53	; 0x35
 9ea:	9e a9       	ldd	r25, Y+54	; 0x36
 9ec:	af a9       	ldd	r26, Y+55	; 0x37
 9ee:	b8 ad       	ldd	r27, Y+56	; 0x38
 9f0:	01 97       	sbiw	r24, 0x01	; 1
 9f2:	a1 09       	sbc	r26, r1
 9f4:	b1 09       	sbc	r27, r1
 9f6:	8d ab       	std	Y+53, r24	; 0x35
 9f8:	9e ab       	std	Y+54, r25	; 0x36
 9fa:	af ab       	std	Y+55, r26	; 0x37
 9fc:	b8 af       	std	Y+56, r27	; 0x38
 9fe:	8d a9       	ldd	r24, Y+53	; 0x35
 a00:	9e a9       	ldd	r25, Y+54	; 0x36
 a02:	af a9       	ldd	r26, Y+55	; 0x37
 a04:	b8 ad       	ldd	r27, Y+56	; 0x38
 a06:	00 97       	sbiw	r24, 0x00	; 0
 a08:	a1 05       	cpc	r26, r1
 a0a:	b1 05       	cpc	r27, r1
 a0c:	81 f6       	brne	.-96     	; 0x9ae <__stack+0x14f>
		Sev_Display(0, 4);
 a0e:	80 e0       	ldi	r24, 0x00	; 0
 a10:	64 e0       	ldi	r22, 0x04	; 4
 a12:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Sev_Display>
		Sev_Display(1, 4);
 a16:	81 e0       	ldi	r24, 0x01	; 1
 a18:	64 e0       	ldi	r22, 0x04	; 4
 a1a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Sev_Display>
		Delay_ms(75);
 a1e:	89 e0       	ldi	r24, 0x09	; 9
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	a0 e0       	ldi	r26, 0x00	; 0
 a24:	b0 e0       	ldi	r27, 0x00	; 0
 a26:	8d a7       	std	Y+45, r24	; 0x2d
 a28:	9e a7       	std	Y+46, r25	; 0x2e
 a2a:	af a7       	std	Y+47, r26	; 0x2f
 a2c:	b8 ab       	std	Y+48, r27	; 0x30
 a2e:	28 c0       	rjmp	.+80     	; 0xa80 <__stack+0x221>
 a30:	80 ed       	ldi	r24, 0xD0	; 208
 a32:	97 e0       	ldi	r25, 0x07	; 7
 a34:	a0 e0       	ldi	r26, 0x00	; 0
 a36:	b0 e0       	ldi	r27, 0x00	; 0
 a38:	89 a7       	std	Y+41, r24	; 0x29
 a3a:	9a a7       	std	Y+42, r25	; 0x2a
 a3c:	ab a7       	std	Y+43, r26	; 0x2b
 a3e:	bc a7       	std	Y+44, r27	; 0x2c
 a40:	0c c0       	rjmp	.+24     	; 0xa5a <__stack+0x1fb>
 a42:	00 00       	nop
 a44:	89 a5       	ldd	r24, Y+41	; 0x29
 a46:	9a a5       	ldd	r25, Y+42	; 0x2a
 a48:	ab a5       	ldd	r26, Y+43	; 0x2b
 a4a:	bc a5       	ldd	r27, Y+44	; 0x2c
 a4c:	01 97       	sbiw	r24, 0x01	; 1
 a4e:	a1 09       	sbc	r26, r1
 a50:	b1 09       	sbc	r27, r1
 a52:	89 a7       	std	Y+41, r24	; 0x29
 a54:	9a a7       	std	Y+42, r25	; 0x2a
 a56:	ab a7       	std	Y+43, r26	; 0x2b
 a58:	bc a7       	std	Y+44, r27	; 0x2c
 a5a:	89 a5       	ldd	r24, Y+41	; 0x29
 a5c:	9a a5       	ldd	r25, Y+42	; 0x2a
 a5e:	ab a5       	ldd	r26, Y+43	; 0x2b
 a60:	bc a5       	ldd	r27, Y+44	; 0x2c
 a62:	00 97       	sbiw	r24, 0x00	; 0
 a64:	a1 05       	cpc	r26, r1
 a66:	b1 05       	cpc	r27, r1
 a68:	61 f7       	brne	.-40     	; 0xa42 <__stack+0x1e3>
 a6a:	8d a5       	ldd	r24, Y+45	; 0x2d
 a6c:	9e a5       	ldd	r25, Y+46	; 0x2e
 a6e:	af a5       	ldd	r26, Y+47	; 0x2f
 a70:	b8 a9       	ldd	r27, Y+48	; 0x30
 a72:	01 97       	sbiw	r24, 0x01	; 1
 a74:	a1 09       	sbc	r26, r1
 a76:	b1 09       	sbc	r27, r1
 a78:	8d a7       	std	Y+45, r24	; 0x2d
 a7a:	9e a7       	std	Y+46, r25	; 0x2e
 a7c:	af a7       	std	Y+47, r26	; 0x2f
 a7e:	b8 ab       	std	Y+48, r27	; 0x30
 a80:	8d a5       	ldd	r24, Y+45	; 0x2d
 a82:	9e a5       	ldd	r25, Y+46	; 0x2e
 a84:	af a5       	ldd	r26, Y+47	; 0x2f
 a86:	b8 a9       	ldd	r27, Y+48	; 0x30
 a88:	00 97       	sbiw	r24, 0x00	; 0
 a8a:	a1 05       	cpc	r26, r1
 a8c:	b1 05       	cpc	r27, r1
 a8e:	81 f6       	brne	.-96     	; 0xa30 <__stack+0x1d1>
		Sev_Display(0, 5);
 a90:	80 e0       	ldi	r24, 0x00	; 0
 a92:	65 e0       	ldi	r22, 0x05	; 5
 a94:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Sev_Display>
		Sev_Display(1, 5);
 a98:	81 e0       	ldi	r24, 0x01	; 1
 a9a:	65 e0       	ldi	r22, 0x05	; 5
 a9c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Sev_Display>
		Delay_ms(75);
 aa0:	89 e0       	ldi	r24, 0x09	; 9
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	a0 e0       	ldi	r26, 0x00	; 0
 aa6:	b0 e0       	ldi	r27, 0x00	; 0
 aa8:	8d a3       	std	Y+37, r24	; 0x25
 aaa:	9e a3       	std	Y+38, r25	; 0x26
 aac:	af a3       	std	Y+39, r26	; 0x27
 aae:	b8 a7       	std	Y+40, r27	; 0x28
 ab0:	28 c0       	rjmp	.+80     	; 0xb02 <__stack+0x2a3>
 ab2:	80 ed       	ldi	r24, 0xD0	; 208
 ab4:	97 e0       	ldi	r25, 0x07	; 7
 ab6:	a0 e0       	ldi	r26, 0x00	; 0
 ab8:	b0 e0       	ldi	r27, 0x00	; 0
 aba:	89 a3       	std	Y+33, r24	; 0x21
 abc:	9a a3       	std	Y+34, r25	; 0x22
 abe:	ab a3       	std	Y+35, r26	; 0x23
 ac0:	bc a3       	std	Y+36, r27	; 0x24
 ac2:	0c c0       	rjmp	.+24     	; 0xadc <__stack+0x27d>
 ac4:	00 00       	nop
 ac6:	89 a1       	ldd	r24, Y+33	; 0x21
 ac8:	9a a1       	ldd	r25, Y+34	; 0x22
 aca:	ab a1       	ldd	r26, Y+35	; 0x23
 acc:	bc a1       	ldd	r27, Y+36	; 0x24
 ace:	01 97       	sbiw	r24, 0x01	; 1
 ad0:	a1 09       	sbc	r26, r1
 ad2:	b1 09       	sbc	r27, r1
 ad4:	89 a3       	std	Y+33, r24	; 0x21
 ad6:	9a a3       	std	Y+34, r25	; 0x22
 ad8:	ab a3       	std	Y+35, r26	; 0x23
 ada:	bc a3       	std	Y+36, r27	; 0x24
 adc:	89 a1       	ldd	r24, Y+33	; 0x21
 ade:	9a a1       	ldd	r25, Y+34	; 0x22
 ae0:	ab a1       	ldd	r26, Y+35	; 0x23
 ae2:	bc a1       	ldd	r27, Y+36	; 0x24
 ae4:	00 97       	sbiw	r24, 0x00	; 0
 ae6:	a1 05       	cpc	r26, r1
 ae8:	b1 05       	cpc	r27, r1
 aea:	61 f7       	brne	.-40     	; 0xac4 <__stack+0x265>
 aec:	8d a1       	ldd	r24, Y+37	; 0x25
 aee:	9e a1       	ldd	r25, Y+38	; 0x26
 af0:	af a1       	ldd	r26, Y+39	; 0x27
 af2:	b8 a5       	ldd	r27, Y+40	; 0x28
 af4:	01 97       	sbiw	r24, 0x01	; 1
 af6:	a1 09       	sbc	r26, r1
 af8:	b1 09       	sbc	r27, r1
 afa:	8d a3       	std	Y+37, r24	; 0x25
 afc:	9e a3       	std	Y+38, r25	; 0x26
 afe:	af a3       	std	Y+39, r26	; 0x27
 b00:	b8 a7       	std	Y+40, r27	; 0x28
 b02:	8d a1       	ldd	r24, Y+37	; 0x25
 b04:	9e a1       	ldd	r25, Y+38	; 0x26
 b06:	af a1       	ldd	r26, Y+39	; 0x27
 b08:	b8 a5       	ldd	r27, Y+40	; 0x28
 b0a:	00 97       	sbiw	r24, 0x00	; 0
 b0c:	a1 05       	cpc	r26, r1
 b0e:	b1 05       	cpc	r27, r1
 b10:	81 f6       	brne	.-96     	; 0xab2 <__stack+0x253>
		Sev_Display(0, 6);
 b12:	80 e0       	ldi	r24, 0x00	; 0
 b14:	66 e0       	ldi	r22, 0x06	; 6
 b16:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Sev_Display>
		Sev_Display(1, 6);
 b1a:	81 e0       	ldi	r24, 0x01	; 1
 b1c:	66 e0       	ldi	r22, 0x06	; 6
 b1e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Sev_Display>
		Delay_ms(75);
 b22:	89 e0       	ldi	r24, 0x09	; 9
 b24:	90 e0       	ldi	r25, 0x00	; 0
 b26:	a0 e0       	ldi	r26, 0x00	; 0
 b28:	b0 e0       	ldi	r27, 0x00	; 0
 b2a:	8d 8f       	std	Y+29, r24	; 0x1d
 b2c:	9e 8f       	std	Y+30, r25	; 0x1e
 b2e:	af 8f       	std	Y+31, r26	; 0x1f
 b30:	b8 a3       	std	Y+32, r27	; 0x20
 b32:	28 c0       	rjmp	.+80     	; 0xb84 <__stack+0x325>
 b34:	80 ed       	ldi	r24, 0xD0	; 208
 b36:	97 e0       	ldi	r25, 0x07	; 7
 b38:	a0 e0       	ldi	r26, 0x00	; 0
 b3a:	b0 e0       	ldi	r27, 0x00	; 0
 b3c:	89 8f       	std	Y+25, r24	; 0x19
 b3e:	9a 8f       	std	Y+26, r25	; 0x1a
 b40:	ab 8f       	std	Y+27, r26	; 0x1b
 b42:	bc 8f       	std	Y+28, r27	; 0x1c
 b44:	0c c0       	rjmp	.+24     	; 0xb5e <__stack+0x2ff>
 b46:	00 00       	nop
 b48:	89 8d       	ldd	r24, Y+25	; 0x19
 b4a:	9a 8d       	ldd	r25, Y+26	; 0x1a
 b4c:	ab 8d       	ldd	r26, Y+27	; 0x1b
 b4e:	bc 8d       	ldd	r27, Y+28	; 0x1c
 b50:	01 97       	sbiw	r24, 0x01	; 1
 b52:	a1 09       	sbc	r26, r1
 b54:	b1 09       	sbc	r27, r1
 b56:	89 8f       	std	Y+25, r24	; 0x19
 b58:	9a 8f       	std	Y+26, r25	; 0x1a
 b5a:	ab 8f       	std	Y+27, r26	; 0x1b
 b5c:	bc 8f       	std	Y+28, r27	; 0x1c
 b5e:	89 8d       	ldd	r24, Y+25	; 0x19
 b60:	9a 8d       	ldd	r25, Y+26	; 0x1a
 b62:	ab 8d       	ldd	r26, Y+27	; 0x1b
 b64:	bc 8d       	ldd	r27, Y+28	; 0x1c
 b66:	00 97       	sbiw	r24, 0x00	; 0
 b68:	a1 05       	cpc	r26, r1
 b6a:	b1 05       	cpc	r27, r1
 b6c:	61 f7       	brne	.-40     	; 0xb46 <__stack+0x2e7>
 b6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
 b70:	9e 8d       	ldd	r25, Y+30	; 0x1e
 b72:	af 8d       	ldd	r26, Y+31	; 0x1f
 b74:	b8 a1       	ldd	r27, Y+32	; 0x20
 b76:	01 97       	sbiw	r24, 0x01	; 1
 b78:	a1 09       	sbc	r26, r1
 b7a:	b1 09       	sbc	r27, r1
 b7c:	8d 8f       	std	Y+29, r24	; 0x1d
 b7e:	9e 8f       	std	Y+30, r25	; 0x1e
 b80:	af 8f       	std	Y+31, r26	; 0x1f
 b82:	b8 a3       	std	Y+32, r27	; 0x20
 b84:	8d 8d       	ldd	r24, Y+29	; 0x1d
 b86:	9e 8d       	ldd	r25, Y+30	; 0x1e
 b88:	af 8d       	ldd	r26, Y+31	; 0x1f
 b8a:	b8 a1       	ldd	r27, Y+32	; 0x20
 b8c:	00 97       	sbiw	r24, 0x00	; 0
 b8e:	a1 05       	cpc	r26, r1
 b90:	b1 05       	cpc	r27, r1
 b92:	81 f6       	brne	.-96     	; 0xb34 <__stack+0x2d5>
		Sev_Display(0, 7);
 b94:	80 e0       	ldi	r24, 0x00	; 0
 b96:	67 e0       	ldi	r22, 0x07	; 7
 b98:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Sev_Display>
		Sev_Display(1, 7);
 b9c:	81 e0       	ldi	r24, 0x01	; 1
 b9e:	67 e0       	ldi	r22, 0x07	; 7
 ba0:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Sev_Display>
		Delay_ms(75);
 ba4:	89 e0       	ldi	r24, 0x09	; 9
 ba6:	90 e0       	ldi	r25, 0x00	; 0
 ba8:	a0 e0       	ldi	r26, 0x00	; 0
 baa:	b0 e0       	ldi	r27, 0x00	; 0
 bac:	8d 8b       	std	Y+21, r24	; 0x15
 bae:	9e 8b       	std	Y+22, r25	; 0x16
 bb0:	af 8b       	std	Y+23, r26	; 0x17
 bb2:	b8 8f       	std	Y+24, r27	; 0x18
 bb4:	28 c0       	rjmp	.+80     	; 0xc06 <__stack+0x3a7>
 bb6:	80 ed       	ldi	r24, 0xD0	; 208
 bb8:	97 e0       	ldi	r25, 0x07	; 7
 bba:	a0 e0       	ldi	r26, 0x00	; 0
 bbc:	b0 e0       	ldi	r27, 0x00	; 0
 bbe:	89 8b       	std	Y+17, r24	; 0x11
 bc0:	9a 8b       	std	Y+18, r25	; 0x12
 bc2:	ab 8b       	std	Y+19, r26	; 0x13
 bc4:	bc 8b       	std	Y+20, r27	; 0x14
 bc6:	0c c0       	rjmp	.+24     	; 0xbe0 <__stack+0x381>
 bc8:	00 00       	nop
 bca:	89 89       	ldd	r24, Y+17	; 0x11
 bcc:	9a 89       	ldd	r25, Y+18	; 0x12
 bce:	ab 89       	ldd	r26, Y+19	; 0x13
 bd0:	bc 89       	ldd	r27, Y+20	; 0x14
 bd2:	01 97       	sbiw	r24, 0x01	; 1
 bd4:	a1 09       	sbc	r26, r1
 bd6:	b1 09       	sbc	r27, r1
 bd8:	89 8b       	std	Y+17, r24	; 0x11
 bda:	9a 8b       	std	Y+18, r25	; 0x12
 bdc:	ab 8b       	std	Y+19, r26	; 0x13
 bde:	bc 8b       	std	Y+20, r27	; 0x14
 be0:	89 89       	ldd	r24, Y+17	; 0x11
 be2:	9a 89       	ldd	r25, Y+18	; 0x12
 be4:	ab 89       	ldd	r26, Y+19	; 0x13
 be6:	bc 89       	ldd	r27, Y+20	; 0x14
 be8:	00 97       	sbiw	r24, 0x00	; 0
 bea:	a1 05       	cpc	r26, r1
 bec:	b1 05       	cpc	r27, r1
 bee:	61 f7       	brne	.-40     	; 0xbc8 <__stack+0x369>
 bf0:	8d 89       	ldd	r24, Y+21	; 0x15
 bf2:	9e 89       	ldd	r25, Y+22	; 0x16
 bf4:	af 89       	ldd	r26, Y+23	; 0x17
 bf6:	b8 8d       	ldd	r27, Y+24	; 0x18
 bf8:	01 97       	sbiw	r24, 0x01	; 1
 bfa:	a1 09       	sbc	r26, r1
 bfc:	b1 09       	sbc	r27, r1
 bfe:	8d 8b       	std	Y+21, r24	; 0x15
 c00:	9e 8b       	std	Y+22, r25	; 0x16
 c02:	af 8b       	std	Y+23, r26	; 0x17
 c04:	b8 8f       	std	Y+24, r27	; 0x18
 c06:	8d 89       	ldd	r24, Y+21	; 0x15
 c08:	9e 89       	ldd	r25, Y+22	; 0x16
 c0a:	af 89       	ldd	r26, Y+23	; 0x17
 c0c:	b8 8d       	ldd	r27, Y+24	; 0x18
 c0e:	00 97       	sbiw	r24, 0x00	; 0
 c10:	a1 05       	cpc	r26, r1
 c12:	b1 05       	cpc	r27, r1
 c14:	81 f6       	brne	.-96     	; 0xbb6 <__stack+0x357>
		Sev_Display(0, 8);
 c16:	80 e0       	ldi	r24, 0x00	; 0
 c18:	68 e0       	ldi	r22, 0x08	; 8
 c1a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Sev_Display>
		Sev_Display(1, 8);
 c1e:	81 e0       	ldi	r24, 0x01	; 1
 c20:	68 e0       	ldi	r22, 0x08	; 8
 c22:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Sev_Display>
		Delay_ms(75);
 c26:	89 e0       	ldi	r24, 0x09	; 9
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	a0 e0       	ldi	r26, 0x00	; 0
 c2c:	b0 e0       	ldi	r27, 0x00	; 0
 c2e:	8d 87       	std	Y+13, r24	; 0x0d
 c30:	9e 87       	std	Y+14, r25	; 0x0e
 c32:	af 87       	std	Y+15, r26	; 0x0f
 c34:	b8 8b       	std	Y+16, r27	; 0x10
 c36:	28 c0       	rjmp	.+80     	; 0xc88 <__stack+0x429>
 c38:	80 ed       	ldi	r24, 0xD0	; 208
 c3a:	97 e0       	ldi	r25, 0x07	; 7
 c3c:	a0 e0       	ldi	r26, 0x00	; 0
 c3e:	b0 e0       	ldi	r27, 0x00	; 0
 c40:	89 87       	std	Y+9, r24	; 0x09
 c42:	9a 87       	std	Y+10, r25	; 0x0a
 c44:	ab 87       	std	Y+11, r26	; 0x0b
 c46:	bc 87       	std	Y+12, r27	; 0x0c
 c48:	0c c0       	rjmp	.+24     	; 0xc62 <__stack+0x403>
 c4a:	00 00       	nop
 c4c:	89 85       	ldd	r24, Y+9	; 0x09
 c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
 c50:	ab 85       	ldd	r26, Y+11	; 0x0b
 c52:	bc 85       	ldd	r27, Y+12	; 0x0c
 c54:	01 97       	sbiw	r24, 0x01	; 1
 c56:	a1 09       	sbc	r26, r1
 c58:	b1 09       	sbc	r27, r1
 c5a:	89 87       	std	Y+9, r24	; 0x09
 c5c:	9a 87       	std	Y+10, r25	; 0x0a
 c5e:	ab 87       	std	Y+11, r26	; 0x0b
 c60:	bc 87       	std	Y+12, r27	; 0x0c
 c62:	89 85       	ldd	r24, Y+9	; 0x09
 c64:	9a 85       	ldd	r25, Y+10	; 0x0a
 c66:	ab 85       	ldd	r26, Y+11	; 0x0b
 c68:	bc 85       	ldd	r27, Y+12	; 0x0c
 c6a:	00 97       	sbiw	r24, 0x00	; 0
 c6c:	a1 05       	cpc	r26, r1
 c6e:	b1 05       	cpc	r27, r1
 c70:	61 f7       	brne	.-40     	; 0xc4a <__stack+0x3eb>
 c72:	8d 85       	ldd	r24, Y+13	; 0x0d
 c74:	9e 85       	ldd	r25, Y+14	; 0x0e
 c76:	af 85       	ldd	r26, Y+15	; 0x0f
 c78:	b8 89       	ldd	r27, Y+16	; 0x10
 c7a:	01 97       	sbiw	r24, 0x01	; 1
 c7c:	a1 09       	sbc	r26, r1
 c7e:	b1 09       	sbc	r27, r1
 c80:	8d 87       	std	Y+13, r24	; 0x0d
 c82:	9e 87       	std	Y+14, r25	; 0x0e
 c84:	af 87       	std	Y+15, r26	; 0x0f
 c86:	b8 8b       	std	Y+16, r27	; 0x10
 c88:	8d 85       	ldd	r24, Y+13	; 0x0d
 c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
 c8c:	af 85       	ldd	r26, Y+15	; 0x0f
 c8e:	b8 89       	ldd	r27, Y+16	; 0x10
 c90:	00 97       	sbiw	r24, 0x00	; 0
 c92:	a1 05       	cpc	r26, r1
 c94:	b1 05       	cpc	r27, r1
 c96:	81 f6       	brne	.-96     	; 0xc38 <__stack+0x3d9>
		Sev_Display(0, 9);
 c98:	80 e0       	ldi	r24, 0x00	; 0
 c9a:	69 e0       	ldi	r22, 0x09	; 9
 c9c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Sev_Display>
		Sev_Display(1, 9);
 ca0:	81 e0       	ldi	r24, 0x01	; 1
 ca2:	69 e0       	ldi	r22, 0x09	; 9
 ca4:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Sev_Display>
		Delay_ms(75);
 ca8:	89 e0       	ldi	r24, 0x09	; 9
 caa:	90 e0       	ldi	r25, 0x00	; 0
 cac:	a0 e0       	ldi	r26, 0x00	; 0
 cae:	b0 e0       	ldi	r27, 0x00	; 0
 cb0:	8d 83       	std	Y+5, r24	; 0x05
 cb2:	9e 83       	std	Y+6, r25	; 0x06
 cb4:	af 83       	std	Y+7, r26	; 0x07
 cb6:	b8 87       	std	Y+8, r27	; 0x08
 cb8:	28 c0       	rjmp	.+80     	; 0xd0a <__stack+0x4ab>
 cba:	80 ed       	ldi	r24, 0xD0	; 208
 cbc:	97 e0       	ldi	r25, 0x07	; 7
 cbe:	a0 e0       	ldi	r26, 0x00	; 0
 cc0:	b0 e0       	ldi	r27, 0x00	; 0
 cc2:	89 83       	std	Y+1, r24	; 0x01
 cc4:	9a 83       	std	Y+2, r25	; 0x02
 cc6:	ab 83       	std	Y+3, r26	; 0x03
 cc8:	bc 83       	std	Y+4, r27	; 0x04
 cca:	0c c0       	rjmp	.+24     	; 0xce4 <__stack+0x485>
 ccc:	00 00       	nop
 cce:	89 81       	ldd	r24, Y+1	; 0x01
 cd0:	9a 81       	ldd	r25, Y+2	; 0x02
 cd2:	ab 81       	ldd	r26, Y+3	; 0x03
 cd4:	bc 81       	ldd	r27, Y+4	; 0x04
 cd6:	01 97       	sbiw	r24, 0x01	; 1
 cd8:	a1 09       	sbc	r26, r1
 cda:	b1 09       	sbc	r27, r1
 cdc:	89 83       	std	Y+1, r24	; 0x01
 cde:	9a 83       	std	Y+2, r25	; 0x02
 ce0:	ab 83       	std	Y+3, r26	; 0x03
 ce2:	bc 83       	std	Y+4, r27	; 0x04
 ce4:	89 81       	ldd	r24, Y+1	; 0x01
 ce6:	9a 81       	ldd	r25, Y+2	; 0x02
 ce8:	ab 81       	ldd	r26, Y+3	; 0x03
 cea:	bc 81       	ldd	r27, Y+4	; 0x04
 cec:	00 97       	sbiw	r24, 0x00	; 0
 cee:	a1 05       	cpc	r26, r1
 cf0:	b1 05       	cpc	r27, r1
 cf2:	61 f7       	brne	.-40     	; 0xccc <__stack+0x46d>
 cf4:	8d 81       	ldd	r24, Y+5	; 0x05
 cf6:	9e 81       	ldd	r25, Y+6	; 0x06
 cf8:	af 81       	ldd	r26, Y+7	; 0x07
 cfa:	b8 85       	ldd	r27, Y+8	; 0x08
 cfc:	01 97       	sbiw	r24, 0x01	; 1
 cfe:	a1 09       	sbc	r26, r1
 d00:	b1 09       	sbc	r27, r1
 d02:	8d 83       	std	Y+5, r24	; 0x05
 d04:	9e 83       	std	Y+6, r25	; 0x06
 d06:	af 83       	std	Y+7, r26	; 0x07
 d08:	b8 87       	std	Y+8, r27	; 0x08
 d0a:	8d 81       	ldd	r24, Y+5	; 0x05
 d0c:	9e 81       	ldd	r25, Y+6	; 0x06
 d0e:	af 81       	ldd	r26, Y+7	; 0x07
 d10:	b8 85       	ldd	r27, Y+8	; 0x08
 d12:	00 97       	sbiw	r24, 0x00	; 0
 d14:	a1 05       	cpc	r26, r1
 d16:	b1 05       	cpc	r27, r1
 d18:	81 f6       	brne	.-96     	; 0xcba <__stack+0x45b>
 d1a:	37 cd       	rjmp	.-1426   	; 0x78a <main+0x26>

00000d1c <_exit>:
 d1c:	f8 94       	cli

00000d1e <__stop_program>:
 d1e:	ff cf       	rjmp	.-2      	; 0xd1e <__stop_program>
