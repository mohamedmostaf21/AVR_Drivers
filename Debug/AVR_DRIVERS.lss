
AVR_DRIVERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000065ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000194  00800060  000065ca  0000665e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008001f4  008001f4  000067f2  2**0
                  ALLOC
  3 .stab         00005388  00000000  00000000  000067f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001f97  00000000  00000000  0000bb7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000db13  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000dcb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002ce6  00000000  00000000  0000dea3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001354  00000000  00000000  00010b89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001308  00000000  00000000  00011edd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000131e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000340  00000000  00000000  000133a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000021ec  00000000  00000000  000136e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  000158d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a7 14 	jmp	0x294e	; 0x294e <__vector_1>
       8:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__vector_2>
       c:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	f5 e6       	ldi	r31, 0x65	; 101
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3f       	cpi	r26, 0xF4	; 244
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ef       	ldi	r26, 0xF4	; 244
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3f       	cpi	r26, 0xFE	; 254
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 da 31 	call	0x63b4	; 0x63b4 <main>
      8a:	0c 94 e3 32 	jmp	0x65c6	; 0x65c6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 ad 10 	call	0x215a	; 0x215a <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <__subsf3>
     1bc:	0e 94 0d 11 	call	0x221a	; 0x221a <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 0d 11 	call	0x221a	; 0x221a <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__udivdi3>:
     1e8:	ae e5       	ldi	r26, 0x5E	; 94
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 ac 32 	jmp	0x6558	; 0x6558 <__prologue_saves__>
     1f4:	a8 e0       	ldi	r26, 0x08	; 8
     1f6:	4e 01       	movw	r8, r28
     1f8:	08 94       	sec
     1fa:	81 1c       	adc	r8, r1
     1fc:	91 1c       	adc	r9, r1
     1fe:	f4 01       	movw	r30, r8
     200:	6a 2e       	mov	r6, r26
     202:	11 92       	st	Z+, r1
     204:	6a 94       	dec	r6
     206:	e9 f7       	brne	.-6      	; 0x202 <__udivdi3+0x1a>
     208:	29 83       	std	Y+1, r18	; 0x01
     20a:	3a 83       	std	Y+2, r19	; 0x02
     20c:	4b 83       	std	Y+3, r20	; 0x03
     20e:	5c 83       	std	Y+4, r21	; 0x04
     210:	6d 83       	std	Y+5, r22	; 0x05
     212:	7e 83       	std	Y+6, r23	; 0x06
     214:	8f 83       	std	Y+7, r24	; 0x07
     216:	98 87       	std	Y+8, r25	; 0x08
     218:	ce 01       	movw	r24, r28
     21a:	09 96       	adiw	r24, 0x09	; 9
     21c:	fc 01       	movw	r30, r24
     21e:	11 92       	st	Z+, r1
     220:	aa 95       	dec	r26
     222:	e9 f7       	brne	.-6      	; 0x21e <__udivdi3+0x36>
     224:	a9 86       	std	Y+9, r10	; 0x09
     226:	ba 86       	std	Y+10, r11	; 0x0a
     228:	cb 86       	std	Y+11, r12	; 0x0b
     22a:	dc 86       	std	Y+12, r13	; 0x0c
     22c:	ed 86       	std	Y+13, r14	; 0x0d
     22e:	fe 86       	std	Y+14, r15	; 0x0e
     230:	0f 87       	std	Y+15, r16	; 0x0f
     232:	18 8b       	std	Y+16, r17	; 0x10
     234:	29 84       	ldd	r2, Y+9	; 0x09
     236:	3a 84       	ldd	r3, Y+10	; 0x0a
     238:	4b 84       	ldd	r4, Y+11	; 0x0b
     23a:	5c 84       	ldd	r5, Y+12	; 0x0c
     23c:	ed 84       	ldd	r14, Y+13	; 0x0d
     23e:	fe 84       	ldd	r15, Y+14	; 0x0e
     240:	0f 85       	ldd	r16, Y+15	; 0x0f
     242:	18 89       	ldd	r17, Y+16	; 0x10
     244:	69 80       	ldd	r6, Y+1	; 0x01
     246:	7a 80       	ldd	r7, Y+2	; 0x02
     248:	8b 80       	ldd	r8, Y+3	; 0x03
     24a:	9c 80       	ldd	r9, Y+4	; 0x04
     24c:	6d a6       	std	Y+45, r6	; 0x2d
     24e:	7e a6       	std	Y+46, r7	; 0x2e
     250:	8f a6       	std	Y+47, r8	; 0x2f
     252:	98 aa       	std	Y+48, r9	; 0x30
     254:	6d 80       	ldd	r6, Y+5	; 0x05
     256:	7e 80       	ldd	r7, Y+6	; 0x06
     258:	8f 80       	ldd	r8, Y+7	; 0x07
     25a:	98 84       	ldd	r9, Y+8	; 0x08
     25c:	e1 14       	cp	r14, r1
     25e:	f1 04       	cpc	r15, r1
     260:	01 05       	cpc	r16, r1
     262:	11 05       	cpc	r17, r1
     264:	09 f0       	breq	.+2      	; 0x268 <__udivdi3+0x80>
     266:	b3 c3       	rjmp	.+1894   	; 0x9ce <__stack+0x16f>
     268:	62 14       	cp	r6, r2
     26a:	73 04       	cpc	r7, r3
     26c:	84 04       	cpc	r8, r4
     26e:	95 04       	cpc	r9, r5
     270:	08 f0       	brcs	.+2      	; 0x274 <__udivdi3+0x8c>
     272:	3d c1       	rjmp	.+634    	; 0x4ee <__udivdi3+0x306>
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	20 16       	cp	r2, r16
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	30 06       	cpc	r3, r16
     27c:	01 e0       	ldi	r16, 0x01	; 1
     27e:	40 06       	cpc	r4, r16
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	50 06       	cpc	r5, r16
     284:	88 f4       	brcc	.+34     	; 0x2a8 <__udivdi3+0xc0>
     286:	1f ef       	ldi	r17, 0xFF	; 255
     288:	21 16       	cp	r2, r17
     28a:	31 04       	cpc	r3, r1
     28c:	41 04       	cpc	r4, r1
     28e:	51 04       	cpc	r5, r1
     290:	39 f0       	breq	.+14     	; 0x2a0 <__udivdi3+0xb8>
     292:	30 f0       	brcs	.+12     	; 0x2a0 <__udivdi3+0xb8>
     294:	48 e0       	ldi	r20, 0x08	; 8
     296:	e4 2e       	mov	r14, r20
     298:	f1 2c       	mov	r15, r1
     29a:	01 2d       	mov	r16, r1
     29c:	11 2d       	mov	r17, r1
     29e:	18 c0       	rjmp	.+48     	; 0x2d0 <__udivdi3+0xe8>
     2a0:	ee 24       	eor	r14, r14
     2a2:	ff 24       	eor	r15, r15
     2a4:	87 01       	movw	r16, r14
     2a6:	14 c0       	rjmp	.+40     	; 0x2d0 <__udivdi3+0xe8>
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	22 16       	cp	r2, r18
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	32 06       	cpc	r3, r18
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	42 06       	cpc	r4, r18
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	52 06       	cpc	r5, r18
     2b8:	30 f0       	brcs	.+12     	; 0x2c6 <__udivdi3+0xde>
     2ba:	38 e1       	ldi	r19, 0x18	; 24
     2bc:	e3 2e       	mov	r14, r19
     2be:	f1 2c       	mov	r15, r1
     2c0:	01 2d       	mov	r16, r1
     2c2:	11 2d       	mov	r17, r1
     2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <__udivdi3+0xe8>
     2c6:	20 e1       	ldi	r18, 0x10	; 16
     2c8:	e2 2e       	mov	r14, r18
     2ca:	f1 2c       	mov	r15, r1
     2cc:	01 2d       	mov	r16, r1
     2ce:	11 2d       	mov	r17, r1
     2d0:	d2 01       	movw	r26, r4
     2d2:	c1 01       	movw	r24, r2
     2d4:	0e 2c       	mov	r0, r14
     2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <__udivdi3+0xf8>
     2d8:	b6 95       	lsr	r27
     2da:	a7 95       	ror	r26
     2dc:	97 95       	ror	r25
     2de:	87 95       	ror	r24
     2e0:	0a 94       	dec	r0
     2e2:	d2 f7       	brpl	.-12     	; 0x2d8 <__udivdi3+0xf0>
     2e4:	88 59       	subi	r24, 0x98	; 152
     2e6:	9f 4f       	sbci	r25, 0xFF	; 255
     2e8:	dc 01       	movw	r26, r24
     2ea:	2c 91       	ld	r18, X
     2ec:	80 e2       	ldi	r24, 0x20	; 32
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	a0 e0       	ldi	r26, 0x00	; 0
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	8e 19       	sub	r24, r14
     2f6:	9f 09       	sbc	r25, r15
     2f8:	a0 0b       	sbc	r26, r16
     2fa:	b1 0b       	sbc	r27, r17
     2fc:	7c 01       	movw	r14, r24
     2fe:	8d 01       	movw	r16, r26
     300:	e2 1a       	sub	r14, r18
     302:	f1 08       	sbc	r15, r1
     304:	01 09       	sbc	r16, r1
     306:	11 09       	sbc	r17, r1
     308:	e1 14       	cp	r14, r1
     30a:	f1 04       	cpc	r15, r1
     30c:	01 05       	cpc	r16, r1
     30e:	11 05       	cpc	r17, r1
     310:	a1 f1       	breq	.+104    	; 0x37a <__udivdi3+0x192>
     312:	0e 2c       	mov	r0, r14
     314:	04 c0       	rjmp	.+8      	; 0x31e <__udivdi3+0x136>
     316:	22 0c       	add	r2, r2
     318:	33 1c       	adc	r3, r3
     31a:	44 1c       	adc	r4, r4
     31c:	55 1c       	adc	r5, r5
     31e:	0a 94       	dec	r0
     320:	d2 f7       	brpl	.-12     	; 0x316 <__udivdi3+0x12e>
     322:	a4 01       	movw	r20, r8
     324:	93 01       	movw	r18, r6
     326:	0e 2c       	mov	r0, r14
     328:	04 c0       	rjmp	.+8      	; 0x332 <__udivdi3+0x14a>
     32a:	22 0f       	add	r18, r18
     32c:	33 1f       	adc	r19, r19
     32e:	44 1f       	adc	r20, r20
     330:	55 1f       	adc	r21, r21
     332:	0a 94       	dec	r0
     334:	d2 f7       	brpl	.-12     	; 0x32a <__udivdi3+0x142>
     336:	80 e2       	ldi	r24, 0x20	; 32
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	8e 19       	sub	r24, r14
     33c:	9f 09       	sbc	r25, r15
     33e:	6d a4       	ldd	r6, Y+45	; 0x2d
     340:	7e a4       	ldd	r7, Y+46	; 0x2e
     342:	8f a4       	ldd	r8, Y+47	; 0x2f
     344:	98 a8       	ldd	r9, Y+48	; 0x30
     346:	04 c0       	rjmp	.+8      	; 0x350 <__udivdi3+0x168>
     348:	96 94       	lsr	r9
     34a:	87 94       	ror	r8
     34c:	77 94       	ror	r7
     34e:	67 94       	ror	r6
     350:	8a 95       	dec	r24
     352:	d2 f7       	brpl	.-12     	; 0x348 <__udivdi3+0x160>
     354:	62 2a       	or	r6, r18
     356:	73 2a       	or	r7, r19
     358:	84 2a       	or	r8, r20
     35a:	95 2a       	or	r9, r21
     35c:	ad a4       	ldd	r10, Y+45	; 0x2d
     35e:	be a4       	ldd	r11, Y+46	; 0x2e
     360:	cf a4       	ldd	r12, Y+47	; 0x2f
     362:	d8 a8       	ldd	r13, Y+48	; 0x30
     364:	04 c0       	rjmp	.+8      	; 0x36e <__udivdi3+0x186>
     366:	aa 0c       	add	r10, r10
     368:	bb 1c       	adc	r11, r11
     36a:	cc 1c       	adc	r12, r12
     36c:	dd 1c       	adc	r13, r13
     36e:	ea 94       	dec	r14
     370:	d2 f7       	brpl	.-12     	; 0x366 <__udivdi3+0x17e>
     372:	ad a6       	std	Y+45, r10	; 0x2d
     374:	be a6       	std	Y+46, r11	; 0x2e
     376:	cf a6       	std	Y+47, r12	; 0x2f
     378:	d8 aa       	std	Y+48, r13	; 0x30
     37a:	62 01       	movw	r12, r4
     37c:	ee 24       	eor	r14, r14
     37e:	ff 24       	eor	r15, r15
     380:	cd aa       	std	Y+53, r12	; 0x35
     382:	de aa       	std	Y+54, r13	; 0x36
     384:	ef aa       	std	Y+55, r14	; 0x37
     386:	f8 ae       	std	Y+56, r15	; 0x38
     388:	92 01       	movw	r18, r4
     38a:	81 01       	movw	r16, r2
     38c:	20 70       	andi	r18, 0x00	; 0
     38e:	30 70       	andi	r19, 0x00	; 0
     390:	09 af       	std	Y+57, r16	; 0x39
     392:	1a af       	std	Y+58, r17	; 0x3a
     394:	2b af       	std	Y+59, r18	; 0x3b
     396:	3c af       	std	Y+60, r19	; 0x3c
     398:	c4 01       	movw	r24, r8
     39a:	b3 01       	movw	r22, r6
     39c:	a7 01       	movw	r20, r14
     39e:	96 01       	movw	r18, r12
     3a0:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
     3a4:	7b 01       	movw	r14, r22
     3a6:	8c 01       	movw	r16, r24
     3a8:	c4 01       	movw	r24, r8
     3aa:	b3 01       	movw	r22, r6
     3ac:	2d a9       	ldd	r18, Y+53	; 0x35
     3ae:	3e a9       	ldd	r19, Y+54	; 0x36
     3b0:	4f a9       	ldd	r20, Y+55	; 0x37
     3b2:	58 ad       	ldd	r21, Y+56	; 0x38
     3b4:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
     3b8:	c9 01       	movw	r24, r18
     3ba:	da 01       	movw	r26, r20
     3bc:	3c 01       	movw	r6, r24
     3be:	4d 01       	movw	r8, r26
     3c0:	c4 01       	movw	r24, r8
     3c2:	b3 01       	movw	r22, r6
     3c4:	29 ad       	ldd	r18, Y+57	; 0x39
     3c6:	3a ad       	ldd	r19, Y+58	; 0x3a
     3c8:	4b ad       	ldd	r20, Y+59	; 0x3b
     3ca:	5c ad       	ldd	r21, Y+60	; 0x3c
     3cc:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__mulsi3>
     3d0:	9b 01       	movw	r18, r22
     3d2:	ac 01       	movw	r20, r24
     3d4:	87 01       	movw	r16, r14
     3d6:	ff 24       	eor	r15, r15
     3d8:	ee 24       	eor	r14, r14
     3da:	ad a4       	ldd	r10, Y+45	; 0x2d
     3dc:	be a4       	ldd	r11, Y+46	; 0x2e
     3de:	cf a4       	ldd	r12, Y+47	; 0x2f
     3e0:	d8 a8       	ldd	r13, Y+48	; 0x30
     3e2:	c6 01       	movw	r24, r12
     3e4:	aa 27       	eor	r26, r26
     3e6:	bb 27       	eor	r27, r27
     3e8:	57 01       	movw	r10, r14
     3ea:	68 01       	movw	r12, r16
     3ec:	a8 2a       	or	r10, r24
     3ee:	b9 2a       	or	r11, r25
     3f0:	ca 2a       	or	r12, r26
     3f2:	db 2a       	or	r13, r27
     3f4:	a2 16       	cp	r10, r18
     3f6:	b3 06       	cpc	r11, r19
     3f8:	c4 06       	cpc	r12, r20
     3fa:	d5 06       	cpc	r13, r21
     3fc:	e0 f4       	brcc	.+56     	; 0x436 <__udivdi3+0x24e>
     3fe:	08 94       	sec
     400:	61 08       	sbc	r6, r1
     402:	71 08       	sbc	r7, r1
     404:	81 08       	sbc	r8, r1
     406:	91 08       	sbc	r9, r1
     408:	a2 0c       	add	r10, r2
     40a:	b3 1c       	adc	r11, r3
     40c:	c4 1c       	adc	r12, r4
     40e:	d5 1c       	adc	r13, r5
     410:	a2 14       	cp	r10, r2
     412:	b3 04       	cpc	r11, r3
     414:	c4 04       	cpc	r12, r4
     416:	d5 04       	cpc	r13, r5
     418:	70 f0       	brcs	.+28     	; 0x436 <__udivdi3+0x24e>
     41a:	a2 16       	cp	r10, r18
     41c:	b3 06       	cpc	r11, r19
     41e:	c4 06       	cpc	r12, r20
     420:	d5 06       	cpc	r13, r21
     422:	48 f4       	brcc	.+18     	; 0x436 <__udivdi3+0x24e>
     424:	08 94       	sec
     426:	61 08       	sbc	r6, r1
     428:	71 08       	sbc	r7, r1
     42a:	81 08       	sbc	r8, r1
     42c:	91 08       	sbc	r9, r1
     42e:	a2 0c       	add	r10, r2
     430:	b3 1c       	adc	r11, r3
     432:	c4 1c       	adc	r12, r4
     434:	d5 1c       	adc	r13, r5
     436:	a2 1a       	sub	r10, r18
     438:	b3 0a       	sbc	r11, r19
     43a:	c4 0a       	sbc	r12, r20
     43c:	d5 0a       	sbc	r13, r21
     43e:	c6 01       	movw	r24, r12
     440:	b5 01       	movw	r22, r10
     442:	2d a9       	ldd	r18, Y+53	; 0x35
     444:	3e a9       	ldd	r19, Y+54	; 0x36
     446:	4f a9       	ldd	r20, Y+55	; 0x37
     448:	58 ad       	ldd	r21, Y+56	; 0x38
     44a:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
     44e:	7b 01       	movw	r14, r22
     450:	8c 01       	movw	r16, r24
     452:	c6 01       	movw	r24, r12
     454:	b5 01       	movw	r22, r10
     456:	2d a9       	ldd	r18, Y+53	; 0x35
     458:	3e a9       	ldd	r19, Y+54	; 0x36
     45a:	4f a9       	ldd	r20, Y+55	; 0x37
     45c:	58 ad       	ldd	r21, Y+56	; 0x38
     45e:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
     462:	c9 01       	movw	r24, r18
     464:	da 01       	movw	r26, r20
     466:	5c 01       	movw	r10, r24
     468:	6d 01       	movw	r12, r26
     46a:	c6 01       	movw	r24, r12
     46c:	b5 01       	movw	r22, r10
     46e:	29 ad       	ldd	r18, Y+57	; 0x39
     470:	3a ad       	ldd	r19, Y+58	; 0x3a
     472:	4b ad       	ldd	r20, Y+59	; 0x3b
     474:	5c ad       	ldd	r21, Y+60	; 0x3c
     476:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__mulsi3>
     47a:	9b 01       	movw	r18, r22
     47c:	ac 01       	movw	r20, r24
     47e:	87 01       	movw	r16, r14
     480:	ff 24       	eor	r15, r15
     482:	ee 24       	eor	r14, r14
     484:	8d a5       	ldd	r24, Y+45	; 0x2d
     486:	9e a5       	ldd	r25, Y+46	; 0x2e
     488:	af a5       	ldd	r26, Y+47	; 0x2f
     48a:	b8 a9       	ldd	r27, Y+48	; 0x30
     48c:	a0 70       	andi	r26, 0x00	; 0
     48e:	b0 70       	andi	r27, 0x00	; 0
     490:	e8 2a       	or	r14, r24
     492:	f9 2a       	or	r15, r25
     494:	0a 2b       	or	r16, r26
     496:	1b 2b       	or	r17, r27
     498:	e2 16       	cp	r14, r18
     49a:	f3 06       	cpc	r15, r19
     49c:	04 07       	cpc	r16, r20
     49e:	15 07       	cpc	r17, r21
     4a0:	c0 f4       	brcc	.+48     	; 0x4d2 <__udivdi3+0x2ea>
     4a2:	08 94       	sec
     4a4:	a1 08       	sbc	r10, r1
     4a6:	b1 08       	sbc	r11, r1
     4a8:	c1 08       	sbc	r12, r1
     4aa:	d1 08       	sbc	r13, r1
     4ac:	e2 0c       	add	r14, r2
     4ae:	f3 1c       	adc	r15, r3
     4b0:	04 1d       	adc	r16, r4
     4b2:	15 1d       	adc	r17, r5
     4b4:	e2 14       	cp	r14, r2
     4b6:	f3 04       	cpc	r15, r3
     4b8:	04 05       	cpc	r16, r4
     4ba:	15 05       	cpc	r17, r5
     4bc:	50 f0       	brcs	.+20     	; 0x4d2 <__udivdi3+0x2ea>
     4be:	e2 16       	cp	r14, r18
     4c0:	f3 06       	cpc	r15, r19
     4c2:	04 07       	cpc	r16, r20
     4c4:	15 07       	cpc	r17, r21
     4c6:	28 f4       	brcc	.+10     	; 0x4d2 <__udivdi3+0x2ea>
     4c8:	08 94       	sec
     4ca:	a1 08       	sbc	r10, r1
     4cc:	b1 08       	sbc	r11, r1
     4ce:	c1 08       	sbc	r12, r1
     4d0:	d1 08       	sbc	r13, r1
     4d2:	d3 01       	movw	r26, r6
     4d4:	99 27       	eor	r25, r25
     4d6:	88 27       	eor	r24, r24
     4d8:	86 01       	movw	r16, r12
     4da:	75 01       	movw	r14, r10
     4dc:	e8 2a       	or	r14, r24
     4de:	f9 2a       	or	r15, r25
     4e0:	0a 2b       	or	r16, r26
     4e2:	1b 2b       	or	r17, r27
     4e4:	e9 aa       	std	Y+49, r14	; 0x31
     4e6:	fa aa       	std	Y+50, r15	; 0x32
     4e8:	0b ab       	std	Y+51, r16	; 0x33
     4ea:	1c ab       	std	Y+52, r17	; 0x34
     4ec:	cf c4       	rjmp	.+2462   	; 0xe8c <__stack+0x62d>
     4ee:	21 14       	cp	r2, r1
     4f0:	31 04       	cpc	r3, r1
     4f2:	41 04       	cpc	r4, r1
     4f4:	51 04       	cpc	r5, r1
     4f6:	71 f4       	brne	.+28     	; 0x514 <__udivdi3+0x32c>
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
     50c:	c9 01       	movw	r24, r18
     50e:	da 01       	movw	r26, r20
     510:	1c 01       	movw	r2, r24
     512:	2d 01       	movw	r4, r26
     514:	00 e0       	ldi	r16, 0x00	; 0
     516:	20 16       	cp	r2, r16
     518:	00 e0       	ldi	r16, 0x00	; 0
     51a:	30 06       	cpc	r3, r16
     51c:	01 e0       	ldi	r16, 0x01	; 1
     51e:	40 06       	cpc	r4, r16
     520:	00 e0       	ldi	r16, 0x00	; 0
     522:	50 06       	cpc	r5, r16
     524:	88 f4       	brcc	.+34     	; 0x548 <__udivdi3+0x360>
     526:	1f ef       	ldi	r17, 0xFF	; 255
     528:	21 16       	cp	r2, r17
     52a:	31 04       	cpc	r3, r1
     52c:	41 04       	cpc	r4, r1
     52e:	51 04       	cpc	r5, r1
     530:	31 f0       	breq	.+12     	; 0x53e <__udivdi3+0x356>
     532:	28 f0       	brcs	.+10     	; 0x53e <__udivdi3+0x356>
     534:	48 e0       	ldi	r20, 0x08	; 8
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	17 c0       	rjmp	.+46     	; 0x56c <__udivdi3+0x384>
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	12 c0       	rjmp	.+36     	; 0x56c <__udivdi3+0x384>
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	22 16       	cp	r2, r18
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	32 06       	cpc	r3, r18
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	42 06       	cpc	r4, r18
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	52 06       	cpc	r5, r18
     558:	28 f0       	brcs	.+10     	; 0x564 <__udivdi3+0x37c>
     55a:	48 e1       	ldi	r20, 0x18	; 24
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	04 c0       	rjmp	.+8      	; 0x56c <__udivdi3+0x384>
     564:	40 e1       	ldi	r20, 0x10	; 16
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	d2 01       	movw	r26, r4
     56e:	c1 01       	movw	r24, r2
     570:	04 2e       	mov	r0, r20
     572:	04 c0       	rjmp	.+8      	; 0x57c <__udivdi3+0x394>
     574:	b6 95       	lsr	r27
     576:	a7 95       	ror	r26
     578:	97 95       	ror	r25
     57a:	87 95       	ror	r24
     57c:	0a 94       	dec	r0
     57e:	d2 f7       	brpl	.-12     	; 0x574 <__udivdi3+0x38c>
     580:	88 59       	subi	r24, 0x98	; 152
     582:	9f 4f       	sbci	r25, 0xFF	; 255
     584:	dc 01       	movw	r26, r24
     586:	2c 91       	ld	r18, X
     588:	e0 e2       	ldi	r30, 0x20	; 32
     58a:	ee 2e       	mov	r14, r30
     58c:	f1 2c       	mov	r15, r1
     58e:	01 2d       	mov	r16, r1
     590:	11 2d       	mov	r17, r1
     592:	d8 01       	movw	r26, r16
     594:	c7 01       	movw	r24, r14
     596:	84 1b       	sub	r24, r20
     598:	95 0b       	sbc	r25, r21
     59a:	a6 0b       	sbc	r26, r22
     59c:	b7 0b       	sbc	r27, r23
     59e:	82 1b       	sub	r24, r18
     5a0:	91 09       	sbc	r25, r1
     5a2:	a1 09       	sbc	r26, r1
     5a4:	b1 09       	sbc	r27, r1
     5a6:	00 97       	sbiw	r24, 0x00	; 0
     5a8:	a1 05       	cpc	r26, r1
     5aa:	b1 05       	cpc	r27, r1
     5ac:	61 f4       	brne	.+24     	; 0x5c6 <__udivdi3+0x3de>
     5ae:	64 01       	movw	r12, r8
     5b0:	53 01       	movw	r10, r6
     5b2:	a2 18       	sub	r10, r2
     5b4:	b3 08       	sbc	r11, r3
     5b6:	c4 08       	sbc	r12, r4
     5b8:	d5 08       	sbc	r13, r5
     5ba:	31 e0       	ldi	r19, 0x01	; 1
     5bc:	63 2e       	mov	r6, r19
     5be:	71 2c       	mov	r7, r1
     5c0:	81 2c       	mov	r8, r1
     5c2:	91 2c       	mov	r9, r1
     5c4:	1e c1       	rjmp	.+572    	; 0x802 <__udivdi3+0x61a>
     5c6:	6f 96       	adiw	r28, 0x1f	; 31
     5c8:	8f af       	std	Y+63, r24	; 0x3f
     5ca:	6f 97       	sbiw	r28, 0x1f	; 31
     5cc:	08 2e       	mov	r0, r24
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <__udivdi3+0x3f0>
     5d0:	22 0c       	add	r2, r2
     5d2:	33 1c       	adc	r3, r3
     5d4:	44 1c       	adc	r4, r4
     5d6:	55 1c       	adc	r5, r5
     5d8:	0a 94       	dec	r0
     5da:	d2 f7       	brpl	.-12     	; 0x5d0 <__udivdi3+0x3e8>
     5dc:	ee 2d       	mov	r30, r14
     5de:	e8 1b       	sub	r30, r24
     5e0:	64 01       	movw	r12, r8
     5e2:	53 01       	movw	r10, r6
     5e4:	0e 2e       	mov	r0, r30
     5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <__udivdi3+0x408>
     5e8:	d6 94       	lsr	r13
     5ea:	c7 94       	ror	r12
     5ec:	b7 94       	ror	r11
     5ee:	a7 94       	ror	r10
     5f0:	0a 94       	dec	r0
     5f2:	d2 f7       	brpl	.-12     	; 0x5e8 <__udivdi3+0x400>
     5f4:	a4 01       	movw	r20, r8
     5f6:	93 01       	movw	r18, r6
     5f8:	6f 96       	adiw	r28, 0x1f	; 31
     5fa:	0f ac       	ldd	r0, Y+63	; 0x3f
     5fc:	6f 97       	sbiw	r28, 0x1f	; 31
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <__udivdi3+0x420>
     600:	22 0f       	add	r18, r18
     602:	33 1f       	adc	r19, r19
     604:	44 1f       	adc	r20, r20
     606:	55 1f       	adc	r21, r21
     608:	0a 94       	dec	r0
     60a:	d2 f7       	brpl	.-12     	; 0x600 <__udivdi3+0x418>
     60c:	6d a4       	ldd	r6, Y+45	; 0x2d
     60e:	7e a4       	ldd	r7, Y+46	; 0x2e
     610:	8f a4       	ldd	r8, Y+47	; 0x2f
     612:	98 a8       	ldd	r9, Y+48	; 0x30
     614:	0e 2e       	mov	r0, r30
     616:	04 c0       	rjmp	.+8      	; 0x620 <__udivdi3+0x438>
     618:	96 94       	lsr	r9
     61a:	87 94       	ror	r8
     61c:	77 94       	ror	r7
     61e:	67 94       	ror	r6
     620:	0a 94       	dec	r0
     622:	d2 f7       	brpl	.-12     	; 0x618 <__udivdi3+0x430>
     624:	84 01       	movw	r16, r8
     626:	73 01       	movw	r14, r6
     628:	e2 2a       	or	r14, r18
     62a:	f3 2a       	or	r15, r19
     62c:	04 2b       	or	r16, r20
     62e:	15 2b       	or	r17, r21
     630:	e9 a6       	std	Y+41, r14	; 0x29
     632:	fa a6       	std	Y+42, r15	; 0x2a
     634:	0b a7       	std	Y+43, r16	; 0x2b
     636:	1c a7       	std	Y+44, r17	; 0x2c
     638:	32 01       	movw	r6, r4
     63a:	88 24       	eor	r8, r8
     63c:	99 24       	eor	r9, r9
     63e:	92 01       	movw	r18, r4
     640:	81 01       	movw	r16, r2
     642:	20 70       	andi	r18, 0x00	; 0
     644:	30 70       	andi	r19, 0x00	; 0
     646:	21 96       	adiw	r28, 0x01	; 1
     648:	0c af       	std	Y+60, r16	; 0x3c
     64a:	1d af       	std	Y+61, r17	; 0x3d
     64c:	2e af       	std	Y+62, r18	; 0x3e
     64e:	3f af       	std	Y+63, r19	; 0x3f
     650:	21 97       	sbiw	r28, 0x01	; 1
     652:	c6 01       	movw	r24, r12
     654:	b5 01       	movw	r22, r10
     656:	a4 01       	movw	r20, r8
     658:	93 01       	movw	r18, r6
     65a:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
     65e:	7b 01       	movw	r14, r22
     660:	8c 01       	movw	r16, r24
     662:	c6 01       	movw	r24, r12
     664:	b5 01       	movw	r22, r10
     666:	a4 01       	movw	r20, r8
     668:	93 01       	movw	r18, r6
     66a:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
     66e:	c9 01       	movw	r24, r18
     670:	da 01       	movw	r26, r20
     672:	25 96       	adiw	r28, 0x05	; 5
     674:	8c af       	std	Y+60, r24	; 0x3c
     676:	9d af       	std	Y+61, r25	; 0x3d
     678:	ae af       	std	Y+62, r26	; 0x3e
     67a:	bf af       	std	Y+63, r27	; 0x3f
     67c:	25 97       	sbiw	r28, 0x05	; 5
     67e:	bc 01       	movw	r22, r24
     680:	cd 01       	movw	r24, r26
     682:	21 96       	adiw	r28, 0x01	; 1
     684:	2c ad       	ldd	r18, Y+60	; 0x3c
     686:	3d ad       	ldd	r19, Y+61	; 0x3d
     688:	4e ad       	ldd	r20, Y+62	; 0x3e
     68a:	5f ad       	ldd	r21, Y+63	; 0x3f
     68c:	21 97       	sbiw	r28, 0x01	; 1
     68e:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__mulsi3>
     692:	9b 01       	movw	r18, r22
     694:	ac 01       	movw	r20, r24
     696:	87 01       	movw	r16, r14
     698:	ff 24       	eor	r15, r15
     69a:	ee 24       	eor	r14, r14
     69c:	a9 a4       	ldd	r10, Y+41	; 0x29
     69e:	ba a4       	ldd	r11, Y+42	; 0x2a
     6a0:	cb a4       	ldd	r12, Y+43	; 0x2b
     6a2:	dc a4       	ldd	r13, Y+44	; 0x2c
     6a4:	c6 01       	movw	r24, r12
     6a6:	aa 27       	eor	r26, r26
     6a8:	bb 27       	eor	r27, r27
     6aa:	5c 01       	movw	r10, r24
     6ac:	6d 01       	movw	r12, r26
     6ae:	ae 28       	or	r10, r14
     6b0:	bf 28       	or	r11, r15
     6b2:	c0 2a       	or	r12, r16
     6b4:	d1 2a       	or	r13, r17
     6b6:	a2 16       	cp	r10, r18
     6b8:	b3 06       	cpc	r11, r19
     6ba:	c4 06       	cpc	r12, r20
     6bc:	d5 06       	cpc	r13, r21
     6be:	60 f5       	brcc	.+88     	; 0x718 <__udivdi3+0x530>
     6c0:	25 96       	adiw	r28, 0x05	; 5
     6c2:	6c ad       	ldd	r22, Y+60	; 0x3c
     6c4:	7d ad       	ldd	r23, Y+61	; 0x3d
     6c6:	8e ad       	ldd	r24, Y+62	; 0x3e
     6c8:	9f ad       	ldd	r25, Y+63	; 0x3f
     6ca:	25 97       	sbiw	r28, 0x05	; 5
     6cc:	61 50       	subi	r22, 0x01	; 1
     6ce:	70 40       	sbci	r23, 0x00	; 0
     6d0:	80 40       	sbci	r24, 0x00	; 0
     6d2:	90 40       	sbci	r25, 0x00	; 0
     6d4:	25 96       	adiw	r28, 0x05	; 5
     6d6:	6c af       	std	Y+60, r22	; 0x3c
     6d8:	7d af       	std	Y+61, r23	; 0x3d
     6da:	8e af       	std	Y+62, r24	; 0x3e
     6dc:	9f af       	std	Y+63, r25	; 0x3f
     6de:	25 97       	sbiw	r28, 0x05	; 5
     6e0:	a2 0c       	add	r10, r2
     6e2:	b3 1c       	adc	r11, r3
     6e4:	c4 1c       	adc	r12, r4
     6e6:	d5 1c       	adc	r13, r5
     6e8:	a2 14       	cp	r10, r2
     6ea:	b3 04       	cpc	r11, r3
     6ec:	c4 04       	cpc	r12, r4
     6ee:	d5 04       	cpc	r13, r5
     6f0:	98 f0       	brcs	.+38     	; 0x718 <__udivdi3+0x530>
     6f2:	a2 16       	cp	r10, r18
     6f4:	b3 06       	cpc	r11, r19
     6f6:	c4 06       	cpc	r12, r20
     6f8:	d5 06       	cpc	r13, r21
     6fa:	70 f4       	brcc	.+28     	; 0x718 <__udivdi3+0x530>
     6fc:	61 50       	subi	r22, 0x01	; 1
     6fe:	70 40       	sbci	r23, 0x00	; 0
     700:	80 40       	sbci	r24, 0x00	; 0
     702:	90 40       	sbci	r25, 0x00	; 0
     704:	25 96       	adiw	r28, 0x05	; 5
     706:	6c af       	std	Y+60, r22	; 0x3c
     708:	7d af       	std	Y+61, r23	; 0x3d
     70a:	8e af       	std	Y+62, r24	; 0x3e
     70c:	9f af       	std	Y+63, r25	; 0x3f
     70e:	25 97       	sbiw	r28, 0x05	; 5
     710:	a2 0c       	add	r10, r2
     712:	b3 1c       	adc	r11, r3
     714:	c4 1c       	adc	r12, r4
     716:	d5 1c       	adc	r13, r5
     718:	a2 1a       	sub	r10, r18
     71a:	b3 0a       	sbc	r11, r19
     71c:	c4 0a       	sbc	r12, r20
     71e:	d5 0a       	sbc	r13, r21
     720:	c6 01       	movw	r24, r12
     722:	b5 01       	movw	r22, r10
     724:	a4 01       	movw	r20, r8
     726:	93 01       	movw	r18, r6
     728:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
     72c:	7b 01       	movw	r14, r22
     72e:	8c 01       	movw	r16, r24
     730:	c6 01       	movw	r24, r12
     732:	b5 01       	movw	r22, r10
     734:	a4 01       	movw	r20, r8
     736:	93 01       	movw	r18, r6
     738:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
     73c:	c9 01       	movw	r24, r18
     73e:	da 01       	movw	r26, r20
     740:	3c 01       	movw	r6, r24
     742:	4d 01       	movw	r8, r26
     744:	c4 01       	movw	r24, r8
     746:	b3 01       	movw	r22, r6
     748:	21 96       	adiw	r28, 0x01	; 1
     74a:	2c ad       	ldd	r18, Y+60	; 0x3c
     74c:	3d ad       	ldd	r19, Y+61	; 0x3d
     74e:	4e ad       	ldd	r20, Y+62	; 0x3e
     750:	5f ad       	ldd	r21, Y+63	; 0x3f
     752:	21 97       	sbiw	r28, 0x01	; 1
     754:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__mulsi3>
     758:	9b 01       	movw	r18, r22
     75a:	ac 01       	movw	r20, r24
     75c:	87 01       	movw	r16, r14
     75e:	ff 24       	eor	r15, r15
     760:	ee 24       	eor	r14, r14
     762:	89 a5       	ldd	r24, Y+41	; 0x29
     764:	9a a5       	ldd	r25, Y+42	; 0x2a
     766:	ab a5       	ldd	r26, Y+43	; 0x2b
     768:	bc a5       	ldd	r27, Y+44	; 0x2c
     76a:	a0 70       	andi	r26, 0x00	; 0
     76c:	b0 70       	andi	r27, 0x00	; 0
     76e:	57 01       	movw	r10, r14
     770:	68 01       	movw	r12, r16
     772:	a8 2a       	or	r10, r24
     774:	b9 2a       	or	r11, r25
     776:	ca 2a       	or	r12, r26
     778:	db 2a       	or	r13, r27
     77a:	a2 16       	cp	r10, r18
     77c:	b3 06       	cpc	r11, r19
     77e:	c4 06       	cpc	r12, r20
     780:	d5 06       	cpc	r13, r21
     782:	e0 f4       	brcc	.+56     	; 0x7bc <__udivdi3+0x5d4>
     784:	08 94       	sec
     786:	61 08       	sbc	r6, r1
     788:	71 08       	sbc	r7, r1
     78a:	81 08       	sbc	r8, r1
     78c:	91 08       	sbc	r9, r1
     78e:	a2 0c       	add	r10, r2
     790:	b3 1c       	adc	r11, r3
     792:	c4 1c       	adc	r12, r4
     794:	d5 1c       	adc	r13, r5
     796:	a2 14       	cp	r10, r2
     798:	b3 04       	cpc	r11, r3
     79a:	c4 04       	cpc	r12, r4
     79c:	d5 04       	cpc	r13, r5
     79e:	70 f0       	brcs	.+28     	; 0x7bc <__udivdi3+0x5d4>
     7a0:	a2 16       	cp	r10, r18
     7a2:	b3 06       	cpc	r11, r19
     7a4:	c4 06       	cpc	r12, r20
     7a6:	d5 06       	cpc	r13, r21
     7a8:	48 f4       	brcc	.+18     	; 0x7bc <__udivdi3+0x5d4>
     7aa:	08 94       	sec
     7ac:	61 08       	sbc	r6, r1
     7ae:	71 08       	sbc	r7, r1
     7b0:	81 08       	sbc	r8, r1
     7b2:	91 08       	sbc	r9, r1
     7b4:	a2 0c       	add	r10, r2
     7b6:	b3 1c       	adc	r11, r3
     7b8:	c4 1c       	adc	r12, r4
     7ba:	d5 1c       	adc	r13, r5
     7bc:	8d a5       	ldd	r24, Y+45	; 0x2d
     7be:	9e a5       	ldd	r25, Y+46	; 0x2e
     7c0:	af a5       	ldd	r26, Y+47	; 0x2f
     7c2:	b8 a9       	ldd	r27, Y+48	; 0x30
     7c4:	6f 96       	adiw	r28, 0x1f	; 31
     7c6:	0f ac       	ldd	r0, Y+63	; 0x3f
     7c8:	6f 97       	sbiw	r28, 0x1f	; 31
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <__udivdi3+0x5ec>
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	aa 1f       	adc	r26, r26
     7d2:	bb 1f       	adc	r27, r27
     7d4:	0a 94       	dec	r0
     7d6:	d2 f7       	brpl	.-12     	; 0x7cc <__udivdi3+0x5e4>
     7d8:	8d a7       	std	Y+45, r24	; 0x2d
     7da:	9e a7       	std	Y+46, r25	; 0x2e
     7dc:	af a7       	std	Y+47, r26	; 0x2f
     7de:	b8 ab       	std	Y+48, r27	; 0x30
     7e0:	a2 1a       	sub	r10, r18
     7e2:	b3 0a       	sbc	r11, r19
     7e4:	c4 0a       	sbc	r12, r20
     7e6:	d5 0a       	sbc	r13, r21
     7e8:	25 96       	adiw	r28, 0x05	; 5
     7ea:	ec ac       	ldd	r14, Y+60	; 0x3c
     7ec:	fd ac       	ldd	r15, Y+61	; 0x3d
     7ee:	0e ad       	ldd	r16, Y+62	; 0x3e
     7f0:	1f ad       	ldd	r17, Y+63	; 0x3f
     7f2:	25 97       	sbiw	r28, 0x05	; 5
     7f4:	d7 01       	movw	r26, r14
     7f6:	99 27       	eor	r25, r25
     7f8:	88 27       	eor	r24, r24
     7fa:	68 2a       	or	r6, r24
     7fc:	79 2a       	or	r7, r25
     7fe:	8a 2a       	or	r8, r26
     800:	9b 2a       	or	r9, r27
     802:	82 01       	movw	r16, r4
     804:	22 27       	eor	r18, r18
     806:	33 27       	eor	r19, r19
     808:	29 96       	adiw	r28, 0x09	; 9
     80a:	0c af       	std	Y+60, r16	; 0x3c
     80c:	1d af       	std	Y+61, r17	; 0x3d
     80e:	2e af       	std	Y+62, r18	; 0x3e
     810:	3f af       	std	Y+63, r19	; 0x3f
     812:	29 97       	sbiw	r28, 0x09	; 9
     814:	a2 01       	movw	r20, r4
     816:	91 01       	movw	r18, r2
     818:	40 70       	andi	r20, 0x00	; 0
     81a:	50 70       	andi	r21, 0x00	; 0
     81c:	2d 96       	adiw	r28, 0x0d	; 13
     81e:	2c af       	std	Y+60, r18	; 0x3c
     820:	3d af       	std	Y+61, r19	; 0x3d
     822:	4e af       	std	Y+62, r20	; 0x3e
     824:	5f af       	std	Y+63, r21	; 0x3f
     826:	2d 97       	sbiw	r28, 0x0d	; 13
     828:	c6 01       	movw	r24, r12
     82a:	b5 01       	movw	r22, r10
     82c:	29 96       	adiw	r28, 0x09	; 9
     82e:	2c ad       	ldd	r18, Y+60	; 0x3c
     830:	3d ad       	ldd	r19, Y+61	; 0x3d
     832:	4e ad       	ldd	r20, Y+62	; 0x3e
     834:	5f ad       	ldd	r21, Y+63	; 0x3f
     836:	29 97       	sbiw	r28, 0x09	; 9
     838:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
     83c:	7b 01       	movw	r14, r22
     83e:	8c 01       	movw	r16, r24
     840:	c6 01       	movw	r24, r12
     842:	b5 01       	movw	r22, r10
     844:	29 96       	adiw	r28, 0x09	; 9
     846:	2c ad       	ldd	r18, Y+60	; 0x3c
     848:	3d ad       	ldd	r19, Y+61	; 0x3d
     84a:	4e ad       	ldd	r20, Y+62	; 0x3e
     84c:	5f ad       	ldd	r21, Y+63	; 0x3f
     84e:	29 97       	sbiw	r28, 0x09	; 9
     850:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
     854:	c9 01       	movw	r24, r18
     856:	da 01       	movw	r26, r20
     858:	61 96       	adiw	r28, 0x11	; 17
     85a:	8c af       	std	Y+60, r24	; 0x3c
     85c:	9d af       	std	Y+61, r25	; 0x3d
     85e:	ae af       	std	Y+62, r26	; 0x3e
     860:	bf af       	std	Y+63, r27	; 0x3f
     862:	61 97       	sbiw	r28, 0x11	; 17
     864:	bc 01       	movw	r22, r24
     866:	cd 01       	movw	r24, r26
     868:	2d 96       	adiw	r28, 0x0d	; 13
     86a:	2c ad       	ldd	r18, Y+60	; 0x3c
     86c:	3d ad       	ldd	r19, Y+61	; 0x3d
     86e:	4e ad       	ldd	r20, Y+62	; 0x3e
     870:	5f ad       	ldd	r21, Y+63	; 0x3f
     872:	2d 97       	sbiw	r28, 0x0d	; 13
     874:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__mulsi3>
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	87 01       	movw	r16, r14
     87e:	ff 24       	eor	r15, r15
     880:	ee 24       	eor	r14, r14
     882:	ad a4       	ldd	r10, Y+45	; 0x2d
     884:	be a4       	ldd	r11, Y+46	; 0x2e
     886:	cf a4       	ldd	r12, Y+47	; 0x2f
     888:	d8 a8       	ldd	r13, Y+48	; 0x30
     88a:	c6 01       	movw	r24, r12
     88c:	aa 27       	eor	r26, r26
     88e:	bb 27       	eor	r27, r27
     890:	57 01       	movw	r10, r14
     892:	68 01       	movw	r12, r16
     894:	a8 2a       	or	r10, r24
     896:	b9 2a       	or	r11, r25
     898:	ca 2a       	or	r12, r26
     89a:	db 2a       	or	r13, r27
     89c:	a2 16       	cp	r10, r18
     89e:	b3 06       	cpc	r11, r19
     8a0:	c4 06       	cpc	r12, r20
     8a2:	d5 06       	cpc	r13, r21
     8a4:	60 f5       	brcc	.+88     	; 0x8fe <__stack+0x9f>
     8a6:	61 96       	adiw	r28, 0x11	; 17
     8a8:	6c ad       	ldd	r22, Y+60	; 0x3c
     8aa:	7d ad       	ldd	r23, Y+61	; 0x3d
     8ac:	8e ad       	ldd	r24, Y+62	; 0x3e
     8ae:	9f ad       	ldd	r25, Y+63	; 0x3f
     8b0:	61 97       	sbiw	r28, 0x11	; 17
     8b2:	61 50       	subi	r22, 0x01	; 1
     8b4:	70 40       	sbci	r23, 0x00	; 0
     8b6:	80 40       	sbci	r24, 0x00	; 0
     8b8:	90 40       	sbci	r25, 0x00	; 0
     8ba:	61 96       	adiw	r28, 0x11	; 17
     8bc:	6c af       	std	Y+60, r22	; 0x3c
     8be:	7d af       	std	Y+61, r23	; 0x3d
     8c0:	8e af       	std	Y+62, r24	; 0x3e
     8c2:	9f af       	std	Y+63, r25	; 0x3f
     8c4:	61 97       	sbiw	r28, 0x11	; 17
     8c6:	a2 0c       	add	r10, r2
     8c8:	b3 1c       	adc	r11, r3
     8ca:	c4 1c       	adc	r12, r4
     8cc:	d5 1c       	adc	r13, r5
     8ce:	a2 14       	cp	r10, r2
     8d0:	b3 04       	cpc	r11, r3
     8d2:	c4 04       	cpc	r12, r4
     8d4:	d5 04       	cpc	r13, r5
     8d6:	98 f0       	brcs	.+38     	; 0x8fe <__stack+0x9f>
     8d8:	a2 16       	cp	r10, r18
     8da:	b3 06       	cpc	r11, r19
     8dc:	c4 06       	cpc	r12, r20
     8de:	d5 06       	cpc	r13, r21
     8e0:	70 f4       	brcc	.+28     	; 0x8fe <__stack+0x9f>
     8e2:	61 50       	subi	r22, 0x01	; 1
     8e4:	70 40       	sbci	r23, 0x00	; 0
     8e6:	80 40       	sbci	r24, 0x00	; 0
     8e8:	90 40       	sbci	r25, 0x00	; 0
     8ea:	61 96       	adiw	r28, 0x11	; 17
     8ec:	6c af       	std	Y+60, r22	; 0x3c
     8ee:	7d af       	std	Y+61, r23	; 0x3d
     8f0:	8e af       	std	Y+62, r24	; 0x3e
     8f2:	9f af       	std	Y+63, r25	; 0x3f
     8f4:	61 97       	sbiw	r28, 0x11	; 17
     8f6:	a2 0c       	add	r10, r2
     8f8:	b3 1c       	adc	r11, r3
     8fa:	c4 1c       	adc	r12, r4
     8fc:	d5 1c       	adc	r13, r5
     8fe:	a2 1a       	sub	r10, r18
     900:	b3 0a       	sbc	r11, r19
     902:	c4 0a       	sbc	r12, r20
     904:	d5 0a       	sbc	r13, r21
     906:	c6 01       	movw	r24, r12
     908:	b5 01       	movw	r22, r10
     90a:	29 96       	adiw	r28, 0x09	; 9
     90c:	2c ad       	ldd	r18, Y+60	; 0x3c
     90e:	3d ad       	ldd	r19, Y+61	; 0x3d
     910:	4e ad       	ldd	r20, Y+62	; 0x3e
     912:	5f ad       	ldd	r21, Y+63	; 0x3f
     914:	29 97       	sbiw	r28, 0x09	; 9
     916:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
     91a:	7b 01       	movw	r14, r22
     91c:	8c 01       	movw	r16, r24
     91e:	c6 01       	movw	r24, r12
     920:	b5 01       	movw	r22, r10
     922:	29 96       	adiw	r28, 0x09	; 9
     924:	2c ad       	ldd	r18, Y+60	; 0x3c
     926:	3d ad       	ldd	r19, Y+61	; 0x3d
     928:	4e ad       	ldd	r20, Y+62	; 0x3e
     92a:	5f ad       	ldd	r21, Y+63	; 0x3f
     92c:	29 97       	sbiw	r28, 0x09	; 9
     92e:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
     932:	c9 01       	movw	r24, r18
     934:	da 01       	movw	r26, r20
     936:	5c 01       	movw	r10, r24
     938:	6d 01       	movw	r12, r26
     93a:	c6 01       	movw	r24, r12
     93c:	b5 01       	movw	r22, r10
     93e:	2d 96       	adiw	r28, 0x0d	; 13
     940:	2c ad       	ldd	r18, Y+60	; 0x3c
     942:	3d ad       	ldd	r19, Y+61	; 0x3d
     944:	4e ad       	ldd	r20, Y+62	; 0x3e
     946:	5f ad       	ldd	r21, Y+63	; 0x3f
     948:	2d 97       	sbiw	r28, 0x0d	; 13
     94a:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__mulsi3>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	87 01       	movw	r16, r14
     954:	ff 24       	eor	r15, r15
     956:	ee 24       	eor	r14, r14
     958:	8d a5       	ldd	r24, Y+45	; 0x2d
     95a:	9e a5       	ldd	r25, Y+46	; 0x2e
     95c:	af a5       	ldd	r26, Y+47	; 0x2f
     95e:	b8 a9       	ldd	r27, Y+48	; 0x30
     960:	a0 70       	andi	r26, 0x00	; 0
     962:	b0 70       	andi	r27, 0x00	; 0
     964:	e8 2a       	or	r14, r24
     966:	f9 2a       	or	r15, r25
     968:	0a 2b       	or	r16, r26
     96a:	1b 2b       	or	r17, r27
     96c:	e2 16       	cp	r14, r18
     96e:	f3 06       	cpc	r15, r19
     970:	04 07       	cpc	r16, r20
     972:	15 07       	cpc	r17, r21
     974:	c0 f4       	brcc	.+48     	; 0x9a6 <__stack+0x147>
     976:	08 94       	sec
     978:	a1 08       	sbc	r10, r1
     97a:	b1 08       	sbc	r11, r1
     97c:	c1 08       	sbc	r12, r1
     97e:	d1 08       	sbc	r13, r1
     980:	e2 0c       	add	r14, r2
     982:	f3 1c       	adc	r15, r3
     984:	04 1d       	adc	r16, r4
     986:	15 1d       	adc	r17, r5
     988:	e2 14       	cp	r14, r2
     98a:	f3 04       	cpc	r15, r3
     98c:	04 05       	cpc	r16, r4
     98e:	15 05       	cpc	r17, r5
     990:	50 f0       	brcs	.+20     	; 0x9a6 <__stack+0x147>
     992:	e2 16       	cp	r14, r18
     994:	f3 06       	cpc	r15, r19
     996:	04 07       	cpc	r16, r20
     998:	15 07       	cpc	r17, r21
     99a:	28 f4       	brcc	.+10     	; 0x9a6 <__stack+0x147>
     99c:	08 94       	sec
     99e:	a1 08       	sbc	r10, r1
     9a0:	b1 08       	sbc	r11, r1
     9a2:	c1 08       	sbc	r12, r1
     9a4:	d1 08       	sbc	r13, r1
     9a6:	61 96       	adiw	r28, 0x11	; 17
     9a8:	ec ac       	ldd	r14, Y+60	; 0x3c
     9aa:	fd ac       	ldd	r15, Y+61	; 0x3d
     9ac:	0e ad       	ldd	r16, Y+62	; 0x3e
     9ae:	1f ad       	ldd	r17, Y+63	; 0x3f
     9b0:	61 97       	sbiw	r28, 0x11	; 17
     9b2:	d7 01       	movw	r26, r14
     9b4:	99 27       	eor	r25, r25
     9b6:	88 27       	eor	r24, r24
     9b8:	96 01       	movw	r18, r12
     9ba:	85 01       	movw	r16, r10
     9bc:	08 2b       	or	r16, r24
     9be:	19 2b       	or	r17, r25
     9c0:	2a 2b       	or	r18, r26
     9c2:	3b 2b       	or	r19, r27
     9c4:	09 ab       	std	Y+49, r16	; 0x31
     9c6:	1a ab       	std	Y+50, r17	; 0x32
     9c8:	2b ab       	std	Y+51, r18	; 0x33
     9ca:	3c ab       	std	Y+52, r19	; 0x34
     9cc:	62 c2       	rjmp	.+1220   	; 0xe92 <__stack+0x633>
     9ce:	6e 14       	cp	r6, r14
     9d0:	7f 04       	cpc	r7, r15
     9d2:	80 06       	cpc	r8, r16
     9d4:	91 06       	cpc	r9, r17
     9d6:	08 f4       	brcc	.+2      	; 0x9da <__stack+0x17b>
     9d8:	51 c2       	rjmp	.+1186   	; 0xe7c <__stack+0x61d>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	e2 16       	cp	r14, r18
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	f2 06       	cpc	r15, r18
     9e2:	21 e0       	ldi	r18, 0x01	; 1
     9e4:	02 07       	cpc	r16, r18
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	12 07       	cpc	r17, r18
     9ea:	88 f4       	brcc	.+34     	; 0xa0e <__stack+0x1af>
     9ec:	3f ef       	ldi	r19, 0xFF	; 255
     9ee:	e3 16       	cp	r14, r19
     9f0:	f1 04       	cpc	r15, r1
     9f2:	01 05       	cpc	r16, r1
     9f4:	11 05       	cpc	r17, r1
     9f6:	31 f0       	breq	.+12     	; 0xa04 <__stack+0x1a5>
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__stack+0x1a5>
     9fa:	48 e0       	ldi	r20, 0x08	; 8
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	17 c0       	rjmp	.+46     	; 0xa32 <__stack+0x1d3>
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__stack+0x1d3>
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	e4 16       	cp	r14, r20
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	f4 06       	cpc	r15, r20
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	04 07       	cpc	r16, r20
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	14 07       	cpc	r17, r20
     a1e:	28 f0       	brcs	.+10     	; 0xa2a <__stack+0x1cb>
     a20:	48 e1       	ldi	r20, 0x18	; 24
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <__stack+0x1d3>
     a2a:	40 e1       	ldi	r20, 0x10	; 16
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	d8 01       	movw	r26, r16
     a34:	c7 01       	movw	r24, r14
     a36:	04 2e       	mov	r0, r20
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <__stack+0x1e3>
     a3a:	b6 95       	lsr	r27
     a3c:	a7 95       	ror	r26
     a3e:	97 95       	ror	r25
     a40:	87 95       	ror	r24
     a42:	0a 94       	dec	r0
     a44:	d2 f7       	brpl	.-12     	; 0xa3a <__stack+0x1db>
     a46:	88 59       	subi	r24, 0x98	; 152
     a48:	9f 4f       	sbci	r25, 0xFF	; 255
     a4a:	dc 01       	movw	r26, r24
     a4c:	2c 91       	ld	r18, X
     a4e:	30 e2       	ldi	r19, 0x20	; 32
     a50:	a3 2e       	mov	r10, r19
     a52:	b1 2c       	mov	r11, r1
     a54:	c1 2c       	mov	r12, r1
     a56:	d1 2c       	mov	r13, r1
     a58:	d6 01       	movw	r26, r12
     a5a:	c5 01       	movw	r24, r10
     a5c:	84 1b       	sub	r24, r20
     a5e:	95 0b       	sbc	r25, r21
     a60:	a6 0b       	sbc	r26, r22
     a62:	b7 0b       	sbc	r27, r23
     a64:	82 1b       	sub	r24, r18
     a66:	91 09       	sbc	r25, r1
     a68:	a1 09       	sbc	r26, r1
     a6a:	b1 09       	sbc	r27, r1
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	a1 05       	cpc	r26, r1
     a70:	b1 05       	cpc	r27, r1
     a72:	89 f4       	brne	.+34     	; 0xa96 <__stack+0x237>
     a74:	e6 14       	cp	r14, r6
     a76:	f7 04       	cpc	r15, r7
     a78:	08 05       	cpc	r16, r8
     a7a:	19 05       	cpc	r17, r9
     a7c:	08 f4       	brcc	.+2      	; 0xa80 <__stack+0x221>
     a7e:	f2 c1       	rjmp	.+996    	; 0xe64 <__stack+0x605>
     a80:	6d a4       	ldd	r6, Y+45	; 0x2d
     a82:	7e a4       	ldd	r7, Y+46	; 0x2e
     a84:	8f a4       	ldd	r8, Y+47	; 0x2f
     a86:	98 a8       	ldd	r9, Y+48	; 0x30
     a88:	62 14       	cp	r6, r2
     a8a:	73 04       	cpc	r7, r3
     a8c:	84 04       	cpc	r8, r4
     a8e:	95 04       	cpc	r9, r5
     a90:	08 f0       	brcs	.+2      	; 0xa94 <__stack+0x235>
     a92:	e8 c1       	rjmp	.+976    	; 0xe64 <__stack+0x605>
     a94:	f3 c1       	rjmp	.+998    	; 0xe7c <__stack+0x61d>
     a96:	6e 96       	adiw	r28, 0x1e	; 30
     a98:	8f af       	std	Y+63, r24	; 0x3f
     a9a:	6e 97       	sbiw	r28, 0x1e	; 30
     a9c:	08 2e       	mov	r0, r24
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__stack+0x249>
     aa0:	ee 0c       	add	r14, r14
     aa2:	ff 1c       	adc	r15, r15
     aa4:	00 1f       	adc	r16, r16
     aa6:	11 1f       	adc	r17, r17
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__stack+0x241>
     aac:	6a 2d       	mov	r22, r10
     aae:	68 1b       	sub	r22, r24
     ab0:	d2 01       	movw	r26, r4
     ab2:	c1 01       	movw	r24, r2
     ab4:	06 2e       	mov	r0, r22
     ab6:	04 c0       	rjmp	.+8      	; 0xac0 <__stack+0x261>
     ab8:	b6 95       	lsr	r27
     aba:	a7 95       	ror	r26
     abc:	97 95       	ror	r25
     abe:	87 95       	ror	r24
     ac0:	0a 94       	dec	r0
     ac2:	d2 f7       	brpl	.-12     	; 0xab8 <__stack+0x259>
     ac4:	5c 01       	movw	r10, r24
     ac6:	6d 01       	movw	r12, r26
     ac8:	ae 28       	or	r10, r14
     aca:	bf 28       	or	r11, r15
     acc:	c0 2a       	or	r12, r16
     ace:	d1 2a       	or	r13, r17
     ad0:	ad a2       	std	Y+37, r10	; 0x25
     ad2:	be a2       	std	Y+38, r11	; 0x26
     ad4:	cf a2       	std	Y+39, r12	; 0x27
     ad6:	d8 a6       	std	Y+40, r13	; 0x28
     ad8:	72 01       	movw	r14, r4
     ada:	61 01       	movw	r12, r2
     adc:	6e 96       	adiw	r28, 0x1e	; 30
     ade:	0f ac       	ldd	r0, Y+63	; 0x3f
     ae0:	6e 97       	sbiw	r28, 0x1e	; 30
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__stack+0x28d>
     ae4:	cc 0c       	add	r12, r12
     ae6:	dd 1c       	adc	r13, r13
     ae8:	ee 1c       	adc	r14, r14
     aea:	ff 1c       	adc	r15, r15
     aec:	0a 94       	dec	r0
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__stack+0x285>
     af0:	c9 a2       	std	Y+33, r12	; 0x21
     af2:	da a2       	std	Y+34, r13	; 0x22
     af4:	eb a2       	std	Y+35, r14	; 0x23
     af6:	fc a2       	std	Y+36, r15	; 0x24
     af8:	64 01       	movw	r12, r8
     afa:	53 01       	movw	r10, r6
     afc:	06 2e       	mov	r0, r22
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__stack+0x2a9>
     b00:	d6 94       	lsr	r13
     b02:	c7 94       	ror	r12
     b04:	b7 94       	ror	r11
     b06:	a7 94       	ror	r10
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__stack+0x2a1>
     b0c:	d4 01       	movw	r26, r8
     b0e:	c3 01       	movw	r24, r6
     b10:	6e 96       	adiw	r28, 0x1e	; 30
     b12:	0f ac       	ldd	r0, Y+63	; 0x3f
     b14:	6e 97       	sbiw	r28, 0x1e	; 30
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <__stack+0x2c1>
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	aa 1f       	adc	r26, r26
     b1e:	bb 1f       	adc	r27, r27
     b20:	0a 94       	dec	r0
     b22:	d2 f7       	brpl	.-12     	; 0xb18 <__stack+0x2b9>
     b24:	ed a4       	ldd	r14, Y+45	; 0x2d
     b26:	fe a4       	ldd	r15, Y+46	; 0x2e
     b28:	0f a5       	ldd	r16, Y+47	; 0x2f
     b2a:	18 a9       	ldd	r17, Y+48	; 0x30
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__stack+0x2d7>
     b2e:	16 95       	lsr	r17
     b30:	07 95       	ror	r16
     b32:	f7 94       	ror	r15
     b34:	e7 94       	ror	r14
     b36:	6a 95       	dec	r22
     b38:	d2 f7       	brpl	.-12     	; 0xb2e <__stack+0x2cf>
     b3a:	37 01       	movw	r6, r14
     b3c:	48 01       	movw	r8, r16
     b3e:	68 2a       	or	r6, r24
     b40:	79 2a       	or	r7, r25
     b42:	8a 2a       	or	r8, r26
     b44:	9b 2a       	or	r9, r27
     b46:	6d 8e       	std	Y+29, r6	; 0x1d
     b48:	7e 8e       	std	Y+30, r7	; 0x1e
     b4a:	8f 8e       	std	Y+31, r8	; 0x1f
     b4c:	98 a2       	std	Y+32, r9	; 0x20
     b4e:	ed a0       	ldd	r14, Y+37	; 0x25
     b50:	fe a0       	ldd	r15, Y+38	; 0x26
     b52:	0f a1       	ldd	r16, Y+39	; 0x27
     b54:	18 a5       	ldd	r17, Y+40	; 0x28
     b56:	38 01       	movw	r6, r16
     b58:	88 24       	eor	r8, r8
     b5a:	99 24       	eor	r9, r9
     b5c:	98 01       	movw	r18, r16
     b5e:	87 01       	movw	r16, r14
     b60:	20 70       	andi	r18, 0x00	; 0
     b62:	30 70       	andi	r19, 0x00	; 0
     b64:	65 96       	adiw	r28, 0x15	; 21
     b66:	0c af       	std	Y+60, r16	; 0x3c
     b68:	1d af       	std	Y+61, r17	; 0x3d
     b6a:	2e af       	std	Y+62, r18	; 0x3e
     b6c:	3f af       	std	Y+63, r19	; 0x3f
     b6e:	65 97       	sbiw	r28, 0x15	; 21
     b70:	c6 01       	movw	r24, r12
     b72:	b5 01       	movw	r22, r10
     b74:	a4 01       	movw	r20, r8
     b76:	93 01       	movw	r18, r6
     b78:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
     b7c:	7b 01       	movw	r14, r22
     b7e:	8c 01       	movw	r16, r24
     b80:	c6 01       	movw	r24, r12
     b82:	b5 01       	movw	r22, r10
     b84:	a4 01       	movw	r20, r8
     b86:	93 01       	movw	r18, r6
     b88:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
     b8c:	c9 01       	movw	r24, r18
     b8e:	da 01       	movw	r26, r20
     b90:	1c 01       	movw	r2, r24
     b92:	2d 01       	movw	r4, r26
     b94:	c2 01       	movw	r24, r4
     b96:	b1 01       	movw	r22, r2
     b98:	65 96       	adiw	r28, 0x15	; 21
     b9a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b9c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b9e:	4e ad       	ldd	r20, Y+62	; 0x3e
     ba0:	5f ad       	ldd	r21, Y+63	; 0x3f
     ba2:	65 97       	sbiw	r28, 0x15	; 21
     ba4:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__mulsi3>
     ba8:	9b 01       	movw	r18, r22
     baa:	ac 01       	movw	r20, r24
     bac:	87 01       	movw	r16, r14
     bae:	ff 24       	eor	r15, r15
     bb0:	ee 24       	eor	r14, r14
     bb2:	ad 8c       	ldd	r10, Y+29	; 0x1d
     bb4:	be 8c       	ldd	r11, Y+30	; 0x1e
     bb6:	cf 8c       	ldd	r12, Y+31	; 0x1f
     bb8:	d8 a0       	ldd	r13, Y+32	; 0x20
     bba:	c6 01       	movw	r24, r12
     bbc:	aa 27       	eor	r26, r26
     bbe:	bb 27       	eor	r27, r27
     bc0:	57 01       	movw	r10, r14
     bc2:	68 01       	movw	r12, r16
     bc4:	a8 2a       	or	r10, r24
     bc6:	b9 2a       	or	r11, r25
     bc8:	ca 2a       	or	r12, r26
     bca:	db 2a       	or	r13, r27
     bcc:	a2 16       	cp	r10, r18
     bce:	b3 06       	cpc	r11, r19
     bd0:	c4 06       	cpc	r12, r20
     bd2:	d5 06       	cpc	r13, r21
     bd4:	00 f5       	brcc	.+64     	; 0xc16 <__stack+0x3b7>
     bd6:	08 94       	sec
     bd8:	21 08       	sbc	r2, r1
     bda:	31 08       	sbc	r3, r1
     bdc:	41 08       	sbc	r4, r1
     bde:	51 08       	sbc	r5, r1
     be0:	ed a0       	ldd	r14, Y+37	; 0x25
     be2:	fe a0       	ldd	r15, Y+38	; 0x26
     be4:	0f a1       	ldd	r16, Y+39	; 0x27
     be6:	18 a5       	ldd	r17, Y+40	; 0x28
     be8:	ae 0c       	add	r10, r14
     bea:	bf 1c       	adc	r11, r15
     bec:	c0 1e       	adc	r12, r16
     bee:	d1 1e       	adc	r13, r17
     bf0:	ae 14       	cp	r10, r14
     bf2:	bf 04       	cpc	r11, r15
     bf4:	c0 06       	cpc	r12, r16
     bf6:	d1 06       	cpc	r13, r17
     bf8:	70 f0       	brcs	.+28     	; 0xc16 <__stack+0x3b7>
     bfa:	a2 16       	cp	r10, r18
     bfc:	b3 06       	cpc	r11, r19
     bfe:	c4 06       	cpc	r12, r20
     c00:	d5 06       	cpc	r13, r21
     c02:	48 f4       	brcc	.+18     	; 0xc16 <__stack+0x3b7>
     c04:	08 94       	sec
     c06:	21 08       	sbc	r2, r1
     c08:	31 08       	sbc	r3, r1
     c0a:	41 08       	sbc	r4, r1
     c0c:	51 08       	sbc	r5, r1
     c0e:	ae 0c       	add	r10, r14
     c10:	bf 1c       	adc	r11, r15
     c12:	c0 1e       	adc	r12, r16
     c14:	d1 1e       	adc	r13, r17
     c16:	a2 1a       	sub	r10, r18
     c18:	b3 0a       	sbc	r11, r19
     c1a:	c4 0a       	sbc	r12, r20
     c1c:	d5 0a       	sbc	r13, r21
     c1e:	c6 01       	movw	r24, r12
     c20:	b5 01       	movw	r22, r10
     c22:	a4 01       	movw	r20, r8
     c24:	93 01       	movw	r18, r6
     c26:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
     c2a:	7b 01       	movw	r14, r22
     c2c:	8c 01       	movw	r16, r24
     c2e:	c6 01       	movw	r24, r12
     c30:	b5 01       	movw	r22, r10
     c32:	a4 01       	movw	r20, r8
     c34:	93 01       	movw	r18, r6
     c36:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
     c3a:	c9 01       	movw	r24, r18
     c3c:	da 01       	movw	r26, r20
     c3e:	3c 01       	movw	r6, r24
     c40:	4d 01       	movw	r8, r26
     c42:	c4 01       	movw	r24, r8
     c44:	b3 01       	movw	r22, r6
     c46:	65 96       	adiw	r28, 0x15	; 21
     c48:	2c ad       	ldd	r18, Y+60	; 0x3c
     c4a:	3d ad       	ldd	r19, Y+61	; 0x3d
     c4c:	4e ad       	ldd	r20, Y+62	; 0x3e
     c4e:	5f ad       	ldd	r21, Y+63	; 0x3f
     c50:	65 97       	sbiw	r28, 0x15	; 21
     c52:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__mulsi3>
     c56:	9b 01       	movw	r18, r22
     c58:	ac 01       	movw	r20, r24
     c5a:	87 01       	movw	r16, r14
     c5c:	ff 24       	eor	r15, r15
     c5e:	ee 24       	eor	r14, r14
     c60:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c62:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c64:	af 8d       	ldd	r26, Y+31	; 0x1f
     c66:	b8 a1       	ldd	r27, Y+32	; 0x20
     c68:	a0 70       	andi	r26, 0x00	; 0
     c6a:	b0 70       	andi	r27, 0x00	; 0
     c6c:	57 01       	movw	r10, r14
     c6e:	68 01       	movw	r12, r16
     c70:	a8 2a       	or	r10, r24
     c72:	b9 2a       	or	r11, r25
     c74:	ca 2a       	or	r12, r26
     c76:	db 2a       	or	r13, r27
     c78:	a2 16       	cp	r10, r18
     c7a:	b3 06       	cpc	r11, r19
     c7c:	c4 06       	cpc	r12, r20
     c7e:	d5 06       	cpc	r13, r21
     c80:	00 f5       	brcc	.+64     	; 0xcc2 <__stack+0x463>
     c82:	08 94       	sec
     c84:	61 08       	sbc	r6, r1
     c86:	71 08       	sbc	r7, r1
     c88:	81 08       	sbc	r8, r1
     c8a:	91 08       	sbc	r9, r1
     c8c:	6d a1       	ldd	r22, Y+37	; 0x25
     c8e:	7e a1       	ldd	r23, Y+38	; 0x26
     c90:	8f a1       	ldd	r24, Y+39	; 0x27
     c92:	98 a5       	ldd	r25, Y+40	; 0x28
     c94:	a6 0e       	add	r10, r22
     c96:	b7 1e       	adc	r11, r23
     c98:	c8 1e       	adc	r12, r24
     c9a:	d9 1e       	adc	r13, r25
     c9c:	a6 16       	cp	r10, r22
     c9e:	b7 06       	cpc	r11, r23
     ca0:	c8 06       	cpc	r12, r24
     ca2:	d9 06       	cpc	r13, r25
     ca4:	70 f0       	brcs	.+28     	; 0xcc2 <__stack+0x463>
     ca6:	a2 16       	cp	r10, r18
     ca8:	b3 06       	cpc	r11, r19
     caa:	c4 06       	cpc	r12, r20
     cac:	d5 06       	cpc	r13, r21
     cae:	48 f4       	brcc	.+18     	; 0xcc2 <__stack+0x463>
     cb0:	08 94       	sec
     cb2:	61 08       	sbc	r6, r1
     cb4:	71 08       	sbc	r7, r1
     cb6:	81 08       	sbc	r8, r1
     cb8:	91 08       	sbc	r9, r1
     cba:	a6 0e       	add	r10, r22
     cbc:	b7 1e       	adc	r11, r23
     cbe:	c8 1e       	adc	r12, r24
     cc0:	d9 1e       	adc	r13, r25
     cc2:	d6 01       	movw	r26, r12
     cc4:	c5 01       	movw	r24, r10
     cc6:	82 1b       	sub	r24, r18
     cc8:	93 0b       	sbc	r25, r19
     cca:	a4 0b       	sbc	r26, r20
     ccc:	b5 0b       	sbc	r27, r21
     cce:	89 8f       	std	Y+25, r24	; 0x19
     cd0:	9a 8f       	std	Y+26, r25	; 0x1a
     cd2:	ab 8f       	std	Y+27, r26	; 0x1b
     cd4:	bc 8f       	std	Y+28, r27	; 0x1c
     cd6:	d1 01       	movw	r26, r2
     cd8:	99 27       	eor	r25, r25
     cda:	88 27       	eor	r24, r24
     cdc:	64 01       	movw	r12, r8
     cde:	53 01       	movw	r10, r6
     ce0:	a8 2a       	or	r10, r24
     ce2:	b9 2a       	or	r11, r25
     ce4:	ca 2a       	or	r12, r26
     ce6:	db 2a       	or	r13, r27
     ce8:	a9 aa       	std	Y+49, r10	; 0x31
     cea:	ba aa       	std	Y+50, r11	; 0x32
     cec:	cb aa       	std	Y+51, r12	; 0x33
     cee:	dc aa       	std	Y+52, r13	; 0x34
     cf0:	86 01       	movw	r16, r12
     cf2:	75 01       	movw	r14, r10
     cf4:	2f ef       	ldi	r18, 0xFF	; 255
     cf6:	3f ef       	ldi	r19, 0xFF	; 255
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	e2 22       	and	r14, r18
     cfe:	f3 22       	and	r15, r19
     d00:	04 23       	and	r16, r20
     d02:	15 23       	and	r17, r21
     d04:	a6 01       	movw	r20, r12
     d06:	66 27       	eor	r22, r22
     d08:	77 27       	eor	r23, r23
     d0a:	6d 96       	adiw	r28, 0x1d	; 29
     d0c:	4c af       	std	Y+60, r20	; 0x3c
     d0e:	5d af       	std	Y+61, r21	; 0x3d
     d10:	6e af       	std	Y+62, r22	; 0x3e
     d12:	7f af       	std	Y+63, r23	; 0x3f
     d14:	6d 97       	sbiw	r28, 0x1d	; 29
     d16:	a9 a0       	ldd	r10, Y+33	; 0x21
     d18:	ba a0       	ldd	r11, Y+34	; 0x22
     d1a:	cb a0       	ldd	r12, Y+35	; 0x23
     d1c:	dc a0       	ldd	r13, Y+36	; 0x24
     d1e:	6f ef       	ldi	r22, 0xFF	; 255
     d20:	7f ef       	ldi	r23, 0xFF	; 255
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a6 22       	and	r10, r22
     d28:	b7 22       	and	r11, r23
     d2a:	c8 22       	and	r12, r24
     d2c:	d9 22       	and	r13, r25
     d2e:	89 a1       	ldd	r24, Y+33	; 0x21
     d30:	9a a1       	ldd	r25, Y+34	; 0x22
     d32:	ab a1       	ldd	r26, Y+35	; 0x23
     d34:	bc a1       	ldd	r27, Y+36	; 0x24
     d36:	1d 01       	movw	r2, r26
     d38:	44 24       	eor	r4, r4
     d3a:	55 24       	eor	r5, r5
     d3c:	c8 01       	movw	r24, r16
     d3e:	b7 01       	movw	r22, r14
     d40:	a6 01       	movw	r20, r12
     d42:	95 01       	movw	r18, r10
     d44:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__mulsi3>
     d48:	69 96       	adiw	r28, 0x19	; 25
     d4a:	6c af       	std	Y+60, r22	; 0x3c
     d4c:	7d af       	std	Y+61, r23	; 0x3d
     d4e:	8e af       	std	Y+62, r24	; 0x3e
     d50:	9f af       	std	Y+63, r25	; 0x3f
     d52:	69 97       	sbiw	r28, 0x19	; 25
     d54:	c8 01       	movw	r24, r16
     d56:	b7 01       	movw	r22, r14
     d58:	a2 01       	movw	r20, r4
     d5a:	91 01       	movw	r18, r2
     d5c:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__mulsi3>
     d60:	3b 01       	movw	r6, r22
     d62:	4c 01       	movw	r8, r24
     d64:	6d 96       	adiw	r28, 0x1d	; 29
     d66:	6c ad       	ldd	r22, Y+60	; 0x3c
     d68:	7d ad       	ldd	r23, Y+61	; 0x3d
     d6a:	8e ad       	ldd	r24, Y+62	; 0x3e
     d6c:	9f ad       	ldd	r25, Y+63	; 0x3f
     d6e:	6d 97       	sbiw	r28, 0x1d	; 29
     d70:	a6 01       	movw	r20, r12
     d72:	95 01       	movw	r18, r10
     d74:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__mulsi3>
     d78:	7b 01       	movw	r14, r22
     d7a:	8c 01       	movw	r16, r24
     d7c:	6d 96       	adiw	r28, 0x1d	; 29
     d7e:	6c ad       	ldd	r22, Y+60	; 0x3c
     d80:	7d ad       	ldd	r23, Y+61	; 0x3d
     d82:	8e ad       	ldd	r24, Y+62	; 0x3e
     d84:	9f ad       	ldd	r25, Y+63	; 0x3f
     d86:	6d 97       	sbiw	r28, 0x1d	; 29
     d88:	a2 01       	movw	r20, r4
     d8a:	91 01       	movw	r18, r2
     d8c:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__mulsi3>
     d90:	5b 01       	movw	r10, r22
     d92:	6c 01       	movw	r12, r24
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	26 0d       	add	r18, r6
     d9a:	37 1d       	adc	r19, r7
     d9c:	48 1d       	adc	r20, r8
     d9e:	59 1d       	adc	r21, r9
     da0:	69 96       	adiw	r28, 0x19	; 25
     da2:	6c ac       	ldd	r6, Y+60	; 0x3c
     da4:	7d ac       	ldd	r7, Y+61	; 0x3d
     da6:	8e ac       	ldd	r8, Y+62	; 0x3e
     da8:	9f ac       	ldd	r9, Y+63	; 0x3f
     daa:	69 97       	sbiw	r28, 0x19	; 25
     dac:	c4 01       	movw	r24, r8
     dae:	aa 27       	eor	r26, r26
     db0:	bb 27       	eor	r27, r27
     db2:	28 0f       	add	r18, r24
     db4:	39 1f       	adc	r19, r25
     db6:	4a 1f       	adc	r20, r26
     db8:	5b 1f       	adc	r21, r27
     dba:	2e 15       	cp	r18, r14
     dbc:	3f 05       	cpc	r19, r15
     dbe:	40 07       	cpc	r20, r16
     dc0:	51 07       	cpc	r21, r17
     dc2:	48 f4       	brcc	.+18     	; 0xdd6 <__stack+0x577>
     dc4:	e1 2c       	mov	r14, r1
     dc6:	f1 2c       	mov	r15, r1
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	06 2f       	mov	r16, r22
     dcc:	11 2d       	mov	r17, r1
     dce:	ae 0c       	add	r10, r14
     dd0:	bf 1c       	adc	r11, r15
     dd2:	c0 1e       	adc	r12, r16
     dd4:	d1 1e       	adc	r13, r17
     dd6:	ca 01       	movw	r24, r20
     dd8:	aa 27       	eor	r26, r26
     dda:	bb 27       	eor	r27, r27
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	6a 0d       	add	r22, r10
     de2:	7b 1d       	adc	r23, r11
     de4:	8c 1d       	adc	r24, r12
     de6:	9d 1d       	adc	r25, r13
     de8:	69 8c       	ldd	r6, Y+25	; 0x19
     dea:	7a 8c       	ldd	r7, Y+26	; 0x1a
     dec:	8b 8c       	ldd	r8, Y+27	; 0x1b
     dee:	9c 8c       	ldd	r9, Y+28	; 0x1c
     df0:	66 16       	cp	r6, r22
     df2:	77 06       	cpc	r7, r23
     df4:	88 06       	cpc	r8, r24
     df6:	99 06       	cpc	r9, r25
     df8:	40 f1       	brcs	.+80     	; 0xe4a <__stack+0x5eb>
     dfa:	66 15       	cp	r22, r6
     dfc:	77 05       	cpc	r23, r7
     dfe:	88 05       	cpc	r24, r8
     e00:	99 05       	cpc	r25, r9
     e02:	09 f0       	breq	.+2      	; 0xe06 <__stack+0x5a7>
     e04:	43 c0       	rjmp	.+134    	; 0xe8c <__stack+0x62d>
     e06:	d9 01       	movw	r26, r18
     e08:	99 27       	eor	r25, r25
     e0a:	88 27       	eor	r24, r24
     e0c:	69 96       	adiw	r28, 0x19	; 25
     e0e:	2c ad       	ldd	r18, Y+60	; 0x3c
     e10:	3d ad       	ldd	r19, Y+61	; 0x3d
     e12:	4e ad       	ldd	r20, Y+62	; 0x3e
     e14:	5f ad       	ldd	r21, Y+63	; 0x3f
     e16:	69 97       	sbiw	r28, 0x19	; 25
     e18:	40 70       	andi	r20, 0x00	; 0
     e1a:	50 70       	andi	r21, 0x00	; 0
     e1c:	82 0f       	add	r24, r18
     e1e:	93 1f       	adc	r25, r19
     e20:	a4 1f       	adc	r26, r20
     e22:	b5 1f       	adc	r27, r21
     e24:	2d a5       	ldd	r18, Y+45	; 0x2d
     e26:	3e a5       	ldd	r19, Y+46	; 0x2e
     e28:	4f a5       	ldd	r20, Y+47	; 0x2f
     e2a:	58 a9       	ldd	r21, Y+48	; 0x30
     e2c:	6e 96       	adiw	r28, 0x1e	; 30
     e2e:	0f ac       	ldd	r0, Y+63	; 0x3f
     e30:	6e 97       	sbiw	r28, 0x1e	; 30
     e32:	04 c0       	rjmp	.+8      	; 0xe3c <__stack+0x5dd>
     e34:	22 0f       	add	r18, r18
     e36:	33 1f       	adc	r19, r19
     e38:	44 1f       	adc	r20, r20
     e3a:	55 1f       	adc	r21, r21
     e3c:	0a 94       	dec	r0
     e3e:	d2 f7       	brpl	.-12     	; 0xe34 <__stack+0x5d5>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	4a 07       	cpc	r20, r26
     e46:	5b 07       	cpc	r21, r27
     e48:	08 f5       	brcc	.+66     	; 0xe8c <__stack+0x62d>
     e4a:	09 a9       	ldd	r16, Y+49	; 0x31
     e4c:	1a a9       	ldd	r17, Y+50	; 0x32
     e4e:	2b a9       	ldd	r18, Y+51	; 0x33
     e50:	3c a9       	ldd	r19, Y+52	; 0x34
     e52:	01 50       	subi	r16, 0x01	; 1
     e54:	10 40       	sbci	r17, 0x00	; 0
     e56:	20 40       	sbci	r18, 0x00	; 0
     e58:	30 40       	sbci	r19, 0x00	; 0
     e5a:	09 ab       	std	Y+49, r16	; 0x31
     e5c:	1a ab       	std	Y+50, r17	; 0x32
     e5e:	2b ab       	std	Y+51, r18	; 0x33
     e60:	3c ab       	std	Y+52, r19	; 0x34
     e62:	14 c0       	rjmp	.+40     	; 0xe8c <__stack+0x62d>
     e64:	66 24       	eor	r6, r6
     e66:	77 24       	eor	r7, r7
     e68:	43 01       	movw	r8, r6
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	29 ab       	std	Y+49, r18	; 0x31
     e74:	3a ab       	std	Y+50, r19	; 0x32
     e76:	4b ab       	std	Y+51, r20	; 0x33
     e78:	5c ab       	std	Y+52, r21	; 0x34
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <__stack+0x633>
     e7c:	66 24       	eor	r6, r6
     e7e:	77 24       	eor	r7, r7
     e80:	43 01       	movw	r8, r6
     e82:	19 aa       	std	Y+49, r1	; 0x31
     e84:	1a aa       	std	Y+50, r1	; 0x32
     e86:	1b aa       	std	Y+51, r1	; 0x33
     e88:	1c aa       	std	Y+52, r1	; 0x34
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <__stack+0x633>
     e8c:	66 24       	eor	r6, r6
     e8e:	77 24       	eor	r7, r7
     e90:	43 01       	movw	r8, r6
     e92:	fe 01       	movw	r30, r28
     e94:	71 96       	adiw	r30, 0x11	; 17
     e96:	88 e0       	ldi	r24, 0x08	; 8
     e98:	df 01       	movw	r26, r30
     e9a:	1d 92       	st	X+, r1
     e9c:	8a 95       	dec	r24
     e9e:	e9 f7       	brne	.-6      	; 0xe9a <__stack+0x63b>
     ea0:	a9 a8       	ldd	r10, Y+49	; 0x31
     ea2:	ba a8       	ldd	r11, Y+50	; 0x32
     ea4:	cb a8       	ldd	r12, Y+51	; 0x33
     ea6:	dc a8       	ldd	r13, Y+52	; 0x34
     ea8:	a9 8a       	std	Y+17, r10	; 0x11
     eaa:	ba 8a       	std	Y+18, r11	; 0x12
     eac:	cb 8a       	std	Y+19, r12	; 0x13
     eae:	dc 8a       	std	Y+20, r13	; 0x14
     eb0:	6d 8a       	std	Y+21, r6	; 0x15
     eb2:	7e 8a       	std	Y+22, r7	; 0x16
     eb4:	8f 8a       	std	Y+23, r8	; 0x17
     eb6:	98 8e       	std	Y+24, r9	; 0x18
     eb8:	29 a9       	ldd	r18, Y+49	; 0x31
     eba:	3a 89       	ldd	r19, Y+18	; 0x12
     ebc:	4b 89       	ldd	r20, Y+19	; 0x13
     ebe:	5c 89       	ldd	r21, Y+20	; 0x14
     ec0:	66 2d       	mov	r22, r6
     ec2:	7e 89       	ldd	r23, Y+22	; 0x16
     ec4:	8f 89       	ldd	r24, Y+23	; 0x17
     ec6:	98 8d       	ldd	r25, Y+24	; 0x18
     ec8:	c2 5a       	subi	r28, 0xA2	; 162
     eca:	df 4f       	sbci	r29, 0xFF	; 255
     ecc:	e2 e1       	ldi	r30, 0x12	; 18
     ece:	0c 94 c8 32 	jmp	0x6590	; 0x6590 <__epilogue_restores__>

00000ed2 <__umoddi3>:
     ed2:	ab e5       	ldi	r26, 0x5B	; 91
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ef e6       	ldi	r30, 0x6F	; 111
     ed8:	f7 e0       	ldi	r31, 0x07	; 7
     eda:	0c 94 ac 32 	jmp	0x6558	; 0x6558 <__prologue_saves__>
     ede:	a8 e0       	ldi	r26, 0x08	; 8
     ee0:	4e 01       	movw	r8, r28
     ee2:	08 94       	sec
     ee4:	81 1c       	adc	r8, r1
     ee6:	91 1c       	adc	r9, r1
     ee8:	f4 01       	movw	r30, r8
     eea:	6a 2e       	mov	r6, r26
     eec:	11 92       	st	Z+, r1
     eee:	6a 94       	dec	r6
     ef0:	e9 f7       	brne	.-6      	; 0xeec <__umoddi3+0x1a>
     ef2:	29 83       	std	Y+1, r18	; 0x01
     ef4:	3a 83       	std	Y+2, r19	; 0x02
     ef6:	4b 83       	std	Y+3, r20	; 0x03
     ef8:	5c 83       	std	Y+4, r21	; 0x04
     efa:	6d 83       	std	Y+5, r22	; 0x05
     efc:	7e 83       	std	Y+6, r23	; 0x06
     efe:	8f 83       	std	Y+7, r24	; 0x07
     f00:	98 87       	std	Y+8, r25	; 0x08
     f02:	ce 01       	movw	r24, r28
     f04:	09 96       	adiw	r24, 0x09	; 9
     f06:	fc 01       	movw	r30, r24
     f08:	11 92       	st	Z+, r1
     f0a:	aa 95       	dec	r26
     f0c:	e9 f7       	brne	.-6      	; 0xf08 <__umoddi3+0x36>
     f0e:	a9 86       	std	Y+9, r10	; 0x09
     f10:	ba 86       	std	Y+10, r11	; 0x0a
     f12:	cb 86       	std	Y+11, r12	; 0x0b
     f14:	dc 86       	std	Y+12, r13	; 0x0c
     f16:	ed 86       	std	Y+13, r14	; 0x0d
     f18:	fe 86       	std	Y+14, r15	; 0x0e
     f1a:	0f 87       	std	Y+15, r16	; 0x0f
     f1c:	18 8b       	std	Y+16, r17	; 0x10
     f1e:	29 84       	ldd	r2, Y+9	; 0x09
     f20:	3a 84       	ldd	r3, Y+10	; 0x0a
     f22:	4b 84       	ldd	r4, Y+11	; 0x0b
     f24:	5c 84       	ldd	r5, Y+12	; 0x0c
     f26:	ad 84       	ldd	r10, Y+13	; 0x0d
     f28:	be 84       	ldd	r11, Y+14	; 0x0e
     f2a:	cf 84       	ldd	r12, Y+15	; 0x0f
     f2c:	d8 88       	ldd	r13, Y+16	; 0x10
     f2e:	29 81       	ldd	r18, Y+1	; 0x01
     f30:	3a 81       	ldd	r19, Y+2	; 0x02
     f32:	4b 81       	ldd	r20, Y+3	; 0x03
     f34:	5c 81       	ldd	r21, Y+4	; 0x04
     f36:	69 96       	adiw	r28, 0x19	; 25
     f38:	2f af       	std	Y+63, r18	; 0x3f
     f3a:	69 97       	sbiw	r28, 0x19	; 25
     f3c:	6a 96       	adiw	r28, 0x1a	; 26
     f3e:	3f af       	std	Y+63, r19	; 0x3f
     f40:	6a 97       	sbiw	r28, 0x1a	; 26
     f42:	6b 96       	adiw	r28, 0x1b	; 27
     f44:	4f af       	std	Y+63, r20	; 0x3f
     f46:	6b 97       	sbiw	r28, 0x1b	; 27
     f48:	6c 96       	adiw	r28, 0x1c	; 28
     f4a:	5f af       	std	Y+63, r21	; 0x3f
     f4c:	6c 97       	sbiw	r28, 0x1c	; 28
     f4e:	6c 96       	adiw	r28, 0x1c	; 28
     f50:	6c ac       	ldd	r6, Y+60	; 0x3c
     f52:	7d ac       	ldd	r7, Y+61	; 0x3d
     f54:	8e ac       	ldd	r8, Y+62	; 0x3e
     f56:	9f ac       	ldd	r9, Y+63	; 0x3f
     f58:	6c 97       	sbiw	r28, 0x1c	; 28
     f5a:	69 aa       	std	Y+49, r6	; 0x31
     f5c:	7a aa       	std	Y+50, r7	; 0x32
     f5e:	8b aa       	std	Y+51, r8	; 0x33
     f60:	9c aa       	std	Y+52, r9	; 0x34
     f62:	6d 81       	ldd	r22, Y+5	; 0x05
     f64:	7e 81       	ldd	r23, Y+6	; 0x06
     f66:	8f 81       	ldd	r24, Y+7	; 0x07
     f68:	98 85       	ldd	r25, Y+8	; 0x08
     f6a:	3b 01       	movw	r6, r22
     f6c:	4c 01       	movw	r8, r24
     f6e:	6d aa       	std	Y+53, r6	; 0x35
     f70:	7e aa       	std	Y+54, r7	; 0x36
     f72:	8f aa       	std	Y+55, r8	; 0x37
     f74:	98 ae       	std	Y+56, r9	; 0x38
     f76:	a1 14       	cp	r10, r1
     f78:	b1 04       	cpc	r11, r1
     f7a:	c1 04       	cpc	r12, r1
     f7c:	d1 04       	cpc	r13, r1
     f7e:	09 f0       	breq	.+2      	; 0xf82 <__umoddi3+0xb0>
     f80:	04 c3       	rjmp	.+1544   	; 0x158a <__umoddi3+0x6b8>
     f82:	62 14       	cp	r6, r2
     f84:	73 04       	cpc	r7, r3
     f86:	84 04       	cpc	r8, r4
     f88:	95 04       	cpc	r9, r5
     f8a:	08 f0       	brcs	.+2      	; 0xf8e <__umoddi3+0xbc>
     f8c:	00 c1       	rjmp	.+512    	; 0x118e <__umoddi3+0x2bc>
     f8e:	00 e0       	ldi	r16, 0x00	; 0
     f90:	20 16       	cp	r2, r16
     f92:	00 e0       	ldi	r16, 0x00	; 0
     f94:	30 06       	cpc	r3, r16
     f96:	01 e0       	ldi	r16, 0x01	; 1
     f98:	40 06       	cpc	r4, r16
     f9a:	00 e0       	ldi	r16, 0x00	; 0
     f9c:	50 06       	cpc	r5, r16
     f9e:	88 f4       	brcc	.+34     	; 0xfc2 <__umoddi3+0xf0>
     fa0:	1f ef       	ldi	r17, 0xFF	; 255
     fa2:	21 16       	cp	r2, r17
     fa4:	31 04       	cpc	r3, r1
     fa6:	41 04       	cpc	r4, r1
     fa8:	51 04       	cpc	r5, r1
     faa:	39 f0       	breq	.+14     	; 0xfba <__umoddi3+0xe8>
     fac:	30 f0       	brcs	.+12     	; 0xfba <__umoddi3+0xe8>
     fae:	88 e0       	ldi	r24, 0x08	; 8
     fb0:	e8 2e       	mov	r14, r24
     fb2:	f1 2c       	mov	r15, r1
     fb4:	01 2d       	mov	r16, r1
     fb6:	11 2d       	mov	r17, r1
     fb8:	18 c0       	rjmp	.+48     	; 0xfea <__umoddi3+0x118>
     fba:	ee 24       	eor	r14, r14
     fbc:	ff 24       	eor	r15, r15
     fbe:	87 01       	movw	r16, r14
     fc0:	14 c0       	rjmp	.+40     	; 0xfea <__umoddi3+0x118>
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	24 16       	cp	r2, r20
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	34 06       	cpc	r3, r20
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	44 06       	cpc	r4, r20
     fce:	41 e0       	ldi	r20, 0x01	; 1
     fd0:	54 06       	cpc	r5, r20
     fd2:	30 f0       	brcs	.+12     	; 0xfe0 <__umoddi3+0x10e>
     fd4:	b8 e1       	ldi	r27, 0x18	; 24
     fd6:	eb 2e       	mov	r14, r27
     fd8:	f1 2c       	mov	r15, r1
     fda:	01 2d       	mov	r16, r1
     fdc:	11 2d       	mov	r17, r1
     fde:	05 c0       	rjmp	.+10     	; 0xfea <__umoddi3+0x118>
     fe0:	a0 e1       	ldi	r26, 0x10	; 16
     fe2:	ea 2e       	mov	r14, r26
     fe4:	f1 2c       	mov	r15, r1
     fe6:	01 2d       	mov	r16, r1
     fe8:	11 2d       	mov	r17, r1
     fea:	d2 01       	movw	r26, r4
     fec:	c1 01       	movw	r24, r2
     fee:	0e 2c       	mov	r0, r14
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <__umoddi3+0x128>
     ff2:	b6 95       	lsr	r27
     ff4:	a7 95       	ror	r26
     ff6:	97 95       	ror	r25
     ff8:	87 95       	ror	r24
     ffa:	0a 94       	dec	r0
     ffc:	d2 f7       	brpl	.-12     	; 0xff2 <__umoddi3+0x120>
     ffe:	88 59       	subi	r24, 0x98	; 152
    1000:	9f 4f       	sbci	r25, 0xFF	; 255
    1002:	dc 01       	movw	r26, r24
    1004:	2c 91       	ld	r18, X
    1006:	80 e2       	ldi	r24, 0x20	; 32
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	a0 e0       	ldi	r26, 0x00	; 0
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	8e 19       	sub	r24, r14
    1010:	9f 09       	sbc	r25, r15
    1012:	a0 0b       	sbc	r26, r16
    1014:	b1 0b       	sbc	r27, r17
    1016:	5c 01       	movw	r10, r24
    1018:	6d 01       	movw	r12, r26
    101a:	a2 1a       	sub	r10, r18
    101c:	b1 08       	sbc	r11, r1
    101e:	c1 08       	sbc	r12, r1
    1020:	d1 08       	sbc	r13, r1
    1022:	a9 ae       	std	Y+57, r10	; 0x39
    1024:	ba ae       	std	Y+58, r11	; 0x3a
    1026:	cb ae       	std	Y+59, r12	; 0x3b
    1028:	dc ae       	std	Y+60, r13	; 0x3c
    102a:	a1 14       	cp	r10, r1
    102c:	b1 04       	cpc	r11, r1
    102e:	c1 04       	cpc	r12, r1
    1030:	d1 04       	cpc	r13, r1
    1032:	09 f4       	brne	.+2      	; 0x1036 <__umoddi3+0x164>
    1034:	3f c0       	rjmp	.+126    	; 0x10b4 <__umoddi3+0x1e2>
    1036:	69 ad       	ldd	r22, Y+57	; 0x39
    1038:	06 2e       	mov	r0, r22
    103a:	04 c0       	rjmp	.+8      	; 0x1044 <__umoddi3+0x172>
    103c:	22 0c       	add	r2, r2
    103e:	33 1c       	adc	r3, r3
    1040:	44 1c       	adc	r4, r4
    1042:	55 1c       	adc	r5, r5
    1044:	0a 94       	dec	r0
    1046:	d2 f7       	brpl	.-12     	; 0x103c <__umoddi3+0x16a>
    1048:	a4 01       	movw	r20, r8
    104a:	93 01       	movw	r18, r6
    104c:	06 2e       	mov	r0, r22
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <__umoddi3+0x186>
    1050:	22 0f       	add	r18, r18
    1052:	33 1f       	adc	r19, r19
    1054:	44 1f       	adc	r20, r20
    1056:	55 1f       	adc	r21, r21
    1058:	0a 94       	dec	r0
    105a:	d2 f7       	brpl	.-12     	; 0x1050 <__umoddi3+0x17e>
    105c:	80 e2       	ldi	r24, 0x20	; 32
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	8a 19       	sub	r24, r10
    1062:	9b 09       	sbc	r25, r11
    1064:	6c 96       	adiw	r28, 0x1c	; 28
    1066:	cc ac       	ldd	r12, Y+60	; 0x3c
    1068:	dd ac       	ldd	r13, Y+61	; 0x3d
    106a:	ee ac       	ldd	r14, Y+62	; 0x3e
    106c:	ff ac       	ldd	r15, Y+63	; 0x3f
    106e:	6c 97       	sbiw	r28, 0x1c	; 28
    1070:	04 c0       	rjmp	.+8      	; 0x107a <__umoddi3+0x1a8>
    1072:	f6 94       	lsr	r15
    1074:	e7 94       	ror	r14
    1076:	d7 94       	ror	r13
    1078:	c7 94       	ror	r12
    107a:	8a 95       	dec	r24
    107c:	d2 f7       	brpl	.-12     	; 0x1072 <__umoddi3+0x1a0>
    107e:	87 01       	movw	r16, r14
    1080:	76 01       	movw	r14, r12
    1082:	e2 2a       	or	r14, r18
    1084:	f3 2a       	or	r15, r19
    1086:	04 2b       	or	r16, r20
    1088:	15 2b       	or	r17, r21
    108a:	ed aa       	std	Y+53, r14	; 0x35
    108c:	fe aa       	std	Y+54, r15	; 0x36
    108e:	0f ab       	std	Y+55, r16	; 0x37
    1090:	18 af       	std	Y+56, r17	; 0x38
    1092:	6c 96       	adiw	r28, 0x1c	; 28
    1094:	8c ad       	ldd	r24, Y+60	; 0x3c
    1096:	9d ad       	ldd	r25, Y+61	; 0x3d
    1098:	ae ad       	ldd	r26, Y+62	; 0x3e
    109a:	bf ad       	ldd	r27, Y+63	; 0x3f
    109c:	6c 97       	sbiw	r28, 0x1c	; 28
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <__umoddi3+0x1d6>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	aa 1f       	adc	r26, r26
    10a6:	bb 1f       	adc	r27, r27
    10a8:	6a 95       	dec	r22
    10aa:	d2 f7       	brpl	.-12     	; 0x10a0 <__umoddi3+0x1ce>
    10ac:	89 ab       	std	Y+49, r24	; 0x31
    10ae:	9a ab       	std	Y+50, r25	; 0x32
    10b0:	ab ab       	std	Y+51, r26	; 0x33
    10b2:	bc ab       	std	Y+52, r27	; 0x34
    10b4:	32 01       	movw	r6, r4
    10b6:	88 24       	eor	r8, r8
    10b8:	99 24       	eor	r9, r9
    10ba:	b2 01       	movw	r22, r4
    10bc:	a1 01       	movw	r20, r2
    10be:	60 70       	andi	r22, 0x00	; 0
    10c0:	70 70       	andi	r23, 0x00	; 0
    10c2:	21 96       	adiw	r28, 0x01	; 1
    10c4:	4c af       	std	Y+60, r20	; 0x3c
    10c6:	5d af       	std	Y+61, r21	; 0x3d
    10c8:	6e af       	std	Y+62, r22	; 0x3e
    10ca:	7f af       	std	Y+63, r23	; 0x3f
    10cc:	21 97       	sbiw	r28, 0x01	; 1
    10ce:	6d a9       	ldd	r22, Y+53	; 0x35
    10d0:	7e a9       	ldd	r23, Y+54	; 0x36
    10d2:	8f a9       	ldd	r24, Y+55	; 0x37
    10d4:	98 ad       	ldd	r25, Y+56	; 0x38
    10d6:	a4 01       	movw	r20, r8
    10d8:	93 01       	movw	r18, r6
    10da:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
    10de:	7b 01       	movw	r14, r22
    10e0:	8c 01       	movw	r16, r24
    10e2:	6d a9       	ldd	r22, Y+53	; 0x35
    10e4:	7e a9       	ldd	r23, Y+54	; 0x36
    10e6:	8f a9       	ldd	r24, Y+55	; 0x37
    10e8:	98 ad       	ldd	r25, Y+56	; 0x38
    10ea:	a4 01       	movw	r20, r8
    10ec:	93 01       	movw	r18, r6
    10ee:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
    10f2:	ca 01       	movw	r24, r20
    10f4:	b9 01       	movw	r22, r18
    10f6:	21 96       	adiw	r28, 0x01	; 1
    10f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    10fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    10fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    10fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    1100:	21 97       	sbiw	r28, 0x01	; 1
    1102:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__mulsi3>
    1106:	9b 01       	movw	r18, r22
    1108:	ac 01       	movw	r20, r24
    110a:	87 01       	movw	r16, r14
    110c:	ff 24       	eor	r15, r15
    110e:	ee 24       	eor	r14, r14
    1110:	a9 a8       	ldd	r10, Y+49	; 0x31
    1112:	ba a8       	ldd	r11, Y+50	; 0x32
    1114:	cb a8       	ldd	r12, Y+51	; 0x33
    1116:	dc a8       	ldd	r13, Y+52	; 0x34
    1118:	c6 01       	movw	r24, r12
    111a:	aa 27       	eor	r26, r26
    111c:	bb 27       	eor	r27, r27
    111e:	57 01       	movw	r10, r14
    1120:	68 01       	movw	r12, r16
    1122:	a8 2a       	or	r10, r24
    1124:	b9 2a       	or	r11, r25
    1126:	ca 2a       	or	r12, r26
    1128:	db 2a       	or	r13, r27
    112a:	a2 16       	cp	r10, r18
    112c:	b3 06       	cpc	r11, r19
    112e:	c4 06       	cpc	r12, r20
    1130:	d5 06       	cpc	r13, r21
    1132:	90 f4       	brcc	.+36     	; 0x1158 <__umoddi3+0x286>
    1134:	a2 0c       	add	r10, r2
    1136:	b3 1c       	adc	r11, r3
    1138:	c4 1c       	adc	r12, r4
    113a:	d5 1c       	adc	r13, r5
    113c:	a2 14       	cp	r10, r2
    113e:	b3 04       	cpc	r11, r3
    1140:	c4 04       	cpc	r12, r4
    1142:	d5 04       	cpc	r13, r5
    1144:	48 f0       	brcs	.+18     	; 0x1158 <__umoddi3+0x286>
    1146:	a2 16       	cp	r10, r18
    1148:	b3 06       	cpc	r11, r19
    114a:	c4 06       	cpc	r12, r20
    114c:	d5 06       	cpc	r13, r21
    114e:	20 f4       	brcc	.+8      	; 0x1158 <__umoddi3+0x286>
    1150:	a2 0c       	add	r10, r2
    1152:	b3 1c       	adc	r11, r3
    1154:	c4 1c       	adc	r12, r4
    1156:	d5 1c       	adc	r13, r5
    1158:	a2 1a       	sub	r10, r18
    115a:	b3 0a       	sbc	r11, r19
    115c:	c4 0a       	sbc	r12, r20
    115e:	d5 0a       	sbc	r13, r21
    1160:	c6 01       	movw	r24, r12
    1162:	b5 01       	movw	r22, r10
    1164:	a4 01       	movw	r20, r8
    1166:	93 01       	movw	r18, r6
    1168:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
    116c:	7b 01       	movw	r14, r22
    116e:	8c 01       	movw	r16, r24
    1170:	c6 01       	movw	r24, r12
    1172:	b5 01       	movw	r22, r10
    1174:	a4 01       	movw	r20, r8
    1176:	93 01       	movw	r18, r6
    1178:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
    117c:	ca 01       	movw	r24, r20
    117e:	b9 01       	movw	r22, r18
    1180:	21 96       	adiw	r28, 0x01	; 1
    1182:	2c ad       	ldd	r18, Y+60	; 0x3c
    1184:	3d ad       	ldd	r19, Y+61	; 0x3d
    1186:	4e ad       	ldd	r20, Y+62	; 0x3e
    1188:	5f ad       	ldd	r21, Y+63	; 0x3f
    118a:	21 97       	sbiw	r28, 0x01	; 1
    118c:	ba c1       	rjmp	.+884    	; 0x1502 <__umoddi3+0x630>
    118e:	21 14       	cp	r2, r1
    1190:	31 04       	cpc	r3, r1
    1192:	41 04       	cpc	r4, r1
    1194:	51 04       	cpc	r5, r1
    1196:	71 f4       	brne	.+28     	; 0x11b4 <__umoddi3+0x2e2>
    1198:	61 e0       	ldi	r22, 0x01	; 1
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	40 e0       	ldi	r20, 0x00	; 0
    11a6:	50 e0       	ldi	r21, 0x00	; 0
    11a8:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
    11ac:	c9 01       	movw	r24, r18
    11ae:	da 01       	movw	r26, r20
    11b0:	1c 01       	movw	r2, r24
    11b2:	2d 01       	movw	r4, r26
    11b4:	00 e0       	ldi	r16, 0x00	; 0
    11b6:	20 16       	cp	r2, r16
    11b8:	00 e0       	ldi	r16, 0x00	; 0
    11ba:	30 06       	cpc	r3, r16
    11bc:	01 e0       	ldi	r16, 0x01	; 1
    11be:	40 06       	cpc	r4, r16
    11c0:	00 e0       	ldi	r16, 0x00	; 0
    11c2:	50 06       	cpc	r5, r16
    11c4:	88 f4       	brcc	.+34     	; 0x11e8 <__umoddi3+0x316>
    11c6:	1f ef       	ldi	r17, 0xFF	; 255
    11c8:	21 16       	cp	r2, r17
    11ca:	31 04       	cpc	r3, r1
    11cc:	41 04       	cpc	r4, r1
    11ce:	51 04       	cpc	r5, r1
    11d0:	39 f0       	breq	.+14     	; 0x11e0 <__umoddi3+0x30e>
    11d2:	30 f0       	brcs	.+12     	; 0x11e0 <__umoddi3+0x30e>
    11d4:	68 e0       	ldi	r22, 0x08	; 8
    11d6:	e6 2e       	mov	r14, r22
    11d8:	f1 2c       	mov	r15, r1
    11da:	01 2d       	mov	r16, r1
    11dc:	11 2d       	mov	r17, r1
    11de:	18 c0       	rjmp	.+48     	; 0x1210 <__umoddi3+0x33e>
    11e0:	ee 24       	eor	r14, r14
    11e2:	ff 24       	eor	r15, r15
    11e4:	87 01       	movw	r16, r14
    11e6:	14 c0       	rjmp	.+40     	; 0x1210 <__umoddi3+0x33e>
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	24 16       	cp	r2, r20
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	34 06       	cpc	r3, r20
    11f0:	40 e0       	ldi	r20, 0x00	; 0
    11f2:	44 06       	cpc	r4, r20
    11f4:	41 e0       	ldi	r20, 0x01	; 1
    11f6:	54 06       	cpc	r5, r20
    11f8:	30 f0       	brcs	.+12     	; 0x1206 <__umoddi3+0x334>
    11fa:	58 e1       	ldi	r21, 0x18	; 24
    11fc:	e5 2e       	mov	r14, r21
    11fe:	f1 2c       	mov	r15, r1
    1200:	01 2d       	mov	r16, r1
    1202:	11 2d       	mov	r17, r1
    1204:	05 c0       	rjmp	.+10     	; 0x1210 <__umoddi3+0x33e>
    1206:	40 e1       	ldi	r20, 0x10	; 16
    1208:	e4 2e       	mov	r14, r20
    120a:	f1 2c       	mov	r15, r1
    120c:	01 2d       	mov	r16, r1
    120e:	11 2d       	mov	r17, r1
    1210:	d2 01       	movw	r26, r4
    1212:	c1 01       	movw	r24, r2
    1214:	0e 2c       	mov	r0, r14
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <__umoddi3+0x34e>
    1218:	b6 95       	lsr	r27
    121a:	a7 95       	ror	r26
    121c:	97 95       	ror	r25
    121e:	87 95       	ror	r24
    1220:	0a 94       	dec	r0
    1222:	d2 f7       	brpl	.-12     	; 0x1218 <__umoddi3+0x346>
    1224:	88 59       	subi	r24, 0x98	; 152
    1226:	9f 4f       	sbci	r25, 0xFF	; 255
    1228:	dc 01       	movw	r26, r24
    122a:	2c 91       	ld	r18, X
    122c:	30 e2       	ldi	r19, 0x20	; 32
    122e:	a3 2e       	mov	r10, r19
    1230:	b1 2c       	mov	r11, r1
    1232:	c1 2c       	mov	r12, r1
    1234:	d1 2c       	mov	r13, r1
    1236:	d6 01       	movw	r26, r12
    1238:	c5 01       	movw	r24, r10
    123a:	8e 19       	sub	r24, r14
    123c:	9f 09       	sbc	r25, r15
    123e:	a0 0b       	sbc	r26, r16
    1240:	b1 0b       	sbc	r27, r17
    1242:	7c 01       	movw	r14, r24
    1244:	8d 01       	movw	r16, r26
    1246:	e2 1a       	sub	r14, r18
    1248:	f1 08       	sbc	r15, r1
    124a:	01 09       	sbc	r16, r1
    124c:	11 09       	sbc	r17, r1
    124e:	e9 ae       	std	Y+57, r14	; 0x39
    1250:	fa ae       	std	Y+58, r15	; 0x3a
    1252:	0b af       	std	Y+59, r16	; 0x3b
    1254:	1c af       	std	Y+60, r17	; 0x3c
    1256:	e1 14       	cp	r14, r1
    1258:	f1 04       	cpc	r15, r1
    125a:	01 05       	cpc	r16, r1
    125c:	11 05       	cpc	r17, r1
    125e:	39 f4       	brne	.+14     	; 0x126e <__umoddi3+0x39c>
    1260:	64 01       	movw	r12, r8
    1262:	53 01       	movw	r10, r6
    1264:	a2 18       	sub	r10, r2
    1266:	b3 08       	sbc	r11, r3
    1268:	c4 08       	sbc	r12, r4
    126a:	d5 08       	sbc	r13, r5
    126c:	e2 c0       	rjmp	.+452    	; 0x1432 <__umoddi3+0x560>
    126e:	f9 ac       	ldd	r15, Y+57	; 0x39
    1270:	68 96       	adiw	r28, 0x18	; 24
    1272:	ff ae       	std	Y+63, r15	; 0x3f
    1274:	68 97       	sbiw	r28, 0x18	; 24
    1276:	0f 2c       	mov	r0, r15
    1278:	04 c0       	rjmp	.+8      	; 0x1282 <__umoddi3+0x3b0>
    127a:	22 0c       	add	r2, r2
    127c:	33 1c       	adc	r3, r3
    127e:	44 1c       	adc	r4, r4
    1280:	55 1c       	adc	r5, r5
    1282:	0a 94       	dec	r0
    1284:	d2 f7       	brpl	.-12     	; 0x127a <__umoddi3+0x3a8>
    1286:	8a 2d       	mov	r24, r10
    1288:	8f 19       	sub	r24, r15
    128a:	64 01       	movw	r12, r8
    128c:	53 01       	movw	r10, r6
    128e:	08 2e       	mov	r0, r24
    1290:	04 c0       	rjmp	.+8      	; 0x129a <__umoddi3+0x3c8>
    1292:	d6 94       	lsr	r13
    1294:	c7 94       	ror	r12
    1296:	b7 94       	ror	r11
    1298:	a7 94       	ror	r10
    129a:	0a 94       	dec	r0
    129c:	d2 f7       	brpl	.-12     	; 0x1292 <__umoddi3+0x3c0>
    129e:	a4 01       	movw	r20, r8
    12a0:	93 01       	movw	r18, r6
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <__umoddi3+0x3da>
    12a4:	22 0f       	add	r18, r18
    12a6:	33 1f       	adc	r19, r19
    12a8:	44 1f       	adc	r20, r20
    12aa:	55 1f       	adc	r21, r21
    12ac:	fa 94       	dec	r15
    12ae:	d2 f7       	brpl	.-12     	; 0x12a4 <__umoddi3+0x3d2>
    12b0:	6c 96       	adiw	r28, 0x1c	; 28
    12b2:	6c ac       	ldd	r6, Y+60	; 0x3c
    12b4:	7d ac       	ldd	r7, Y+61	; 0x3d
    12b6:	8e ac       	ldd	r8, Y+62	; 0x3e
    12b8:	9f ac       	ldd	r9, Y+63	; 0x3f
    12ba:	6c 97       	sbiw	r28, 0x1c	; 28
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <__umoddi3+0x3f4>
    12be:	96 94       	lsr	r9
    12c0:	87 94       	ror	r8
    12c2:	77 94       	ror	r7
    12c4:	67 94       	ror	r6
    12c6:	8a 95       	dec	r24
    12c8:	d2 f7       	brpl	.-12     	; 0x12be <__umoddi3+0x3ec>
    12ca:	84 01       	movw	r16, r8
    12cc:	73 01       	movw	r14, r6
    12ce:	e2 2a       	or	r14, r18
    12d0:	f3 2a       	or	r15, r19
    12d2:	04 2b       	or	r16, r20
    12d4:	15 2b       	or	r17, r21
    12d6:	ed a6       	std	Y+45, r14	; 0x2d
    12d8:	fe a6       	std	Y+46, r15	; 0x2e
    12da:	0f a7       	std	Y+47, r16	; 0x2f
    12dc:	18 ab       	std	Y+48, r17	; 0x30
    12de:	32 01       	movw	r6, r4
    12e0:	88 24       	eor	r8, r8
    12e2:	99 24       	eor	r9, r9
    12e4:	b2 01       	movw	r22, r4
    12e6:	a1 01       	movw	r20, r2
    12e8:	60 70       	andi	r22, 0x00	; 0
    12ea:	70 70       	andi	r23, 0x00	; 0
    12ec:	25 96       	adiw	r28, 0x05	; 5
    12ee:	4c af       	std	Y+60, r20	; 0x3c
    12f0:	5d af       	std	Y+61, r21	; 0x3d
    12f2:	6e af       	std	Y+62, r22	; 0x3e
    12f4:	7f af       	std	Y+63, r23	; 0x3f
    12f6:	25 97       	sbiw	r28, 0x05	; 5
    12f8:	c6 01       	movw	r24, r12
    12fa:	b5 01       	movw	r22, r10
    12fc:	a4 01       	movw	r20, r8
    12fe:	93 01       	movw	r18, r6
    1300:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
    1304:	7b 01       	movw	r14, r22
    1306:	8c 01       	movw	r16, r24
    1308:	c6 01       	movw	r24, r12
    130a:	b5 01       	movw	r22, r10
    130c:	a4 01       	movw	r20, r8
    130e:	93 01       	movw	r18, r6
    1310:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
    1314:	ca 01       	movw	r24, r20
    1316:	b9 01       	movw	r22, r18
    1318:	25 96       	adiw	r28, 0x05	; 5
    131a:	2c ad       	ldd	r18, Y+60	; 0x3c
    131c:	3d ad       	ldd	r19, Y+61	; 0x3d
    131e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1320:	5f ad       	ldd	r21, Y+63	; 0x3f
    1322:	25 97       	sbiw	r28, 0x05	; 5
    1324:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__mulsi3>
    1328:	9b 01       	movw	r18, r22
    132a:	ac 01       	movw	r20, r24
    132c:	87 01       	movw	r16, r14
    132e:	ff 24       	eor	r15, r15
    1330:	ee 24       	eor	r14, r14
    1332:	ad a4       	ldd	r10, Y+45	; 0x2d
    1334:	be a4       	ldd	r11, Y+46	; 0x2e
    1336:	cf a4       	ldd	r12, Y+47	; 0x2f
    1338:	d8 a8       	ldd	r13, Y+48	; 0x30
    133a:	c6 01       	movw	r24, r12
    133c:	aa 27       	eor	r26, r26
    133e:	bb 27       	eor	r27, r27
    1340:	5c 01       	movw	r10, r24
    1342:	6d 01       	movw	r12, r26
    1344:	ae 28       	or	r10, r14
    1346:	bf 28       	or	r11, r15
    1348:	c0 2a       	or	r12, r16
    134a:	d1 2a       	or	r13, r17
    134c:	a2 16       	cp	r10, r18
    134e:	b3 06       	cpc	r11, r19
    1350:	c4 06       	cpc	r12, r20
    1352:	d5 06       	cpc	r13, r21
    1354:	90 f4       	brcc	.+36     	; 0x137a <__umoddi3+0x4a8>
    1356:	a2 0c       	add	r10, r2
    1358:	b3 1c       	adc	r11, r3
    135a:	c4 1c       	adc	r12, r4
    135c:	d5 1c       	adc	r13, r5
    135e:	a2 14       	cp	r10, r2
    1360:	b3 04       	cpc	r11, r3
    1362:	c4 04       	cpc	r12, r4
    1364:	d5 04       	cpc	r13, r5
    1366:	48 f0       	brcs	.+18     	; 0x137a <__umoddi3+0x4a8>
    1368:	a2 16       	cp	r10, r18
    136a:	b3 06       	cpc	r11, r19
    136c:	c4 06       	cpc	r12, r20
    136e:	d5 06       	cpc	r13, r21
    1370:	20 f4       	brcc	.+8      	; 0x137a <__umoddi3+0x4a8>
    1372:	a2 0c       	add	r10, r2
    1374:	b3 1c       	adc	r11, r3
    1376:	c4 1c       	adc	r12, r4
    1378:	d5 1c       	adc	r13, r5
    137a:	a2 1a       	sub	r10, r18
    137c:	b3 0a       	sbc	r11, r19
    137e:	c4 0a       	sbc	r12, r20
    1380:	d5 0a       	sbc	r13, r21
    1382:	c6 01       	movw	r24, r12
    1384:	b5 01       	movw	r22, r10
    1386:	a4 01       	movw	r20, r8
    1388:	93 01       	movw	r18, r6
    138a:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
    138e:	7b 01       	movw	r14, r22
    1390:	8c 01       	movw	r16, r24
    1392:	c6 01       	movw	r24, r12
    1394:	b5 01       	movw	r22, r10
    1396:	a4 01       	movw	r20, r8
    1398:	93 01       	movw	r18, r6
    139a:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
    139e:	ca 01       	movw	r24, r20
    13a0:	b9 01       	movw	r22, r18
    13a2:	25 96       	adiw	r28, 0x05	; 5
    13a4:	2c ad       	ldd	r18, Y+60	; 0x3c
    13a6:	3d ad       	ldd	r19, Y+61	; 0x3d
    13a8:	4e ad       	ldd	r20, Y+62	; 0x3e
    13aa:	5f ad       	ldd	r21, Y+63	; 0x3f
    13ac:	25 97       	sbiw	r28, 0x05	; 5
    13ae:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__mulsi3>
    13b2:	9b 01       	movw	r18, r22
    13b4:	ac 01       	movw	r20, r24
    13b6:	87 01       	movw	r16, r14
    13b8:	ff 24       	eor	r15, r15
    13ba:	ee 24       	eor	r14, r14
    13bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    13be:	9e a5       	ldd	r25, Y+46	; 0x2e
    13c0:	af a5       	ldd	r26, Y+47	; 0x2f
    13c2:	b8 a9       	ldd	r27, Y+48	; 0x30
    13c4:	a0 70       	andi	r26, 0x00	; 0
    13c6:	b0 70       	andi	r27, 0x00	; 0
    13c8:	57 01       	movw	r10, r14
    13ca:	68 01       	movw	r12, r16
    13cc:	a8 2a       	or	r10, r24
    13ce:	b9 2a       	or	r11, r25
    13d0:	ca 2a       	or	r12, r26
    13d2:	db 2a       	or	r13, r27
    13d4:	a2 16       	cp	r10, r18
    13d6:	b3 06       	cpc	r11, r19
    13d8:	c4 06       	cpc	r12, r20
    13da:	d5 06       	cpc	r13, r21
    13dc:	90 f4       	brcc	.+36     	; 0x1402 <__umoddi3+0x530>
    13de:	a2 0c       	add	r10, r2
    13e0:	b3 1c       	adc	r11, r3
    13e2:	c4 1c       	adc	r12, r4
    13e4:	d5 1c       	adc	r13, r5
    13e6:	a2 14       	cp	r10, r2
    13e8:	b3 04       	cpc	r11, r3
    13ea:	c4 04       	cpc	r12, r4
    13ec:	d5 04       	cpc	r13, r5
    13ee:	48 f0       	brcs	.+18     	; 0x1402 <__umoddi3+0x530>
    13f0:	a2 16       	cp	r10, r18
    13f2:	b3 06       	cpc	r11, r19
    13f4:	c4 06       	cpc	r12, r20
    13f6:	d5 06       	cpc	r13, r21
    13f8:	20 f4       	brcc	.+8      	; 0x1402 <__umoddi3+0x530>
    13fa:	a2 0c       	add	r10, r2
    13fc:	b3 1c       	adc	r11, r3
    13fe:	c4 1c       	adc	r12, r4
    1400:	d5 1c       	adc	r13, r5
    1402:	6c 96       	adiw	r28, 0x1c	; 28
    1404:	ec ac       	ldd	r14, Y+60	; 0x3c
    1406:	fd ac       	ldd	r15, Y+61	; 0x3d
    1408:	0e ad       	ldd	r16, Y+62	; 0x3e
    140a:	1f ad       	ldd	r17, Y+63	; 0x3f
    140c:	6c 97       	sbiw	r28, 0x1c	; 28
    140e:	68 96       	adiw	r28, 0x18	; 24
    1410:	0f ac       	ldd	r0, Y+63	; 0x3f
    1412:	68 97       	sbiw	r28, 0x18	; 24
    1414:	04 c0       	rjmp	.+8      	; 0x141e <__umoddi3+0x54c>
    1416:	ee 0c       	add	r14, r14
    1418:	ff 1c       	adc	r15, r15
    141a:	00 1f       	adc	r16, r16
    141c:	11 1f       	adc	r17, r17
    141e:	0a 94       	dec	r0
    1420:	d2 f7       	brpl	.-12     	; 0x1416 <__umoddi3+0x544>
    1422:	e9 aa       	std	Y+49, r14	; 0x31
    1424:	fa aa       	std	Y+50, r15	; 0x32
    1426:	0b ab       	std	Y+51, r16	; 0x33
    1428:	1c ab       	std	Y+52, r17	; 0x34
    142a:	a2 1a       	sub	r10, r18
    142c:	b3 0a       	sbc	r11, r19
    142e:	c4 0a       	sbc	r12, r20
    1430:	d5 0a       	sbc	r13, r21
    1432:	32 01       	movw	r6, r4
    1434:	88 24       	eor	r8, r8
    1436:	99 24       	eor	r9, r9
    1438:	b2 01       	movw	r22, r4
    143a:	a1 01       	movw	r20, r2
    143c:	60 70       	andi	r22, 0x00	; 0
    143e:	70 70       	andi	r23, 0x00	; 0
    1440:	29 96       	adiw	r28, 0x09	; 9
    1442:	4c af       	std	Y+60, r20	; 0x3c
    1444:	5d af       	std	Y+61, r21	; 0x3d
    1446:	6e af       	std	Y+62, r22	; 0x3e
    1448:	7f af       	std	Y+63, r23	; 0x3f
    144a:	29 97       	sbiw	r28, 0x09	; 9
    144c:	c6 01       	movw	r24, r12
    144e:	b5 01       	movw	r22, r10
    1450:	a4 01       	movw	r20, r8
    1452:	93 01       	movw	r18, r6
    1454:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
    1458:	7b 01       	movw	r14, r22
    145a:	8c 01       	movw	r16, r24
    145c:	c6 01       	movw	r24, r12
    145e:	b5 01       	movw	r22, r10
    1460:	a4 01       	movw	r20, r8
    1462:	93 01       	movw	r18, r6
    1464:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
    1468:	ca 01       	movw	r24, r20
    146a:	b9 01       	movw	r22, r18
    146c:	29 96       	adiw	r28, 0x09	; 9
    146e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1470:	3d ad       	ldd	r19, Y+61	; 0x3d
    1472:	4e ad       	ldd	r20, Y+62	; 0x3e
    1474:	5f ad       	ldd	r21, Y+63	; 0x3f
    1476:	29 97       	sbiw	r28, 0x09	; 9
    1478:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__mulsi3>
    147c:	9b 01       	movw	r18, r22
    147e:	ac 01       	movw	r20, r24
    1480:	87 01       	movw	r16, r14
    1482:	ff 24       	eor	r15, r15
    1484:	ee 24       	eor	r14, r14
    1486:	a9 a8       	ldd	r10, Y+49	; 0x31
    1488:	ba a8       	ldd	r11, Y+50	; 0x32
    148a:	cb a8       	ldd	r12, Y+51	; 0x33
    148c:	dc a8       	ldd	r13, Y+52	; 0x34
    148e:	c6 01       	movw	r24, r12
    1490:	aa 27       	eor	r26, r26
    1492:	bb 27       	eor	r27, r27
    1494:	57 01       	movw	r10, r14
    1496:	68 01       	movw	r12, r16
    1498:	a8 2a       	or	r10, r24
    149a:	b9 2a       	or	r11, r25
    149c:	ca 2a       	or	r12, r26
    149e:	db 2a       	or	r13, r27
    14a0:	a2 16       	cp	r10, r18
    14a2:	b3 06       	cpc	r11, r19
    14a4:	c4 06       	cpc	r12, r20
    14a6:	d5 06       	cpc	r13, r21
    14a8:	90 f4       	brcc	.+36     	; 0x14ce <__umoddi3+0x5fc>
    14aa:	a2 0c       	add	r10, r2
    14ac:	b3 1c       	adc	r11, r3
    14ae:	c4 1c       	adc	r12, r4
    14b0:	d5 1c       	adc	r13, r5
    14b2:	a2 14       	cp	r10, r2
    14b4:	b3 04       	cpc	r11, r3
    14b6:	c4 04       	cpc	r12, r4
    14b8:	d5 04       	cpc	r13, r5
    14ba:	48 f0       	brcs	.+18     	; 0x14ce <__umoddi3+0x5fc>
    14bc:	a2 16       	cp	r10, r18
    14be:	b3 06       	cpc	r11, r19
    14c0:	c4 06       	cpc	r12, r20
    14c2:	d5 06       	cpc	r13, r21
    14c4:	20 f4       	brcc	.+8      	; 0x14ce <__umoddi3+0x5fc>
    14c6:	a2 0c       	add	r10, r2
    14c8:	b3 1c       	adc	r11, r3
    14ca:	c4 1c       	adc	r12, r4
    14cc:	d5 1c       	adc	r13, r5
    14ce:	a2 1a       	sub	r10, r18
    14d0:	b3 0a       	sbc	r11, r19
    14d2:	c4 0a       	sbc	r12, r20
    14d4:	d5 0a       	sbc	r13, r21
    14d6:	c6 01       	movw	r24, r12
    14d8:	b5 01       	movw	r22, r10
    14da:	a4 01       	movw	r20, r8
    14dc:	93 01       	movw	r18, r6
    14de:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
    14e2:	7b 01       	movw	r14, r22
    14e4:	8c 01       	movw	r16, r24
    14e6:	c6 01       	movw	r24, r12
    14e8:	b5 01       	movw	r22, r10
    14ea:	a4 01       	movw	r20, r8
    14ec:	93 01       	movw	r18, r6
    14ee:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
    14f2:	ca 01       	movw	r24, r20
    14f4:	b9 01       	movw	r22, r18
    14f6:	29 96       	adiw	r28, 0x09	; 9
    14f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    14fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    14fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    14fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    1500:	29 97       	sbiw	r28, 0x09	; 9
    1502:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__mulsi3>
    1506:	9b 01       	movw	r18, r22
    1508:	ac 01       	movw	r20, r24
    150a:	87 01       	movw	r16, r14
    150c:	ff 24       	eor	r15, r15
    150e:	ee 24       	eor	r14, r14
    1510:	89 a9       	ldd	r24, Y+49	; 0x31
    1512:	9a a9       	ldd	r25, Y+50	; 0x32
    1514:	ab a9       	ldd	r26, Y+51	; 0x33
    1516:	bc a9       	ldd	r27, Y+52	; 0x34
    1518:	a0 70       	andi	r26, 0x00	; 0
    151a:	b0 70       	andi	r27, 0x00	; 0
    151c:	e8 2a       	or	r14, r24
    151e:	f9 2a       	or	r15, r25
    1520:	0a 2b       	or	r16, r26
    1522:	1b 2b       	or	r17, r27
    1524:	e2 16       	cp	r14, r18
    1526:	f3 06       	cpc	r15, r19
    1528:	04 07       	cpc	r16, r20
    152a:	15 07       	cpc	r17, r21
    152c:	90 f4       	brcc	.+36     	; 0x1552 <__umoddi3+0x680>
    152e:	e2 0c       	add	r14, r2
    1530:	f3 1c       	adc	r15, r3
    1532:	04 1d       	adc	r16, r4
    1534:	15 1d       	adc	r17, r5
    1536:	e2 14       	cp	r14, r2
    1538:	f3 04       	cpc	r15, r3
    153a:	04 05       	cpc	r16, r4
    153c:	15 05       	cpc	r17, r5
    153e:	48 f0       	brcs	.+18     	; 0x1552 <__umoddi3+0x680>
    1540:	e2 16       	cp	r14, r18
    1542:	f3 06       	cpc	r15, r19
    1544:	04 07       	cpc	r16, r20
    1546:	15 07       	cpc	r17, r21
    1548:	20 f4       	brcc	.+8      	; 0x1552 <__umoddi3+0x680>
    154a:	e2 0c       	add	r14, r2
    154c:	f3 1c       	adc	r15, r3
    154e:	04 1d       	adc	r16, r4
    1550:	15 1d       	adc	r17, r5
    1552:	e2 1a       	sub	r14, r18
    1554:	f3 0a       	sbc	r15, r19
    1556:	04 0b       	sbc	r16, r20
    1558:	15 0b       	sbc	r17, r21
    155a:	d8 01       	movw	r26, r16
    155c:	c7 01       	movw	r24, r14
    155e:	09 ac       	ldd	r0, Y+57	; 0x39
    1560:	04 c0       	rjmp	.+8      	; 0x156a <__umoddi3+0x698>
    1562:	b6 95       	lsr	r27
    1564:	a7 95       	ror	r26
    1566:	97 95       	ror	r25
    1568:	87 95       	ror	r24
    156a:	0a 94       	dec	r0
    156c:	d2 f7       	brpl	.-12     	; 0x1562 <__umoddi3+0x690>
    156e:	89 8b       	std	Y+17, r24	; 0x11
    1570:	9a 8b       	std	Y+18, r25	; 0x12
    1572:	ab 8b       	std	Y+19, r26	; 0x13
    1574:	bc 8b       	std	Y+20, r27	; 0x14
    1576:	1d 8a       	std	Y+21, r1	; 0x15
    1578:	1e 8a       	std	Y+22, r1	; 0x16
    157a:	1f 8a       	std	Y+23, r1	; 0x17
    157c:	18 8e       	std	Y+24, r1	; 0x18
    157e:	28 2f       	mov	r18, r24
    1580:	3a 89       	ldd	r19, Y+18	; 0x12
    1582:	4b 89       	ldd	r20, Y+19	; 0x13
    1584:	5c 89       	ldd	r21, Y+20	; 0x14
    1586:	6d 89       	ldd	r22, Y+21	; 0x15
    1588:	0c c3       	rjmp	.+1560   	; 0x1ba2 <__umoddi3+0xcd0>
    158a:	6a 14       	cp	r6, r10
    158c:	7b 04       	cpc	r7, r11
    158e:	8c 04       	cpc	r8, r12
    1590:	9d 04       	cpc	r9, r13
    1592:	08 f4       	brcc	.+2      	; 0x1596 <__umoddi3+0x6c4>
    1594:	09 c3       	rjmp	.+1554   	; 0x1ba8 <__umoddi3+0xcd6>
    1596:	00 e0       	ldi	r16, 0x00	; 0
    1598:	a0 16       	cp	r10, r16
    159a:	00 e0       	ldi	r16, 0x00	; 0
    159c:	b0 06       	cpc	r11, r16
    159e:	01 e0       	ldi	r16, 0x01	; 1
    15a0:	c0 06       	cpc	r12, r16
    15a2:	00 e0       	ldi	r16, 0x00	; 0
    15a4:	d0 06       	cpc	r13, r16
    15a6:	88 f4       	brcc	.+34     	; 0x15ca <__umoddi3+0x6f8>
    15a8:	1f ef       	ldi	r17, 0xFF	; 255
    15aa:	a1 16       	cp	r10, r17
    15ac:	b1 04       	cpc	r11, r1
    15ae:	c1 04       	cpc	r12, r1
    15b0:	d1 04       	cpc	r13, r1
    15b2:	39 f0       	breq	.+14     	; 0x15c2 <__umoddi3+0x6f0>
    15b4:	30 f0       	brcs	.+12     	; 0x15c2 <__umoddi3+0x6f0>
    15b6:	28 e0       	ldi	r18, 0x08	; 8
    15b8:	e2 2e       	mov	r14, r18
    15ba:	f1 2c       	mov	r15, r1
    15bc:	01 2d       	mov	r16, r1
    15be:	11 2d       	mov	r17, r1
    15c0:	18 c0       	rjmp	.+48     	; 0x15f2 <__umoddi3+0x720>
    15c2:	ee 24       	eor	r14, r14
    15c4:	ff 24       	eor	r15, r15
    15c6:	87 01       	movw	r16, r14
    15c8:	14 c0       	rjmp	.+40     	; 0x15f2 <__umoddi3+0x720>
    15ca:	40 e0       	ldi	r20, 0x00	; 0
    15cc:	a4 16       	cp	r10, r20
    15ce:	40 e0       	ldi	r20, 0x00	; 0
    15d0:	b4 06       	cpc	r11, r20
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	c4 06       	cpc	r12, r20
    15d6:	41 e0       	ldi	r20, 0x01	; 1
    15d8:	d4 06       	cpc	r13, r20
    15da:	30 f0       	brcs	.+12     	; 0x15e8 <__umoddi3+0x716>
    15dc:	98 e1       	ldi	r25, 0x18	; 24
    15de:	e9 2e       	mov	r14, r25
    15e0:	f1 2c       	mov	r15, r1
    15e2:	01 2d       	mov	r16, r1
    15e4:	11 2d       	mov	r17, r1
    15e6:	05 c0       	rjmp	.+10     	; 0x15f2 <__umoddi3+0x720>
    15e8:	80 e1       	ldi	r24, 0x10	; 16
    15ea:	e8 2e       	mov	r14, r24
    15ec:	f1 2c       	mov	r15, r1
    15ee:	01 2d       	mov	r16, r1
    15f0:	11 2d       	mov	r17, r1
    15f2:	d6 01       	movw	r26, r12
    15f4:	c5 01       	movw	r24, r10
    15f6:	0e 2c       	mov	r0, r14
    15f8:	04 c0       	rjmp	.+8      	; 0x1602 <__umoddi3+0x730>
    15fa:	b6 95       	lsr	r27
    15fc:	a7 95       	ror	r26
    15fe:	97 95       	ror	r25
    1600:	87 95       	ror	r24
    1602:	0a 94       	dec	r0
    1604:	d2 f7       	brpl	.-12     	; 0x15fa <__umoddi3+0x728>
    1606:	88 59       	subi	r24, 0x98	; 152
    1608:	9f 4f       	sbci	r25, 0xFF	; 255
    160a:	dc 01       	movw	r26, r24
    160c:	2c 91       	ld	r18, X
    160e:	80 e2       	ldi	r24, 0x20	; 32
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	a0 e0       	ldi	r26, 0x00	; 0
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	8e 19       	sub	r24, r14
    1618:	9f 09       	sbc	r25, r15
    161a:	a0 0b       	sbc	r26, r16
    161c:	b1 0b       	sbc	r27, r17
    161e:	82 1b       	sub	r24, r18
    1620:	91 09       	sbc	r25, r1
    1622:	a1 09       	sbc	r26, r1
    1624:	b1 09       	sbc	r27, r1
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	a1 05       	cpc	r26, r1
    162a:	b1 05       	cpc	r27, r1
    162c:	09 f0       	breq	.+2      	; 0x1630 <__umoddi3+0x75e>
    162e:	4f c0       	rjmp	.+158    	; 0x16ce <__umoddi3+0x7fc>
    1630:	a6 14       	cp	r10, r6
    1632:	b7 04       	cpc	r11, r7
    1634:	c8 04       	cpc	r12, r8
    1636:	d9 04       	cpc	r13, r9
    1638:	58 f0       	brcs	.+22     	; 0x1650 <__umoddi3+0x77e>
    163a:	6c 96       	adiw	r28, 0x1c	; 28
    163c:	ec ac       	ldd	r14, Y+60	; 0x3c
    163e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1640:	0e ad       	ldd	r16, Y+62	; 0x3e
    1642:	1f ad       	ldd	r17, Y+63	; 0x3f
    1644:	6c 97       	sbiw	r28, 0x1c	; 28
    1646:	e2 14       	cp	r14, r2
    1648:	f3 04       	cpc	r15, r3
    164a:	04 05       	cpc	r16, r4
    164c:	15 05       	cpc	r17, r5
    164e:	68 f1       	brcs	.+90     	; 0x16aa <__umoddi3+0x7d8>
    1650:	6c 96       	adiw	r28, 0x1c	; 28
    1652:	ec ac       	ldd	r14, Y+60	; 0x3c
    1654:	fd ac       	ldd	r15, Y+61	; 0x3d
    1656:	0e ad       	ldd	r16, Y+62	; 0x3e
    1658:	1f ad       	ldd	r17, Y+63	; 0x3f
    165a:	6c 97       	sbiw	r28, 0x1c	; 28
    165c:	e2 18       	sub	r14, r2
    165e:	f3 08       	sbc	r15, r3
    1660:	04 09       	sbc	r16, r4
    1662:	15 09       	sbc	r17, r5
    1664:	a4 01       	movw	r20, r8
    1666:	93 01       	movw	r18, r6
    1668:	2a 19       	sub	r18, r10
    166a:	3b 09       	sbc	r19, r11
    166c:	4c 09       	sbc	r20, r12
    166e:	5d 09       	sbc	r21, r13
    1670:	aa 24       	eor	r10, r10
    1672:	bb 24       	eor	r11, r11
    1674:	65 01       	movw	r12, r10
    1676:	6c 96       	adiw	r28, 0x1c	; 28
    1678:	6c ad       	ldd	r22, Y+60	; 0x3c
    167a:	7d ad       	ldd	r23, Y+61	; 0x3d
    167c:	8e ad       	ldd	r24, Y+62	; 0x3e
    167e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1680:	6c 97       	sbiw	r28, 0x1c	; 28
    1682:	6e 15       	cp	r22, r14
    1684:	7f 05       	cpc	r23, r15
    1686:	80 07       	cpc	r24, r16
    1688:	91 07       	cpc	r25, r17
    168a:	28 f4       	brcc	.+10     	; 0x1696 <__umoddi3+0x7c4>
    168c:	b1 e0       	ldi	r27, 0x01	; 1
    168e:	ab 2e       	mov	r10, r27
    1690:	b1 2c       	mov	r11, r1
    1692:	c1 2c       	mov	r12, r1
    1694:	d1 2c       	mov	r13, r1
    1696:	da 01       	movw	r26, r20
    1698:	c9 01       	movw	r24, r18
    169a:	8a 19       	sub	r24, r10
    169c:	9b 09       	sbc	r25, r11
    169e:	ac 09       	sbc	r26, r12
    16a0:	bd 09       	sbc	r27, r13
    16a2:	8d ab       	std	Y+53, r24	; 0x35
    16a4:	9e ab       	std	Y+54, r25	; 0x36
    16a6:	af ab       	std	Y+55, r26	; 0x37
    16a8:	b8 af       	std	Y+56, r27	; 0x38
    16aa:	e9 8a       	std	Y+17, r14	; 0x11
    16ac:	fa 8a       	std	Y+18, r15	; 0x12
    16ae:	0b 8b       	std	Y+19, r16	; 0x13
    16b0:	1c 8b       	std	Y+20, r17	; 0x14
    16b2:	6d a8       	ldd	r6, Y+53	; 0x35
    16b4:	7e a8       	ldd	r7, Y+54	; 0x36
    16b6:	8f a8       	ldd	r8, Y+55	; 0x37
    16b8:	98 ac       	ldd	r9, Y+56	; 0x38
    16ba:	6d 8a       	std	Y+21, r6	; 0x15
    16bc:	7e 8a       	std	Y+22, r7	; 0x16
    16be:	8f 8a       	std	Y+23, r8	; 0x17
    16c0:	98 8e       	std	Y+24, r9	; 0x18
    16c2:	2e 2d       	mov	r18, r14
    16c4:	3a 89       	ldd	r19, Y+18	; 0x12
    16c6:	4b 89       	ldd	r20, Y+19	; 0x13
    16c8:	5c 89       	ldd	r21, Y+20	; 0x14
    16ca:	6d a9       	ldd	r22, Y+53	; 0x35
    16cc:	6a c2       	rjmp	.+1236   	; 0x1ba2 <__umoddi3+0xcd0>
    16ce:	67 96       	adiw	r28, 0x17	; 23
    16d0:	8f af       	std	Y+63, r24	; 0x3f
    16d2:	67 97       	sbiw	r28, 0x17	; 23
    16d4:	a6 01       	movw	r20, r12
    16d6:	95 01       	movw	r18, r10
    16d8:	08 2e       	mov	r0, r24
    16da:	04 c0       	rjmp	.+8      	; 0x16e4 <__umoddi3+0x812>
    16dc:	22 0f       	add	r18, r18
    16de:	33 1f       	adc	r19, r19
    16e0:	44 1f       	adc	r20, r20
    16e2:	55 1f       	adc	r21, r21
    16e4:	0a 94       	dec	r0
    16e6:	d2 f7       	brpl	.-12     	; 0x16dc <__umoddi3+0x80a>
    16e8:	a0 e2       	ldi	r26, 0x20	; 32
    16ea:	aa 2e       	mov	r10, r26
    16ec:	a8 1a       	sub	r10, r24
    16ee:	66 96       	adiw	r28, 0x16	; 22
    16f0:	af ae       	std	Y+63, r10	; 0x3f
    16f2:	66 97       	sbiw	r28, 0x16	; 22
    16f4:	d2 01       	movw	r26, r4
    16f6:	c1 01       	movw	r24, r2
    16f8:	04 c0       	rjmp	.+8      	; 0x1702 <__umoddi3+0x830>
    16fa:	b6 95       	lsr	r27
    16fc:	a7 95       	ror	r26
    16fe:	97 95       	ror	r25
    1700:	87 95       	ror	r24
    1702:	aa 94       	dec	r10
    1704:	d2 f7       	brpl	.-12     	; 0x16fa <__umoddi3+0x828>
    1706:	6c 01       	movw	r12, r24
    1708:	7d 01       	movw	r14, r26
    170a:	c2 2a       	or	r12, r18
    170c:	d3 2a       	or	r13, r19
    170e:	e4 2a       	or	r14, r20
    1710:	f5 2a       	or	r15, r21
    1712:	c9 a6       	std	Y+41, r12	; 0x29
    1714:	da a6       	std	Y+42, r13	; 0x2a
    1716:	eb a6       	std	Y+43, r14	; 0x2b
    1718:	fc a6       	std	Y+44, r15	; 0x2c
    171a:	82 01       	movw	r16, r4
    171c:	71 01       	movw	r14, r2
    171e:	67 96       	adiw	r28, 0x17	; 23
    1720:	0f ac       	ldd	r0, Y+63	; 0x3f
    1722:	67 97       	sbiw	r28, 0x17	; 23
    1724:	04 c0       	rjmp	.+8      	; 0x172e <__umoddi3+0x85c>
    1726:	ee 0c       	add	r14, r14
    1728:	ff 1c       	adc	r15, r15
    172a:	00 1f       	adc	r16, r16
    172c:	11 1f       	adc	r17, r17
    172e:	0a 94       	dec	r0
    1730:	d2 f7       	brpl	.-12     	; 0x1726 <__umoddi3+0x854>
    1732:	ed a2       	std	Y+37, r14	; 0x25
    1734:	fe a2       	std	Y+38, r15	; 0x26
    1736:	0f a3       	std	Y+39, r16	; 0x27
    1738:	18 a7       	std	Y+40, r17	; 0x28
    173a:	64 01       	movw	r12, r8
    173c:	53 01       	movw	r10, r6
    173e:	66 96       	adiw	r28, 0x16	; 22
    1740:	0f ac       	ldd	r0, Y+63	; 0x3f
    1742:	66 97       	sbiw	r28, 0x16	; 22
    1744:	04 c0       	rjmp	.+8      	; 0x174e <__umoddi3+0x87c>
    1746:	d6 94       	lsr	r13
    1748:	c7 94       	ror	r12
    174a:	b7 94       	ror	r11
    174c:	a7 94       	ror	r10
    174e:	0a 94       	dec	r0
    1750:	d2 f7       	brpl	.-12     	; 0x1746 <__umoddi3+0x874>
    1752:	a4 01       	movw	r20, r8
    1754:	93 01       	movw	r18, r6
    1756:	67 96       	adiw	r28, 0x17	; 23
    1758:	0f ac       	ldd	r0, Y+63	; 0x3f
    175a:	67 97       	sbiw	r28, 0x17	; 23
    175c:	04 c0       	rjmp	.+8      	; 0x1766 <__umoddi3+0x894>
    175e:	22 0f       	add	r18, r18
    1760:	33 1f       	adc	r19, r19
    1762:	44 1f       	adc	r20, r20
    1764:	55 1f       	adc	r21, r21
    1766:	0a 94       	dec	r0
    1768:	d2 f7       	brpl	.-12     	; 0x175e <__umoddi3+0x88c>
    176a:	6c 96       	adiw	r28, 0x1c	; 28
    176c:	8c ad       	ldd	r24, Y+60	; 0x3c
    176e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1770:	ae ad       	ldd	r26, Y+62	; 0x3e
    1772:	bf ad       	ldd	r27, Y+63	; 0x3f
    1774:	6c 97       	sbiw	r28, 0x1c	; 28
    1776:	66 96       	adiw	r28, 0x16	; 22
    1778:	0f ac       	ldd	r0, Y+63	; 0x3f
    177a:	66 97       	sbiw	r28, 0x16	; 22
    177c:	04 c0       	rjmp	.+8      	; 0x1786 <__umoddi3+0x8b4>
    177e:	b6 95       	lsr	r27
    1780:	a7 95       	ror	r26
    1782:	97 95       	ror	r25
    1784:	87 95       	ror	r24
    1786:	0a 94       	dec	r0
    1788:	d2 f7       	brpl	.-12     	; 0x177e <__umoddi3+0x8ac>
    178a:	3c 01       	movw	r6, r24
    178c:	4d 01       	movw	r8, r26
    178e:	62 2a       	or	r6, r18
    1790:	73 2a       	or	r7, r19
    1792:	84 2a       	or	r8, r20
    1794:	95 2a       	or	r9, r21
    1796:	69 a2       	std	Y+33, r6	; 0x21
    1798:	7a a2       	std	Y+34, r7	; 0x22
    179a:	8b a2       	std	Y+35, r8	; 0x23
    179c:	9c a2       	std	Y+36, r9	; 0x24
    179e:	6c 96       	adiw	r28, 0x1c	; 28
    17a0:	ec ac       	ldd	r14, Y+60	; 0x3c
    17a2:	fd ac       	ldd	r15, Y+61	; 0x3d
    17a4:	0e ad       	ldd	r16, Y+62	; 0x3e
    17a6:	1f ad       	ldd	r17, Y+63	; 0x3f
    17a8:	6c 97       	sbiw	r28, 0x1c	; 28
    17aa:	67 96       	adiw	r28, 0x17	; 23
    17ac:	0f ac       	ldd	r0, Y+63	; 0x3f
    17ae:	67 97       	sbiw	r28, 0x17	; 23
    17b0:	04 c0       	rjmp	.+8      	; 0x17ba <__umoddi3+0x8e8>
    17b2:	ee 0c       	add	r14, r14
    17b4:	ff 1c       	adc	r15, r15
    17b6:	00 1f       	adc	r16, r16
    17b8:	11 1f       	adc	r17, r17
    17ba:	0a 94       	dec	r0
    17bc:	d2 f7       	brpl	.-12     	; 0x17b2 <__umoddi3+0x8e0>
    17be:	ed 8e       	std	Y+29, r14	; 0x1d
    17c0:	fe 8e       	std	Y+30, r15	; 0x1e
    17c2:	0f 8f       	std	Y+31, r16	; 0x1f
    17c4:	18 a3       	std	Y+32, r17	; 0x20
    17c6:	49 a5       	ldd	r20, Y+41	; 0x29
    17c8:	5a a5       	ldd	r21, Y+42	; 0x2a
    17ca:	6b a5       	ldd	r22, Y+43	; 0x2b
    17cc:	7c a5       	ldd	r23, Y+44	; 0x2c
    17ce:	3b 01       	movw	r6, r22
    17d0:	88 24       	eor	r8, r8
    17d2:	99 24       	eor	r9, r9
    17d4:	60 70       	andi	r22, 0x00	; 0
    17d6:	70 70       	andi	r23, 0x00	; 0
    17d8:	2d 96       	adiw	r28, 0x0d	; 13
    17da:	4c af       	std	Y+60, r20	; 0x3c
    17dc:	5d af       	std	Y+61, r21	; 0x3d
    17de:	6e af       	std	Y+62, r22	; 0x3e
    17e0:	7f af       	std	Y+63, r23	; 0x3f
    17e2:	2d 97       	sbiw	r28, 0x0d	; 13
    17e4:	c6 01       	movw	r24, r12
    17e6:	b5 01       	movw	r22, r10
    17e8:	a4 01       	movw	r20, r8
    17ea:	93 01       	movw	r18, r6
    17ec:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
    17f0:	7b 01       	movw	r14, r22
    17f2:	8c 01       	movw	r16, r24
    17f4:	c6 01       	movw	r24, r12
    17f6:	b5 01       	movw	r22, r10
    17f8:	a4 01       	movw	r20, r8
    17fa:	93 01       	movw	r18, r6
    17fc:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
    1800:	c9 01       	movw	r24, r18
    1802:	da 01       	movw	r26, r20
    1804:	1c 01       	movw	r2, r24
    1806:	2d 01       	movw	r4, r26
    1808:	c2 01       	movw	r24, r4
    180a:	b1 01       	movw	r22, r2
    180c:	2d 96       	adiw	r28, 0x0d	; 13
    180e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1810:	3d ad       	ldd	r19, Y+61	; 0x3d
    1812:	4e ad       	ldd	r20, Y+62	; 0x3e
    1814:	5f ad       	ldd	r21, Y+63	; 0x3f
    1816:	2d 97       	sbiw	r28, 0x0d	; 13
    1818:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__mulsi3>
    181c:	9b 01       	movw	r18, r22
    181e:	ac 01       	movw	r20, r24
    1820:	87 01       	movw	r16, r14
    1822:	ff 24       	eor	r15, r15
    1824:	ee 24       	eor	r14, r14
    1826:	a9 a0       	ldd	r10, Y+33	; 0x21
    1828:	ba a0       	ldd	r11, Y+34	; 0x22
    182a:	cb a0       	ldd	r12, Y+35	; 0x23
    182c:	dc a0       	ldd	r13, Y+36	; 0x24
    182e:	c6 01       	movw	r24, r12
    1830:	aa 27       	eor	r26, r26
    1832:	bb 27       	eor	r27, r27
    1834:	57 01       	movw	r10, r14
    1836:	68 01       	movw	r12, r16
    1838:	a8 2a       	or	r10, r24
    183a:	b9 2a       	or	r11, r25
    183c:	ca 2a       	or	r12, r26
    183e:	db 2a       	or	r13, r27
    1840:	a2 16       	cp	r10, r18
    1842:	b3 06       	cpc	r11, r19
    1844:	c4 06       	cpc	r12, r20
    1846:	d5 06       	cpc	r13, r21
    1848:	00 f5       	brcc	.+64     	; 0x188a <__umoddi3+0x9b8>
    184a:	08 94       	sec
    184c:	21 08       	sbc	r2, r1
    184e:	31 08       	sbc	r3, r1
    1850:	41 08       	sbc	r4, r1
    1852:	51 08       	sbc	r5, r1
    1854:	e9 a4       	ldd	r14, Y+41	; 0x29
    1856:	fa a4       	ldd	r15, Y+42	; 0x2a
    1858:	0b a5       	ldd	r16, Y+43	; 0x2b
    185a:	1c a5       	ldd	r17, Y+44	; 0x2c
    185c:	ae 0c       	add	r10, r14
    185e:	bf 1c       	adc	r11, r15
    1860:	c0 1e       	adc	r12, r16
    1862:	d1 1e       	adc	r13, r17
    1864:	ae 14       	cp	r10, r14
    1866:	bf 04       	cpc	r11, r15
    1868:	c0 06       	cpc	r12, r16
    186a:	d1 06       	cpc	r13, r17
    186c:	70 f0       	brcs	.+28     	; 0x188a <__umoddi3+0x9b8>
    186e:	a2 16       	cp	r10, r18
    1870:	b3 06       	cpc	r11, r19
    1872:	c4 06       	cpc	r12, r20
    1874:	d5 06       	cpc	r13, r21
    1876:	48 f4       	brcc	.+18     	; 0x188a <__umoddi3+0x9b8>
    1878:	08 94       	sec
    187a:	21 08       	sbc	r2, r1
    187c:	31 08       	sbc	r3, r1
    187e:	41 08       	sbc	r4, r1
    1880:	51 08       	sbc	r5, r1
    1882:	ae 0c       	add	r10, r14
    1884:	bf 1c       	adc	r11, r15
    1886:	c0 1e       	adc	r12, r16
    1888:	d1 1e       	adc	r13, r17
    188a:	a2 1a       	sub	r10, r18
    188c:	b3 0a       	sbc	r11, r19
    188e:	c4 0a       	sbc	r12, r20
    1890:	d5 0a       	sbc	r13, r21
    1892:	c6 01       	movw	r24, r12
    1894:	b5 01       	movw	r22, r10
    1896:	a4 01       	movw	r20, r8
    1898:	93 01       	movw	r18, r6
    189a:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
    189e:	7b 01       	movw	r14, r22
    18a0:	8c 01       	movw	r16, r24
    18a2:	c6 01       	movw	r24, r12
    18a4:	b5 01       	movw	r22, r10
    18a6:	a4 01       	movw	r20, r8
    18a8:	93 01       	movw	r18, r6
    18aa:	0e 94 8a 32 	call	0x6514	; 0x6514 <__udivmodsi4>
    18ae:	c9 01       	movw	r24, r18
    18b0:	da 01       	movw	r26, r20
    18b2:	3c 01       	movw	r6, r24
    18b4:	4d 01       	movw	r8, r26
    18b6:	c4 01       	movw	r24, r8
    18b8:	b3 01       	movw	r22, r6
    18ba:	2d 96       	adiw	r28, 0x0d	; 13
    18bc:	2c ad       	ldd	r18, Y+60	; 0x3c
    18be:	3d ad       	ldd	r19, Y+61	; 0x3d
    18c0:	4e ad       	ldd	r20, Y+62	; 0x3e
    18c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    18c4:	2d 97       	sbiw	r28, 0x0d	; 13
    18c6:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__mulsi3>
    18ca:	9b 01       	movw	r18, r22
    18cc:	ac 01       	movw	r20, r24
    18ce:	87 01       	movw	r16, r14
    18d0:	ff 24       	eor	r15, r15
    18d2:	ee 24       	eor	r14, r14
    18d4:	89 a1       	ldd	r24, Y+33	; 0x21
    18d6:	9a a1       	ldd	r25, Y+34	; 0x22
    18d8:	ab a1       	ldd	r26, Y+35	; 0x23
    18da:	bc a1       	ldd	r27, Y+36	; 0x24
    18dc:	a0 70       	andi	r26, 0x00	; 0
    18de:	b0 70       	andi	r27, 0x00	; 0
    18e0:	57 01       	movw	r10, r14
    18e2:	68 01       	movw	r12, r16
    18e4:	a8 2a       	or	r10, r24
    18e6:	b9 2a       	or	r11, r25
    18e8:	ca 2a       	or	r12, r26
    18ea:	db 2a       	or	r13, r27
    18ec:	a2 16       	cp	r10, r18
    18ee:	b3 06       	cpc	r11, r19
    18f0:	c4 06       	cpc	r12, r20
    18f2:	d5 06       	cpc	r13, r21
    18f4:	00 f5       	brcc	.+64     	; 0x1936 <__umoddi3+0xa64>
    18f6:	08 94       	sec
    18f8:	61 08       	sbc	r6, r1
    18fa:	71 08       	sbc	r7, r1
    18fc:	81 08       	sbc	r8, r1
    18fe:	91 08       	sbc	r9, r1
    1900:	69 a5       	ldd	r22, Y+41	; 0x29
    1902:	7a a5       	ldd	r23, Y+42	; 0x2a
    1904:	8b a5       	ldd	r24, Y+43	; 0x2b
    1906:	9c a5       	ldd	r25, Y+44	; 0x2c
    1908:	a6 0e       	add	r10, r22
    190a:	b7 1e       	adc	r11, r23
    190c:	c8 1e       	adc	r12, r24
    190e:	d9 1e       	adc	r13, r25
    1910:	a6 16       	cp	r10, r22
    1912:	b7 06       	cpc	r11, r23
    1914:	c8 06       	cpc	r12, r24
    1916:	d9 06       	cpc	r13, r25
    1918:	70 f0       	brcs	.+28     	; 0x1936 <__umoddi3+0xa64>
    191a:	a2 16       	cp	r10, r18
    191c:	b3 06       	cpc	r11, r19
    191e:	c4 06       	cpc	r12, r20
    1920:	d5 06       	cpc	r13, r21
    1922:	48 f4       	brcc	.+18     	; 0x1936 <__umoddi3+0xa64>
    1924:	08 94       	sec
    1926:	61 08       	sbc	r6, r1
    1928:	71 08       	sbc	r7, r1
    192a:	81 08       	sbc	r8, r1
    192c:	91 08       	sbc	r9, r1
    192e:	a6 0e       	add	r10, r22
    1930:	b7 1e       	adc	r11, r23
    1932:	c8 1e       	adc	r12, r24
    1934:	d9 1e       	adc	r13, r25
    1936:	d6 01       	movw	r26, r12
    1938:	c5 01       	movw	r24, r10
    193a:	82 1b       	sub	r24, r18
    193c:	93 0b       	sbc	r25, r19
    193e:	a4 0b       	sbc	r26, r20
    1940:	b5 0b       	sbc	r27, r21
    1942:	89 8f       	std	Y+25, r24	; 0x19
    1944:	9a 8f       	std	Y+26, r25	; 0x1a
    1946:	ab 8f       	std	Y+27, r26	; 0x1b
    1948:	bc 8f       	std	Y+28, r27	; 0x1c
    194a:	d1 01       	movw	r26, r2
    194c:	99 27       	eor	r25, r25
    194e:	88 27       	eor	r24, r24
    1950:	84 01       	movw	r16, r8
    1952:	73 01       	movw	r14, r6
    1954:	e8 2a       	or	r14, r24
    1956:	f9 2a       	or	r15, r25
    1958:	0a 2b       	or	r16, r26
    195a:	1b 2b       	or	r17, r27
    195c:	4f ef       	ldi	r20, 0xFF	; 255
    195e:	a4 2e       	mov	r10, r20
    1960:	4f ef       	ldi	r20, 0xFF	; 255
    1962:	b4 2e       	mov	r11, r20
    1964:	c1 2c       	mov	r12, r1
    1966:	d1 2c       	mov	r13, r1
    1968:	ae 20       	and	r10, r14
    196a:	bf 20       	and	r11, r15
    196c:	c0 22       	and	r12, r16
    196e:	d1 22       	and	r13, r17
    1970:	78 01       	movw	r14, r16
    1972:	00 27       	eor	r16, r16
    1974:	11 27       	eor	r17, r17
    1976:	6d a0       	ldd	r6, Y+37	; 0x25
    1978:	7e a0       	ldd	r7, Y+38	; 0x26
    197a:	8f a0       	ldd	r8, Y+39	; 0x27
    197c:	98 a4       	ldd	r9, Y+40	; 0x28
    197e:	4f ef       	ldi	r20, 0xFF	; 255
    1980:	5f ef       	ldi	r21, 0xFF	; 255
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	64 22       	and	r6, r20
    1988:	75 22       	and	r7, r21
    198a:	86 22       	and	r8, r22
    198c:	97 22       	and	r9, r23
    198e:	8d a1       	ldd	r24, Y+37	; 0x25
    1990:	9e a1       	ldd	r25, Y+38	; 0x26
    1992:	af a1       	ldd	r26, Y+39	; 0x27
    1994:	b8 a5       	ldd	r27, Y+40	; 0x28
    1996:	bd 01       	movw	r22, r26
    1998:	88 27       	eor	r24, r24
    199a:	99 27       	eor	r25, r25
    199c:	65 96       	adiw	r28, 0x15	; 21
    199e:	6c af       	std	Y+60, r22	; 0x3c
    19a0:	7d af       	std	Y+61, r23	; 0x3d
    19a2:	8e af       	std	Y+62, r24	; 0x3e
    19a4:	9f af       	std	Y+63, r25	; 0x3f
    19a6:	65 97       	sbiw	r28, 0x15	; 21
    19a8:	c6 01       	movw	r24, r12
    19aa:	b5 01       	movw	r22, r10
    19ac:	a4 01       	movw	r20, r8
    19ae:	93 01       	movw	r18, r6
    19b0:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__mulsi3>
    19b4:	61 96       	adiw	r28, 0x11	; 17
    19b6:	6c af       	std	Y+60, r22	; 0x3c
    19b8:	7d af       	std	Y+61, r23	; 0x3d
    19ba:	8e af       	std	Y+62, r24	; 0x3e
    19bc:	9f af       	std	Y+63, r25	; 0x3f
    19be:	61 97       	sbiw	r28, 0x11	; 17
    19c0:	c6 01       	movw	r24, r12
    19c2:	b5 01       	movw	r22, r10
    19c4:	65 96       	adiw	r28, 0x15	; 21
    19c6:	2c ad       	ldd	r18, Y+60	; 0x3c
    19c8:	3d ad       	ldd	r19, Y+61	; 0x3d
    19ca:	4e ad       	ldd	r20, Y+62	; 0x3e
    19cc:	5f ad       	ldd	r21, Y+63	; 0x3f
    19ce:	65 97       	sbiw	r28, 0x15	; 21
    19d0:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__mulsi3>
    19d4:	1b 01       	movw	r2, r22
    19d6:	2c 01       	movw	r4, r24
    19d8:	c8 01       	movw	r24, r16
    19da:	b7 01       	movw	r22, r14
    19dc:	a4 01       	movw	r20, r8
    19de:	93 01       	movw	r18, r6
    19e0:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__mulsi3>
    19e4:	5b 01       	movw	r10, r22
    19e6:	6c 01       	movw	r12, r24
    19e8:	c8 01       	movw	r24, r16
    19ea:	b7 01       	movw	r22, r14
    19ec:	65 96       	adiw	r28, 0x15	; 21
    19ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    19f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    19f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    19f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    19f6:	65 97       	sbiw	r28, 0x15	; 21
    19f8:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__mulsi3>
    19fc:	7b 01       	movw	r14, r22
    19fe:	8c 01       	movw	r16, r24
    1a00:	a6 01       	movw	r20, r12
    1a02:	95 01       	movw	r18, r10
    1a04:	22 0d       	add	r18, r2
    1a06:	33 1d       	adc	r19, r3
    1a08:	44 1d       	adc	r20, r4
    1a0a:	55 1d       	adc	r21, r5
    1a0c:	61 96       	adiw	r28, 0x11	; 17
    1a0e:	6c ac       	ldd	r6, Y+60	; 0x3c
    1a10:	7d ac       	ldd	r7, Y+61	; 0x3d
    1a12:	8e ac       	ldd	r8, Y+62	; 0x3e
    1a14:	9f ac       	ldd	r9, Y+63	; 0x3f
    1a16:	61 97       	sbiw	r28, 0x11	; 17
    1a18:	c4 01       	movw	r24, r8
    1a1a:	aa 27       	eor	r26, r26
    1a1c:	bb 27       	eor	r27, r27
    1a1e:	28 0f       	add	r18, r24
    1a20:	39 1f       	adc	r19, r25
    1a22:	4a 1f       	adc	r20, r26
    1a24:	5b 1f       	adc	r21, r27
    1a26:	2a 15       	cp	r18, r10
    1a28:	3b 05       	cpc	r19, r11
    1a2a:	4c 05       	cpc	r20, r12
    1a2c:	5d 05       	cpc	r21, r13
    1a2e:	48 f4       	brcc	.+18     	; 0x1a42 <__umoddi3+0xb70>
    1a30:	81 2c       	mov	r8, r1
    1a32:	91 2c       	mov	r9, r1
    1a34:	e1 e0       	ldi	r30, 0x01	; 1
    1a36:	ae 2e       	mov	r10, r30
    1a38:	b1 2c       	mov	r11, r1
    1a3a:	e8 0c       	add	r14, r8
    1a3c:	f9 1c       	adc	r15, r9
    1a3e:	0a 1d       	adc	r16, r10
    1a40:	1b 1d       	adc	r17, r11
    1a42:	ca 01       	movw	r24, r20
    1a44:	aa 27       	eor	r26, r26
    1a46:	bb 27       	eor	r27, r27
    1a48:	57 01       	movw	r10, r14
    1a4a:	68 01       	movw	r12, r16
    1a4c:	a8 0e       	add	r10, r24
    1a4e:	b9 1e       	adc	r11, r25
    1a50:	ca 1e       	adc	r12, r26
    1a52:	db 1e       	adc	r13, r27
    1a54:	a9 01       	movw	r20, r18
    1a56:	33 27       	eor	r19, r19
    1a58:	22 27       	eor	r18, r18
    1a5a:	61 96       	adiw	r28, 0x11	; 17
    1a5c:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a5e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a60:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a62:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a64:	61 97       	sbiw	r28, 0x11	; 17
    1a66:	a0 70       	andi	r26, 0x00	; 0
    1a68:	b0 70       	andi	r27, 0x00	; 0
    1a6a:	28 0f       	add	r18, r24
    1a6c:	39 1f       	adc	r19, r25
    1a6e:	4a 1f       	adc	r20, r26
    1a70:	5b 1f       	adc	r21, r27
    1a72:	e9 8c       	ldd	r14, Y+25	; 0x19
    1a74:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1a76:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1a78:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1a7a:	ea 14       	cp	r14, r10
    1a7c:	fb 04       	cpc	r15, r11
    1a7e:	0c 05       	cpc	r16, r12
    1a80:	1d 05       	cpc	r17, r13
    1a82:	70 f0       	brcs	.+28     	; 0x1aa0 <__umoddi3+0xbce>
    1a84:	ae 14       	cp	r10, r14
    1a86:	bf 04       	cpc	r11, r15
    1a88:	c0 06       	cpc	r12, r16
    1a8a:	d1 06       	cpc	r13, r17
    1a8c:	69 f5       	brne	.+90     	; 0x1ae8 <__umoddi3+0xc16>
    1a8e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a90:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1a92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a94:	98 a1       	ldd	r25, Y+32	; 0x20
    1a96:	62 17       	cp	r22, r18
    1a98:	73 07       	cpc	r23, r19
    1a9a:	84 07       	cpc	r24, r20
    1a9c:	95 07       	cpc	r25, r21
    1a9e:	20 f5       	brcc	.+72     	; 0x1ae8 <__umoddi3+0xc16>
    1aa0:	da 01       	movw	r26, r20
    1aa2:	c9 01       	movw	r24, r18
    1aa4:	6d a0       	ldd	r6, Y+37	; 0x25
    1aa6:	7e a0       	ldd	r7, Y+38	; 0x26
    1aa8:	8f a0       	ldd	r8, Y+39	; 0x27
    1aaa:	98 a4       	ldd	r9, Y+40	; 0x28
    1aac:	86 19       	sub	r24, r6
    1aae:	97 09       	sbc	r25, r7
    1ab0:	a8 09       	sbc	r26, r8
    1ab2:	b9 09       	sbc	r27, r9
    1ab4:	e9 a4       	ldd	r14, Y+41	; 0x29
    1ab6:	fa a4       	ldd	r15, Y+42	; 0x2a
    1ab8:	0b a5       	ldd	r16, Y+43	; 0x2b
    1aba:	1c a5       	ldd	r17, Y+44	; 0x2c
    1abc:	ae 18       	sub	r10, r14
    1abe:	bf 08       	sbc	r11, r15
    1ac0:	c0 0a       	sbc	r12, r16
    1ac2:	d1 0a       	sbc	r13, r17
    1ac4:	ee 24       	eor	r14, r14
    1ac6:	ff 24       	eor	r15, r15
    1ac8:	87 01       	movw	r16, r14
    1aca:	28 17       	cp	r18, r24
    1acc:	39 07       	cpc	r19, r25
    1ace:	4a 07       	cpc	r20, r26
    1ad0:	5b 07       	cpc	r21, r27
    1ad2:	28 f4       	brcc	.+10     	; 0x1ade <__umoddi3+0xc0c>
    1ad4:	21 e0       	ldi	r18, 0x01	; 1
    1ad6:	e2 2e       	mov	r14, r18
    1ad8:	f1 2c       	mov	r15, r1
    1ada:	01 2d       	mov	r16, r1
    1adc:	11 2d       	mov	r17, r1
    1ade:	ae 18       	sub	r10, r14
    1ae0:	bf 08       	sbc	r11, r15
    1ae2:	c0 0a       	sbc	r12, r16
    1ae4:	d1 0a       	sbc	r13, r17
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <__umoddi3+0xc1a>
    1ae8:	da 01       	movw	r26, r20
    1aea:	c9 01       	movw	r24, r18
    1aec:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1aee:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1af0:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1af2:	98 a0       	ldd	r9, Y+32	; 0x20
    1af4:	68 1a       	sub	r6, r24
    1af6:	79 0a       	sbc	r7, r25
    1af8:	8a 0a       	sbc	r8, r26
    1afa:	9b 0a       	sbc	r9, r27
    1afc:	49 8d       	ldd	r20, Y+25	; 0x19
    1afe:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1b00:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1b02:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1b04:	4a 19       	sub	r20, r10
    1b06:	5b 09       	sbc	r21, r11
    1b08:	6c 09       	sbc	r22, r12
    1b0a:	7d 09       	sbc	r23, r13
    1b0c:	5a 01       	movw	r10, r20
    1b0e:	6b 01       	movw	r12, r22
    1b10:	22 24       	eor	r2, r2
    1b12:	33 24       	eor	r3, r3
    1b14:	21 01       	movw	r4, r2
    1b16:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b18:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1b1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b1c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b1e:	66 15       	cp	r22, r6
    1b20:	77 05       	cpc	r23, r7
    1b22:	88 05       	cpc	r24, r8
    1b24:	99 05       	cpc	r25, r9
    1b26:	28 f4       	brcc	.+10     	; 0x1b32 <__umoddi3+0xc60>
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	28 2e       	mov	r2, r24
    1b2c:	31 2c       	mov	r3, r1
    1b2e:	41 2c       	mov	r4, r1
    1b30:	51 2c       	mov	r5, r1
    1b32:	86 01       	movw	r16, r12
    1b34:	75 01       	movw	r14, r10
    1b36:	e2 18       	sub	r14, r2
    1b38:	f3 08       	sbc	r15, r3
    1b3a:	04 09       	sbc	r16, r4
    1b3c:	15 09       	sbc	r17, r5
    1b3e:	a8 01       	movw	r20, r16
    1b40:	97 01       	movw	r18, r14
    1b42:	66 96       	adiw	r28, 0x16	; 22
    1b44:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b46:	66 97       	sbiw	r28, 0x16	; 22
    1b48:	04 c0       	rjmp	.+8      	; 0x1b52 <__umoddi3+0xc80>
    1b4a:	22 0f       	add	r18, r18
    1b4c:	33 1f       	adc	r19, r19
    1b4e:	44 1f       	adc	r20, r20
    1b50:	55 1f       	adc	r21, r21
    1b52:	0a 94       	dec	r0
    1b54:	d2 f7       	brpl	.-12     	; 0x1b4a <__umoddi3+0xc78>
    1b56:	d4 01       	movw	r26, r8
    1b58:	c3 01       	movw	r24, r6
    1b5a:	67 96       	adiw	r28, 0x17	; 23
    1b5c:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b5e:	67 97       	sbiw	r28, 0x17	; 23
    1b60:	04 c0       	rjmp	.+8      	; 0x1b6a <__umoddi3+0xc98>
    1b62:	b6 95       	lsr	r27
    1b64:	a7 95       	ror	r26
    1b66:	97 95       	ror	r25
    1b68:	87 95       	ror	r24
    1b6a:	0a 94       	dec	r0
    1b6c:	d2 f7       	brpl	.-12     	; 0x1b62 <__umoddi3+0xc90>
    1b6e:	28 2b       	or	r18, r24
    1b70:	39 2b       	or	r19, r25
    1b72:	4a 2b       	or	r20, r26
    1b74:	5b 2b       	or	r21, r27
    1b76:	29 8b       	std	Y+17, r18	; 0x11
    1b78:	3a 8b       	std	Y+18, r19	; 0x12
    1b7a:	4b 8b       	std	Y+19, r20	; 0x13
    1b7c:	5c 8b       	std	Y+20, r21	; 0x14
    1b7e:	67 96       	adiw	r28, 0x17	; 23
    1b80:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b82:	67 97       	sbiw	r28, 0x17	; 23
    1b84:	04 c0       	rjmp	.+8      	; 0x1b8e <__umoddi3+0xcbc>
    1b86:	16 95       	lsr	r17
    1b88:	07 95       	ror	r16
    1b8a:	f7 94       	ror	r15
    1b8c:	e7 94       	ror	r14
    1b8e:	0a 94       	dec	r0
    1b90:	d2 f7       	brpl	.-12     	; 0x1b86 <__umoddi3+0xcb4>
    1b92:	ed 8a       	std	Y+21, r14	; 0x15
    1b94:	fe 8a       	std	Y+22, r15	; 0x16
    1b96:	0f 8b       	std	Y+23, r16	; 0x17
    1b98:	18 8f       	std	Y+24, r17	; 0x18
    1b9a:	3a 89       	ldd	r19, Y+18	; 0x12
    1b9c:	4b 89       	ldd	r20, Y+19	; 0x13
    1b9e:	5c 89       	ldd	r21, Y+20	; 0x14
    1ba0:	6e 2d       	mov	r22, r14
    1ba2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba8:	c5 5a       	subi	r28, 0xA5	; 165
    1baa:	df 4f       	sbci	r29, 0xFF	; 255
    1bac:	e2 e1       	ldi	r30, 0x12	; 18
    1bae:	0c 94 c8 32 	jmp	0x6590	; 0x6590 <__epilogue_restores__>

00001bb2 <_fpadd_parts>:
    1bb2:	a0 e0       	ldi	r26, 0x00	; 0
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	ef ed       	ldi	r30, 0xDF	; 223
    1bb8:	fd e0       	ldi	r31, 0x0D	; 13
    1bba:	0c 94 ac 32 	jmp	0x6558	; 0x6558 <__prologue_saves__>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	2b 01       	movw	r4, r22
    1bc2:	fa 01       	movw	r30, r20
    1bc4:	9c 91       	ld	r25, X
    1bc6:	92 30       	cpi	r25, 0x02	; 2
    1bc8:	08 f4       	brcc	.+2      	; 0x1bcc <_fpadd_parts+0x1a>
    1bca:	39 c1       	rjmp	.+626    	; 0x1e3e <_fpadd_parts+0x28c>
    1bcc:	eb 01       	movw	r28, r22
    1bce:	88 81       	ld	r24, Y
    1bd0:	82 30       	cpi	r24, 0x02	; 2
    1bd2:	08 f4       	brcc	.+2      	; 0x1bd6 <_fpadd_parts+0x24>
    1bd4:	33 c1       	rjmp	.+614    	; 0x1e3c <_fpadd_parts+0x28a>
    1bd6:	94 30       	cpi	r25, 0x04	; 4
    1bd8:	69 f4       	brne	.+26     	; 0x1bf4 <_fpadd_parts+0x42>
    1bda:	84 30       	cpi	r24, 0x04	; 4
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <_fpadd_parts+0x2e>
    1bde:	2f c1       	rjmp	.+606    	; 0x1e3e <_fpadd_parts+0x28c>
    1be0:	11 96       	adiw	r26, 0x01	; 1
    1be2:	9c 91       	ld	r25, X
    1be4:	11 97       	sbiw	r26, 0x01	; 1
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	98 17       	cp	r25, r24
    1bea:	09 f4       	brne	.+2      	; 0x1bee <_fpadd_parts+0x3c>
    1bec:	28 c1       	rjmp	.+592    	; 0x1e3e <_fpadd_parts+0x28c>
    1bee:	a0 e6       	ldi	r26, 0x60	; 96
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	25 c1       	rjmp	.+586    	; 0x1e3e <_fpadd_parts+0x28c>
    1bf4:	84 30       	cpi	r24, 0x04	; 4
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <_fpadd_parts+0x48>
    1bf8:	21 c1       	rjmp	.+578    	; 0x1e3c <_fpadd_parts+0x28a>
    1bfa:	82 30       	cpi	r24, 0x02	; 2
    1bfc:	a9 f4       	brne	.+42     	; 0x1c28 <_fpadd_parts+0x76>
    1bfe:	92 30       	cpi	r25, 0x02	; 2
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <_fpadd_parts+0x52>
    1c02:	1d c1       	rjmp	.+570    	; 0x1e3e <_fpadd_parts+0x28c>
    1c04:	9a 01       	movw	r18, r20
    1c06:	ad 01       	movw	r20, r26
    1c08:	88 e0       	ldi	r24, 0x08	; 8
    1c0a:	ea 01       	movw	r28, r20
    1c0c:	09 90       	ld	r0, Y+
    1c0e:	ae 01       	movw	r20, r28
    1c10:	e9 01       	movw	r28, r18
    1c12:	09 92       	st	Y+, r0
    1c14:	9e 01       	movw	r18, r28
    1c16:	81 50       	subi	r24, 0x01	; 1
    1c18:	c1 f7       	brne	.-16     	; 0x1c0a <_fpadd_parts+0x58>
    1c1a:	e2 01       	movw	r28, r4
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	11 96       	adiw	r26, 0x01	; 1
    1c20:	9c 91       	ld	r25, X
    1c22:	89 23       	and	r24, r25
    1c24:	81 83       	std	Z+1, r24	; 0x01
    1c26:	08 c1       	rjmp	.+528    	; 0x1e38 <_fpadd_parts+0x286>
    1c28:	92 30       	cpi	r25, 0x02	; 2
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <_fpadd_parts+0x7c>
    1c2c:	07 c1       	rjmp	.+526    	; 0x1e3c <_fpadd_parts+0x28a>
    1c2e:	12 96       	adiw	r26, 0x02	; 2
    1c30:	2d 90       	ld	r2, X+
    1c32:	3c 90       	ld	r3, X
    1c34:	13 97       	sbiw	r26, 0x03	; 3
    1c36:	eb 01       	movw	r28, r22
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3c:	14 96       	adiw	r26, 0x04	; 4
    1c3e:	ad 90       	ld	r10, X+
    1c40:	bd 90       	ld	r11, X+
    1c42:	cd 90       	ld	r12, X+
    1c44:	dc 90       	ld	r13, X
    1c46:	17 97       	sbiw	r26, 0x07	; 7
    1c48:	ec 80       	ldd	r14, Y+4	; 0x04
    1c4a:	fd 80       	ldd	r15, Y+5	; 0x05
    1c4c:	0e 81       	ldd	r16, Y+6	; 0x06
    1c4e:	1f 81       	ldd	r17, Y+7	; 0x07
    1c50:	91 01       	movw	r18, r2
    1c52:	28 1b       	sub	r18, r24
    1c54:	39 0b       	sbc	r19, r25
    1c56:	b9 01       	movw	r22, r18
    1c58:	37 ff       	sbrs	r19, 7
    1c5a:	04 c0       	rjmp	.+8      	; 0x1c64 <_fpadd_parts+0xb2>
    1c5c:	66 27       	eor	r22, r22
    1c5e:	77 27       	eor	r23, r23
    1c60:	62 1b       	sub	r22, r18
    1c62:	73 0b       	sbc	r23, r19
    1c64:	60 32       	cpi	r22, 0x20	; 32
    1c66:	71 05       	cpc	r23, r1
    1c68:	0c f0       	brlt	.+2      	; 0x1c6c <_fpadd_parts+0xba>
    1c6a:	61 c0       	rjmp	.+194    	; 0x1d2e <_fpadd_parts+0x17c>
    1c6c:	12 16       	cp	r1, r18
    1c6e:	13 06       	cpc	r1, r19
    1c70:	6c f5       	brge	.+90     	; 0x1ccc <_fpadd_parts+0x11a>
    1c72:	37 01       	movw	r6, r14
    1c74:	48 01       	movw	r8, r16
    1c76:	06 2e       	mov	r0, r22
    1c78:	04 c0       	rjmp	.+8      	; 0x1c82 <_fpadd_parts+0xd0>
    1c7a:	96 94       	lsr	r9
    1c7c:	87 94       	ror	r8
    1c7e:	77 94       	ror	r7
    1c80:	67 94       	ror	r6
    1c82:	0a 94       	dec	r0
    1c84:	d2 f7       	brpl	.-12     	; 0x1c7a <_fpadd_parts+0xc8>
    1c86:	21 e0       	ldi	r18, 0x01	; 1
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e0       	ldi	r20, 0x00	; 0
    1c8c:	50 e0       	ldi	r21, 0x00	; 0
    1c8e:	04 c0       	rjmp	.+8      	; 0x1c98 <_fpadd_parts+0xe6>
    1c90:	22 0f       	add	r18, r18
    1c92:	33 1f       	adc	r19, r19
    1c94:	44 1f       	adc	r20, r20
    1c96:	55 1f       	adc	r21, r21
    1c98:	6a 95       	dec	r22
    1c9a:	d2 f7       	brpl	.-12     	; 0x1c90 <_fpadd_parts+0xde>
    1c9c:	21 50       	subi	r18, 0x01	; 1
    1c9e:	30 40       	sbci	r19, 0x00	; 0
    1ca0:	40 40       	sbci	r20, 0x00	; 0
    1ca2:	50 40       	sbci	r21, 0x00	; 0
    1ca4:	2e 21       	and	r18, r14
    1ca6:	3f 21       	and	r19, r15
    1ca8:	40 23       	and	r20, r16
    1caa:	51 23       	and	r21, r17
    1cac:	21 15       	cp	r18, r1
    1cae:	31 05       	cpc	r19, r1
    1cb0:	41 05       	cpc	r20, r1
    1cb2:	51 05       	cpc	r21, r1
    1cb4:	21 f0       	breq	.+8      	; 0x1cbe <_fpadd_parts+0x10c>
    1cb6:	21 e0       	ldi	r18, 0x01	; 1
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	50 e0       	ldi	r21, 0x00	; 0
    1cbe:	79 01       	movw	r14, r18
    1cc0:	8a 01       	movw	r16, r20
    1cc2:	e6 28       	or	r14, r6
    1cc4:	f7 28       	or	r15, r7
    1cc6:	08 29       	or	r16, r8
    1cc8:	19 29       	or	r17, r9
    1cca:	3c c0       	rjmp	.+120    	; 0x1d44 <_fpadd_parts+0x192>
    1ccc:	23 2b       	or	r18, r19
    1cce:	d1 f1       	breq	.+116    	; 0x1d44 <_fpadd_parts+0x192>
    1cd0:	26 0e       	add	r2, r22
    1cd2:	37 1e       	adc	r3, r23
    1cd4:	35 01       	movw	r6, r10
    1cd6:	46 01       	movw	r8, r12
    1cd8:	06 2e       	mov	r0, r22
    1cda:	04 c0       	rjmp	.+8      	; 0x1ce4 <_fpadd_parts+0x132>
    1cdc:	96 94       	lsr	r9
    1cde:	87 94       	ror	r8
    1ce0:	77 94       	ror	r7
    1ce2:	67 94       	ror	r6
    1ce4:	0a 94       	dec	r0
    1ce6:	d2 f7       	brpl	.-12     	; 0x1cdc <_fpadd_parts+0x12a>
    1ce8:	21 e0       	ldi	r18, 0x01	; 1
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e0       	ldi	r20, 0x00	; 0
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	04 c0       	rjmp	.+8      	; 0x1cfa <_fpadd_parts+0x148>
    1cf2:	22 0f       	add	r18, r18
    1cf4:	33 1f       	adc	r19, r19
    1cf6:	44 1f       	adc	r20, r20
    1cf8:	55 1f       	adc	r21, r21
    1cfa:	6a 95       	dec	r22
    1cfc:	d2 f7       	brpl	.-12     	; 0x1cf2 <_fpadd_parts+0x140>
    1cfe:	21 50       	subi	r18, 0x01	; 1
    1d00:	30 40       	sbci	r19, 0x00	; 0
    1d02:	40 40       	sbci	r20, 0x00	; 0
    1d04:	50 40       	sbci	r21, 0x00	; 0
    1d06:	2a 21       	and	r18, r10
    1d08:	3b 21       	and	r19, r11
    1d0a:	4c 21       	and	r20, r12
    1d0c:	5d 21       	and	r21, r13
    1d0e:	21 15       	cp	r18, r1
    1d10:	31 05       	cpc	r19, r1
    1d12:	41 05       	cpc	r20, r1
    1d14:	51 05       	cpc	r21, r1
    1d16:	21 f0       	breq	.+8      	; 0x1d20 <_fpadd_parts+0x16e>
    1d18:	21 e0       	ldi	r18, 0x01	; 1
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e0       	ldi	r20, 0x00	; 0
    1d1e:	50 e0       	ldi	r21, 0x00	; 0
    1d20:	59 01       	movw	r10, r18
    1d22:	6a 01       	movw	r12, r20
    1d24:	a6 28       	or	r10, r6
    1d26:	b7 28       	or	r11, r7
    1d28:	c8 28       	or	r12, r8
    1d2a:	d9 28       	or	r13, r9
    1d2c:	0b c0       	rjmp	.+22     	; 0x1d44 <_fpadd_parts+0x192>
    1d2e:	82 15       	cp	r24, r2
    1d30:	93 05       	cpc	r25, r3
    1d32:	2c f0       	brlt	.+10     	; 0x1d3e <_fpadd_parts+0x18c>
    1d34:	1c 01       	movw	r2, r24
    1d36:	aa 24       	eor	r10, r10
    1d38:	bb 24       	eor	r11, r11
    1d3a:	65 01       	movw	r12, r10
    1d3c:	03 c0       	rjmp	.+6      	; 0x1d44 <_fpadd_parts+0x192>
    1d3e:	ee 24       	eor	r14, r14
    1d40:	ff 24       	eor	r15, r15
    1d42:	87 01       	movw	r16, r14
    1d44:	11 96       	adiw	r26, 0x01	; 1
    1d46:	9c 91       	ld	r25, X
    1d48:	d2 01       	movw	r26, r4
    1d4a:	11 96       	adiw	r26, 0x01	; 1
    1d4c:	8c 91       	ld	r24, X
    1d4e:	98 17       	cp	r25, r24
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <_fpadd_parts+0x1a2>
    1d52:	45 c0       	rjmp	.+138    	; 0x1dde <_fpadd_parts+0x22c>
    1d54:	99 23       	and	r25, r25
    1d56:	39 f0       	breq	.+14     	; 0x1d66 <_fpadd_parts+0x1b4>
    1d58:	a8 01       	movw	r20, r16
    1d5a:	97 01       	movw	r18, r14
    1d5c:	2a 19       	sub	r18, r10
    1d5e:	3b 09       	sbc	r19, r11
    1d60:	4c 09       	sbc	r20, r12
    1d62:	5d 09       	sbc	r21, r13
    1d64:	06 c0       	rjmp	.+12     	; 0x1d72 <_fpadd_parts+0x1c0>
    1d66:	a6 01       	movw	r20, r12
    1d68:	95 01       	movw	r18, r10
    1d6a:	2e 19       	sub	r18, r14
    1d6c:	3f 09       	sbc	r19, r15
    1d6e:	40 0b       	sbc	r20, r16
    1d70:	51 0b       	sbc	r21, r17
    1d72:	57 fd       	sbrc	r21, 7
    1d74:	08 c0       	rjmp	.+16     	; 0x1d86 <_fpadd_parts+0x1d4>
    1d76:	11 82       	std	Z+1, r1	; 0x01
    1d78:	33 82       	std	Z+3, r3	; 0x03
    1d7a:	22 82       	std	Z+2, r2	; 0x02
    1d7c:	24 83       	std	Z+4, r18	; 0x04
    1d7e:	35 83       	std	Z+5, r19	; 0x05
    1d80:	46 83       	std	Z+6, r20	; 0x06
    1d82:	57 83       	std	Z+7, r21	; 0x07
    1d84:	1d c0       	rjmp	.+58     	; 0x1dc0 <_fpadd_parts+0x20e>
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	81 83       	std	Z+1, r24	; 0x01
    1d8a:	33 82       	std	Z+3, r3	; 0x03
    1d8c:	22 82       	std	Z+2, r2	; 0x02
    1d8e:	88 27       	eor	r24, r24
    1d90:	99 27       	eor	r25, r25
    1d92:	dc 01       	movw	r26, r24
    1d94:	82 1b       	sub	r24, r18
    1d96:	93 0b       	sbc	r25, r19
    1d98:	a4 0b       	sbc	r26, r20
    1d9a:	b5 0b       	sbc	r27, r21
    1d9c:	84 83       	std	Z+4, r24	; 0x04
    1d9e:	95 83       	std	Z+5, r25	; 0x05
    1da0:	a6 83       	std	Z+6, r26	; 0x06
    1da2:	b7 83       	std	Z+7, r27	; 0x07
    1da4:	0d c0       	rjmp	.+26     	; 0x1dc0 <_fpadd_parts+0x20e>
    1da6:	22 0f       	add	r18, r18
    1da8:	33 1f       	adc	r19, r19
    1daa:	44 1f       	adc	r20, r20
    1dac:	55 1f       	adc	r21, r21
    1dae:	24 83       	std	Z+4, r18	; 0x04
    1db0:	35 83       	std	Z+5, r19	; 0x05
    1db2:	46 83       	std	Z+6, r20	; 0x06
    1db4:	57 83       	std	Z+7, r21	; 0x07
    1db6:	82 81       	ldd	r24, Z+2	; 0x02
    1db8:	93 81       	ldd	r25, Z+3	; 0x03
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	93 83       	std	Z+3, r25	; 0x03
    1dbe:	82 83       	std	Z+2, r24	; 0x02
    1dc0:	24 81       	ldd	r18, Z+4	; 0x04
    1dc2:	35 81       	ldd	r19, Z+5	; 0x05
    1dc4:	46 81       	ldd	r20, Z+6	; 0x06
    1dc6:	57 81       	ldd	r21, Z+7	; 0x07
    1dc8:	da 01       	movw	r26, r20
    1dca:	c9 01       	movw	r24, r18
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	a1 09       	sbc	r26, r1
    1dd0:	b1 09       	sbc	r27, r1
    1dd2:	8f 5f       	subi	r24, 0xFF	; 255
    1dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd6:	af 4f       	sbci	r26, 0xFF	; 255
    1dd8:	bf 43       	sbci	r27, 0x3F	; 63
    1dda:	28 f3       	brcs	.-54     	; 0x1da6 <_fpadd_parts+0x1f4>
    1ddc:	0b c0       	rjmp	.+22     	; 0x1df4 <_fpadd_parts+0x242>
    1dde:	91 83       	std	Z+1, r25	; 0x01
    1de0:	33 82       	std	Z+3, r3	; 0x03
    1de2:	22 82       	std	Z+2, r2	; 0x02
    1de4:	ea 0c       	add	r14, r10
    1de6:	fb 1c       	adc	r15, r11
    1de8:	0c 1d       	adc	r16, r12
    1dea:	1d 1d       	adc	r17, r13
    1dec:	e4 82       	std	Z+4, r14	; 0x04
    1dee:	f5 82       	std	Z+5, r15	; 0x05
    1df0:	06 83       	std	Z+6, r16	; 0x06
    1df2:	17 83       	std	Z+7, r17	; 0x07
    1df4:	83 e0       	ldi	r24, 0x03	; 3
    1df6:	80 83       	st	Z, r24
    1df8:	24 81       	ldd	r18, Z+4	; 0x04
    1dfa:	35 81       	ldd	r19, Z+5	; 0x05
    1dfc:	46 81       	ldd	r20, Z+6	; 0x06
    1dfe:	57 81       	ldd	r21, Z+7	; 0x07
    1e00:	57 ff       	sbrs	r21, 7
    1e02:	1a c0       	rjmp	.+52     	; 0x1e38 <_fpadd_parts+0x286>
    1e04:	c9 01       	movw	r24, r18
    1e06:	aa 27       	eor	r26, r26
    1e08:	97 fd       	sbrc	r25, 7
    1e0a:	a0 95       	com	r26
    1e0c:	ba 2f       	mov	r27, r26
    1e0e:	81 70       	andi	r24, 0x01	; 1
    1e10:	90 70       	andi	r25, 0x00	; 0
    1e12:	a0 70       	andi	r26, 0x00	; 0
    1e14:	b0 70       	andi	r27, 0x00	; 0
    1e16:	56 95       	lsr	r21
    1e18:	47 95       	ror	r20
    1e1a:	37 95       	ror	r19
    1e1c:	27 95       	ror	r18
    1e1e:	82 2b       	or	r24, r18
    1e20:	93 2b       	or	r25, r19
    1e22:	a4 2b       	or	r26, r20
    1e24:	b5 2b       	or	r27, r21
    1e26:	84 83       	std	Z+4, r24	; 0x04
    1e28:	95 83       	std	Z+5, r25	; 0x05
    1e2a:	a6 83       	std	Z+6, r26	; 0x06
    1e2c:	b7 83       	std	Z+7, r27	; 0x07
    1e2e:	82 81       	ldd	r24, Z+2	; 0x02
    1e30:	93 81       	ldd	r25, Z+3	; 0x03
    1e32:	01 96       	adiw	r24, 0x01	; 1
    1e34:	93 83       	std	Z+3, r25	; 0x03
    1e36:	82 83       	std	Z+2, r24	; 0x02
    1e38:	df 01       	movw	r26, r30
    1e3a:	01 c0       	rjmp	.+2      	; 0x1e3e <_fpadd_parts+0x28c>
    1e3c:	d2 01       	movw	r26, r4
    1e3e:	cd 01       	movw	r24, r26
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	e2 e1       	ldi	r30, 0x12	; 18
    1e46:	0c 94 c8 32 	jmp	0x6590	; 0x6590 <__epilogue_restores__>

00001e4a <__subsf3>:
    1e4a:	a0 e2       	ldi	r26, 0x20	; 32
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	eb e2       	ldi	r30, 0x2B	; 43
    1e50:	ff e0       	ldi	r31, 0x0F	; 15
    1e52:	0c 94 b8 32 	jmp	0x6570	; 0x6570 <__prologue_saves__+0x18>
    1e56:	69 83       	std	Y+1, r22	; 0x01
    1e58:	7a 83       	std	Y+2, r23	; 0x02
    1e5a:	8b 83       	std	Y+3, r24	; 0x03
    1e5c:	9c 83       	std	Y+4, r25	; 0x04
    1e5e:	2d 83       	std	Y+5, r18	; 0x05
    1e60:	3e 83       	std	Y+6, r19	; 0x06
    1e62:	4f 83       	std	Y+7, r20	; 0x07
    1e64:	58 87       	std	Y+8, r21	; 0x08
    1e66:	e9 e0       	ldi	r30, 0x09	; 9
    1e68:	ee 2e       	mov	r14, r30
    1e6a:	f1 2c       	mov	r15, r1
    1e6c:	ec 0e       	add	r14, r28
    1e6e:	fd 1e       	adc	r15, r29
    1e70:	ce 01       	movw	r24, r28
    1e72:	01 96       	adiw	r24, 0x01	; 1
    1e74:	b7 01       	movw	r22, r14
    1e76:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1e7a:	8e 01       	movw	r16, r28
    1e7c:	0f 5e       	subi	r16, 0xEF	; 239
    1e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e80:	ce 01       	movw	r24, r28
    1e82:	05 96       	adiw	r24, 0x05	; 5
    1e84:	b8 01       	movw	r22, r16
    1e86:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1e8a:	8a 89       	ldd	r24, Y+18	; 0x12
    1e8c:	91 e0       	ldi	r25, 0x01	; 1
    1e8e:	89 27       	eor	r24, r25
    1e90:	8a 8b       	std	Y+18, r24	; 0x12
    1e92:	c7 01       	movw	r24, r14
    1e94:	b8 01       	movw	r22, r16
    1e96:	ae 01       	movw	r20, r28
    1e98:	47 5e       	subi	r20, 0xE7	; 231
    1e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e9c:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_fpadd_parts>
    1ea0:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__pack_f>
    1ea4:	a0 96       	adiw	r28, 0x20	; 32
    1ea6:	e6 e0       	ldi	r30, 0x06	; 6
    1ea8:	0c 94 d4 32 	jmp	0x65a8	; 0x65a8 <__epilogue_restores__+0x18>

00001eac <__addsf3>:
    1eac:	a0 e2       	ldi	r26, 0x20	; 32
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	ec e5       	ldi	r30, 0x5C	; 92
    1eb2:	ff e0       	ldi	r31, 0x0F	; 15
    1eb4:	0c 94 b8 32 	jmp	0x6570	; 0x6570 <__prologue_saves__+0x18>
    1eb8:	69 83       	std	Y+1, r22	; 0x01
    1eba:	7a 83       	std	Y+2, r23	; 0x02
    1ebc:	8b 83       	std	Y+3, r24	; 0x03
    1ebe:	9c 83       	std	Y+4, r25	; 0x04
    1ec0:	2d 83       	std	Y+5, r18	; 0x05
    1ec2:	3e 83       	std	Y+6, r19	; 0x06
    1ec4:	4f 83       	std	Y+7, r20	; 0x07
    1ec6:	58 87       	std	Y+8, r21	; 0x08
    1ec8:	f9 e0       	ldi	r31, 0x09	; 9
    1eca:	ef 2e       	mov	r14, r31
    1ecc:	f1 2c       	mov	r15, r1
    1ece:	ec 0e       	add	r14, r28
    1ed0:	fd 1e       	adc	r15, r29
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	01 96       	adiw	r24, 0x01	; 1
    1ed6:	b7 01       	movw	r22, r14
    1ed8:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1edc:	8e 01       	movw	r16, r28
    1ede:	0f 5e       	subi	r16, 0xEF	; 239
    1ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	05 96       	adiw	r24, 0x05	; 5
    1ee6:	b8 01       	movw	r22, r16
    1ee8:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1eec:	c7 01       	movw	r24, r14
    1eee:	b8 01       	movw	r22, r16
    1ef0:	ae 01       	movw	r20, r28
    1ef2:	47 5e       	subi	r20, 0xE7	; 231
    1ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef6:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_fpadd_parts>
    1efa:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__pack_f>
    1efe:	a0 96       	adiw	r28, 0x20	; 32
    1f00:	e6 e0       	ldi	r30, 0x06	; 6
    1f02:	0c 94 d4 32 	jmp	0x65a8	; 0x65a8 <__epilogue_restores__+0x18>

00001f06 <__mulsf3>:
    1f06:	a0 e2       	ldi	r26, 0x20	; 32
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e9 e8       	ldi	r30, 0x89	; 137
    1f0c:	ff e0       	ldi	r31, 0x0F	; 15
    1f0e:	0c 94 ac 32 	jmp	0x6558	; 0x6558 <__prologue_saves__>
    1f12:	69 83       	std	Y+1, r22	; 0x01
    1f14:	7a 83       	std	Y+2, r23	; 0x02
    1f16:	8b 83       	std	Y+3, r24	; 0x03
    1f18:	9c 83       	std	Y+4, r25	; 0x04
    1f1a:	2d 83       	std	Y+5, r18	; 0x05
    1f1c:	3e 83       	std	Y+6, r19	; 0x06
    1f1e:	4f 83       	std	Y+7, r20	; 0x07
    1f20:	58 87       	std	Y+8, r21	; 0x08
    1f22:	ce 01       	movw	r24, r28
    1f24:	01 96       	adiw	r24, 0x01	; 1
    1f26:	be 01       	movw	r22, r28
    1f28:	67 5f       	subi	r22, 0xF7	; 247
    1f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2c:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1f30:	ce 01       	movw	r24, r28
    1f32:	05 96       	adiw	r24, 0x05	; 5
    1f34:	be 01       	movw	r22, r28
    1f36:	6f 5e       	subi	r22, 0xEF	; 239
    1f38:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3a:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1f3e:	99 85       	ldd	r25, Y+9	; 0x09
    1f40:	92 30       	cpi	r25, 0x02	; 2
    1f42:	88 f0       	brcs	.+34     	; 0x1f66 <__mulsf3+0x60>
    1f44:	89 89       	ldd	r24, Y+17	; 0x11
    1f46:	82 30       	cpi	r24, 0x02	; 2
    1f48:	c8 f0       	brcs	.+50     	; 0x1f7c <__mulsf3+0x76>
    1f4a:	94 30       	cpi	r25, 0x04	; 4
    1f4c:	19 f4       	brne	.+6      	; 0x1f54 <__mulsf3+0x4e>
    1f4e:	82 30       	cpi	r24, 0x02	; 2
    1f50:	51 f4       	brne	.+20     	; 0x1f66 <__mulsf3+0x60>
    1f52:	04 c0       	rjmp	.+8      	; 0x1f5c <__mulsf3+0x56>
    1f54:	84 30       	cpi	r24, 0x04	; 4
    1f56:	29 f4       	brne	.+10     	; 0x1f62 <__mulsf3+0x5c>
    1f58:	92 30       	cpi	r25, 0x02	; 2
    1f5a:	81 f4       	brne	.+32     	; 0x1f7c <__mulsf3+0x76>
    1f5c:	80 e6       	ldi	r24, 0x60	; 96
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	c6 c0       	rjmp	.+396    	; 0x20ee <__mulsf3+0x1e8>
    1f62:	92 30       	cpi	r25, 0x02	; 2
    1f64:	49 f4       	brne	.+18     	; 0x1f78 <__mulsf3+0x72>
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6a:	8a 89       	ldd	r24, Y+18	; 0x12
    1f6c:	98 13       	cpse	r25, r24
    1f6e:	21 e0       	ldi	r18, 0x01	; 1
    1f70:	2a 87       	std	Y+10, r18	; 0x0a
    1f72:	ce 01       	movw	r24, r28
    1f74:	09 96       	adiw	r24, 0x09	; 9
    1f76:	bb c0       	rjmp	.+374    	; 0x20ee <__mulsf3+0x1e8>
    1f78:	82 30       	cpi	r24, 0x02	; 2
    1f7a:	49 f4       	brne	.+18     	; 0x1f8e <__mulsf3+0x88>
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f80:	8a 89       	ldd	r24, Y+18	; 0x12
    1f82:	98 13       	cpse	r25, r24
    1f84:	21 e0       	ldi	r18, 0x01	; 1
    1f86:	2a 8b       	std	Y+18, r18	; 0x12
    1f88:	ce 01       	movw	r24, r28
    1f8a:	41 96       	adiw	r24, 0x11	; 17
    1f8c:	b0 c0       	rjmp	.+352    	; 0x20ee <__mulsf3+0x1e8>
    1f8e:	2d 84       	ldd	r2, Y+13	; 0x0d
    1f90:	3e 84       	ldd	r3, Y+14	; 0x0e
    1f92:	4f 84       	ldd	r4, Y+15	; 0x0f
    1f94:	58 88       	ldd	r5, Y+16	; 0x10
    1f96:	6d 88       	ldd	r6, Y+21	; 0x15
    1f98:	7e 88       	ldd	r7, Y+22	; 0x16
    1f9a:	8f 88       	ldd	r8, Y+23	; 0x17
    1f9c:	98 8c       	ldd	r9, Y+24	; 0x18
    1f9e:	ee 24       	eor	r14, r14
    1fa0:	ff 24       	eor	r15, r15
    1fa2:	87 01       	movw	r16, r14
    1fa4:	aa 24       	eor	r10, r10
    1fa6:	bb 24       	eor	r11, r11
    1fa8:	65 01       	movw	r12, r10
    1faa:	40 e0       	ldi	r20, 0x00	; 0
    1fac:	50 e0       	ldi	r21, 0x00	; 0
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	70 e0       	ldi	r23, 0x00	; 0
    1fb2:	e0 e0       	ldi	r30, 0x00	; 0
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	c1 01       	movw	r24, r2
    1fb8:	81 70       	andi	r24, 0x01	; 1
    1fba:	90 70       	andi	r25, 0x00	; 0
    1fbc:	89 2b       	or	r24, r25
    1fbe:	e9 f0       	breq	.+58     	; 0x1ffa <__mulsf3+0xf4>
    1fc0:	e6 0c       	add	r14, r6
    1fc2:	f7 1c       	adc	r15, r7
    1fc4:	08 1d       	adc	r16, r8
    1fc6:	19 1d       	adc	r17, r9
    1fc8:	9a 01       	movw	r18, r20
    1fca:	ab 01       	movw	r20, r22
    1fcc:	2a 0d       	add	r18, r10
    1fce:	3b 1d       	adc	r19, r11
    1fd0:	4c 1d       	adc	r20, r12
    1fd2:	5d 1d       	adc	r21, r13
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	a0 e0       	ldi	r26, 0x00	; 0
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e6 14       	cp	r14, r6
    1fde:	f7 04       	cpc	r15, r7
    1fe0:	08 05       	cpc	r16, r8
    1fe2:	19 05       	cpc	r17, r9
    1fe4:	20 f4       	brcc	.+8      	; 0x1fee <__mulsf3+0xe8>
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	a0 e0       	ldi	r26, 0x00	; 0
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	ba 01       	movw	r22, r20
    1ff0:	a9 01       	movw	r20, r18
    1ff2:	48 0f       	add	r20, r24
    1ff4:	59 1f       	adc	r21, r25
    1ff6:	6a 1f       	adc	r22, r26
    1ff8:	7b 1f       	adc	r23, r27
    1ffa:	aa 0c       	add	r10, r10
    1ffc:	bb 1c       	adc	r11, r11
    1ffe:	cc 1c       	adc	r12, r12
    2000:	dd 1c       	adc	r13, r13
    2002:	97 fe       	sbrs	r9, 7
    2004:	08 c0       	rjmp	.+16     	; 0x2016 <__mulsf3+0x110>
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	a0 e0       	ldi	r26, 0x00	; 0
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	a8 2a       	or	r10, r24
    2010:	b9 2a       	or	r11, r25
    2012:	ca 2a       	or	r12, r26
    2014:	db 2a       	or	r13, r27
    2016:	31 96       	adiw	r30, 0x01	; 1
    2018:	e0 32       	cpi	r30, 0x20	; 32
    201a:	f1 05       	cpc	r31, r1
    201c:	49 f0       	breq	.+18     	; 0x2030 <__mulsf3+0x12a>
    201e:	66 0c       	add	r6, r6
    2020:	77 1c       	adc	r7, r7
    2022:	88 1c       	adc	r8, r8
    2024:	99 1c       	adc	r9, r9
    2026:	56 94       	lsr	r5
    2028:	47 94       	ror	r4
    202a:	37 94       	ror	r3
    202c:	27 94       	ror	r2
    202e:	c3 cf       	rjmp	.-122    	; 0x1fb6 <__mulsf3+0xb0>
    2030:	fa 85       	ldd	r31, Y+10	; 0x0a
    2032:	ea 89       	ldd	r30, Y+18	; 0x12
    2034:	2b 89       	ldd	r18, Y+19	; 0x13
    2036:	3c 89       	ldd	r19, Y+20	; 0x14
    2038:	8b 85       	ldd	r24, Y+11	; 0x0b
    203a:	9c 85       	ldd	r25, Y+12	; 0x0c
    203c:	28 0f       	add	r18, r24
    203e:	39 1f       	adc	r19, r25
    2040:	2e 5f       	subi	r18, 0xFE	; 254
    2042:	3f 4f       	sbci	r19, 0xFF	; 255
    2044:	17 c0       	rjmp	.+46     	; 0x2074 <__mulsf3+0x16e>
    2046:	ca 01       	movw	r24, r20
    2048:	81 70       	andi	r24, 0x01	; 1
    204a:	90 70       	andi	r25, 0x00	; 0
    204c:	89 2b       	or	r24, r25
    204e:	61 f0       	breq	.+24     	; 0x2068 <__mulsf3+0x162>
    2050:	16 95       	lsr	r17
    2052:	07 95       	ror	r16
    2054:	f7 94       	ror	r15
    2056:	e7 94       	ror	r14
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a0 e0       	ldi	r26, 0x00	; 0
    205e:	b0 e8       	ldi	r27, 0x80	; 128
    2060:	e8 2a       	or	r14, r24
    2062:	f9 2a       	or	r15, r25
    2064:	0a 2b       	or	r16, r26
    2066:	1b 2b       	or	r17, r27
    2068:	76 95       	lsr	r23
    206a:	67 95       	ror	r22
    206c:	57 95       	ror	r21
    206e:	47 95       	ror	r20
    2070:	2f 5f       	subi	r18, 0xFF	; 255
    2072:	3f 4f       	sbci	r19, 0xFF	; 255
    2074:	77 fd       	sbrc	r23, 7
    2076:	e7 cf       	rjmp	.-50     	; 0x2046 <__mulsf3+0x140>
    2078:	0c c0       	rjmp	.+24     	; 0x2092 <__mulsf3+0x18c>
    207a:	44 0f       	add	r20, r20
    207c:	55 1f       	adc	r21, r21
    207e:	66 1f       	adc	r22, r22
    2080:	77 1f       	adc	r23, r23
    2082:	17 fd       	sbrc	r17, 7
    2084:	41 60       	ori	r20, 0x01	; 1
    2086:	ee 0c       	add	r14, r14
    2088:	ff 1c       	adc	r15, r15
    208a:	00 1f       	adc	r16, r16
    208c:	11 1f       	adc	r17, r17
    208e:	21 50       	subi	r18, 0x01	; 1
    2090:	30 40       	sbci	r19, 0x00	; 0
    2092:	40 30       	cpi	r20, 0x00	; 0
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	59 07       	cpc	r21, r25
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	69 07       	cpc	r22, r25
    209c:	90 e4       	ldi	r25, 0x40	; 64
    209e:	79 07       	cpc	r23, r25
    20a0:	60 f3       	brcs	.-40     	; 0x207a <__mulsf3+0x174>
    20a2:	2b 8f       	std	Y+27, r18	; 0x1b
    20a4:	3c 8f       	std	Y+28, r19	; 0x1c
    20a6:	db 01       	movw	r26, r22
    20a8:	ca 01       	movw	r24, r20
    20aa:	8f 77       	andi	r24, 0x7F	; 127
    20ac:	90 70       	andi	r25, 0x00	; 0
    20ae:	a0 70       	andi	r26, 0x00	; 0
    20b0:	b0 70       	andi	r27, 0x00	; 0
    20b2:	80 34       	cpi	r24, 0x40	; 64
    20b4:	91 05       	cpc	r25, r1
    20b6:	a1 05       	cpc	r26, r1
    20b8:	b1 05       	cpc	r27, r1
    20ba:	61 f4       	brne	.+24     	; 0x20d4 <__mulsf3+0x1ce>
    20bc:	47 fd       	sbrc	r20, 7
    20be:	0a c0       	rjmp	.+20     	; 0x20d4 <__mulsf3+0x1ce>
    20c0:	e1 14       	cp	r14, r1
    20c2:	f1 04       	cpc	r15, r1
    20c4:	01 05       	cpc	r16, r1
    20c6:	11 05       	cpc	r17, r1
    20c8:	29 f0       	breq	.+10     	; 0x20d4 <__mulsf3+0x1ce>
    20ca:	40 5c       	subi	r20, 0xC0	; 192
    20cc:	5f 4f       	sbci	r21, 0xFF	; 255
    20ce:	6f 4f       	sbci	r22, 0xFF	; 255
    20d0:	7f 4f       	sbci	r23, 0xFF	; 255
    20d2:	40 78       	andi	r20, 0x80	; 128
    20d4:	1a 8e       	std	Y+26, r1	; 0x1a
    20d6:	fe 17       	cp	r31, r30
    20d8:	11 f0       	breq	.+4      	; 0x20de <__mulsf3+0x1d8>
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	8a 8f       	std	Y+26, r24	; 0x1a
    20de:	4d 8f       	std	Y+29, r20	; 0x1d
    20e0:	5e 8f       	std	Y+30, r21	; 0x1e
    20e2:	6f 8f       	std	Y+31, r22	; 0x1f
    20e4:	78 a3       	std	Y+32, r23	; 0x20
    20e6:	83 e0       	ldi	r24, 0x03	; 3
    20e8:	89 8f       	std	Y+25, r24	; 0x19
    20ea:	ce 01       	movw	r24, r28
    20ec:	49 96       	adiw	r24, 0x19	; 25
    20ee:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__pack_f>
    20f2:	a0 96       	adiw	r28, 0x20	; 32
    20f4:	e2 e1       	ldi	r30, 0x12	; 18
    20f6:	0c 94 c8 32 	jmp	0x6590	; 0x6590 <__epilogue_restores__>

000020fa <__gtsf2>:
    20fa:	a8 e1       	ldi	r26, 0x18	; 24
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e3 e8       	ldi	r30, 0x83	; 131
    2100:	f0 e1       	ldi	r31, 0x10	; 16
    2102:	0c 94 b8 32 	jmp	0x6570	; 0x6570 <__prologue_saves__+0x18>
    2106:	69 83       	std	Y+1, r22	; 0x01
    2108:	7a 83       	std	Y+2, r23	; 0x02
    210a:	8b 83       	std	Y+3, r24	; 0x03
    210c:	9c 83       	std	Y+4, r25	; 0x04
    210e:	2d 83       	std	Y+5, r18	; 0x05
    2110:	3e 83       	std	Y+6, r19	; 0x06
    2112:	4f 83       	std	Y+7, r20	; 0x07
    2114:	58 87       	std	Y+8, r21	; 0x08
    2116:	89 e0       	ldi	r24, 0x09	; 9
    2118:	e8 2e       	mov	r14, r24
    211a:	f1 2c       	mov	r15, r1
    211c:	ec 0e       	add	r14, r28
    211e:	fd 1e       	adc	r15, r29
    2120:	ce 01       	movw	r24, r28
    2122:	01 96       	adiw	r24, 0x01	; 1
    2124:	b7 01       	movw	r22, r14
    2126:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    212a:	8e 01       	movw	r16, r28
    212c:	0f 5e       	subi	r16, 0xEF	; 239
    212e:	1f 4f       	sbci	r17, 0xFF	; 255
    2130:	ce 01       	movw	r24, r28
    2132:	05 96       	adiw	r24, 0x05	; 5
    2134:	b8 01       	movw	r22, r16
    2136:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    213a:	89 85       	ldd	r24, Y+9	; 0x09
    213c:	82 30       	cpi	r24, 0x02	; 2
    213e:	40 f0       	brcs	.+16     	; 0x2150 <__gtsf2+0x56>
    2140:	89 89       	ldd	r24, Y+17	; 0x11
    2142:	82 30       	cpi	r24, 0x02	; 2
    2144:	28 f0       	brcs	.+10     	; 0x2150 <__gtsf2+0x56>
    2146:	c7 01       	movw	r24, r14
    2148:	b8 01       	movw	r22, r16
    214a:	0e 94 ae 12 	call	0x255c	; 0x255c <__fpcmp_parts_f>
    214e:	01 c0       	rjmp	.+2      	; 0x2152 <__gtsf2+0x58>
    2150:	8f ef       	ldi	r24, 0xFF	; 255
    2152:	68 96       	adiw	r28, 0x18	; 24
    2154:	e6 e0       	ldi	r30, 0x06	; 6
    2156:	0c 94 d4 32 	jmp	0x65a8	; 0x65a8 <__epilogue_restores__+0x18>

0000215a <__gesf2>:
    215a:	a8 e1       	ldi	r26, 0x18	; 24
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	e3 eb       	ldi	r30, 0xB3	; 179
    2160:	f0 e1       	ldi	r31, 0x10	; 16
    2162:	0c 94 b8 32 	jmp	0x6570	; 0x6570 <__prologue_saves__+0x18>
    2166:	69 83       	std	Y+1, r22	; 0x01
    2168:	7a 83       	std	Y+2, r23	; 0x02
    216a:	8b 83       	std	Y+3, r24	; 0x03
    216c:	9c 83       	std	Y+4, r25	; 0x04
    216e:	2d 83       	std	Y+5, r18	; 0x05
    2170:	3e 83       	std	Y+6, r19	; 0x06
    2172:	4f 83       	std	Y+7, r20	; 0x07
    2174:	58 87       	std	Y+8, r21	; 0x08
    2176:	89 e0       	ldi	r24, 0x09	; 9
    2178:	e8 2e       	mov	r14, r24
    217a:	f1 2c       	mov	r15, r1
    217c:	ec 0e       	add	r14, r28
    217e:	fd 1e       	adc	r15, r29
    2180:	ce 01       	movw	r24, r28
    2182:	01 96       	adiw	r24, 0x01	; 1
    2184:	b7 01       	movw	r22, r14
    2186:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    218a:	8e 01       	movw	r16, r28
    218c:	0f 5e       	subi	r16, 0xEF	; 239
    218e:	1f 4f       	sbci	r17, 0xFF	; 255
    2190:	ce 01       	movw	r24, r28
    2192:	05 96       	adiw	r24, 0x05	; 5
    2194:	b8 01       	movw	r22, r16
    2196:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    219a:	89 85       	ldd	r24, Y+9	; 0x09
    219c:	82 30       	cpi	r24, 0x02	; 2
    219e:	40 f0       	brcs	.+16     	; 0x21b0 <__gesf2+0x56>
    21a0:	89 89       	ldd	r24, Y+17	; 0x11
    21a2:	82 30       	cpi	r24, 0x02	; 2
    21a4:	28 f0       	brcs	.+10     	; 0x21b0 <__gesf2+0x56>
    21a6:	c7 01       	movw	r24, r14
    21a8:	b8 01       	movw	r22, r16
    21aa:	0e 94 ae 12 	call	0x255c	; 0x255c <__fpcmp_parts_f>
    21ae:	01 c0       	rjmp	.+2      	; 0x21b2 <__gesf2+0x58>
    21b0:	8f ef       	ldi	r24, 0xFF	; 255
    21b2:	68 96       	adiw	r28, 0x18	; 24
    21b4:	e6 e0       	ldi	r30, 0x06	; 6
    21b6:	0c 94 d4 32 	jmp	0x65a8	; 0x65a8 <__epilogue_restores__+0x18>

000021ba <__ltsf2>:
    21ba:	a8 e1       	ldi	r26, 0x18	; 24
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e3 ee       	ldi	r30, 0xE3	; 227
    21c0:	f0 e1       	ldi	r31, 0x10	; 16
    21c2:	0c 94 b8 32 	jmp	0x6570	; 0x6570 <__prologue_saves__+0x18>
    21c6:	69 83       	std	Y+1, r22	; 0x01
    21c8:	7a 83       	std	Y+2, r23	; 0x02
    21ca:	8b 83       	std	Y+3, r24	; 0x03
    21cc:	9c 83       	std	Y+4, r25	; 0x04
    21ce:	2d 83       	std	Y+5, r18	; 0x05
    21d0:	3e 83       	std	Y+6, r19	; 0x06
    21d2:	4f 83       	std	Y+7, r20	; 0x07
    21d4:	58 87       	std	Y+8, r21	; 0x08
    21d6:	89 e0       	ldi	r24, 0x09	; 9
    21d8:	e8 2e       	mov	r14, r24
    21da:	f1 2c       	mov	r15, r1
    21dc:	ec 0e       	add	r14, r28
    21de:	fd 1e       	adc	r15, r29
    21e0:	ce 01       	movw	r24, r28
    21e2:	01 96       	adiw	r24, 0x01	; 1
    21e4:	b7 01       	movw	r22, r14
    21e6:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    21ea:	8e 01       	movw	r16, r28
    21ec:	0f 5e       	subi	r16, 0xEF	; 239
    21ee:	1f 4f       	sbci	r17, 0xFF	; 255
    21f0:	ce 01       	movw	r24, r28
    21f2:	05 96       	adiw	r24, 0x05	; 5
    21f4:	b8 01       	movw	r22, r16
    21f6:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    21fa:	89 85       	ldd	r24, Y+9	; 0x09
    21fc:	82 30       	cpi	r24, 0x02	; 2
    21fe:	40 f0       	brcs	.+16     	; 0x2210 <__ltsf2+0x56>
    2200:	89 89       	ldd	r24, Y+17	; 0x11
    2202:	82 30       	cpi	r24, 0x02	; 2
    2204:	28 f0       	brcs	.+10     	; 0x2210 <__ltsf2+0x56>
    2206:	c7 01       	movw	r24, r14
    2208:	b8 01       	movw	r22, r16
    220a:	0e 94 ae 12 	call	0x255c	; 0x255c <__fpcmp_parts_f>
    220e:	01 c0       	rjmp	.+2      	; 0x2212 <__ltsf2+0x58>
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	68 96       	adiw	r28, 0x18	; 24
    2214:	e6 e0       	ldi	r30, 0x06	; 6
    2216:	0c 94 d4 32 	jmp	0x65a8	; 0x65a8 <__epilogue_restores__+0x18>

0000221a <__fixsfsi>:
    221a:	ac e0       	ldi	r26, 0x0C	; 12
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e3 e1       	ldi	r30, 0x13	; 19
    2220:	f1 e1       	ldi	r31, 0x11	; 17
    2222:	0c 94 bc 32 	jmp	0x6578	; 0x6578 <__prologue_saves__+0x20>
    2226:	69 83       	std	Y+1, r22	; 0x01
    2228:	7a 83       	std	Y+2, r23	; 0x02
    222a:	8b 83       	std	Y+3, r24	; 0x03
    222c:	9c 83       	std	Y+4, r25	; 0x04
    222e:	ce 01       	movw	r24, r28
    2230:	01 96       	adiw	r24, 0x01	; 1
    2232:	be 01       	movw	r22, r28
    2234:	6b 5f       	subi	r22, 0xFB	; 251
    2236:	7f 4f       	sbci	r23, 0xFF	; 255
    2238:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    223c:	8d 81       	ldd	r24, Y+5	; 0x05
    223e:	82 30       	cpi	r24, 0x02	; 2
    2240:	61 f1       	breq	.+88     	; 0x229a <__fixsfsi+0x80>
    2242:	82 30       	cpi	r24, 0x02	; 2
    2244:	50 f1       	brcs	.+84     	; 0x229a <__fixsfsi+0x80>
    2246:	84 30       	cpi	r24, 0x04	; 4
    2248:	21 f4       	brne	.+8      	; 0x2252 <__fixsfsi+0x38>
    224a:	8e 81       	ldd	r24, Y+6	; 0x06
    224c:	88 23       	and	r24, r24
    224e:	51 f1       	breq	.+84     	; 0x22a4 <__fixsfsi+0x8a>
    2250:	2e c0       	rjmp	.+92     	; 0x22ae <__fixsfsi+0x94>
    2252:	2f 81       	ldd	r18, Y+7	; 0x07
    2254:	38 85       	ldd	r19, Y+8	; 0x08
    2256:	37 fd       	sbrc	r19, 7
    2258:	20 c0       	rjmp	.+64     	; 0x229a <__fixsfsi+0x80>
    225a:	6e 81       	ldd	r22, Y+6	; 0x06
    225c:	2f 31       	cpi	r18, 0x1F	; 31
    225e:	31 05       	cpc	r19, r1
    2260:	1c f0       	brlt	.+6      	; 0x2268 <__fixsfsi+0x4e>
    2262:	66 23       	and	r22, r22
    2264:	f9 f0       	breq	.+62     	; 0x22a4 <__fixsfsi+0x8a>
    2266:	23 c0       	rjmp	.+70     	; 0x22ae <__fixsfsi+0x94>
    2268:	8e e1       	ldi	r24, 0x1E	; 30
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	82 1b       	sub	r24, r18
    226e:	93 0b       	sbc	r25, r19
    2270:	29 85       	ldd	r18, Y+9	; 0x09
    2272:	3a 85       	ldd	r19, Y+10	; 0x0a
    2274:	4b 85       	ldd	r20, Y+11	; 0x0b
    2276:	5c 85       	ldd	r21, Y+12	; 0x0c
    2278:	04 c0       	rjmp	.+8      	; 0x2282 <__fixsfsi+0x68>
    227a:	56 95       	lsr	r21
    227c:	47 95       	ror	r20
    227e:	37 95       	ror	r19
    2280:	27 95       	ror	r18
    2282:	8a 95       	dec	r24
    2284:	d2 f7       	brpl	.-12     	; 0x227a <__fixsfsi+0x60>
    2286:	66 23       	and	r22, r22
    2288:	b1 f0       	breq	.+44     	; 0x22b6 <__fixsfsi+0x9c>
    228a:	50 95       	com	r21
    228c:	40 95       	com	r20
    228e:	30 95       	com	r19
    2290:	21 95       	neg	r18
    2292:	3f 4f       	sbci	r19, 0xFF	; 255
    2294:	4f 4f       	sbci	r20, 0xFF	; 255
    2296:	5f 4f       	sbci	r21, 0xFF	; 255
    2298:	0e c0       	rjmp	.+28     	; 0x22b6 <__fixsfsi+0x9c>
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e0       	ldi	r20, 0x00	; 0
    22a0:	50 e0       	ldi	r21, 0x00	; 0
    22a2:	09 c0       	rjmp	.+18     	; 0x22b6 <__fixsfsi+0x9c>
    22a4:	2f ef       	ldi	r18, 0xFF	; 255
    22a6:	3f ef       	ldi	r19, 0xFF	; 255
    22a8:	4f ef       	ldi	r20, 0xFF	; 255
    22aa:	5f e7       	ldi	r21, 0x7F	; 127
    22ac:	04 c0       	rjmp	.+8      	; 0x22b6 <__fixsfsi+0x9c>
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e0       	ldi	r20, 0x00	; 0
    22b4:	50 e8       	ldi	r21, 0x80	; 128
    22b6:	b9 01       	movw	r22, r18
    22b8:	ca 01       	movw	r24, r20
    22ba:	2c 96       	adiw	r28, 0x0c	; 12
    22bc:	e2 e0       	ldi	r30, 0x02	; 2
    22be:	0c 94 d8 32 	jmp	0x65b0	; 0x65b0 <__epilogue_restores__+0x20>

000022c2 <__pack_f>:
    22c2:	df 92       	push	r13
    22c4:	ef 92       	push	r14
    22c6:	ff 92       	push	r15
    22c8:	0f 93       	push	r16
    22ca:	1f 93       	push	r17
    22cc:	fc 01       	movw	r30, r24
    22ce:	e4 80       	ldd	r14, Z+4	; 0x04
    22d0:	f5 80       	ldd	r15, Z+5	; 0x05
    22d2:	06 81       	ldd	r16, Z+6	; 0x06
    22d4:	17 81       	ldd	r17, Z+7	; 0x07
    22d6:	d1 80       	ldd	r13, Z+1	; 0x01
    22d8:	80 81       	ld	r24, Z
    22da:	82 30       	cpi	r24, 0x02	; 2
    22dc:	48 f4       	brcc	.+18     	; 0x22f0 <__pack_f+0x2e>
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	a0 e1       	ldi	r26, 0x10	; 16
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	e8 2a       	or	r14, r24
    22e8:	f9 2a       	or	r15, r25
    22ea:	0a 2b       	or	r16, r26
    22ec:	1b 2b       	or	r17, r27
    22ee:	a5 c0       	rjmp	.+330    	; 0x243a <__pack_f+0x178>
    22f0:	84 30       	cpi	r24, 0x04	; 4
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <__pack_f+0x34>
    22f4:	9f c0       	rjmp	.+318    	; 0x2434 <__pack_f+0x172>
    22f6:	82 30       	cpi	r24, 0x02	; 2
    22f8:	21 f4       	brne	.+8      	; 0x2302 <__pack_f+0x40>
    22fa:	ee 24       	eor	r14, r14
    22fc:	ff 24       	eor	r15, r15
    22fe:	87 01       	movw	r16, r14
    2300:	05 c0       	rjmp	.+10     	; 0x230c <__pack_f+0x4a>
    2302:	e1 14       	cp	r14, r1
    2304:	f1 04       	cpc	r15, r1
    2306:	01 05       	cpc	r16, r1
    2308:	11 05       	cpc	r17, r1
    230a:	19 f4       	brne	.+6      	; 0x2312 <__pack_f+0x50>
    230c:	e0 e0       	ldi	r30, 0x00	; 0
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	96 c0       	rjmp	.+300    	; 0x243e <__pack_f+0x17c>
    2312:	62 81       	ldd	r22, Z+2	; 0x02
    2314:	73 81       	ldd	r23, Z+3	; 0x03
    2316:	9f ef       	ldi	r25, 0xFF	; 255
    2318:	62 38       	cpi	r22, 0x82	; 130
    231a:	79 07       	cpc	r23, r25
    231c:	0c f0       	brlt	.+2      	; 0x2320 <__pack_f+0x5e>
    231e:	5b c0       	rjmp	.+182    	; 0x23d6 <__pack_f+0x114>
    2320:	22 e8       	ldi	r18, 0x82	; 130
    2322:	3f ef       	ldi	r19, 0xFF	; 255
    2324:	26 1b       	sub	r18, r22
    2326:	37 0b       	sbc	r19, r23
    2328:	2a 31       	cpi	r18, 0x1A	; 26
    232a:	31 05       	cpc	r19, r1
    232c:	2c f0       	brlt	.+10     	; 0x2338 <__pack_f+0x76>
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e0       	ldi	r20, 0x00	; 0
    2334:	50 e0       	ldi	r21, 0x00	; 0
    2336:	2a c0       	rjmp	.+84     	; 0x238c <__pack_f+0xca>
    2338:	b8 01       	movw	r22, r16
    233a:	a7 01       	movw	r20, r14
    233c:	02 2e       	mov	r0, r18
    233e:	04 c0       	rjmp	.+8      	; 0x2348 <__pack_f+0x86>
    2340:	76 95       	lsr	r23
    2342:	67 95       	ror	r22
    2344:	57 95       	ror	r21
    2346:	47 95       	ror	r20
    2348:	0a 94       	dec	r0
    234a:	d2 f7       	brpl	.-12     	; 0x2340 <__pack_f+0x7e>
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	a0 e0       	ldi	r26, 0x00	; 0
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	04 c0       	rjmp	.+8      	; 0x235e <__pack_f+0x9c>
    2356:	88 0f       	add	r24, r24
    2358:	99 1f       	adc	r25, r25
    235a:	aa 1f       	adc	r26, r26
    235c:	bb 1f       	adc	r27, r27
    235e:	2a 95       	dec	r18
    2360:	d2 f7       	brpl	.-12     	; 0x2356 <__pack_f+0x94>
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	a1 09       	sbc	r26, r1
    2366:	b1 09       	sbc	r27, r1
    2368:	8e 21       	and	r24, r14
    236a:	9f 21       	and	r25, r15
    236c:	a0 23       	and	r26, r16
    236e:	b1 23       	and	r27, r17
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	a1 05       	cpc	r26, r1
    2374:	b1 05       	cpc	r27, r1
    2376:	21 f0       	breq	.+8      	; 0x2380 <__pack_f+0xbe>
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	a0 e0       	ldi	r26, 0x00	; 0
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	9a 01       	movw	r18, r20
    2382:	ab 01       	movw	r20, r22
    2384:	28 2b       	or	r18, r24
    2386:	39 2b       	or	r19, r25
    2388:	4a 2b       	or	r20, r26
    238a:	5b 2b       	or	r21, r27
    238c:	da 01       	movw	r26, r20
    238e:	c9 01       	movw	r24, r18
    2390:	8f 77       	andi	r24, 0x7F	; 127
    2392:	90 70       	andi	r25, 0x00	; 0
    2394:	a0 70       	andi	r26, 0x00	; 0
    2396:	b0 70       	andi	r27, 0x00	; 0
    2398:	80 34       	cpi	r24, 0x40	; 64
    239a:	91 05       	cpc	r25, r1
    239c:	a1 05       	cpc	r26, r1
    239e:	b1 05       	cpc	r27, r1
    23a0:	39 f4       	brne	.+14     	; 0x23b0 <__pack_f+0xee>
    23a2:	27 ff       	sbrs	r18, 7
    23a4:	09 c0       	rjmp	.+18     	; 0x23b8 <__pack_f+0xf6>
    23a6:	20 5c       	subi	r18, 0xC0	; 192
    23a8:	3f 4f       	sbci	r19, 0xFF	; 255
    23aa:	4f 4f       	sbci	r20, 0xFF	; 255
    23ac:	5f 4f       	sbci	r21, 0xFF	; 255
    23ae:	04 c0       	rjmp	.+8      	; 0x23b8 <__pack_f+0xf6>
    23b0:	21 5c       	subi	r18, 0xC1	; 193
    23b2:	3f 4f       	sbci	r19, 0xFF	; 255
    23b4:	4f 4f       	sbci	r20, 0xFF	; 255
    23b6:	5f 4f       	sbci	r21, 0xFF	; 255
    23b8:	e0 e0       	ldi	r30, 0x00	; 0
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	20 30       	cpi	r18, 0x00	; 0
    23be:	a0 e0       	ldi	r26, 0x00	; 0
    23c0:	3a 07       	cpc	r19, r26
    23c2:	a0 e0       	ldi	r26, 0x00	; 0
    23c4:	4a 07       	cpc	r20, r26
    23c6:	a0 e4       	ldi	r26, 0x40	; 64
    23c8:	5a 07       	cpc	r21, r26
    23ca:	10 f0       	brcs	.+4      	; 0x23d0 <__pack_f+0x10e>
    23cc:	e1 e0       	ldi	r30, 0x01	; 1
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	79 01       	movw	r14, r18
    23d2:	8a 01       	movw	r16, r20
    23d4:	27 c0       	rjmp	.+78     	; 0x2424 <__pack_f+0x162>
    23d6:	60 38       	cpi	r22, 0x80	; 128
    23d8:	71 05       	cpc	r23, r1
    23da:	64 f5       	brge	.+88     	; 0x2434 <__pack_f+0x172>
    23dc:	fb 01       	movw	r30, r22
    23de:	e1 58       	subi	r30, 0x81	; 129
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	d8 01       	movw	r26, r16
    23e4:	c7 01       	movw	r24, r14
    23e6:	8f 77       	andi	r24, 0x7F	; 127
    23e8:	90 70       	andi	r25, 0x00	; 0
    23ea:	a0 70       	andi	r26, 0x00	; 0
    23ec:	b0 70       	andi	r27, 0x00	; 0
    23ee:	80 34       	cpi	r24, 0x40	; 64
    23f0:	91 05       	cpc	r25, r1
    23f2:	a1 05       	cpc	r26, r1
    23f4:	b1 05       	cpc	r27, r1
    23f6:	39 f4       	brne	.+14     	; 0x2406 <__pack_f+0x144>
    23f8:	e7 fe       	sbrs	r14, 7
    23fa:	0d c0       	rjmp	.+26     	; 0x2416 <__pack_f+0x154>
    23fc:	80 e4       	ldi	r24, 0x40	; 64
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	a0 e0       	ldi	r26, 0x00	; 0
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	04 c0       	rjmp	.+8      	; 0x240e <__pack_f+0x14c>
    2406:	8f e3       	ldi	r24, 0x3F	; 63
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	a0 e0       	ldi	r26, 0x00	; 0
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	e8 0e       	add	r14, r24
    2410:	f9 1e       	adc	r15, r25
    2412:	0a 1f       	adc	r16, r26
    2414:	1b 1f       	adc	r17, r27
    2416:	17 ff       	sbrs	r17, 7
    2418:	05 c0       	rjmp	.+10     	; 0x2424 <__pack_f+0x162>
    241a:	16 95       	lsr	r17
    241c:	07 95       	ror	r16
    241e:	f7 94       	ror	r15
    2420:	e7 94       	ror	r14
    2422:	31 96       	adiw	r30, 0x01	; 1
    2424:	87 e0       	ldi	r24, 0x07	; 7
    2426:	16 95       	lsr	r17
    2428:	07 95       	ror	r16
    242a:	f7 94       	ror	r15
    242c:	e7 94       	ror	r14
    242e:	8a 95       	dec	r24
    2430:	d1 f7       	brne	.-12     	; 0x2426 <__pack_f+0x164>
    2432:	05 c0       	rjmp	.+10     	; 0x243e <__pack_f+0x17c>
    2434:	ee 24       	eor	r14, r14
    2436:	ff 24       	eor	r15, r15
    2438:	87 01       	movw	r16, r14
    243a:	ef ef       	ldi	r30, 0xFF	; 255
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	6e 2f       	mov	r22, r30
    2440:	67 95       	ror	r22
    2442:	66 27       	eor	r22, r22
    2444:	67 95       	ror	r22
    2446:	90 2f       	mov	r25, r16
    2448:	9f 77       	andi	r25, 0x7F	; 127
    244a:	d7 94       	ror	r13
    244c:	dd 24       	eor	r13, r13
    244e:	d7 94       	ror	r13
    2450:	8e 2f       	mov	r24, r30
    2452:	86 95       	lsr	r24
    2454:	49 2f       	mov	r20, r25
    2456:	46 2b       	or	r20, r22
    2458:	58 2f       	mov	r21, r24
    245a:	5d 29       	or	r21, r13
    245c:	b7 01       	movw	r22, r14
    245e:	ca 01       	movw	r24, r20
    2460:	1f 91       	pop	r17
    2462:	0f 91       	pop	r16
    2464:	ff 90       	pop	r15
    2466:	ef 90       	pop	r14
    2468:	df 90       	pop	r13
    246a:	08 95       	ret

0000246c <__unpack_f>:
    246c:	fc 01       	movw	r30, r24
    246e:	db 01       	movw	r26, r22
    2470:	40 81       	ld	r20, Z
    2472:	51 81       	ldd	r21, Z+1	; 0x01
    2474:	22 81       	ldd	r18, Z+2	; 0x02
    2476:	62 2f       	mov	r22, r18
    2478:	6f 77       	andi	r22, 0x7F	; 127
    247a:	70 e0       	ldi	r23, 0x00	; 0
    247c:	22 1f       	adc	r18, r18
    247e:	22 27       	eor	r18, r18
    2480:	22 1f       	adc	r18, r18
    2482:	93 81       	ldd	r25, Z+3	; 0x03
    2484:	89 2f       	mov	r24, r25
    2486:	88 0f       	add	r24, r24
    2488:	82 2b       	or	r24, r18
    248a:	28 2f       	mov	r18, r24
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	99 1f       	adc	r25, r25
    2490:	99 27       	eor	r25, r25
    2492:	99 1f       	adc	r25, r25
    2494:	11 96       	adiw	r26, 0x01	; 1
    2496:	9c 93       	st	X, r25
    2498:	11 97       	sbiw	r26, 0x01	; 1
    249a:	21 15       	cp	r18, r1
    249c:	31 05       	cpc	r19, r1
    249e:	a9 f5       	brne	.+106    	; 0x250a <__unpack_f+0x9e>
    24a0:	41 15       	cp	r20, r1
    24a2:	51 05       	cpc	r21, r1
    24a4:	61 05       	cpc	r22, r1
    24a6:	71 05       	cpc	r23, r1
    24a8:	11 f4       	brne	.+4      	; 0x24ae <__unpack_f+0x42>
    24aa:	82 e0       	ldi	r24, 0x02	; 2
    24ac:	37 c0       	rjmp	.+110    	; 0x251c <__unpack_f+0xb0>
    24ae:	82 e8       	ldi	r24, 0x82	; 130
    24b0:	9f ef       	ldi	r25, 0xFF	; 255
    24b2:	13 96       	adiw	r26, 0x03	; 3
    24b4:	9c 93       	st	X, r25
    24b6:	8e 93       	st	-X, r24
    24b8:	12 97       	sbiw	r26, 0x02	; 2
    24ba:	9a 01       	movw	r18, r20
    24bc:	ab 01       	movw	r20, r22
    24be:	67 e0       	ldi	r22, 0x07	; 7
    24c0:	22 0f       	add	r18, r18
    24c2:	33 1f       	adc	r19, r19
    24c4:	44 1f       	adc	r20, r20
    24c6:	55 1f       	adc	r21, r21
    24c8:	6a 95       	dec	r22
    24ca:	d1 f7       	brne	.-12     	; 0x24c0 <__unpack_f+0x54>
    24cc:	83 e0       	ldi	r24, 0x03	; 3
    24ce:	8c 93       	st	X, r24
    24d0:	0d c0       	rjmp	.+26     	; 0x24ec <__unpack_f+0x80>
    24d2:	22 0f       	add	r18, r18
    24d4:	33 1f       	adc	r19, r19
    24d6:	44 1f       	adc	r20, r20
    24d8:	55 1f       	adc	r21, r21
    24da:	12 96       	adiw	r26, 0x02	; 2
    24dc:	8d 91       	ld	r24, X+
    24de:	9c 91       	ld	r25, X
    24e0:	13 97       	sbiw	r26, 0x03	; 3
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	13 96       	adiw	r26, 0x03	; 3
    24e6:	9c 93       	st	X, r25
    24e8:	8e 93       	st	-X, r24
    24ea:	12 97       	sbiw	r26, 0x02	; 2
    24ec:	20 30       	cpi	r18, 0x00	; 0
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	38 07       	cpc	r19, r24
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	48 07       	cpc	r20, r24
    24f6:	80 e4       	ldi	r24, 0x40	; 64
    24f8:	58 07       	cpc	r21, r24
    24fa:	58 f3       	brcs	.-42     	; 0x24d2 <__unpack_f+0x66>
    24fc:	14 96       	adiw	r26, 0x04	; 4
    24fe:	2d 93       	st	X+, r18
    2500:	3d 93       	st	X+, r19
    2502:	4d 93       	st	X+, r20
    2504:	5c 93       	st	X, r21
    2506:	17 97       	sbiw	r26, 0x07	; 7
    2508:	08 95       	ret
    250a:	2f 3f       	cpi	r18, 0xFF	; 255
    250c:	31 05       	cpc	r19, r1
    250e:	79 f4       	brne	.+30     	; 0x252e <__unpack_f+0xc2>
    2510:	41 15       	cp	r20, r1
    2512:	51 05       	cpc	r21, r1
    2514:	61 05       	cpc	r22, r1
    2516:	71 05       	cpc	r23, r1
    2518:	19 f4       	brne	.+6      	; 0x2520 <__unpack_f+0xb4>
    251a:	84 e0       	ldi	r24, 0x04	; 4
    251c:	8c 93       	st	X, r24
    251e:	08 95       	ret
    2520:	64 ff       	sbrs	r22, 4
    2522:	03 c0       	rjmp	.+6      	; 0x252a <__unpack_f+0xbe>
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	8c 93       	st	X, r24
    2528:	12 c0       	rjmp	.+36     	; 0x254e <__unpack_f+0xe2>
    252a:	1c 92       	st	X, r1
    252c:	10 c0       	rjmp	.+32     	; 0x254e <__unpack_f+0xe2>
    252e:	2f 57       	subi	r18, 0x7F	; 127
    2530:	30 40       	sbci	r19, 0x00	; 0
    2532:	13 96       	adiw	r26, 0x03	; 3
    2534:	3c 93       	st	X, r19
    2536:	2e 93       	st	-X, r18
    2538:	12 97       	sbiw	r26, 0x02	; 2
    253a:	83 e0       	ldi	r24, 0x03	; 3
    253c:	8c 93       	st	X, r24
    253e:	87 e0       	ldi	r24, 0x07	; 7
    2540:	44 0f       	add	r20, r20
    2542:	55 1f       	adc	r21, r21
    2544:	66 1f       	adc	r22, r22
    2546:	77 1f       	adc	r23, r23
    2548:	8a 95       	dec	r24
    254a:	d1 f7       	brne	.-12     	; 0x2540 <__unpack_f+0xd4>
    254c:	70 64       	ori	r23, 0x40	; 64
    254e:	14 96       	adiw	r26, 0x04	; 4
    2550:	4d 93       	st	X+, r20
    2552:	5d 93       	st	X+, r21
    2554:	6d 93       	st	X+, r22
    2556:	7c 93       	st	X, r23
    2558:	17 97       	sbiw	r26, 0x07	; 7
    255a:	08 95       	ret

0000255c <__fpcmp_parts_f>:
    255c:	1f 93       	push	r17
    255e:	dc 01       	movw	r26, r24
    2560:	fb 01       	movw	r30, r22
    2562:	9c 91       	ld	r25, X
    2564:	92 30       	cpi	r25, 0x02	; 2
    2566:	08 f4       	brcc	.+2      	; 0x256a <__fpcmp_parts_f+0xe>
    2568:	47 c0       	rjmp	.+142    	; 0x25f8 <__fpcmp_parts_f+0x9c>
    256a:	80 81       	ld	r24, Z
    256c:	82 30       	cpi	r24, 0x02	; 2
    256e:	08 f4       	brcc	.+2      	; 0x2572 <__fpcmp_parts_f+0x16>
    2570:	43 c0       	rjmp	.+134    	; 0x25f8 <__fpcmp_parts_f+0x9c>
    2572:	94 30       	cpi	r25, 0x04	; 4
    2574:	51 f4       	brne	.+20     	; 0x258a <__fpcmp_parts_f+0x2e>
    2576:	11 96       	adiw	r26, 0x01	; 1
    2578:	1c 91       	ld	r17, X
    257a:	84 30       	cpi	r24, 0x04	; 4
    257c:	99 f5       	brne	.+102    	; 0x25e4 <__fpcmp_parts_f+0x88>
    257e:	81 81       	ldd	r24, Z+1	; 0x01
    2580:	68 2f       	mov	r22, r24
    2582:	70 e0       	ldi	r23, 0x00	; 0
    2584:	61 1b       	sub	r22, r17
    2586:	71 09       	sbc	r23, r1
    2588:	3f c0       	rjmp	.+126    	; 0x2608 <__fpcmp_parts_f+0xac>
    258a:	84 30       	cpi	r24, 0x04	; 4
    258c:	21 f0       	breq	.+8      	; 0x2596 <__fpcmp_parts_f+0x3a>
    258e:	92 30       	cpi	r25, 0x02	; 2
    2590:	31 f4       	brne	.+12     	; 0x259e <__fpcmp_parts_f+0x42>
    2592:	82 30       	cpi	r24, 0x02	; 2
    2594:	b9 f1       	breq	.+110    	; 0x2604 <__fpcmp_parts_f+0xa8>
    2596:	81 81       	ldd	r24, Z+1	; 0x01
    2598:	88 23       	and	r24, r24
    259a:	89 f1       	breq	.+98     	; 0x25fe <__fpcmp_parts_f+0xa2>
    259c:	2d c0       	rjmp	.+90     	; 0x25f8 <__fpcmp_parts_f+0x9c>
    259e:	11 96       	adiw	r26, 0x01	; 1
    25a0:	1c 91       	ld	r17, X
    25a2:	11 97       	sbiw	r26, 0x01	; 1
    25a4:	82 30       	cpi	r24, 0x02	; 2
    25a6:	f1 f0       	breq	.+60     	; 0x25e4 <__fpcmp_parts_f+0x88>
    25a8:	81 81       	ldd	r24, Z+1	; 0x01
    25aa:	18 17       	cp	r17, r24
    25ac:	d9 f4       	brne	.+54     	; 0x25e4 <__fpcmp_parts_f+0x88>
    25ae:	12 96       	adiw	r26, 0x02	; 2
    25b0:	2d 91       	ld	r18, X+
    25b2:	3c 91       	ld	r19, X
    25b4:	13 97       	sbiw	r26, 0x03	; 3
    25b6:	82 81       	ldd	r24, Z+2	; 0x02
    25b8:	93 81       	ldd	r25, Z+3	; 0x03
    25ba:	82 17       	cp	r24, r18
    25bc:	93 07       	cpc	r25, r19
    25be:	94 f0       	brlt	.+36     	; 0x25e4 <__fpcmp_parts_f+0x88>
    25c0:	28 17       	cp	r18, r24
    25c2:	39 07       	cpc	r19, r25
    25c4:	bc f0       	brlt	.+46     	; 0x25f4 <__fpcmp_parts_f+0x98>
    25c6:	14 96       	adiw	r26, 0x04	; 4
    25c8:	8d 91       	ld	r24, X+
    25ca:	9d 91       	ld	r25, X+
    25cc:	0d 90       	ld	r0, X+
    25ce:	bc 91       	ld	r27, X
    25d0:	a0 2d       	mov	r26, r0
    25d2:	24 81       	ldd	r18, Z+4	; 0x04
    25d4:	35 81       	ldd	r19, Z+5	; 0x05
    25d6:	46 81       	ldd	r20, Z+6	; 0x06
    25d8:	57 81       	ldd	r21, Z+7	; 0x07
    25da:	28 17       	cp	r18, r24
    25dc:	39 07       	cpc	r19, r25
    25de:	4a 07       	cpc	r20, r26
    25e0:	5b 07       	cpc	r21, r27
    25e2:	18 f4       	brcc	.+6      	; 0x25ea <__fpcmp_parts_f+0x8e>
    25e4:	11 23       	and	r17, r17
    25e6:	41 f0       	breq	.+16     	; 0x25f8 <__fpcmp_parts_f+0x9c>
    25e8:	0a c0       	rjmp	.+20     	; 0x25fe <__fpcmp_parts_f+0xa2>
    25ea:	82 17       	cp	r24, r18
    25ec:	93 07       	cpc	r25, r19
    25ee:	a4 07       	cpc	r26, r20
    25f0:	b5 07       	cpc	r27, r21
    25f2:	40 f4       	brcc	.+16     	; 0x2604 <__fpcmp_parts_f+0xa8>
    25f4:	11 23       	and	r17, r17
    25f6:	19 f0       	breq	.+6      	; 0x25fe <__fpcmp_parts_f+0xa2>
    25f8:	61 e0       	ldi	r22, 0x01	; 1
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	05 c0       	rjmp	.+10     	; 0x2608 <__fpcmp_parts_f+0xac>
    25fe:	6f ef       	ldi	r22, 0xFF	; 255
    2600:	7f ef       	ldi	r23, 0xFF	; 255
    2602:	02 c0       	rjmp	.+4      	; 0x2608 <__fpcmp_parts_f+0xac>
    2604:	60 e0       	ldi	r22, 0x00	; 0
    2606:	70 e0       	ldi	r23, 0x00	; 0
    2608:	cb 01       	movw	r24, r22
    260a:	1f 91       	pop	r17
    260c:	08 95       	ret

0000260e <GIE_Enable>:
/*
The I-bit is cleared by hardware after an interrupt
has occurred, and is set by the RETI instruction to enable subsequent interrupts.
The I-bit can also be set and cleared by the application with ---the SEI and CLI---  instruction
  */
void GIE_Enable(){
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, 7);
    2616:	af e5       	ldi	r26, 0x5F	; 95
    2618:	b0 e0       	ldi	r27, 0x00	; 0
    261a:	ef e5       	ldi	r30, 0x5F	; 95
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	80 68       	ori	r24, 0x80	; 128
    2622:	8c 93       	st	X, r24
}
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	08 95       	ret

0000262a <GIE_Disable>:

void GIE_Disable(){
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	cd b7       	in	r28, 0x3d	; 61
    2630:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, 7);
    2632:	af e5       	ldi	r26, 0x5F	; 95
    2634:	b0 e0       	ldi	r27, 0x00	; 0
    2636:	ef e5       	ldi	r30, 0x5F	; 95
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	80 81       	ld	r24, Z
    263c:	8f 77       	andi	r24, 0x7F	; 127
    263e:	8c 93       	st	X, r24
}
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	08 95       	ret

00002646 <EXTI_Enable>:

static pf PF1_CallBack ;
static pf PF2_CallBack;
static pf PF3_CallBack;

void EXTI_Enable(u8 INT){
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	0f 92       	push	r0
    264c:	cd b7       	in	r28, 0x3d	; 61
    264e:	de b7       	in	r29, 0x3e	; 62
    2650:	89 83       	std	Y+1, r24	; 0x01
	//Enable Interrupt
	SET_BIT(GICR, INT);
    2652:	ab e5       	ldi	r26, 0x5B	; 91
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	eb e5       	ldi	r30, 0x5B	; 91
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	48 2f       	mov	r20, r24
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	28 2f       	mov	r18, r24
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	02 2e       	mov	r0, r18
    266a:	02 c0       	rjmp	.+4      	; 0x2670 <EXTI_Enable+0x2a>
    266c:	88 0f       	add	r24, r24
    266e:	99 1f       	adc	r25, r25
    2670:	0a 94       	dec	r0
    2672:	e2 f7       	brpl	.-8      	; 0x266c <EXTI_Enable+0x26>
    2674:	84 2b       	or	r24, r20
    2676:	8c 93       	st	X, r24
}
    2678:	0f 90       	pop	r0
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	08 95       	ret

00002680 <EXTI_Disable>:


void EXTI_Disable(u8 INT){
    2680:	df 93       	push	r29
    2682:	cf 93       	push	r28
    2684:	0f 92       	push	r0
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    268a:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(GICR, INT); //Disable bit INT in GICR REG (INT0 , INT1 ,INT2)
    268c:	ab e5       	ldi	r26, 0x5B	; 91
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	eb e5       	ldi	r30, 0x5B	; 91
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	80 81       	ld	r24, Z
    2696:	48 2f       	mov	r20, r24
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	28 2f       	mov	r18, r24
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	02 2e       	mov	r0, r18
    26a4:	02 c0       	rjmp	.+4      	; 0x26aa <EXTI_Disable+0x2a>
    26a6:	88 0f       	add	r24, r24
    26a8:	99 1f       	adc	r25, r25
    26aa:	0a 94       	dec	r0
    26ac:	e2 f7       	brpl	.-8      	; 0x26a6 <EXTI_Disable+0x26>
    26ae:	80 95       	com	r24
    26b0:	84 23       	and	r24, r20
    26b2:	8c 93       	st	X, r24
}
    26b4:	0f 90       	pop	r0
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	08 95       	ret

000026bc <EXTI_InitMode>:

tenuErrorStatus EXTI_InitMode(u8 INT, u8 mode){
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <EXTI_InitMode+0x6>
    26c2:	0f 92       	push	r0
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	8a 83       	std	Y+2, r24	; 0x02
    26ca:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuReturnStateLoc = EOK;
    26cc:	19 82       	std	Y+1, r1	; 0x01
	if(INT == EXTI_INT0){
    26ce:	8a 81       	ldd	r24, Y+2	; 0x02
    26d0:	86 30       	cpi	r24, 0x06	; 6
    26d2:	09 f0       	breq	.+2      	; 0x26d6 <EXTI_InitMode+0x1a>
    26d4:	4b c0       	rjmp	.+150    	; 0x276c <EXTI_InitMode+0xb0>
		if (mode == EXTI_LOW_SGNL){
    26d6:	8b 81       	ldd	r24, Y+3	; 0x03
    26d8:	81 30       	cpi	r24, 0x01	; 1
    26da:	79 f4       	brne	.+30     	; 0x26fa <EXTI_InitMode+0x3e>
			CLR_BIT(MCUCR, EXTI_ISC00);
    26dc:	a5 e5       	ldi	r26, 0x55	; 85
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	e5 e5       	ldi	r30, 0x55	; 85
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	8e 7f       	andi	r24, 0xFE	; 254
    26e8:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, EXTI_ISC01);
    26ea:	a5 e5       	ldi	r26, 0x55	; 85
    26ec:	b0 e0       	ldi	r27, 0x00	; 0
    26ee:	e5 e5       	ldi	r30, 0x55	; 85
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	80 81       	ld	r24, Z
    26f4:	8d 7f       	andi	r24, 0xFD	; 253
    26f6:	8c 93       	st	X, r24
    26f8:	a6 c0       	rjmp	.+332    	; 0x2846 <EXTI_InitMode+0x18a>
		}else if (mode == EXTI_LOG_CHNG){
    26fa:	8b 81       	ldd	r24, Y+3	; 0x03
    26fc:	82 30       	cpi	r24, 0x02	; 2
    26fe:	79 f4       	brne	.+30     	; 0x271e <EXTI_InitMode+0x62>
			SET_BIT(MCUCR, EXTI_ISC00);
    2700:	a5 e5       	ldi	r26, 0x55	; 85
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	e5 e5       	ldi	r30, 0x55	; 85
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	81 60       	ori	r24, 0x01	; 1
    270c:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, EXTI_ISC01);
    270e:	a5 e5       	ldi	r26, 0x55	; 85
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	e5 e5       	ldi	r30, 0x55	; 85
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	8d 7f       	andi	r24, 0xFD	; 253
    271a:	8c 93       	st	X, r24
    271c:	94 c0       	rjmp	.+296    	; 0x2846 <EXTI_InitMode+0x18a>
		}else if (mode == EXTI_FAL_EDGE){
    271e:	8b 81       	ldd	r24, Y+3	; 0x03
    2720:	83 30       	cpi	r24, 0x03	; 3
    2722:	79 f4       	brne	.+30     	; 0x2742 <EXTI_InitMode+0x86>
			CLR_BIT(MCUCR, EXTI_ISC00);
    2724:	a5 e5       	ldi	r26, 0x55	; 85
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	e5 e5       	ldi	r30, 0x55	; 85
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	8e 7f       	andi	r24, 0xFE	; 254
    2730:	8c 93       	st	X, r24
			SET_BIT(MCUCR, EXTI_ISC01);
    2732:	a5 e5       	ldi	r26, 0x55	; 85
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	e5 e5       	ldi	r30, 0x55	; 85
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	80 81       	ld	r24, Z
    273c:	82 60       	ori	r24, 0x02	; 2
    273e:	8c 93       	st	X, r24
    2740:	82 c0       	rjmp	.+260    	; 0x2846 <EXTI_InitMode+0x18a>
		}else if(mode == EXTI_RAIS_EDGE){
    2742:	8b 81       	ldd	r24, Y+3	; 0x03
    2744:	84 30       	cpi	r24, 0x04	; 4
    2746:	79 f4       	brne	.+30     	; 0x2766 <EXTI_InitMode+0xaa>
			SET_BIT(MCUCR, EXTI_ISC00);
    2748:	a5 e5       	ldi	r26, 0x55	; 85
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	e5 e5       	ldi	r30, 0x55	; 85
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	81 60       	ori	r24, 0x01	; 1
    2754:	8c 93       	st	X, r24
			SET_BIT(MCUCR, EXTI_ISC01);
    2756:	a5 e5       	ldi	r26, 0x55	; 85
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e5 e5       	ldi	r30, 0x55	; 85
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	82 60       	ori	r24, 0x02	; 2
    2762:	8c 93       	st	X, r24
    2764:	70 c0       	rjmp	.+224    	; 0x2846 <EXTI_InitMode+0x18a>
		}else{
			enuReturnStateLoc = PARAM_OUT_RANGE;
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	89 83       	std	Y+1, r24	; 0x01
    276a:	6d c0       	rjmp	.+218    	; 0x2846 <EXTI_InitMode+0x18a>
		}

	}else if(INT == EXTI_INT1){
    276c:	8a 81       	ldd	r24, Y+2	; 0x02
    276e:	87 30       	cpi	r24, 0x07	; 7
    2770:	09 f0       	breq	.+2      	; 0x2774 <EXTI_InitMode+0xb8>
    2772:	4b c0       	rjmp	.+150    	; 0x280a <EXTI_InitMode+0x14e>
		if (mode == EXTI_LOW_SGNL){
    2774:	8b 81       	ldd	r24, Y+3	; 0x03
    2776:	81 30       	cpi	r24, 0x01	; 1
    2778:	79 f4       	brne	.+30     	; 0x2798 <EXTI_InitMode+0xdc>
			CLR_BIT(MCUCR, EXTI_ISC10);
    277a:	a5 e5       	ldi	r26, 0x55	; 85
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	e5 e5       	ldi	r30, 0x55	; 85
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	8b 7f       	andi	r24, 0xFB	; 251
    2786:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, EXTI_ISC11);
    2788:	a5 e5       	ldi	r26, 0x55	; 85
    278a:	b0 e0       	ldi	r27, 0x00	; 0
    278c:	e5 e5       	ldi	r30, 0x55	; 85
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	80 81       	ld	r24, Z
    2792:	87 7f       	andi	r24, 0xF7	; 247
    2794:	8c 93       	st	X, r24
    2796:	57 c0       	rjmp	.+174    	; 0x2846 <EXTI_InitMode+0x18a>
		}else if (mode == EXTI_LOG_CHNG){
    2798:	8b 81       	ldd	r24, Y+3	; 0x03
    279a:	82 30       	cpi	r24, 0x02	; 2
    279c:	79 f4       	brne	.+30     	; 0x27bc <EXTI_InitMode+0x100>
			SET_BIT(MCUCR, EXTI_ISC10);
    279e:	a5 e5       	ldi	r26, 0x55	; 85
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	e5 e5       	ldi	r30, 0x55	; 85
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	84 60       	ori	r24, 0x04	; 4
    27aa:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, EXTI_ISC11);
    27ac:	a5 e5       	ldi	r26, 0x55	; 85
    27ae:	b0 e0       	ldi	r27, 0x00	; 0
    27b0:	e5 e5       	ldi	r30, 0x55	; 85
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	80 81       	ld	r24, Z
    27b6:	87 7f       	andi	r24, 0xF7	; 247
    27b8:	8c 93       	st	X, r24
    27ba:	45 c0       	rjmp	.+138    	; 0x2846 <EXTI_InitMode+0x18a>
		}else if (mode == EXTI_FAL_EDGE){
    27bc:	8b 81       	ldd	r24, Y+3	; 0x03
    27be:	83 30       	cpi	r24, 0x03	; 3
    27c0:	79 f4       	brne	.+30     	; 0x27e0 <EXTI_InitMode+0x124>
			CLR_BIT(MCUCR, EXTI_ISC10);
    27c2:	a5 e5       	ldi	r26, 0x55	; 85
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	e5 e5       	ldi	r30, 0x55	; 85
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	8b 7f       	andi	r24, 0xFB	; 251
    27ce:	8c 93       	st	X, r24
			SET_BIT(MCUCR, EXTI_ISC11);
    27d0:	a5 e5       	ldi	r26, 0x55	; 85
    27d2:	b0 e0       	ldi	r27, 0x00	; 0
    27d4:	e5 e5       	ldi	r30, 0x55	; 85
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	88 60       	ori	r24, 0x08	; 8
    27dc:	8c 93       	st	X, r24
    27de:	33 c0       	rjmp	.+102    	; 0x2846 <EXTI_InitMode+0x18a>
		}else if(mode == EXTI_RAIS_EDGE){
    27e0:	8b 81       	ldd	r24, Y+3	; 0x03
    27e2:	84 30       	cpi	r24, 0x04	; 4
    27e4:	79 f4       	brne	.+30     	; 0x2804 <EXTI_InitMode+0x148>
			SET_BIT(MCUCR, EXTI_ISC10);
    27e6:	a5 e5       	ldi	r26, 0x55	; 85
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	e5 e5       	ldi	r30, 0x55	; 85
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	84 60       	ori	r24, 0x04	; 4
    27f2:	8c 93       	st	X, r24
			SET_BIT(MCUCR, EXTI_ISC11);
    27f4:	a5 e5       	ldi	r26, 0x55	; 85
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	e5 e5       	ldi	r30, 0x55	; 85
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	88 60       	ori	r24, 0x08	; 8
    2800:	8c 93       	st	X, r24
    2802:	21 c0       	rjmp	.+66     	; 0x2846 <EXTI_InitMode+0x18a>
		}else{
			enuReturnStateLoc = PARAM_OUT_RANGE;
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	89 83       	std	Y+1, r24	; 0x01
    2808:	1e c0       	rjmp	.+60     	; 0x2846 <EXTI_InitMode+0x18a>
		}

	}else if(INT == EXTI_INT2){
    280a:	8a 81       	ldd	r24, Y+2	; 0x02
    280c:	85 30       	cpi	r24, 0x05	; 5
    280e:	c9 f4       	brne	.+50     	; 0x2842 <EXTI_InitMode+0x186>
		if(mode == EXTI_FAL_EDGE){
    2810:	8b 81       	ldd	r24, Y+3	; 0x03
    2812:	83 30       	cpi	r24, 0x03	; 3
    2814:	41 f4       	brne	.+16     	; 0x2826 <EXTI_InitMode+0x16a>
			CLR_BIT(MCUCSR, EXTI_ISC2);
    2816:	a4 e5       	ldi	r26, 0x54	; 84
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	e4 e5       	ldi	r30, 0x54	; 84
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	8f 7b       	andi	r24, 0xBF	; 191
    2822:	8c 93       	st	X, r24
    2824:	10 c0       	rjmp	.+32     	; 0x2846 <EXTI_InitMode+0x18a>
		}else if(mode == EXTI_RAIS_EDGE){
    2826:	8b 81       	ldd	r24, Y+3	; 0x03
    2828:	84 30       	cpi	r24, 0x04	; 4
    282a:	41 f4       	brne	.+16     	; 0x283c <EXTI_InitMode+0x180>
			SET_BIT(MCUCSR, EXTI_ISC2);
    282c:	a4 e5       	ldi	r26, 0x54	; 84
    282e:	b0 e0       	ldi	r27, 0x00	; 0
    2830:	e4 e5       	ldi	r30, 0x54	; 84
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
    2836:	80 64       	ori	r24, 0x40	; 64
    2838:	8c 93       	st	X, r24
    283a:	05 c0       	rjmp	.+10     	; 0x2846 <EXTI_InitMode+0x18a>
		}else{
			enuReturnStateLoc = PARAM_OUT_RANGE;
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	89 83       	std	Y+1, r24	; 0x01
    2840:	02 c0       	rjmp	.+4      	; 0x2846 <EXTI_InitMode+0x18a>
		}
	}
	else{
		enuReturnStateLoc = PARAM_OUT_RANGE;
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuReturnStateLoc;
    2846:	89 81       	ldd	r24, Y+1	; 0x01

}
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	cf 91       	pop	r28
    2850:	df 91       	pop	r29
    2852:	08 95       	ret

00002854 <EXTI_CheckIntFlag>:

u8 EXTI_CheckIntFlag(u8 INT)    //check if  specific interrupt flag is up
{
    2854:	df 93       	push	r29
    2856:	cf 93       	push	r28
    2858:	00 d0       	rcall	.+0      	; 0x285a <EXTI_CheckIntFlag+0x6>
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
    285e:	89 83       	std	Y+1, r24	; 0x01
	if(INT == EXTI_INT0)
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	86 30       	cpi	r24, 0x06	; 6
    2864:	91 f4       	brne	.+36     	; 0x288a <EXTI_CheckIntFlag+0x36>
	{
		if (GET_BIT(GIFR, EXTI_INTF0) == HIGH)
    2866:	ea e5       	ldi	r30, 0x5A	; 90
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	80 81       	ld	r24, Z
    286c:	82 95       	swap	r24
    286e:	86 95       	lsr	r24
    2870:	86 95       	lsr	r24
    2872:	83 70       	andi	r24, 0x03	; 3
    2874:	88 2f       	mov	r24, r24
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	81 70       	andi	r24, 0x01	; 1
    287a:	90 70       	andi	r25, 0x00	; 0
    287c:	88 23       	and	r24, r24
    287e:	19 f0       	breq	.+6      	; 0x2886 <EXTI_CheckIntFlag+0x32>
		{
			return 1;
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	8a 83       	std	Y+2, r24	; 0x02
    2884:	28 c0       	rjmp	.+80     	; 0x28d6 <EXTI_CheckIntFlag+0x82>
		}
		else
		{
			return 0;
    2886:	1a 82       	std	Y+2, r1	; 0x02
    2888:	26 c0       	rjmp	.+76     	; 0x28d6 <EXTI_CheckIntFlag+0x82>
		}
	}
	else if(INT == EXTI_INT1)
    288a:	89 81       	ldd	r24, Y+1	; 0x01
    288c:	87 30       	cpi	r24, 0x07	; 7
    288e:	69 f4       	brne	.+26     	; 0x28aa <EXTI_CheckIntFlag+0x56>
	{
		if (GET_BIT(GIFR, EXTI_INTF1) == HIGH)
    2890:	ea e5       	ldi	r30, 0x5A	; 90
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	80 81       	ld	r24, Z
    2896:	88 1f       	adc	r24, r24
    2898:	88 27       	eor	r24, r24
    289a:	88 1f       	adc	r24, r24
    289c:	81 30       	cpi	r24, 0x01	; 1
    289e:	19 f4       	brne	.+6      	; 0x28a6 <EXTI_CheckIntFlag+0x52>
		{
			return 1 ;
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	8a 83       	std	Y+2, r24	; 0x02
    28a4:	18 c0       	rjmp	.+48     	; 0x28d6 <EXTI_CheckIntFlag+0x82>
		}
		else
		{
			return 0;
    28a6:	1a 82       	std	Y+2, r1	; 0x02
    28a8:	16 c0       	rjmp	.+44     	; 0x28d6 <EXTI_CheckIntFlag+0x82>
		}
	}
	else if(INT == EXTI_INT2)
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	85 30       	cpi	r24, 0x05	; 5
    28ae:	89 f4       	brne	.+34     	; 0x28d2 <EXTI_CheckIntFlag+0x7e>
	{
		if (GET_BIT(GIFR, EXTI_INTF2) == HIGH)
    28b0:	ea e5       	ldi	r30, 0x5A	; 90
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	82 95       	swap	r24
    28b8:	86 95       	lsr	r24
    28ba:	87 70       	andi	r24, 0x07	; 7
    28bc:	88 2f       	mov	r24, r24
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	81 70       	andi	r24, 0x01	; 1
    28c2:	90 70       	andi	r25, 0x00	; 0
    28c4:	88 23       	and	r24, r24
    28c6:	19 f0       	breq	.+6      	; 0x28ce <EXTI_CheckIntFlag+0x7a>
		{
			return 1 ;
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	8a 83       	std	Y+2, r24	; 0x02
    28cc:	04 c0       	rjmp	.+8      	; 0x28d6 <EXTI_CheckIntFlag+0x82>
		}
		else
		{
			return 0;
    28ce:	1a 82       	std	Y+2, r1	; 0x02
    28d0:	02 c0       	rjmp	.+4      	; 0x28d6 <EXTI_CheckIntFlag+0x82>
		}
	}

	return -1;
    28d2:	8f ef       	ldi	r24, 0xFF	; 255
    28d4:	8a 83       	std	Y+2, r24	; 0x02
    28d6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    28d8:	0f 90       	pop	r0
    28da:	0f 90       	pop	r0
    28dc:	cf 91       	pop	r28
    28de:	df 91       	pop	r29
    28e0:	08 95       	ret

000028e2 <EXTI_FnCallBack_INT0>:

void EXTI_FnCallBack_INT0(pf callback){
    28e2:	df 93       	push	r29
    28e4:	cf 93       	push	r28
    28e6:	00 d0       	rcall	.+0      	; 0x28e8 <EXTI_FnCallBack_INT0+0x6>
    28e8:	cd b7       	in	r28, 0x3d	; 61
    28ea:	de b7       	in	r29, 0x3e	; 62
    28ec:	9a 83       	std	Y+2, r25	; 0x02
    28ee:	89 83       	std	Y+1, r24	; 0x01
	PF1_CallBack = callback;
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	9a 81       	ldd	r25, Y+2	; 0x02
    28f4:	90 93 f5 01 	sts	0x01F5, r25
    28f8:	80 93 f4 01 	sts	0x01F4, r24
}
    28fc:	0f 90       	pop	r0
    28fe:	0f 90       	pop	r0
    2900:	cf 91       	pop	r28
    2902:	df 91       	pop	r29
    2904:	08 95       	ret

00002906 <EXTI_FnCallBack_INT1>:
void EXTI_FnCallBack_INT1(pf callback){
    2906:	df 93       	push	r29
    2908:	cf 93       	push	r28
    290a:	00 d0       	rcall	.+0      	; 0x290c <EXTI_FnCallBack_INT1+0x6>
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
    2910:	9a 83       	std	Y+2, r25	; 0x02
    2912:	89 83       	std	Y+1, r24	; 0x01
	PF2_CallBack = callback;
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	9a 81       	ldd	r25, Y+2	; 0x02
    2918:	90 93 f7 01 	sts	0x01F7, r25
    291c:	80 93 f6 01 	sts	0x01F6, r24
}
    2920:	0f 90       	pop	r0
    2922:	0f 90       	pop	r0
    2924:	cf 91       	pop	r28
    2926:	df 91       	pop	r29
    2928:	08 95       	ret

0000292a <EXTI_FnCallBack_INT2>:
void EXTI_FnCallBack_INT2(pf callback){
    292a:	df 93       	push	r29
    292c:	cf 93       	push	r28
    292e:	00 d0       	rcall	.+0      	; 0x2930 <EXTI_FnCallBack_INT2+0x6>
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
    2934:	9a 83       	std	Y+2, r25	; 0x02
    2936:	89 83       	std	Y+1, r24	; 0x01
	PF3_CallBack = callback;
    2938:	89 81       	ldd	r24, Y+1	; 0x01
    293a:	9a 81       	ldd	r25, Y+2	; 0x02
    293c:	90 93 f9 01 	sts	0x01F9, r25
    2940:	80 93 f8 01 	sts	0x01F8, r24
}
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	cf 91       	pop	r28
    294a:	df 91       	pop	r29
    294c:	08 95       	ret

0000294e <__vector_1>:

void __vector_1() {
    294e:	1f 92       	push	r1
    2950:	0f 92       	push	r0
    2952:	0f b6       	in	r0, 0x3f	; 63
    2954:	0f 92       	push	r0
    2956:	11 24       	eor	r1, r1
    2958:	2f 93       	push	r18
    295a:	3f 93       	push	r19
    295c:	4f 93       	push	r20
    295e:	5f 93       	push	r21
    2960:	6f 93       	push	r22
    2962:	7f 93       	push	r23
    2964:	8f 93       	push	r24
    2966:	9f 93       	push	r25
    2968:	af 93       	push	r26
    296a:	bf 93       	push	r27
    296c:	ef 93       	push	r30
    296e:	ff 93       	push	r31
    2970:	df 93       	push	r29
    2972:	cf 93       	push	r28
    2974:	cd b7       	in	r28, 0x3d	; 61
    2976:	de b7       	in	r29, 0x3e	; 62
	PF1_CallBack();
    2978:	e0 91 f4 01 	lds	r30, 0x01F4
    297c:	f0 91 f5 01 	lds	r31, 0x01F5
    2980:	09 95       	icall
}
    2982:	cf 91       	pop	r28
    2984:	df 91       	pop	r29
    2986:	ff 91       	pop	r31
    2988:	ef 91       	pop	r30
    298a:	bf 91       	pop	r27
    298c:	af 91       	pop	r26
    298e:	9f 91       	pop	r25
    2990:	8f 91       	pop	r24
    2992:	7f 91       	pop	r23
    2994:	6f 91       	pop	r22
    2996:	5f 91       	pop	r21
    2998:	4f 91       	pop	r20
    299a:	3f 91       	pop	r19
    299c:	2f 91       	pop	r18
    299e:	0f 90       	pop	r0
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	0f 90       	pop	r0
    29a4:	1f 90       	pop	r1
    29a6:	18 95       	reti

000029a8 <__vector_2>:


void __vector_2() {
    29a8:	1f 92       	push	r1
    29aa:	0f 92       	push	r0
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	0f 92       	push	r0
    29b0:	11 24       	eor	r1, r1
    29b2:	2f 93       	push	r18
    29b4:	3f 93       	push	r19
    29b6:	4f 93       	push	r20
    29b8:	5f 93       	push	r21
    29ba:	6f 93       	push	r22
    29bc:	7f 93       	push	r23
    29be:	8f 93       	push	r24
    29c0:	9f 93       	push	r25
    29c2:	af 93       	push	r26
    29c4:	bf 93       	push	r27
    29c6:	ef 93       	push	r30
    29c8:	ff 93       	push	r31
    29ca:	df 93       	push	r29
    29cc:	cf 93       	push	r28
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
	PF2_CallBack();
    29d2:	e0 91 f6 01 	lds	r30, 0x01F6
    29d6:	f0 91 f7 01 	lds	r31, 0x01F7
    29da:	09 95       	icall
}
    29dc:	cf 91       	pop	r28
    29de:	df 91       	pop	r29
    29e0:	ff 91       	pop	r31
    29e2:	ef 91       	pop	r30
    29e4:	bf 91       	pop	r27
    29e6:	af 91       	pop	r26
    29e8:	9f 91       	pop	r25
    29ea:	8f 91       	pop	r24
    29ec:	7f 91       	pop	r23
    29ee:	6f 91       	pop	r22
    29f0:	5f 91       	pop	r21
    29f2:	4f 91       	pop	r20
    29f4:	3f 91       	pop	r19
    29f6:	2f 91       	pop	r18
    29f8:	0f 90       	pop	r0
    29fa:	0f be       	out	0x3f, r0	; 63
    29fc:	0f 90       	pop	r0
    29fe:	1f 90       	pop	r1
    2a00:	18 95       	reti

00002a02 <__vector_3>:


void __vector_3() {
    2a02:	1f 92       	push	r1
    2a04:	0f 92       	push	r0
    2a06:	0f b6       	in	r0, 0x3f	; 63
    2a08:	0f 92       	push	r0
    2a0a:	11 24       	eor	r1, r1
    2a0c:	2f 93       	push	r18
    2a0e:	3f 93       	push	r19
    2a10:	4f 93       	push	r20
    2a12:	5f 93       	push	r21
    2a14:	6f 93       	push	r22
    2a16:	7f 93       	push	r23
    2a18:	8f 93       	push	r24
    2a1a:	9f 93       	push	r25
    2a1c:	af 93       	push	r26
    2a1e:	bf 93       	push	r27
    2a20:	ef 93       	push	r30
    2a22:	ff 93       	push	r31
    2a24:	df 93       	push	r29
    2a26:	cf 93       	push	r28
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
	PF3_CallBack();
    2a2c:	e0 91 f8 01 	lds	r30, 0x01F8
    2a30:	f0 91 f9 01 	lds	r31, 0x01F9
    2a34:	09 95       	icall
}
    2a36:	cf 91       	pop	r28
    2a38:	df 91       	pop	r29
    2a3a:	ff 91       	pop	r31
    2a3c:	ef 91       	pop	r30
    2a3e:	bf 91       	pop	r27
    2a40:	af 91       	pop	r26
    2a42:	9f 91       	pop	r25
    2a44:	8f 91       	pop	r24
    2a46:	7f 91       	pop	r23
    2a48:	6f 91       	pop	r22
    2a4a:	5f 91       	pop	r21
    2a4c:	4f 91       	pop	r20
    2a4e:	3f 91       	pop	r19
    2a50:	2f 91       	pop	r18
    2a52:	0f 90       	pop	r0
    2a54:	0f be       	out	0x3f, r0	; 63
    2a56:	0f 90       	pop	r0
    2a58:	1f 90       	pop	r1
    2a5a:	18 95       	reti

00002a5c <DIO_voidInit>:
#include "DIO_priv.h"



void DIO_voidInit(void)
{
    2a5c:	df 93       	push	r29
    2a5e:	cf 93       	push	r28
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
   DDRA = CONC(DIO_PIN_DIR_7 ,DIO_PIN_DIR_6 ,DIO_PIN_DIR_5 ,DIO_PIN_DIR_4 ,DIO_PIN_DIR_3 ,DIO_PIN_DIR_2 ,DIO_PIN_DIR_1 ,DIO_PIN_DIR_0 );
    2a64:	ea e3       	ldi	r30, 0x3A	; 58
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	8f e0       	ldi	r24, 0x0F	; 15
    2a6a:	80 83       	st	Z, r24
   DDRB = CONC(DIO_PIN_DIR_15,DIO_PIN_DIR_14,DIO_PIN_DIR_13,DIO_PIN_DIR_12,DIO_PIN_DIR_11,DIO_PIN_DIR_10,DIO_PIN_DIR_9 ,DIO_PIN_DIR_8 );
    2a6c:	e7 e3       	ldi	r30, 0x37	; 55
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	80 ef       	ldi	r24, 0xF0	; 240
    2a72:	80 83       	st	Z, r24
   DDRC = CONC(DIO_PIN_DIR_23,DIO_PIN_DIR_22,DIO_PIN_DIR_21,DIO_PIN_DIR_20,DIO_PIN_DIR_19,DIO_PIN_DIR_18,DIO_PIN_DIR_17,DIO_PIN_DIR_16);
    2a74:	e4 e3       	ldi	r30, 0x34	; 52
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	8f ef       	ldi	r24, 0xFF	; 255
    2a7a:	80 83       	st	Z, r24
   DDRD = CONC(DIO_PIN_DIR_31,DIO_PIN_DIR_30,DIO_PIN_DIR_29,DIO_PIN_DIR_28,DIO_PIN_DIR_27,DIO_PIN_DIR_26,DIO_PIN_DIR_25,DIO_PIN_DIR_24);
    2a7c:	e1 e3       	ldi	r30, 0x31	; 49
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	8f ef       	ldi	r24, 0xFF	; 255
    2a82:	80 83       	st	Z, r24

}
    2a84:	cf 91       	pop	r28
    2a86:	df 91       	pop	r29
    2a88:	08 95       	ret

00002a8a <DIO_InitCertainPort>:

void DIO_InitCertainPort(u8 PORT)
{
    2a8a:	df 93       	push	r29
    2a8c:	cf 93       	push	r28
    2a8e:	0f 92       	push	r0
    2a90:	cd b7       	in	r28, 0x3d	; 61
    2a92:	de b7       	in	r29, 0x3e	; 62
    2a94:	89 83       	std	Y+1, r24	; 0x01
	if(PORT == ODRA){
    2a96:	eb e3       	ldi	r30, 0x3B	; 59
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	90 81       	ld	r25, Z
    2a9c:	89 81       	ldd	r24, Y+1	; 0x01
    2a9e:	98 17       	cp	r25, r24
    2aa0:	29 f4       	brne	.+10     	; 0x2aac <DIO_InitCertainPort+0x22>
		DDRA = CONC(DIO_PIN_DIR_7 ,DIO_PIN_DIR_6 ,DIO_PIN_DIR_5 ,DIO_PIN_DIR_4 ,DIO_PIN_DIR_3 ,DIO_PIN_DIR_2 ,DIO_PIN_DIR_1 ,DIO_PIN_DIR_0 );
    2aa2:	ea e3       	ldi	r30, 0x3A	; 58
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	8f e0       	ldi	r24, 0x0F	; 15
    2aa8:	80 83       	st	Z, r24
    2aaa:	20 c0       	rjmp	.+64     	; 0x2aec <DIO_InitCertainPort+0x62>
	}else if(PORT == ODRB){
    2aac:	e8 e3       	ldi	r30, 0x38	; 56
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	90 81       	ld	r25, Z
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
    2ab4:	98 17       	cp	r25, r24
    2ab6:	29 f4       	brne	.+10     	; 0x2ac2 <DIO_InitCertainPort+0x38>
		DDRB = CONC(DIO_PIN_DIR_15,DIO_PIN_DIR_14,DIO_PIN_DIR_13,DIO_PIN_DIR_12,DIO_PIN_DIR_11,DIO_PIN_DIR_10,DIO_PIN_DIR_9 ,DIO_PIN_DIR_8 );
    2ab8:	e7 e3       	ldi	r30, 0x37	; 55
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 ef       	ldi	r24, 0xF0	; 240
    2abe:	80 83       	st	Z, r24
    2ac0:	15 c0       	rjmp	.+42     	; 0x2aec <DIO_InitCertainPort+0x62>
	}else if(PORT == ODRC){
    2ac2:	e5 e3       	ldi	r30, 0x35	; 53
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	90 81       	ld	r25, Z
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	98 17       	cp	r25, r24
    2acc:	29 f4       	brne	.+10     	; 0x2ad8 <DIO_InitCertainPort+0x4e>
		DDRC = CONC(DIO_PIN_DIR_23,DIO_PIN_DIR_22,DIO_PIN_DIR_21,DIO_PIN_DIR_20,DIO_PIN_DIR_19,DIO_PIN_DIR_18,DIO_PIN_DIR_17,DIO_PIN_DIR_16);
    2ace:	e4 e3       	ldi	r30, 0x34	; 52
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	8f ef       	ldi	r24, 0xFF	; 255
    2ad4:	80 83       	st	Z, r24
    2ad6:	0a c0       	rjmp	.+20     	; 0x2aec <DIO_InitCertainPort+0x62>
	}else if(PORT == ODRD){
    2ad8:	e2 e3       	ldi	r30, 0x32	; 50
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	90 81       	ld	r25, Z
    2ade:	89 81       	ldd	r24, Y+1	; 0x01
    2ae0:	98 17       	cp	r25, r24
    2ae2:	21 f4       	brne	.+8      	; 0x2aec <DIO_InitCertainPort+0x62>
		DDRD = CONC(DIO_PIN_DIR_31,DIO_PIN_DIR_30,DIO_PIN_DIR_29,DIO_PIN_DIR_28,DIO_PIN_DIR_27,DIO_PIN_DIR_26,DIO_PIN_DIR_25,DIO_PIN_DIR_24);
    2ae4:	e1 e3       	ldi	r30, 0x31	; 49
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	8f ef       	ldi	r24, 0xFF	; 255
    2aea:	80 83       	st	Z, r24
	}
	return;
}
    2aec:	0f 90       	pop	r0
    2aee:	cf 91       	pop	r28
    2af0:	df 91       	pop	r29
    2af2:	08 95       	ret

00002af4 <DIO_enuWritePin>:



tenuErrorStatus DIO_enuWritePin(u8 u8PinNumCpy,u8 u8PinValueCpy)
{
    2af4:	df 93       	push	r29
    2af6:	cf 93       	push	r28
    2af8:	cd b7       	in	r28, 0x3d	; 61
    2afa:	de b7       	in	r29, 0x3e	; 62
    2afc:	2b 97       	sbiw	r28, 0x0b	; 11
    2afe:	0f b6       	in	r0, 0x3f	; 63
    2b00:	f8 94       	cli
    2b02:	de bf       	out	0x3e, r29	; 62
    2b04:	0f be       	out	0x3f, r0	; 63
    2b06:	cd bf       	out	0x3d, r28	; 61
    2b08:	8a 83       	std	Y+2, r24	; 0x02
    2b0a:	6b 83       	std	Y+3, r22	; 0x03

	tenuErrorStatus enuReturnStateLoc = EOK;
    2b0c:	19 82       	std	Y+1, r1	; 0x01
	if (u8PinNumCpy >= DIO_PIN_NUM_0 && u8PinNumCpy <= DIO_PIN_NUM_7)
    2b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b10:	88 30       	cpi	r24, 0x08	; 8
    2b12:	d8 f5       	brcc	.+118    	; 0x2b8a <DIO_enuWritePin+0x96>
	{
		switch (u8PinValueCpy)
    2b14:	8b 81       	ldd	r24, Y+3	; 0x03
    2b16:	28 2f       	mov	r18, r24
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	3b 87       	std	Y+11, r19	; 0x0b
    2b1c:	2a 87       	std	Y+10, r18	; 0x0a
    2b1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b20:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b22:	00 97       	sbiw	r24, 0x00	; 0
    2b24:	31 f0       	breq	.+12     	; 0x2b32 <DIO_enuWritePin+0x3e>
    2b26:	2a 85       	ldd	r18, Y+10	; 0x0a
    2b28:	3b 85       	ldd	r19, Y+11	; 0x0b
    2b2a:	21 30       	cpi	r18, 0x01	; 1
    2b2c:	31 05       	cpc	r19, r1
    2b2e:	b1 f0       	breq	.+44     	; 0x2b5c <DIO_enuWritePin+0x68>
    2b30:	29 c0       	rjmp	.+82     	; 0x2b84 <DIO_enuWritePin+0x90>
		{
			case DIO_LOW :
			 CLR_BIT (ODRA ,  u8PinNumCpy);
    2b32:	ab e3       	ldi	r26, 0x3B	; 59
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	eb e3       	ldi	r30, 0x3B	; 59
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	80 81       	ld	r24, Z
    2b3c:	48 2f       	mov	r20, r24
    2b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b40:	28 2f       	mov	r18, r24
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	02 2e       	mov	r0, r18
    2b4a:	02 c0       	rjmp	.+4      	; 0x2b50 <DIO_enuWritePin+0x5c>
    2b4c:	88 0f       	add	r24, r24
    2b4e:	99 1f       	adc	r25, r25
    2b50:	0a 94       	dec	r0
    2b52:	e2 f7       	brpl	.-8      	; 0x2b4c <DIO_enuWritePin+0x58>
    2b54:	80 95       	com	r24
    2b56:	84 23       	and	r24, r20
    2b58:	8c 93       	st	X, r24
    2b5a:	f8 c0       	rjmp	.+496    	; 0x2d4c <DIO_enuWritePin+0x258>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRA , u8PinNumCpy);
    2b5c:	ab e3       	ldi	r26, 0x3B	; 59
    2b5e:	b0 e0       	ldi	r27, 0x00	; 0
    2b60:	eb e3       	ldi	r30, 0x3B	; 59
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	80 81       	ld	r24, Z
    2b66:	48 2f       	mov	r20, r24
    2b68:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6a:	28 2f       	mov	r18, r24
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	81 e0       	ldi	r24, 0x01	; 1
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	02 2e       	mov	r0, r18
    2b74:	02 c0       	rjmp	.+4      	; 0x2b7a <DIO_enuWritePin+0x86>
    2b76:	88 0f       	add	r24, r24
    2b78:	99 1f       	adc	r25, r25
    2b7a:	0a 94       	dec	r0
    2b7c:	e2 f7       	brpl	.-8      	; 0x2b76 <DIO_enuWritePin+0x82>
    2b7e:	84 2b       	or	r24, r20
    2b80:	8c 93       	st	X, r24
    2b82:	e4 c0       	rjmp	.+456    	; 0x2d4c <DIO_enuWritePin+0x258>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    2b84:	81 e0       	ldi	r24, 0x01	; 1
    2b86:	89 83       	std	Y+1, r24	; 0x01
    2b88:	e1 c0       	rjmp	.+450    	; 0x2d4c <DIO_enuWritePin+0x258>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_8 && u8PinNumCpy <= DIO_PIN_NUM_15)
    2b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8c:	88 30       	cpi	r24, 0x08	; 8
    2b8e:	08 f4       	brcc	.+2      	; 0x2b92 <DIO_enuWritePin+0x9e>
    2b90:	45 c0       	rjmp	.+138    	; 0x2c1c <DIO_enuWritePin+0x128>
    2b92:	8a 81       	ldd	r24, Y+2	; 0x02
    2b94:	80 31       	cpi	r24, 0x10	; 16
    2b96:	08 f0       	brcs	.+2      	; 0x2b9a <DIO_enuWritePin+0xa6>
    2b98:	41 c0       	rjmp	.+130    	; 0x2c1c <DIO_enuWritePin+0x128>
	{
		switch (u8PinValueCpy)
    2b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9c:	28 2f       	mov	r18, r24
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	39 87       	std	Y+9, r19	; 0x09
    2ba2:	28 87       	std	Y+8, r18	; 0x08
    2ba4:	88 85       	ldd	r24, Y+8	; 0x08
    2ba6:	99 85       	ldd	r25, Y+9	; 0x09
    2ba8:	00 97       	sbiw	r24, 0x00	; 0
    2baa:	31 f0       	breq	.+12     	; 0x2bb8 <DIO_enuWritePin+0xc4>
    2bac:	28 85       	ldd	r18, Y+8	; 0x08
    2bae:	39 85       	ldd	r19, Y+9	; 0x09
    2bb0:	21 30       	cpi	r18, 0x01	; 1
    2bb2:	31 05       	cpc	r19, r1
    2bb4:	c9 f0       	breq	.+50     	; 0x2be8 <DIO_enuWritePin+0xf4>
    2bb6:	2f c0       	rjmp	.+94     	; 0x2c16 <DIO_enuWritePin+0x122>
		{
			case DIO_LOW :
			 CLR_BIT (ODRB ,  u8PinNumCpy%8); //0 1 2 3 4 5 6 7 => 8%8 = 0, 9%8 = 1, 10%8 = 2, 11%8 = 3, 12%8 = 4, 13%8 = 5, 14%8 = 6, 15%8 = 7
    2bb8:	a8 e3       	ldi	r26, 0x38	; 56
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	e8 e3       	ldi	r30, 0x38	; 56
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	80 81       	ld	r24, Z
    2bc2:	48 2f       	mov	r20, r24
    2bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc6:	88 2f       	mov	r24, r24
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	9c 01       	movw	r18, r24
    2bcc:	27 70       	andi	r18, 0x07	; 7
    2bce:	30 70       	andi	r19, 0x00	; 0
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	02 2e       	mov	r0, r18
    2bd6:	02 c0       	rjmp	.+4      	; 0x2bdc <DIO_enuWritePin+0xe8>
    2bd8:	88 0f       	add	r24, r24
    2bda:	99 1f       	adc	r25, r25
    2bdc:	0a 94       	dec	r0
    2bde:	e2 f7       	brpl	.-8      	; 0x2bd8 <DIO_enuWritePin+0xe4>
    2be0:	80 95       	com	r24
    2be2:	84 23       	and	r24, r20
    2be4:	8c 93       	st	X, r24
    2be6:	b2 c0       	rjmp	.+356    	; 0x2d4c <DIO_enuWritePin+0x258>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRB , u8PinNumCpy%8);
    2be8:	a8 e3       	ldi	r26, 0x38	; 56
    2bea:	b0 e0       	ldi	r27, 0x00	; 0
    2bec:	e8 e3       	ldi	r30, 0x38	; 56
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	80 81       	ld	r24, Z
    2bf2:	48 2f       	mov	r20, r24
    2bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf6:	88 2f       	mov	r24, r24
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	9c 01       	movw	r18, r24
    2bfc:	27 70       	andi	r18, 0x07	; 7
    2bfe:	30 70       	andi	r19, 0x00	; 0
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	02 2e       	mov	r0, r18
    2c06:	02 c0       	rjmp	.+4      	; 0x2c0c <DIO_enuWritePin+0x118>
    2c08:	88 0f       	add	r24, r24
    2c0a:	99 1f       	adc	r25, r25
    2c0c:	0a 94       	dec	r0
    2c0e:	e2 f7       	brpl	.-8      	; 0x2c08 <DIO_enuWritePin+0x114>
    2c10:	84 2b       	or	r24, r20
    2c12:	8c 93       	st	X, r24
    2c14:	9b c0       	rjmp	.+310    	; 0x2d4c <DIO_enuWritePin+0x258>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	89 83       	std	Y+1, r24	; 0x01
    2c1a:	98 c0       	rjmp	.+304    	; 0x2d4c <DIO_enuWritePin+0x258>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_16 && u8PinNumCpy <= DIO_PIN_NUM_23)
    2c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1e:	80 31       	cpi	r24, 0x10	; 16
    2c20:	08 f4       	brcc	.+2      	; 0x2c24 <DIO_enuWritePin+0x130>
    2c22:	45 c0       	rjmp	.+138    	; 0x2cae <DIO_enuWritePin+0x1ba>
    2c24:	8a 81       	ldd	r24, Y+2	; 0x02
    2c26:	88 31       	cpi	r24, 0x18	; 24
    2c28:	08 f0       	brcs	.+2      	; 0x2c2c <DIO_enuWritePin+0x138>
    2c2a:	41 c0       	rjmp	.+130    	; 0x2cae <DIO_enuWritePin+0x1ba>
	{
		switch (u8PinValueCpy)
    2c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2e:	28 2f       	mov	r18, r24
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	3f 83       	std	Y+7, r19	; 0x07
    2c34:	2e 83       	std	Y+6, r18	; 0x06
    2c36:	8e 81       	ldd	r24, Y+6	; 0x06
    2c38:	9f 81       	ldd	r25, Y+7	; 0x07
    2c3a:	00 97       	sbiw	r24, 0x00	; 0
    2c3c:	31 f0       	breq	.+12     	; 0x2c4a <DIO_enuWritePin+0x156>
    2c3e:	2e 81       	ldd	r18, Y+6	; 0x06
    2c40:	3f 81       	ldd	r19, Y+7	; 0x07
    2c42:	21 30       	cpi	r18, 0x01	; 1
    2c44:	31 05       	cpc	r19, r1
    2c46:	c9 f0       	breq	.+50     	; 0x2c7a <DIO_enuWritePin+0x186>
    2c48:	2f c0       	rjmp	.+94     	; 0x2ca8 <DIO_enuWritePin+0x1b4>
		{
			case DIO_LOW :
			 CLR_BIT (ODRC ,  u8PinNumCpy%16);
    2c4a:	a5 e3       	ldi	r26, 0x35	; 53
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	e5 e3       	ldi	r30, 0x35	; 53
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	80 81       	ld	r24, Z
    2c54:	48 2f       	mov	r20, r24
    2c56:	8a 81       	ldd	r24, Y+2	; 0x02
    2c58:	88 2f       	mov	r24, r24
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	9c 01       	movw	r18, r24
    2c5e:	2f 70       	andi	r18, 0x0F	; 15
    2c60:	30 70       	andi	r19, 0x00	; 0
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	02 2e       	mov	r0, r18
    2c68:	02 c0       	rjmp	.+4      	; 0x2c6e <DIO_enuWritePin+0x17a>
    2c6a:	88 0f       	add	r24, r24
    2c6c:	99 1f       	adc	r25, r25
    2c6e:	0a 94       	dec	r0
    2c70:	e2 f7       	brpl	.-8      	; 0x2c6a <DIO_enuWritePin+0x176>
    2c72:	80 95       	com	r24
    2c74:	84 23       	and	r24, r20
    2c76:	8c 93       	st	X, r24
    2c78:	69 c0       	rjmp	.+210    	; 0x2d4c <DIO_enuWritePin+0x258>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRC , u8PinNumCpy%16);
    2c7a:	a5 e3       	ldi	r26, 0x35	; 53
    2c7c:	b0 e0       	ldi	r27, 0x00	; 0
    2c7e:	e5 e3       	ldi	r30, 0x35	; 53
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	80 81       	ld	r24, Z
    2c84:	48 2f       	mov	r20, r24
    2c86:	8a 81       	ldd	r24, Y+2	; 0x02
    2c88:	88 2f       	mov	r24, r24
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	9c 01       	movw	r18, r24
    2c8e:	2f 70       	andi	r18, 0x0F	; 15
    2c90:	30 70       	andi	r19, 0x00	; 0
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	02 2e       	mov	r0, r18
    2c98:	02 c0       	rjmp	.+4      	; 0x2c9e <DIO_enuWritePin+0x1aa>
    2c9a:	88 0f       	add	r24, r24
    2c9c:	99 1f       	adc	r25, r25
    2c9e:	0a 94       	dec	r0
    2ca0:	e2 f7       	brpl	.-8      	; 0x2c9a <DIO_enuWritePin+0x1a6>
    2ca2:	84 2b       	or	r24, r20
    2ca4:	8c 93       	st	X, r24
    2ca6:	52 c0       	rjmp	.+164    	; 0x2d4c <DIO_enuWritePin+0x258>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	89 83       	std	Y+1, r24	; 0x01
    2cac:	4f c0       	rjmp	.+158    	; 0x2d4c <DIO_enuWritePin+0x258>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_24 && u8PinNumCpy <= DIO_PIN_NUM_31)
    2cae:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb0:	88 31       	cpi	r24, 0x18	; 24
    2cb2:	08 f4       	brcc	.+2      	; 0x2cb6 <DIO_enuWritePin+0x1c2>
    2cb4:	49 c0       	rjmp	.+146    	; 0x2d48 <DIO_enuWritePin+0x254>
    2cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb8:	80 32       	cpi	r24, 0x20	; 32
    2cba:	08 f0       	brcs	.+2      	; 0x2cbe <DIO_enuWritePin+0x1ca>
    2cbc:	45 c0       	rjmp	.+138    	; 0x2d48 <DIO_enuWritePin+0x254>
	{
		switch (u8PinValueCpy)
    2cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc0:	28 2f       	mov	r18, r24
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	3d 83       	std	Y+5, r19	; 0x05
    2cc6:	2c 83       	std	Y+4, r18	; 0x04
    2cc8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cca:	9d 81       	ldd	r25, Y+5	; 0x05
    2ccc:	00 97       	sbiw	r24, 0x00	; 0
    2cce:	31 f0       	breq	.+12     	; 0x2cdc <DIO_enuWritePin+0x1e8>
    2cd0:	2c 81       	ldd	r18, Y+4	; 0x04
    2cd2:	3d 81       	ldd	r19, Y+5	; 0x05
    2cd4:	21 30       	cpi	r18, 0x01	; 1
    2cd6:	31 05       	cpc	r19, r1
    2cd8:	d9 f0       	breq	.+54     	; 0x2d10 <DIO_enuWritePin+0x21c>
    2cda:	33 c0       	rjmp	.+102    	; 0x2d42 <DIO_enuWritePin+0x24e>
		{
			case DIO_LOW :
			 CLR_BIT (ODRD ,  u8PinNumCpy%24);
    2cdc:	a2 e3       	ldi	r26, 0x32	; 50
    2cde:	b0 e0       	ldi	r27, 0x00	; 0
    2ce0:	e2 e3       	ldi	r30, 0x32	; 50
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	80 81       	ld	r24, Z
    2ce6:	48 2f       	mov	r20, r24
    2ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cea:	98 e1       	ldi	r25, 0x18	; 24
    2cec:	69 2f       	mov	r22, r25
    2cee:	0e 94 44 32 	call	0x6488	; 0x6488 <__udivmodqi4>
    2cf2:	89 2f       	mov	r24, r25
    2cf4:	28 2f       	mov	r18, r24
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	02 2e       	mov	r0, r18
    2cfe:	02 c0       	rjmp	.+4      	; 0x2d04 <DIO_enuWritePin+0x210>
    2d00:	88 0f       	add	r24, r24
    2d02:	99 1f       	adc	r25, r25
    2d04:	0a 94       	dec	r0
    2d06:	e2 f7       	brpl	.-8      	; 0x2d00 <DIO_enuWritePin+0x20c>
    2d08:	80 95       	com	r24
    2d0a:	84 23       	and	r24, r20
    2d0c:	8c 93       	st	X, r24
    2d0e:	1e c0       	rjmp	.+60     	; 0x2d4c <DIO_enuWritePin+0x258>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRD , u8PinNumCpy%24);
    2d10:	a2 e3       	ldi	r26, 0x32	; 50
    2d12:	b0 e0       	ldi	r27, 0x00	; 0
    2d14:	e2 e3       	ldi	r30, 0x32	; 50
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	80 81       	ld	r24, Z
    2d1a:	48 2f       	mov	r20, r24
    2d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1e:	98 e1       	ldi	r25, 0x18	; 24
    2d20:	69 2f       	mov	r22, r25
    2d22:	0e 94 44 32 	call	0x6488	; 0x6488 <__udivmodqi4>
    2d26:	89 2f       	mov	r24, r25
    2d28:	28 2f       	mov	r18, r24
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	02 2e       	mov	r0, r18
    2d32:	02 c0       	rjmp	.+4      	; 0x2d38 <DIO_enuWritePin+0x244>
    2d34:	88 0f       	add	r24, r24
    2d36:	99 1f       	adc	r25, r25
    2d38:	0a 94       	dec	r0
    2d3a:	e2 f7       	brpl	.-8      	; 0x2d34 <DIO_enuWritePin+0x240>
    2d3c:	84 2b       	or	r24, r20
    2d3e:	8c 93       	st	X, r24
    2d40:	05 c0       	rjmp	.+10     	; 0x2d4c <DIO_enuWritePin+0x258>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	89 83       	std	Y+1, r24	; 0x01
    2d46:	02 c0       	rjmp	.+4      	; 0x2d4c <DIO_enuWritePin+0x258>
		}
	}
	else
	{
		enuReturnStateLoc = PARAM_OUT_RANGE ;
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuReturnStateLoc ;
    2d4c:	89 81       	ldd	r24, Y+1	; 0x01

}
    2d4e:	2b 96       	adiw	r28, 0x0b	; 11
    2d50:	0f b6       	in	r0, 0x3f	; 63
    2d52:	f8 94       	cli
    2d54:	de bf       	out	0x3e, r29	; 62
    2d56:	0f be       	out	0x3f, r0	; 63
    2d58:	cd bf       	out	0x3d, r28	; 61
    2d5a:	cf 91       	pop	r28
    2d5c:	df 91       	pop	r29
    2d5e:	08 95       	ret

00002d60 <DIO_enuReadPin>:
//#define GET_BIT(byte,pos) ( (byte >> pos) & 1 )
//4 => 0100 
//GET_BIT(4, 1)     0100 >> 1 = 00010 & 0001 = 0

tenuErrorStatus DIO_enuReadPin(u8 u8PinNumCpy ,u8 *pu8PinValueCpy )
{
    2d60:	df 93       	push	r29
    2d62:	cf 93       	push	r28
    2d64:	00 d0       	rcall	.+0      	; 0x2d66 <DIO_enuReadPin+0x6>
    2d66:	00 d0       	rcall	.+0      	; 0x2d68 <DIO_enuReadPin+0x8>
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    2d6c:	8a 83       	std	Y+2, r24	; 0x02
    2d6e:	7c 83       	std	Y+4, r23	; 0x04
    2d70:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuReturnStateLoc = EOK;
    2d72:	19 82       	std	Y+1, r1	; 0x01

	if (pu8PinValueCpy != NULL_PTR)
    2d74:	8b 81       	ldd	r24, Y+3	; 0x03
    2d76:	9c 81       	ldd	r25, Y+4	; 0x04
    2d78:	00 97       	sbiw	r24, 0x00	; 0
    2d7a:	09 f4       	brne	.+2      	; 0x2d7e <DIO_enuReadPin+0x1e>
    2d7c:	71 c0       	rjmp	.+226    	; 0x2e60 <DIO_enuReadPin+0x100>
	{
		//IDR
		if (u8PinNumCpy >= DIO_PIN_NUM_0 && u8PinNumCpy <= DIO_PIN_NUM_7)
    2d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d80:	88 30       	cpi	r24, 0x08	; 8
    2d82:	a0 f4       	brcc	.+40     	; 0x2dac <DIO_enuReadPin+0x4c>
		{
			*pu8PinValueCpy  = GET_BIT(IDRA , u8PinNumCpy);
    2d84:	e9 e3       	ldi	r30, 0x39	; 57
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	80 81       	ld	r24, Z
    2d8a:	28 2f       	mov	r18, r24
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d90:	88 2f       	mov	r24, r24
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	a9 01       	movw	r20, r18
    2d96:	02 c0       	rjmp	.+4      	; 0x2d9c <DIO_enuReadPin+0x3c>
    2d98:	55 95       	asr	r21
    2d9a:	47 95       	ror	r20
    2d9c:	8a 95       	dec	r24
    2d9e:	e2 f7       	brpl	.-8      	; 0x2d98 <DIO_enuReadPin+0x38>
    2da0:	ca 01       	movw	r24, r20
    2da2:	81 70       	andi	r24, 0x01	; 1
    2da4:	eb 81       	ldd	r30, Y+3	; 0x03
    2da6:	fc 81       	ldd	r31, Y+4	; 0x04
    2da8:	80 83       	st	Z, r24
    2daa:	5c c0       	rjmp	.+184    	; 0x2e64 <DIO_enuReadPin+0x104>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_8 && u8PinNumCpy <= DIO_PIN_NUM_15)
    2dac:	8a 81       	ldd	r24, Y+2	; 0x02
    2dae:	88 30       	cpi	r24, 0x08	; 8
    2db0:	c8 f0       	brcs	.+50     	; 0x2de4 <DIO_enuReadPin+0x84>
    2db2:	8a 81       	ldd	r24, Y+2	; 0x02
    2db4:	80 31       	cpi	r24, 0x10	; 16
    2db6:	b0 f4       	brcc	.+44     	; 0x2de4 <DIO_enuReadPin+0x84>
		{
			*pu8PinValueCpy  = GET_BIT(IDRB , u8PinNumCpy%8);
    2db8:	e6 e3       	ldi	r30, 0x36	; 54
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	80 81       	ld	r24, Z
    2dbe:	28 2f       	mov	r18, r24
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc4:	88 2f       	mov	r24, r24
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	87 70       	andi	r24, 0x07	; 7
    2dca:	90 70       	andi	r25, 0x00	; 0
    2dcc:	a9 01       	movw	r20, r18
    2dce:	02 c0       	rjmp	.+4      	; 0x2dd4 <DIO_enuReadPin+0x74>
    2dd0:	55 95       	asr	r21
    2dd2:	47 95       	ror	r20
    2dd4:	8a 95       	dec	r24
    2dd6:	e2 f7       	brpl	.-8      	; 0x2dd0 <DIO_enuReadPin+0x70>
    2dd8:	ca 01       	movw	r24, r20
    2dda:	81 70       	andi	r24, 0x01	; 1
    2ddc:	eb 81       	ldd	r30, Y+3	; 0x03
    2dde:	fc 81       	ldd	r31, Y+4	; 0x04
    2de0:	80 83       	st	Z, r24
    2de2:	40 c0       	rjmp	.+128    	; 0x2e64 <DIO_enuReadPin+0x104>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_16 && u8PinNumCpy <= DIO_PIN_NUM_23)
    2de4:	8a 81       	ldd	r24, Y+2	; 0x02
    2de6:	80 31       	cpi	r24, 0x10	; 16
    2de8:	c8 f0       	brcs	.+50     	; 0x2e1c <DIO_enuReadPin+0xbc>
    2dea:	8a 81       	ldd	r24, Y+2	; 0x02
    2dec:	88 31       	cpi	r24, 0x18	; 24
    2dee:	b0 f4       	brcc	.+44     	; 0x2e1c <DIO_enuReadPin+0xbc>
		{
			*pu8PinValueCpy  = GET_BIT(IDRC , u8PinNumCpy%16);
    2df0:	e3 e3       	ldi	r30, 0x33	; 51
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	80 81       	ld	r24, Z
    2df6:	28 2f       	mov	r18, r24
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfc:	88 2f       	mov	r24, r24
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	8f 70       	andi	r24, 0x0F	; 15
    2e02:	90 70       	andi	r25, 0x00	; 0
    2e04:	a9 01       	movw	r20, r18
    2e06:	02 c0       	rjmp	.+4      	; 0x2e0c <DIO_enuReadPin+0xac>
    2e08:	55 95       	asr	r21
    2e0a:	47 95       	ror	r20
    2e0c:	8a 95       	dec	r24
    2e0e:	e2 f7       	brpl	.-8      	; 0x2e08 <DIO_enuReadPin+0xa8>
    2e10:	ca 01       	movw	r24, r20
    2e12:	81 70       	andi	r24, 0x01	; 1
    2e14:	eb 81       	ldd	r30, Y+3	; 0x03
    2e16:	fc 81       	ldd	r31, Y+4	; 0x04
    2e18:	80 83       	st	Z, r24
    2e1a:	24 c0       	rjmp	.+72     	; 0x2e64 <DIO_enuReadPin+0x104>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_24 && u8PinNumCpy <= DIO_PIN_NUM_31)
    2e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1e:	88 31       	cpi	r24, 0x18	; 24
    2e20:	e0 f0       	brcs	.+56     	; 0x2e5a <DIO_enuReadPin+0xfa>
    2e22:	8a 81       	ldd	r24, Y+2	; 0x02
    2e24:	80 32       	cpi	r24, 0x20	; 32
    2e26:	c8 f4       	brcc	.+50     	; 0x2e5a <DIO_enuReadPin+0xfa>
		{
			*pu8PinValueCpy  = GET_BIT(IDRD , u8PinNumCpy%24);
    2e28:	e0 e3       	ldi	r30, 0x30	; 48
    2e2a:	f0 e0       	ldi	r31, 0x00	; 0
    2e2c:	80 81       	ld	r24, Z
    2e2e:	28 2f       	mov	r18, r24
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	8a 81       	ldd	r24, Y+2	; 0x02
    2e34:	98 e1       	ldi	r25, 0x18	; 24
    2e36:	69 2f       	mov	r22, r25
    2e38:	0e 94 44 32 	call	0x6488	; 0x6488 <__udivmodqi4>
    2e3c:	89 2f       	mov	r24, r25
    2e3e:	88 2f       	mov	r24, r24
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	a9 01       	movw	r20, r18
    2e44:	02 c0       	rjmp	.+4      	; 0x2e4a <DIO_enuReadPin+0xea>
    2e46:	55 95       	asr	r21
    2e48:	47 95       	ror	r20
    2e4a:	8a 95       	dec	r24
    2e4c:	e2 f7       	brpl	.-8      	; 0x2e46 <DIO_enuReadPin+0xe6>
    2e4e:	ca 01       	movw	r24, r20
    2e50:	81 70       	andi	r24, 0x01	; 1
    2e52:	eb 81       	ldd	r30, Y+3	; 0x03
    2e54:	fc 81       	ldd	r31, Y+4	; 0x04
    2e56:	80 83       	st	Z, r24
    2e58:	05 c0       	rjmp	.+10     	; 0x2e64 <DIO_enuReadPin+0x104>
		}
		else
		{
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	89 83       	std	Y+1, r24	; 0x01
    2e5e:	02 c0       	rjmp	.+4      	; 0x2e64 <DIO_enuReadPin+0x104>
		}
	}
	else
	{
		enuReturnStateLoc = PARAM_NULL_PTR ;
    2e60:	82 e0       	ldi	r24, 0x02	; 2
    2e62:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuReturnStateLoc ;
    2e64:	89 81       	ldd	r24, Y+1	; 0x01

}
    2e66:	0f 90       	pop	r0
    2e68:	0f 90       	pop	r0
    2e6a:	0f 90       	pop	r0
    2e6c:	0f 90       	pop	r0
    2e6e:	cf 91       	pop	r28
    2e70:	df 91       	pop	r29
    2e72:	08 95       	ret

00002e74 <DIO_enuStatePullup>:

tenuErrorStatus DIO_enuStatePullup(u8 u8PinNumCpy, u8 u8StateCpy)
{
    2e74:	df 93       	push	r29
    2e76:	cf 93       	push	r28
    2e78:	00 d0       	rcall	.+0      	; 0x2e7a <DIO_enuStatePullup+0x6>
    2e7a:	cd b7       	in	r28, 0x3d	; 61
    2e7c:	de b7       	in	r29, 0x3e	; 62
    2e7e:	89 83       	std	Y+1, r24	; 0x01
    2e80:	6a 83       	std	Y+2, r22	; 0x02
   return DIO_enuWritePin(u8PinNumCpy,u8StateCpy);
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
    2e84:	6a 81       	ldd	r22, Y+2	; 0x02
    2e86:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
}
    2e8a:	0f 90       	pop	r0
    2e8c:	0f 90       	pop	r0
    2e8e:	cf 91       	pop	r28
    2e90:	df 91       	pop	r29
    2e92:	08 95       	ret

00002e94 <DIO_enuWriteGroup>:



tenuErrorStatus DIO_enuWriteGroup(u8 *pau8PinNumCpy,u8 * pau8PinValueCpy , u8 u8SizeCpy)
{
    2e94:	df 93       	push	r29
    2e96:	cf 93       	push	r28
    2e98:	cd b7       	in	r28, 0x3d	; 61
    2e9a:	de b7       	in	r29, 0x3e	; 62
    2e9c:	27 97       	sbiw	r28, 0x07	; 7
    2e9e:	0f b6       	in	r0, 0x3f	; 63
    2ea0:	f8 94       	cli
    2ea2:	de bf       	out	0x3e, r29	; 62
    2ea4:	0f be       	out	0x3f, r0	; 63
    2ea6:	cd bf       	out	0x3d, r28	; 61
    2ea8:	9c 83       	std	Y+4, r25	; 0x04
    2eaa:	8b 83       	std	Y+3, r24	; 0x03
    2eac:	7e 83       	std	Y+6, r23	; 0x06
    2eae:	6d 83       	std	Y+5, r22	; 0x05
    2eb0:	4f 83       	std	Y+7, r20	; 0x07
	tenuErrorStatus enuReturnStateLoc = EOK;
    2eb2:	1a 82       	std	Y+2, r1	; 0x02
	u8 u8CntrLoc;
	for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    2eb4:	19 82       	std	Y+1, r1	; 0x01
    2eb6:	1d c0       	rjmp	.+58     	; 0x2ef2 <DIO_enuWriteGroup+0x5e>
	{
		enuReturnStateLoc = DIO_enuWritePin(pau8PinNumCpy[u8CntrLoc],pau8PinValueCpy[u8CntrLoc]);
    2eb8:	89 81       	ldd	r24, Y+1	; 0x01
    2eba:	28 2f       	mov	r18, r24
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	e2 0f       	add	r30, r18
    2ec6:	f3 1f       	adc	r31, r19
    2ec8:	40 81       	ld	r20, Z
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
    2ecc:	28 2f       	mov	r18, r24
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed4:	fc 01       	movw	r30, r24
    2ed6:	e2 0f       	add	r30, r18
    2ed8:	f3 1f       	adc	r31, r19
    2eda:	90 81       	ld	r25, Z
    2edc:	84 2f       	mov	r24, r20
    2ede:	69 2f       	mov	r22, r25
    2ee0:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    2ee4:	8a 83       	std	Y+2, r24	; 0x02
		if (enuReturnStateLoc != EOK)
    2ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee8:	88 23       	and	r24, r24
    2eea:	39 f4       	brne	.+14     	; 0x2efa <DIO_enuWriteGroup+0x66>

tenuErrorStatus DIO_enuWriteGroup(u8 *pau8PinNumCpy,u8 * pau8PinValueCpy , u8 u8SizeCpy)
{
	tenuErrorStatus enuReturnStateLoc = EOK;
	u8 u8CntrLoc;
	for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	8f 5f       	subi	r24, 0xFF	; 255
    2ef0:	89 83       	std	Y+1, r24	; 0x01
    2ef2:	99 81       	ldd	r25, Y+1	; 0x01
    2ef4:	8f 81       	ldd	r24, Y+7	; 0x07
    2ef6:	98 17       	cp	r25, r24
    2ef8:	f8 f2       	brcs	.-66     	; 0x2eb8 <DIO_enuWriteGroup+0x24>
		if (enuReturnStateLoc != EOK)
		{
			break;
		}
	}
	return enuReturnStateLoc;
    2efa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2efc:	27 96       	adiw	r28, 0x07	; 7
    2efe:	0f b6       	in	r0, 0x3f	; 63
    2f00:	f8 94       	cli
    2f02:	de bf       	out	0x3e, r29	; 62
    2f04:	0f be       	out	0x3f, r0	; 63
    2f06:	cd bf       	out	0x3d, r28	; 61
    2f08:	cf 91       	pop	r28
    2f0a:	df 91       	pop	r29
    2f0c:	08 95       	ret

00002f0e <ADC_voidInit>:
#include "ADC_cfg.h"
#include "ADC_priv.h"
pf ADC_pfCall = NULL_PTR;
u16 ADC_u16ReadValue ;

void ADC_voidInit(void){
    2f0e:	df 93       	push	r29
    2f10:	cf 93       	push	r28
    2f12:	cd b7       	in	r28, 0x3d	; 61
    2f14:	de b7       	in	r29, 0x3e	; 62

	#if ADC_RESOLUTION_MODE == ADC_bit_Mode_8
	//Write one to ADLAR to left adjust the result
		SET_BIT(ADCMUX, ADC_ADLAR_BIT);
    2f16:	a7 e2       	ldi	r26, 0x27	; 39
    2f18:	b0 e0       	ldi	r27, 0x00	; 0
    2f1a:	e7 e2       	ldi	r30, 0x27	; 39
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	80 81       	ld	r24, Z
    2f20:	80 62       	ori	r24, 0x20	; 32
    2f22:	8c 93       	st	X, r24
	#else
		CLR_BIT(ADCMUX, ADC_ADLAR_BIT);
	#endif

	#if ADC_VOLTAGE_REF == ADC_AREF
		CLR_BIT(ADCMUX, ADC_REFS0_BIT);
    2f24:	a7 e2       	ldi	r26, 0x27	; 39
    2f26:	b0 e0       	ldi	r27, 0x00	; 0
    2f28:	e7 e2       	ldi	r30, 0x27	; 39
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	80 81       	ld	r24, Z
    2f2e:	8f 7b       	andi	r24, 0xBF	; 191
    2f30:	8c 93       	st	X, r24
		CLR_BIT(ADCMUX, ADC_REFS1_BIT);
    2f32:	a7 e2       	ldi	r26, 0x27	; 39
    2f34:	b0 e0       	ldi	r27, 0x00	; 0
    2f36:	e7 e2       	ldi	r30, 0x27	; 39
    2f38:	f0 e0       	ldi	r31, 0x00	; 0
    2f3a:	80 81       	ld	r24, Z
    2f3c:	8f 77       	andi	r24, 0x7F	; 127
    2f3e:	8c 93       	st	X, r24
	#else
		SET_BIT(ADCMUX, ADC_REFS0_BIT);
		SET_BIT(ADCMUX, ADC_REFS1_BIT);
	#endif

	CLR_BIT(ADCSRA, ADC_ADEN_BIT);
    2f40:	a6 e2       	ldi	r26, 0x26	; 38
    2f42:	b0 e0       	ldi	r27, 0x00	; 0
    2f44:	e6 e2       	ldi	r30, 0x26	; 38
    2f46:	f0 e0       	ldi	r31, 0x00	; 0
    2f48:	80 81       	ld	r24, Z
    2f4a:	8f 77       	andi	r24, 0x7F	; 127
    2f4c:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADC_ADSC_BIT);
    2f4e:	a6 e2       	ldi	r26, 0x26	; 38
    2f50:	b0 e0       	ldi	r27, 0x00	; 0
    2f52:	e6 e2       	ldi	r30, 0x26	; 38
    2f54:	f0 e0       	ldi	r31, 0x00	; 0
    2f56:	80 81       	ld	r24, Z
    2f58:	8f 7b       	andi	r24, 0xBF	; 191
    2f5a:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADC_ADATE_BIT);
    2f5c:	a6 e2       	ldi	r26, 0x26	; 38
    2f5e:	b0 e0       	ldi	r27, 0x00	; 0
    2f60:	e6 e2       	ldi	r30, 0x26	; 38
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	80 81       	ld	r24, Z
    2f66:	8f 7d       	andi	r24, 0xDF	; 223
    2f68:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADC_ADIF_BIT);
    2f6a:	a6 e2       	ldi	r26, 0x26	; 38
    2f6c:	b0 e0       	ldi	r27, 0x00	; 0
    2f6e:	e6 e2       	ldi	r30, 0x26	; 38
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	80 81       	ld	r24, Z
    2f74:	8f 7e       	andi	r24, 0xEF	; 239
    2f76:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADC_ADIE_BIT);
    2f78:	a6 e2       	ldi	r26, 0x26	; 38
    2f7a:	b0 e0       	ldi	r27, 0x00	; 0
    2f7c:	e6 e2       	ldi	r30, 0x26	; 38
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	80 81       	ld	r24, Z
    2f82:	87 7f       	andi	r24, 0xF7	; 247
    2f84:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADC_PRESCALAR);
    2f86:	a6 e2       	ldi	r26, 0x26	; 38
    2f88:	b0 e0       	ldi	r27, 0x00	; 0
    2f8a:	e6 e2       	ldi	r30, 0x26	; 38
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	80 81       	ld	r24, Z
    2f90:	80 62       	ori	r24, 0x20	; 32
    2f92:	8c 93       	st	X, r24

	#if ADC_TRIGGER_MODE == ADC_SINGLE_MODE
		CLR_BIT(ADCSRA, ADC_ADATE_BIT);
    2f94:	a6 e2       	ldi	r26, 0x26	; 38
    2f96:	b0 e0       	ldi	r27, 0x00	; 0
    2f98:	e6 e2       	ldi	r30, 0x26	; 38
    2f9a:	f0 e0       	ldi	r31, 0x00	; 0
    2f9c:	80 81       	ld	r24, Z
    2f9e:	8f 7d       	andi	r24, 0xDF	; 223
    2fa0:	8c 93       	st	X, r24
	#else
		SET_BIT(ADCSRA , ADC_ADATE_BIT) ;
		SFIOR &= 0b00011111;
		SET_BIT(SFIOR, ADC_TRIGGER_MODE);
	#endif
}
    2fa2:	cf 91       	pop	r28
    2fa4:	df 91       	pop	r29
    2fa6:	08 95       	ret

00002fa8 <ADC_voidEnable>:

void ADC_voidEnable(void)
{
    2fa8:	df 93       	push	r29
    2faa:	cf 93       	push	r28
    2fac:	cd b7       	in	r28, 0x3d	; 61
    2fae:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA , ADC_ADEN_BIT);
    2fb0:	a6 e2       	ldi	r26, 0x26	; 38
    2fb2:	b0 e0       	ldi	r27, 0x00	; 0
    2fb4:	e6 e2       	ldi	r30, 0x26	; 38
    2fb6:	f0 e0       	ldi	r31, 0x00	; 0
    2fb8:	80 81       	ld	r24, Z
    2fba:	80 68       	ori	r24, 0x80	; 128
    2fbc:	8c 93       	st	X, r24
}
    2fbe:	cf 91       	pop	r28
    2fc0:	df 91       	pop	r29
    2fc2:	08 95       	ret

00002fc4 <ADC_voidDisable>:

void ADC_voidDisable(void)
{
    2fc4:	df 93       	push	r29
    2fc6:	cf 93       	push	r28
    2fc8:	cd b7       	in	r28, 0x3d	; 61
    2fca:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA , ADC_ADEN_BIT);
    2fcc:	a6 e2       	ldi	r26, 0x26	; 38
    2fce:	b0 e0       	ldi	r27, 0x00	; 0
    2fd0:	e6 e2       	ldi	r30, 0x26	; 38
    2fd2:	f0 e0       	ldi	r31, 0x00	; 0
    2fd4:	80 81       	ld	r24, Z
    2fd6:	8f 77       	andi	r24, 0x7F	; 127
    2fd8:	8c 93       	st	X, r24
}
    2fda:	cf 91       	pop	r28
    2fdc:	df 91       	pop	r29
    2fde:	08 95       	ret

00002fe0 <ADC_voidEnableInterrupt>:

void ADC_voidEnableInterrupt(void)
{
    2fe0:	df 93       	push	r29
    2fe2:	cf 93       	push	r28
    2fe4:	cd b7       	in	r28, 0x3d	; 61
    2fe6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA , ADC_ADIE_BIT);
    2fe8:	a6 e2       	ldi	r26, 0x26	; 38
    2fea:	b0 e0       	ldi	r27, 0x00	; 0
    2fec:	e6 e2       	ldi	r30, 0x26	; 38
    2fee:	f0 e0       	ldi	r31, 0x00	; 0
    2ff0:	80 81       	ld	r24, Z
    2ff2:	88 60       	ori	r24, 0x08	; 8
    2ff4:	8c 93       	st	X, r24
}
    2ff6:	cf 91       	pop	r28
    2ff8:	df 91       	pop	r29
    2ffa:	08 95       	ret

00002ffc <ADC_voidDisableInterrupt>:
void ADC_voidDisableInterrupt(void)
{
    2ffc:	df 93       	push	r29
    2ffe:	cf 93       	push	r28
    3000:	cd b7       	in	r28, 0x3d	; 61
    3002:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA , ADC_ADIE_BIT);
    3004:	a6 e2       	ldi	r26, 0x26	; 38
    3006:	b0 e0       	ldi	r27, 0x00	; 0
    3008:	e6 e2       	ldi	r30, 0x26	; 38
    300a:	f0 e0       	ldi	r31, 0x00	; 0
    300c:	80 81       	ld	r24, Z
    300e:	87 7f       	andi	r24, 0xF7	; 247
    3010:	8c 93       	st	X, r24
}
    3012:	cf 91       	pop	r28
    3014:	df 91       	pop	r29
    3016:	08 95       	ret

00003018 <ADC_voidSetCallback>:

void ADC_voidSetCallback(pf pfCallbackCpy)
{
    3018:	df 93       	push	r29
    301a:	cf 93       	push	r28
    301c:	00 d0       	rcall	.+0      	; 0x301e <ADC_voidSetCallback+0x6>
    301e:	cd b7       	in	r28, 0x3d	; 61
    3020:	de b7       	in	r29, 0x3e	; 62
    3022:	9a 83       	std	Y+2, r25	; 0x02
    3024:	89 83       	std	Y+1, r24	; 0x01
	ADC_pfCall = pfCallbackCpy ;
    3026:	89 81       	ldd	r24, Y+1	; 0x01
    3028:	9a 81       	ldd	r25, Y+2	; 0x02
    302a:	90 93 fb 01 	sts	0x01FB, r25
    302e:	80 93 fa 01 	sts	0x01FA, r24
}
    3032:	0f 90       	pop	r0
    3034:	0f 90       	pop	r0
    3036:	cf 91       	pop	r28
    3038:	df 91       	pop	r29
    303a:	08 95       	ret

0000303c <ADC_voidStartConversion>:

void ADC_voidStartConversion(u8 u8ChannelNbCpy)
{
    303c:	df 93       	push	r29
    303e:	cf 93       	push	r28
    3040:	0f 92       	push	r0
    3042:	cd b7       	in	r28, 0x3d	; 61
    3044:	de b7       	in	r29, 0x3e	; 62
    3046:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(ADCMUX, ADC_REFS0_BIT);
    3048:	a7 e2       	ldi	r26, 0x27	; 39
    304a:	b0 e0       	ldi	r27, 0x00	; 0
    304c:	e7 e2       	ldi	r30, 0x27	; 39
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	80 81       	ld	r24, Z
    3052:	8f 7b       	andi	r24, 0xBF	; 191
    3054:	8c 93       	st	X, r24
	CLR_BIT(ADCMUX, ADC_REFS1_BIT);
    3056:	a7 e2       	ldi	r26, 0x27	; 39
    3058:	b0 e0       	ldi	r27, 0x00	; 0
    305a:	e7 e2       	ldi	r30, 0x27	; 39
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	80 81       	ld	r24, Z
    3060:	8f 77       	andi	r24, 0x7F	; 127
    3062:	8c 93       	st	X, r24
	CLR_BIT(ADCMUX, ADC_ADLAR_BIT);
    3064:	a7 e2       	ldi	r26, 0x27	; 39
    3066:	b0 e0       	ldi	r27, 0x00	; 0
    3068:	e7 e2       	ldi	r30, 0x27	; 39
    306a:	f0 e0       	ldi	r31, 0x00	; 0
    306c:	80 81       	ld	r24, Z
    306e:	8f 7d       	andi	r24, 0xDF	; 223
    3070:	8c 93       	st	X, r24
	ADCMUX |= u8ChannelNbCpy ;
    3072:	a7 e2       	ldi	r26, 0x27	; 39
    3074:	b0 e0       	ldi	r27, 0x00	; 0
    3076:	e7 e2       	ldi	r30, 0x27	; 39
    3078:	f0 e0       	ldi	r31, 0x00	; 0
    307a:	90 81       	ld	r25, Z
    307c:	89 81       	ldd	r24, Y+1	; 0x01
    307e:	89 2b       	or	r24, r25
    3080:	8c 93       	st	X, r24
	//start conversion
	SET_BIT(ADCSRA , ADC_ADSC_BIT) ;
    3082:	a6 e2       	ldi	r26, 0x26	; 38
    3084:	b0 e0       	ldi	r27, 0x00	; 0
    3086:	e6 e2       	ldi	r30, 0x26	; 38
    3088:	f0 e0       	ldi	r31, 0x00	; 0
    308a:	80 81       	ld	r24, Z
    308c:	80 64       	ori	r24, 0x40	; 64
    308e:	8c 93       	st	X, r24
}
    3090:	0f 90       	pop	r0
    3092:	cf 91       	pop	r28
    3094:	df 91       	pop	r29
    3096:	08 95       	ret

00003098 <ADC_voidChangeMode>:

void ADC_voidChangeMode(u8 u8ModeCpy)
{
    3098:	df 93       	push	r29
    309a:	cf 93       	push	r28
    309c:	0f 92       	push	r0
    309e:	cd b7       	in	r28, 0x3d	; 61
    30a0:	de b7       	in	r29, 0x3e	; 62
    30a2:	89 83       	std	Y+1, r24	; 0x01
	if (u8ModeCpy < ADC_SINGLE_MODE)
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	88 30       	cpi	r24, 0x08	; 8
    30a8:	10 f5       	brcc	.+68     	; 0x30ee <ADC_voidChangeMode+0x56>
	{
		SET_BIT(ADCSRA , ADC_ADATE_BIT) ;
    30aa:	a6 e2       	ldi	r26, 0x26	; 38
    30ac:	b0 e0       	ldi	r27, 0x00	; 0
    30ae:	e6 e2       	ldi	r30, 0x26	; 38
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	80 81       	ld	r24, Z
    30b4:	80 62       	ori	r24, 0x20	; 32
    30b6:	8c 93       	st	X, r24
		SFIOR &=0b00011111;
    30b8:	a0 e5       	ldi	r26, 0x50	; 80
    30ba:	b0 e0       	ldi	r27, 0x00	; 0
    30bc:	e0 e5       	ldi	r30, 0x50	; 80
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	80 81       	ld	r24, Z
    30c2:	8f 71       	andi	r24, 0x1F	; 31
    30c4:	8c 93       	st	X, r24
		SFIOR |= u8ModeCpy << 5;
    30c6:	a0 e5       	ldi	r26, 0x50	; 80
    30c8:	b0 e0       	ldi	r27, 0x00	; 0
    30ca:	e0 e5       	ldi	r30, 0x50	; 80
    30cc:	f0 e0       	ldi	r31, 0x00	; 0
    30ce:	80 81       	ld	r24, Z
    30d0:	28 2f       	mov	r18, r24
    30d2:	89 81       	ldd	r24, Y+1	; 0x01
    30d4:	88 2f       	mov	r24, r24
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	88 0f       	add	r24, r24
    30da:	99 1f       	adc	r25, r25
    30dc:	82 95       	swap	r24
    30de:	92 95       	swap	r25
    30e0:	90 7f       	andi	r25, 0xF0	; 240
    30e2:	98 27       	eor	r25, r24
    30e4:	80 7f       	andi	r24, 0xF0	; 240
    30e6:	98 27       	eor	r25, r24
    30e8:	82 2b       	or	r24, r18
    30ea:	8c 93       	st	X, r24
    30ec:	0a c0       	rjmp	.+20     	; 0x3102 <ADC_voidChangeMode+0x6a>
	}
	else if (u8ModeCpy == ADC_SINGLE_MODE)
    30ee:	89 81       	ldd	r24, Y+1	; 0x01
    30f0:	88 30       	cpi	r24, 0x08	; 8
    30f2:	39 f4       	brne	.+14     	; 0x3102 <ADC_voidChangeMode+0x6a>
	{
		CLR_BIT(ADCSRA , ADC_ADATE_BIT) ;
    30f4:	a6 e2       	ldi	r26, 0x26	; 38
    30f6:	b0 e0       	ldi	r27, 0x00	; 0
    30f8:	e6 e2       	ldi	r30, 0x26	; 38
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	80 81       	ld	r24, Z
    30fe:	8f 7d       	andi	r24, 0xDF	; 223
    3100:	8c 93       	st	X, r24
	}
	else
	{

	}
}
    3102:	0f 90       	pop	r0
    3104:	cf 91       	pop	r28
    3106:	df 91       	pop	r29
    3108:	08 95       	ret

0000310a <ADC_u16ReadSync>:

/* polling */
u16 ADC_u16ReadSync(u8 u8ChannelNbCpy)
{
    310a:	df 93       	push	r29
    310c:	cf 93       	push	r28
    310e:	00 d0       	rcall	.+0      	; 0x3110 <ADC_u16ReadSync+0x6>
    3110:	0f 92       	push	r0
    3112:	cd b7       	in	r28, 0x3d	; 61
    3114:	de b7       	in	r29, 0x3e	; 62
    3116:	8b 83       	std	Y+3, r24	; 0x03
	u16 u16ReadValueLoc ;
	ADC_voidStartConversion(u8ChannelNbCpy);
    3118:	8b 81       	ldd	r24, Y+3	; 0x03
    311a:	0e 94 1e 18 	call	0x303c	; 0x303c <ADC_voidStartConversion>
	/*wait conversion till finish*/
	while (GET_BIT(ADCSRA , ADC_ADIF_BIT) == 0);
    311e:	e6 e2       	ldi	r30, 0x26	; 38
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	80 81       	ld	r24, Z
    3124:	82 95       	swap	r24
    3126:	8f 70       	andi	r24, 0x0F	; 15
    3128:	88 2f       	mov	r24, r24
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	81 70       	andi	r24, 0x01	; 1
    312e:	90 70       	andi	r25, 0x00	; 0
    3130:	00 97       	sbiw	r24, 0x00	; 0
    3132:	a9 f3       	breq	.-22     	; 0x311e <ADC_u16ReadSync+0x14>
	/*Clear Flag bit*/
	SET_BIT(ADCSRA , ADC_ADIF_BIT);
    3134:	a6 e2       	ldi	r26, 0x26	; 38
    3136:	b0 e0       	ldi	r27, 0x00	; 0
    3138:	e6 e2       	ldi	r30, 0x26	; 38
    313a:	f0 e0       	ldi	r31, 0x00	; 0
    313c:	80 81       	ld	r24, Z
    313e:	80 61       	ori	r24, 0x10	; 16
    3140:	8c 93       	st	X, r24

	#if ADC_RES_MODE == ADC_8BIT
		u16ReadValueLoc = ADCH ;
    3142:	e5 e2       	ldi	r30, 0x25	; 37
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	80 81       	ld	r24, Z
    3148:	88 2f       	mov	r24, r24
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	9a 83       	std	Y+2, r25	; 0x02
    314e:	89 83       	std	Y+1, r24	; 0x01
	#else
		u16ReadValueLoc = ADCL;
		u16ReadValueLoc |= (ADCH<<8) ;
	#endif

	return u16ReadValueLoc ;
    3150:	89 81       	ldd	r24, Y+1	; 0x01
    3152:	9a 81       	ldd	r25, Y+2	; 0x02

}
    3154:	0f 90       	pop	r0
    3156:	0f 90       	pop	r0
    3158:	0f 90       	pop	r0
    315a:	cf 91       	pop	r28
    315c:	df 91       	pop	r29
    315e:	08 95       	ret

00003160 <ADC_u16ReadAsync>:

u16 ADC_u16ReadAsync(void)
{
    3160:	df 93       	push	r29
    3162:	cf 93       	push	r28
    3164:	cd b7       	in	r28, 0x3d	; 61
    3166:	de b7       	in	r29, 0x3e	; 62
	return ADC_u16ReadValue;
    3168:	80 91 fc 01 	lds	r24, 0x01FC
    316c:	90 91 fd 01 	lds	r25, 0x01FD
}
    3170:	cf 91       	pop	r28
    3172:	df 91       	pop	r29
    3174:	08 95       	ret

00003176 <__vector_16>:

/*Interrupt*/
void __vector_16(void)
{
    3176:	1f 92       	push	r1
    3178:	0f 92       	push	r0
    317a:	0f b6       	in	r0, 0x3f	; 63
    317c:	0f 92       	push	r0
    317e:	11 24       	eor	r1, r1
    3180:	2f 93       	push	r18
    3182:	3f 93       	push	r19
    3184:	4f 93       	push	r20
    3186:	5f 93       	push	r21
    3188:	6f 93       	push	r22
    318a:	7f 93       	push	r23
    318c:	8f 93       	push	r24
    318e:	9f 93       	push	r25
    3190:	af 93       	push	r26
    3192:	bf 93       	push	r27
    3194:	ef 93       	push	r30
    3196:	ff 93       	push	r31
    3198:	df 93       	push	r29
    319a:	cf 93       	push	r28
    319c:	cd b7       	in	r28, 0x3d	; 61
    319e:	de b7       	in	r29, 0x3e	; 62
	if (ADC_pfCall != NULL_PTR)
    31a0:	80 91 fa 01 	lds	r24, 0x01FA
    31a4:	90 91 fb 01 	lds	r25, 0x01FB
    31a8:	00 97       	sbiw	r24, 0x00	; 0
    31aa:	29 f0       	breq	.+10     	; 0x31b6 <__vector_16+0x40>
	{
		ADC_pfCall();
    31ac:	e0 91 fa 01 	lds	r30, 0x01FA
    31b0:	f0 91 fb 01 	lds	r31, 0x01FB
    31b4:	09 95       	icall
	}
	#if ADC_RES_MODE == ADC_bit_Mode_8
		ADC_u16ReadValue = ADCH ;
    31b6:	e5 e2       	ldi	r30, 0x25	; 37
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	80 81       	ld	r24, Z
    31bc:	88 2f       	mov	r24, r24
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	90 93 fd 01 	sts	0x01FD, r25
    31c4:	80 93 fc 01 	sts	0x01FC, r24
		ADC_u16ReadValue = ADCL;
		ADC_u16ReadValue |= (ADCH<<8) ;
	#endif


}
    31c8:	cf 91       	pop	r28
    31ca:	df 91       	pop	r29
    31cc:	ff 91       	pop	r31
    31ce:	ef 91       	pop	r30
    31d0:	bf 91       	pop	r27
    31d2:	af 91       	pop	r26
    31d4:	9f 91       	pop	r25
    31d6:	8f 91       	pop	r24
    31d8:	7f 91       	pop	r23
    31da:	6f 91       	pop	r22
    31dc:	5f 91       	pop	r21
    31de:	4f 91       	pop	r20
    31e0:	3f 91       	pop	r19
    31e2:	2f 91       	pop	r18
    31e4:	0f 90       	pop	r0
    31e6:	0f be       	out	0x3f, r0	; 63
    31e8:	0f 90       	pop	r0
    31ea:	1f 90       	pop	r1
    31ec:	18 95       	reti

000031ee <STPR_FullStep_Right>:
#include "STPR_cfg.h"
#include "STPR_priv.h"


void STPR_FullStep_Right(u8 speed)
{
    31ee:	df 93       	push	r29
    31f0:	cf 93       	push	r28
    31f2:	cd b7       	in	r28, 0x3d	; 61
    31f4:	de b7       	in	r29, 0x3e	; 62
    31f6:	a1 97       	sbiw	r28, 0x21	; 33
    31f8:	0f b6       	in	r0, 0x3f	; 63
    31fa:	f8 94       	cli
    31fc:	de bf       	out	0x3e, r29	; 62
    31fe:	0f be       	out	0x3f, r0	; 63
    3200:	cd bf       	out	0x3d, r28	; 61
    3202:	89 a3       	std	Y+33, r24	; 0x21
	//full step
	DIO_enuWritePin(STPR_COIL_0,DIO_HIGH); //activate coil 1
    3204:	88 e1       	ldi	r24, 0x18	; 24
    3206:	61 e0       	ldi	r22, 0x01	; 1
    3208:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	Delay_ms(speed);
    320c:	89 a1       	ldd	r24, Y+33	; 0x21
    320e:	86 95       	lsr	r24
    3210:	86 95       	lsr	r24
    3212:	86 95       	lsr	r24
    3214:	88 2f       	mov	r24, r24
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	a0 e0       	ldi	r26, 0x00	; 0
    321a:	b0 e0       	ldi	r27, 0x00	; 0
    321c:	8d 8f       	std	Y+29, r24	; 0x1d
    321e:	9e 8f       	std	Y+30, r25	; 0x1e
    3220:	af 8f       	std	Y+31, r26	; 0x1f
    3222:	b8 a3       	std	Y+32, r27	; 0x20
    3224:	28 c0       	rjmp	.+80     	; 0x3276 <STPR_FullStep_Right+0x88>
    3226:	80 ed       	ldi	r24, 0xD0	; 208
    3228:	97 e0       	ldi	r25, 0x07	; 7
    322a:	a0 e0       	ldi	r26, 0x00	; 0
    322c:	b0 e0       	ldi	r27, 0x00	; 0
    322e:	89 8f       	std	Y+25, r24	; 0x19
    3230:	9a 8f       	std	Y+26, r25	; 0x1a
    3232:	ab 8f       	std	Y+27, r26	; 0x1b
    3234:	bc 8f       	std	Y+28, r27	; 0x1c
    3236:	0c c0       	rjmp	.+24     	; 0x3250 <STPR_FullStep_Right+0x62>
    3238:	00 00       	nop
    323a:	89 8d       	ldd	r24, Y+25	; 0x19
    323c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    323e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3240:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3242:	01 97       	sbiw	r24, 0x01	; 1
    3244:	a1 09       	sbc	r26, r1
    3246:	b1 09       	sbc	r27, r1
    3248:	89 8f       	std	Y+25, r24	; 0x19
    324a:	9a 8f       	std	Y+26, r25	; 0x1a
    324c:	ab 8f       	std	Y+27, r26	; 0x1b
    324e:	bc 8f       	std	Y+28, r27	; 0x1c
    3250:	89 8d       	ldd	r24, Y+25	; 0x19
    3252:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3254:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3256:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3258:	00 97       	sbiw	r24, 0x00	; 0
    325a:	a1 05       	cpc	r26, r1
    325c:	b1 05       	cpc	r27, r1
    325e:	61 f7       	brne	.-40     	; 0x3238 <STPR_FullStep_Right+0x4a>
    3260:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3262:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3264:	af 8d       	ldd	r26, Y+31	; 0x1f
    3266:	b8 a1       	ldd	r27, Y+32	; 0x20
    3268:	01 97       	sbiw	r24, 0x01	; 1
    326a:	a1 09       	sbc	r26, r1
    326c:	b1 09       	sbc	r27, r1
    326e:	8d 8f       	std	Y+29, r24	; 0x1d
    3270:	9e 8f       	std	Y+30, r25	; 0x1e
    3272:	af 8f       	std	Y+31, r26	; 0x1f
    3274:	b8 a3       	std	Y+32, r27	; 0x20
    3276:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3278:	9e 8d       	ldd	r25, Y+30	; 0x1e
    327a:	af 8d       	ldd	r26, Y+31	; 0x1f
    327c:	b8 a1       	ldd	r27, Y+32	; 0x20
    327e:	00 97       	sbiw	r24, 0x00	; 0
    3280:	a1 05       	cpc	r26, r1
    3282:	b1 05       	cpc	r27, r1
    3284:	81 f6       	brne	.-96     	; 0x3226 <STPR_FullStep_Right+0x38>
	DIO_enuWritePin(STPR_COIL_0,DIO_LOW);
    3286:	88 e1       	ldi	r24, 0x18	; 24
    3288:	60 e0       	ldi	r22, 0x00	; 0
    328a:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_1,DIO_HIGH); //activate coil 2
    328e:	89 e1       	ldi	r24, 0x19	; 25
    3290:	61 e0       	ldi	r22, 0x01	; 1
    3292:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	Delay_ms(speed);
    3296:	89 a1       	ldd	r24, Y+33	; 0x21
    3298:	86 95       	lsr	r24
    329a:	86 95       	lsr	r24
    329c:	86 95       	lsr	r24
    329e:	88 2f       	mov	r24, r24
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	a0 e0       	ldi	r26, 0x00	; 0
    32a4:	b0 e0       	ldi	r27, 0x00	; 0
    32a6:	8d 8b       	std	Y+21, r24	; 0x15
    32a8:	9e 8b       	std	Y+22, r25	; 0x16
    32aa:	af 8b       	std	Y+23, r26	; 0x17
    32ac:	b8 8f       	std	Y+24, r27	; 0x18
    32ae:	28 c0       	rjmp	.+80     	; 0x3300 <STPR_FullStep_Right+0x112>
    32b0:	80 ed       	ldi	r24, 0xD0	; 208
    32b2:	97 e0       	ldi	r25, 0x07	; 7
    32b4:	a0 e0       	ldi	r26, 0x00	; 0
    32b6:	b0 e0       	ldi	r27, 0x00	; 0
    32b8:	89 8b       	std	Y+17, r24	; 0x11
    32ba:	9a 8b       	std	Y+18, r25	; 0x12
    32bc:	ab 8b       	std	Y+19, r26	; 0x13
    32be:	bc 8b       	std	Y+20, r27	; 0x14
    32c0:	0c c0       	rjmp	.+24     	; 0x32da <STPR_FullStep_Right+0xec>
    32c2:	00 00       	nop
    32c4:	89 89       	ldd	r24, Y+17	; 0x11
    32c6:	9a 89       	ldd	r25, Y+18	; 0x12
    32c8:	ab 89       	ldd	r26, Y+19	; 0x13
    32ca:	bc 89       	ldd	r27, Y+20	; 0x14
    32cc:	01 97       	sbiw	r24, 0x01	; 1
    32ce:	a1 09       	sbc	r26, r1
    32d0:	b1 09       	sbc	r27, r1
    32d2:	89 8b       	std	Y+17, r24	; 0x11
    32d4:	9a 8b       	std	Y+18, r25	; 0x12
    32d6:	ab 8b       	std	Y+19, r26	; 0x13
    32d8:	bc 8b       	std	Y+20, r27	; 0x14
    32da:	89 89       	ldd	r24, Y+17	; 0x11
    32dc:	9a 89       	ldd	r25, Y+18	; 0x12
    32de:	ab 89       	ldd	r26, Y+19	; 0x13
    32e0:	bc 89       	ldd	r27, Y+20	; 0x14
    32e2:	00 97       	sbiw	r24, 0x00	; 0
    32e4:	a1 05       	cpc	r26, r1
    32e6:	b1 05       	cpc	r27, r1
    32e8:	61 f7       	brne	.-40     	; 0x32c2 <STPR_FullStep_Right+0xd4>
    32ea:	8d 89       	ldd	r24, Y+21	; 0x15
    32ec:	9e 89       	ldd	r25, Y+22	; 0x16
    32ee:	af 89       	ldd	r26, Y+23	; 0x17
    32f0:	b8 8d       	ldd	r27, Y+24	; 0x18
    32f2:	01 97       	sbiw	r24, 0x01	; 1
    32f4:	a1 09       	sbc	r26, r1
    32f6:	b1 09       	sbc	r27, r1
    32f8:	8d 8b       	std	Y+21, r24	; 0x15
    32fa:	9e 8b       	std	Y+22, r25	; 0x16
    32fc:	af 8b       	std	Y+23, r26	; 0x17
    32fe:	b8 8f       	std	Y+24, r27	; 0x18
    3300:	8d 89       	ldd	r24, Y+21	; 0x15
    3302:	9e 89       	ldd	r25, Y+22	; 0x16
    3304:	af 89       	ldd	r26, Y+23	; 0x17
    3306:	b8 8d       	ldd	r27, Y+24	; 0x18
    3308:	00 97       	sbiw	r24, 0x00	; 0
    330a:	a1 05       	cpc	r26, r1
    330c:	b1 05       	cpc	r27, r1
    330e:	81 f6       	brne	.-96     	; 0x32b0 <STPR_FullStep_Right+0xc2>
	DIO_enuWritePin(STPR_COIL_1,DIO_LOW);
    3310:	89 e1       	ldi	r24, 0x19	; 25
    3312:	60 e0       	ldi	r22, 0x00	; 0
    3314:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_2,DIO_HIGH);//activate coil 3
    3318:	8a e1       	ldi	r24, 0x1A	; 26
    331a:	61 e0       	ldi	r22, 0x01	; 1
    331c:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	Delay_ms(speed);
    3320:	89 a1       	ldd	r24, Y+33	; 0x21
    3322:	86 95       	lsr	r24
    3324:	86 95       	lsr	r24
    3326:	86 95       	lsr	r24
    3328:	88 2f       	mov	r24, r24
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	a0 e0       	ldi	r26, 0x00	; 0
    332e:	b0 e0       	ldi	r27, 0x00	; 0
    3330:	8d 87       	std	Y+13, r24	; 0x0d
    3332:	9e 87       	std	Y+14, r25	; 0x0e
    3334:	af 87       	std	Y+15, r26	; 0x0f
    3336:	b8 8b       	std	Y+16, r27	; 0x10
    3338:	28 c0       	rjmp	.+80     	; 0x338a <STPR_FullStep_Right+0x19c>
    333a:	80 ed       	ldi	r24, 0xD0	; 208
    333c:	97 e0       	ldi	r25, 0x07	; 7
    333e:	a0 e0       	ldi	r26, 0x00	; 0
    3340:	b0 e0       	ldi	r27, 0x00	; 0
    3342:	89 87       	std	Y+9, r24	; 0x09
    3344:	9a 87       	std	Y+10, r25	; 0x0a
    3346:	ab 87       	std	Y+11, r26	; 0x0b
    3348:	bc 87       	std	Y+12, r27	; 0x0c
    334a:	0c c0       	rjmp	.+24     	; 0x3364 <STPR_FullStep_Right+0x176>
    334c:	00 00       	nop
    334e:	89 85       	ldd	r24, Y+9	; 0x09
    3350:	9a 85       	ldd	r25, Y+10	; 0x0a
    3352:	ab 85       	ldd	r26, Y+11	; 0x0b
    3354:	bc 85       	ldd	r27, Y+12	; 0x0c
    3356:	01 97       	sbiw	r24, 0x01	; 1
    3358:	a1 09       	sbc	r26, r1
    335a:	b1 09       	sbc	r27, r1
    335c:	89 87       	std	Y+9, r24	; 0x09
    335e:	9a 87       	std	Y+10, r25	; 0x0a
    3360:	ab 87       	std	Y+11, r26	; 0x0b
    3362:	bc 87       	std	Y+12, r27	; 0x0c
    3364:	89 85       	ldd	r24, Y+9	; 0x09
    3366:	9a 85       	ldd	r25, Y+10	; 0x0a
    3368:	ab 85       	ldd	r26, Y+11	; 0x0b
    336a:	bc 85       	ldd	r27, Y+12	; 0x0c
    336c:	00 97       	sbiw	r24, 0x00	; 0
    336e:	a1 05       	cpc	r26, r1
    3370:	b1 05       	cpc	r27, r1
    3372:	61 f7       	brne	.-40     	; 0x334c <STPR_FullStep_Right+0x15e>
    3374:	8d 85       	ldd	r24, Y+13	; 0x0d
    3376:	9e 85       	ldd	r25, Y+14	; 0x0e
    3378:	af 85       	ldd	r26, Y+15	; 0x0f
    337a:	b8 89       	ldd	r27, Y+16	; 0x10
    337c:	01 97       	sbiw	r24, 0x01	; 1
    337e:	a1 09       	sbc	r26, r1
    3380:	b1 09       	sbc	r27, r1
    3382:	8d 87       	std	Y+13, r24	; 0x0d
    3384:	9e 87       	std	Y+14, r25	; 0x0e
    3386:	af 87       	std	Y+15, r26	; 0x0f
    3388:	b8 8b       	std	Y+16, r27	; 0x10
    338a:	8d 85       	ldd	r24, Y+13	; 0x0d
    338c:	9e 85       	ldd	r25, Y+14	; 0x0e
    338e:	af 85       	ldd	r26, Y+15	; 0x0f
    3390:	b8 89       	ldd	r27, Y+16	; 0x10
    3392:	00 97       	sbiw	r24, 0x00	; 0
    3394:	a1 05       	cpc	r26, r1
    3396:	b1 05       	cpc	r27, r1
    3398:	81 f6       	brne	.-96     	; 0x333a <STPR_FullStep_Right+0x14c>
	DIO_enuWritePin(STPR_COIL_2,DIO_LOW);
    339a:	8a e1       	ldi	r24, 0x1A	; 26
    339c:	60 e0       	ldi	r22, 0x00	; 0
    339e:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_3,DIO_HIGH); //activate coil 4
    33a2:	8b e1       	ldi	r24, 0x1B	; 27
    33a4:	61 e0       	ldi	r22, 0x01	; 1
    33a6:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	Delay_ms(speed);
    33aa:	89 a1       	ldd	r24, Y+33	; 0x21
    33ac:	86 95       	lsr	r24
    33ae:	86 95       	lsr	r24
    33b0:	86 95       	lsr	r24
    33b2:	88 2f       	mov	r24, r24
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	a0 e0       	ldi	r26, 0x00	; 0
    33b8:	b0 e0       	ldi	r27, 0x00	; 0
    33ba:	8d 83       	std	Y+5, r24	; 0x05
    33bc:	9e 83       	std	Y+6, r25	; 0x06
    33be:	af 83       	std	Y+7, r26	; 0x07
    33c0:	b8 87       	std	Y+8, r27	; 0x08
    33c2:	28 c0       	rjmp	.+80     	; 0x3414 <STPR_FullStep_Right+0x226>
    33c4:	80 ed       	ldi	r24, 0xD0	; 208
    33c6:	97 e0       	ldi	r25, 0x07	; 7
    33c8:	a0 e0       	ldi	r26, 0x00	; 0
    33ca:	b0 e0       	ldi	r27, 0x00	; 0
    33cc:	89 83       	std	Y+1, r24	; 0x01
    33ce:	9a 83       	std	Y+2, r25	; 0x02
    33d0:	ab 83       	std	Y+3, r26	; 0x03
    33d2:	bc 83       	std	Y+4, r27	; 0x04
    33d4:	0c c0       	rjmp	.+24     	; 0x33ee <STPR_FullStep_Right+0x200>
    33d6:	00 00       	nop
    33d8:	89 81       	ldd	r24, Y+1	; 0x01
    33da:	9a 81       	ldd	r25, Y+2	; 0x02
    33dc:	ab 81       	ldd	r26, Y+3	; 0x03
    33de:	bc 81       	ldd	r27, Y+4	; 0x04
    33e0:	01 97       	sbiw	r24, 0x01	; 1
    33e2:	a1 09       	sbc	r26, r1
    33e4:	b1 09       	sbc	r27, r1
    33e6:	89 83       	std	Y+1, r24	; 0x01
    33e8:	9a 83       	std	Y+2, r25	; 0x02
    33ea:	ab 83       	std	Y+3, r26	; 0x03
    33ec:	bc 83       	std	Y+4, r27	; 0x04
    33ee:	89 81       	ldd	r24, Y+1	; 0x01
    33f0:	9a 81       	ldd	r25, Y+2	; 0x02
    33f2:	ab 81       	ldd	r26, Y+3	; 0x03
    33f4:	bc 81       	ldd	r27, Y+4	; 0x04
    33f6:	00 97       	sbiw	r24, 0x00	; 0
    33f8:	a1 05       	cpc	r26, r1
    33fa:	b1 05       	cpc	r27, r1
    33fc:	61 f7       	brne	.-40     	; 0x33d6 <STPR_FullStep_Right+0x1e8>
    33fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3400:	9e 81       	ldd	r25, Y+6	; 0x06
    3402:	af 81       	ldd	r26, Y+7	; 0x07
    3404:	b8 85       	ldd	r27, Y+8	; 0x08
    3406:	01 97       	sbiw	r24, 0x01	; 1
    3408:	a1 09       	sbc	r26, r1
    340a:	b1 09       	sbc	r27, r1
    340c:	8d 83       	std	Y+5, r24	; 0x05
    340e:	9e 83       	std	Y+6, r25	; 0x06
    3410:	af 83       	std	Y+7, r26	; 0x07
    3412:	b8 87       	std	Y+8, r27	; 0x08
    3414:	8d 81       	ldd	r24, Y+5	; 0x05
    3416:	9e 81       	ldd	r25, Y+6	; 0x06
    3418:	af 81       	ldd	r26, Y+7	; 0x07
    341a:	b8 85       	ldd	r27, Y+8	; 0x08
    341c:	00 97       	sbiw	r24, 0x00	; 0
    341e:	a1 05       	cpc	r26, r1
    3420:	b1 05       	cpc	r27, r1
    3422:	81 f6       	brne	.-96     	; 0x33c4 <STPR_FullStep_Right+0x1d6>
	DIO_enuWritePin(STPR_COIL_3,DIO_LOW);
    3424:	8b e1       	ldi	r24, 0x1B	; 27
    3426:	60 e0       	ldi	r22, 0x00	; 0
    3428:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
}
    342c:	a1 96       	adiw	r28, 0x21	; 33
    342e:	0f b6       	in	r0, 0x3f	; 63
    3430:	f8 94       	cli
    3432:	de bf       	out	0x3e, r29	; 62
    3434:	0f be       	out	0x3f, r0	; 63
    3436:	cd bf       	out	0x3d, r28	; 61
    3438:	cf 91       	pop	r28
    343a:	df 91       	pop	r29
    343c:	08 95       	ret

0000343e <STPR_FullStep_Left>:

void STPR_FullStep_Left(u32 speed)
{
    343e:	df 93       	push	r29
    3440:	cf 93       	push	r28
    3442:	cd b7       	in	r28, 0x3d	; 61
    3444:	de b7       	in	r29, 0x3e	; 62
    3446:	a4 97       	sbiw	r28, 0x24	; 36
    3448:	0f b6       	in	r0, 0x3f	; 63
    344a:	f8 94       	cli
    344c:	de bf       	out	0x3e, r29	; 62
    344e:	0f be       	out	0x3f, r0	; 63
    3450:	cd bf       	out	0x3d, r28	; 61
    3452:	69 a3       	std	Y+33, r22	; 0x21
    3454:	7a a3       	std	Y+34, r23	; 0x22
    3456:	8b a3       	std	Y+35, r24	; 0x23
    3458:	9c a3       	std	Y+36, r25	; 0x24
	//full step
	DIO_enuWritePin(STPR_COIL_3,DIO_HIGH); //activate coil 4
    345a:	8b e1       	ldi	r24, 0x1B	; 27
    345c:	61 e0       	ldi	r22, 0x01	; 1
    345e:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	Delay_ms(speed);
    3462:	89 a1       	ldd	r24, Y+33	; 0x21
    3464:	9a a1       	ldd	r25, Y+34	; 0x22
    3466:	ab a1       	ldd	r26, Y+35	; 0x23
    3468:	bc a1       	ldd	r27, Y+36	; 0x24
    346a:	68 94       	set
    346c:	12 f8       	bld	r1, 2
    346e:	b6 95       	lsr	r27
    3470:	a7 95       	ror	r26
    3472:	97 95       	ror	r25
    3474:	87 95       	ror	r24
    3476:	16 94       	lsr	r1
    3478:	d1 f7       	brne	.-12     	; 0x346e <STPR_FullStep_Left+0x30>
    347a:	8d 8f       	std	Y+29, r24	; 0x1d
    347c:	9e 8f       	std	Y+30, r25	; 0x1e
    347e:	af 8f       	std	Y+31, r26	; 0x1f
    3480:	b8 a3       	std	Y+32, r27	; 0x20
    3482:	28 c0       	rjmp	.+80     	; 0x34d4 <STPR_FullStep_Left+0x96>
    3484:	80 ed       	ldi	r24, 0xD0	; 208
    3486:	97 e0       	ldi	r25, 0x07	; 7
    3488:	a0 e0       	ldi	r26, 0x00	; 0
    348a:	b0 e0       	ldi	r27, 0x00	; 0
    348c:	89 8f       	std	Y+25, r24	; 0x19
    348e:	9a 8f       	std	Y+26, r25	; 0x1a
    3490:	ab 8f       	std	Y+27, r26	; 0x1b
    3492:	bc 8f       	std	Y+28, r27	; 0x1c
    3494:	0c c0       	rjmp	.+24     	; 0x34ae <STPR_FullStep_Left+0x70>
    3496:	00 00       	nop
    3498:	89 8d       	ldd	r24, Y+25	; 0x19
    349a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    349c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    349e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    34a0:	01 97       	sbiw	r24, 0x01	; 1
    34a2:	a1 09       	sbc	r26, r1
    34a4:	b1 09       	sbc	r27, r1
    34a6:	89 8f       	std	Y+25, r24	; 0x19
    34a8:	9a 8f       	std	Y+26, r25	; 0x1a
    34aa:	ab 8f       	std	Y+27, r26	; 0x1b
    34ac:	bc 8f       	std	Y+28, r27	; 0x1c
    34ae:	89 8d       	ldd	r24, Y+25	; 0x19
    34b0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    34b2:	ab 8d       	ldd	r26, Y+27	; 0x1b
    34b4:	bc 8d       	ldd	r27, Y+28	; 0x1c
    34b6:	00 97       	sbiw	r24, 0x00	; 0
    34b8:	a1 05       	cpc	r26, r1
    34ba:	b1 05       	cpc	r27, r1
    34bc:	61 f7       	brne	.-40     	; 0x3496 <STPR_FullStep_Left+0x58>
    34be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34c2:	af 8d       	ldd	r26, Y+31	; 0x1f
    34c4:	b8 a1       	ldd	r27, Y+32	; 0x20
    34c6:	01 97       	sbiw	r24, 0x01	; 1
    34c8:	a1 09       	sbc	r26, r1
    34ca:	b1 09       	sbc	r27, r1
    34cc:	8d 8f       	std	Y+29, r24	; 0x1d
    34ce:	9e 8f       	std	Y+30, r25	; 0x1e
    34d0:	af 8f       	std	Y+31, r26	; 0x1f
    34d2:	b8 a3       	std	Y+32, r27	; 0x20
    34d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34d8:	af 8d       	ldd	r26, Y+31	; 0x1f
    34da:	b8 a1       	ldd	r27, Y+32	; 0x20
    34dc:	00 97       	sbiw	r24, 0x00	; 0
    34de:	a1 05       	cpc	r26, r1
    34e0:	b1 05       	cpc	r27, r1
    34e2:	81 f6       	brne	.-96     	; 0x3484 <STPR_FullStep_Left+0x46>
	DIO_enuWritePin(STPR_COIL_3,DIO_LOW);
    34e4:	8b e1       	ldi	r24, 0x1B	; 27
    34e6:	60 e0       	ldi	r22, 0x00	; 0
    34e8:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_2,DIO_HIGH); //activate coil 3
    34ec:	8a e1       	ldi	r24, 0x1A	; 26
    34ee:	61 e0       	ldi	r22, 0x01	; 1
    34f0:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	Delay_ms(speed);
    34f4:	89 a1       	ldd	r24, Y+33	; 0x21
    34f6:	9a a1       	ldd	r25, Y+34	; 0x22
    34f8:	ab a1       	ldd	r26, Y+35	; 0x23
    34fa:	bc a1       	ldd	r27, Y+36	; 0x24
    34fc:	68 94       	set
    34fe:	12 f8       	bld	r1, 2
    3500:	b6 95       	lsr	r27
    3502:	a7 95       	ror	r26
    3504:	97 95       	ror	r25
    3506:	87 95       	ror	r24
    3508:	16 94       	lsr	r1
    350a:	d1 f7       	brne	.-12     	; 0x3500 <STPR_FullStep_Left+0xc2>
    350c:	8d 8b       	std	Y+21, r24	; 0x15
    350e:	9e 8b       	std	Y+22, r25	; 0x16
    3510:	af 8b       	std	Y+23, r26	; 0x17
    3512:	b8 8f       	std	Y+24, r27	; 0x18
    3514:	28 c0       	rjmp	.+80     	; 0x3566 <STPR_FullStep_Left+0x128>
    3516:	80 ed       	ldi	r24, 0xD0	; 208
    3518:	97 e0       	ldi	r25, 0x07	; 7
    351a:	a0 e0       	ldi	r26, 0x00	; 0
    351c:	b0 e0       	ldi	r27, 0x00	; 0
    351e:	89 8b       	std	Y+17, r24	; 0x11
    3520:	9a 8b       	std	Y+18, r25	; 0x12
    3522:	ab 8b       	std	Y+19, r26	; 0x13
    3524:	bc 8b       	std	Y+20, r27	; 0x14
    3526:	0c c0       	rjmp	.+24     	; 0x3540 <STPR_FullStep_Left+0x102>
    3528:	00 00       	nop
    352a:	89 89       	ldd	r24, Y+17	; 0x11
    352c:	9a 89       	ldd	r25, Y+18	; 0x12
    352e:	ab 89       	ldd	r26, Y+19	; 0x13
    3530:	bc 89       	ldd	r27, Y+20	; 0x14
    3532:	01 97       	sbiw	r24, 0x01	; 1
    3534:	a1 09       	sbc	r26, r1
    3536:	b1 09       	sbc	r27, r1
    3538:	89 8b       	std	Y+17, r24	; 0x11
    353a:	9a 8b       	std	Y+18, r25	; 0x12
    353c:	ab 8b       	std	Y+19, r26	; 0x13
    353e:	bc 8b       	std	Y+20, r27	; 0x14
    3540:	89 89       	ldd	r24, Y+17	; 0x11
    3542:	9a 89       	ldd	r25, Y+18	; 0x12
    3544:	ab 89       	ldd	r26, Y+19	; 0x13
    3546:	bc 89       	ldd	r27, Y+20	; 0x14
    3548:	00 97       	sbiw	r24, 0x00	; 0
    354a:	a1 05       	cpc	r26, r1
    354c:	b1 05       	cpc	r27, r1
    354e:	61 f7       	brne	.-40     	; 0x3528 <STPR_FullStep_Left+0xea>
    3550:	8d 89       	ldd	r24, Y+21	; 0x15
    3552:	9e 89       	ldd	r25, Y+22	; 0x16
    3554:	af 89       	ldd	r26, Y+23	; 0x17
    3556:	b8 8d       	ldd	r27, Y+24	; 0x18
    3558:	01 97       	sbiw	r24, 0x01	; 1
    355a:	a1 09       	sbc	r26, r1
    355c:	b1 09       	sbc	r27, r1
    355e:	8d 8b       	std	Y+21, r24	; 0x15
    3560:	9e 8b       	std	Y+22, r25	; 0x16
    3562:	af 8b       	std	Y+23, r26	; 0x17
    3564:	b8 8f       	std	Y+24, r27	; 0x18
    3566:	8d 89       	ldd	r24, Y+21	; 0x15
    3568:	9e 89       	ldd	r25, Y+22	; 0x16
    356a:	af 89       	ldd	r26, Y+23	; 0x17
    356c:	b8 8d       	ldd	r27, Y+24	; 0x18
    356e:	00 97       	sbiw	r24, 0x00	; 0
    3570:	a1 05       	cpc	r26, r1
    3572:	b1 05       	cpc	r27, r1
    3574:	81 f6       	brne	.-96     	; 0x3516 <STPR_FullStep_Left+0xd8>
	DIO_enuWritePin(STPR_COIL_2,DIO_LOW);
    3576:	8a e1       	ldi	r24, 0x1A	; 26
    3578:	60 e0       	ldi	r22, 0x00	; 0
    357a:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_1,DIO_HIGH);//activate coil 2
    357e:	89 e1       	ldi	r24, 0x19	; 25
    3580:	61 e0       	ldi	r22, 0x01	; 1
    3582:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	Delay_ms(speed);
    3586:	89 a1       	ldd	r24, Y+33	; 0x21
    3588:	9a a1       	ldd	r25, Y+34	; 0x22
    358a:	ab a1       	ldd	r26, Y+35	; 0x23
    358c:	bc a1       	ldd	r27, Y+36	; 0x24
    358e:	68 94       	set
    3590:	12 f8       	bld	r1, 2
    3592:	b6 95       	lsr	r27
    3594:	a7 95       	ror	r26
    3596:	97 95       	ror	r25
    3598:	87 95       	ror	r24
    359a:	16 94       	lsr	r1
    359c:	d1 f7       	brne	.-12     	; 0x3592 <STPR_FullStep_Left+0x154>
    359e:	8d 87       	std	Y+13, r24	; 0x0d
    35a0:	9e 87       	std	Y+14, r25	; 0x0e
    35a2:	af 87       	std	Y+15, r26	; 0x0f
    35a4:	b8 8b       	std	Y+16, r27	; 0x10
    35a6:	28 c0       	rjmp	.+80     	; 0x35f8 <STPR_FullStep_Left+0x1ba>
    35a8:	80 ed       	ldi	r24, 0xD0	; 208
    35aa:	97 e0       	ldi	r25, 0x07	; 7
    35ac:	a0 e0       	ldi	r26, 0x00	; 0
    35ae:	b0 e0       	ldi	r27, 0x00	; 0
    35b0:	89 87       	std	Y+9, r24	; 0x09
    35b2:	9a 87       	std	Y+10, r25	; 0x0a
    35b4:	ab 87       	std	Y+11, r26	; 0x0b
    35b6:	bc 87       	std	Y+12, r27	; 0x0c
    35b8:	0c c0       	rjmp	.+24     	; 0x35d2 <STPR_FullStep_Left+0x194>
    35ba:	00 00       	nop
    35bc:	89 85       	ldd	r24, Y+9	; 0x09
    35be:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c0:	ab 85       	ldd	r26, Y+11	; 0x0b
    35c2:	bc 85       	ldd	r27, Y+12	; 0x0c
    35c4:	01 97       	sbiw	r24, 0x01	; 1
    35c6:	a1 09       	sbc	r26, r1
    35c8:	b1 09       	sbc	r27, r1
    35ca:	89 87       	std	Y+9, r24	; 0x09
    35cc:	9a 87       	std	Y+10, r25	; 0x0a
    35ce:	ab 87       	std	Y+11, r26	; 0x0b
    35d0:	bc 87       	std	Y+12, r27	; 0x0c
    35d2:	89 85       	ldd	r24, Y+9	; 0x09
    35d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35d6:	ab 85       	ldd	r26, Y+11	; 0x0b
    35d8:	bc 85       	ldd	r27, Y+12	; 0x0c
    35da:	00 97       	sbiw	r24, 0x00	; 0
    35dc:	a1 05       	cpc	r26, r1
    35de:	b1 05       	cpc	r27, r1
    35e0:	61 f7       	brne	.-40     	; 0x35ba <STPR_FullStep_Left+0x17c>
    35e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    35e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    35e6:	af 85       	ldd	r26, Y+15	; 0x0f
    35e8:	b8 89       	ldd	r27, Y+16	; 0x10
    35ea:	01 97       	sbiw	r24, 0x01	; 1
    35ec:	a1 09       	sbc	r26, r1
    35ee:	b1 09       	sbc	r27, r1
    35f0:	8d 87       	std	Y+13, r24	; 0x0d
    35f2:	9e 87       	std	Y+14, r25	; 0x0e
    35f4:	af 87       	std	Y+15, r26	; 0x0f
    35f6:	b8 8b       	std	Y+16, r27	; 0x10
    35f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    35fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    35fc:	af 85       	ldd	r26, Y+15	; 0x0f
    35fe:	b8 89       	ldd	r27, Y+16	; 0x10
    3600:	00 97       	sbiw	r24, 0x00	; 0
    3602:	a1 05       	cpc	r26, r1
    3604:	b1 05       	cpc	r27, r1
    3606:	81 f6       	brne	.-96     	; 0x35a8 <STPR_FullStep_Left+0x16a>
	DIO_enuWritePin(STPR_COIL_1,DIO_LOW);
    3608:	89 e1       	ldi	r24, 0x19	; 25
    360a:	60 e0       	ldi	r22, 0x00	; 0
    360c:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_0,DIO_HIGH); //activate coil 1
    3610:	88 e1       	ldi	r24, 0x18	; 24
    3612:	61 e0       	ldi	r22, 0x01	; 1
    3614:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	Delay_ms(speed);
    3618:	89 a1       	ldd	r24, Y+33	; 0x21
    361a:	9a a1       	ldd	r25, Y+34	; 0x22
    361c:	ab a1       	ldd	r26, Y+35	; 0x23
    361e:	bc a1       	ldd	r27, Y+36	; 0x24
    3620:	68 94       	set
    3622:	12 f8       	bld	r1, 2
    3624:	b6 95       	lsr	r27
    3626:	a7 95       	ror	r26
    3628:	97 95       	ror	r25
    362a:	87 95       	ror	r24
    362c:	16 94       	lsr	r1
    362e:	d1 f7       	brne	.-12     	; 0x3624 <STPR_FullStep_Left+0x1e6>
    3630:	8d 83       	std	Y+5, r24	; 0x05
    3632:	9e 83       	std	Y+6, r25	; 0x06
    3634:	af 83       	std	Y+7, r26	; 0x07
    3636:	b8 87       	std	Y+8, r27	; 0x08
    3638:	28 c0       	rjmp	.+80     	; 0x368a <STPR_FullStep_Left+0x24c>
    363a:	80 ed       	ldi	r24, 0xD0	; 208
    363c:	97 e0       	ldi	r25, 0x07	; 7
    363e:	a0 e0       	ldi	r26, 0x00	; 0
    3640:	b0 e0       	ldi	r27, 0x00	; 0
    3642:	89 83       	std	Y+1, r24	; 0x01
    3644:	9a 83       	std	Y+2, r25	; 0x02
    3646:	ab 83       	std	Y+3, r26	; 0x03
    3648:	bc 83       	std	Y+4, r27	; 0x04
    364a:	0c c0       	rjmp	.+24     	; 0x3664 <STPR_FullStep_Left+0x226>
    364c:	00 00       	nop
    364e:	89 81       	ldd	r24, Y+1	; 0x01
    3650:	9a 81       	ldd	r25, Y+2	; 0x02
    3652:	ab 81       	ldd	r26, Y+3	; 0x03
    3654:	bc 81       	ldd	r27, Y+4	; 0x04
    3656:	01 97       	sbiw	r24, 0x01	; 1
    3658:	a1 09       	sbc	r26, r1
    365a:	b1 09       	sbc	r27, r1
    365c:	89 83       	std	Y+1, r24	; 0x01
    365e:	9a 83       	std	Y+2, r25	; 0x02
    3660:	ab 83       	std	Y+3, r26	; 0x03
    3662:	bc 83       	std	Y+4, r27	; 0x04
    3664:	89 81       	ldd	r24, Y+1	; 0x01
    3666:	9a 81       	ldd	r25, Y+2	; 0x02
    3668:	ab 81       	ldd	r26, Y+3	; 0x03
    366a:	bc 81       	ldd	r27, Y+4	; 0x04
    366c:	00 97       	sbiw	r24, 0x00	; 0
    366e:	a1 05       	cpc	r26, r1
    3670:	b1 05       	cpc	r27, r1
    3672:	61 f7       	brne	.-40     	; 0x364c <STPR_FullStep_Left+0x20e>
    3674:	8d 81       	ldd	r24, Y+5	; 0x05
    3676:	9e 81       	ldd	r25, Y+6	; 0x06
    3678:	af 81       	ldd	r26, Y+7	; 0x07
    367a:	b8 85       	ldd	r27, Y+8	; 0x08
    367c:	01 97       	sbiw	r24, 0x01	; 1
    367e:	a1 09       	sbc	r26, r1
    3680:	b1 09       	sbc	r27, r1
    3682:	8d 83       	std	Y+5, r24	; 0x05
    3684:	9e 83       	std	Y+6, r25	; 0x06
    3686:	af 83       	std	Y+7, r26	; 0x07
    3688:	b8 87       	std	Y+8, r27	; 0x08
    368a:	8d 81       	ldd	r24, Y+5	; 0x05
    368c:	9e 81       	ldd	r25, Y+6	; 0x06
    368e:	af 81       	ldd	r26, Y+7	; 0x07
    3690:	b8 85       	ldd	r27, Y+8	; 0x08
    3692:	00 97       	sbiw	r24, 0x00	; 0
    3694:	a1 05       	cpc	r26, r1
    3696:	b1 05       	cpc	r27, r1
    3698:	81 f6       	brne	.-96     	; 0x363a <STPR_FullStep_Left+0x1fc>
	DIO_enuWritePin(STPR_COIL_0,DIO_LOW);
    369a:	88 e1       	ldi	r24, 0x18	; 24
    369c:	60 e0       	ldi	r22, 0x00	; 0
    369e:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
}
    36a2:	a4 96       	adiw	r28, 0x24	; 36
    36a4:	0f b6       	in	r0, 0x3f	; 63
    36a6:	f8 94       	cli
    36a8:	de bf       	out	0x3e, r29	; 62
    36aa:	0f be       	out	0x3f, r0	; 63
    36ac:	cd bf       	out	0x3d, r28	; 61
    36ae:	cf 91       	pop	r28
    36b0:	df 91       	pop	r29
    36b2:	08 95       	ret

000036b4 <STPR_HalfStep_Right>:

void STPR_HalfStep_Right(u8 speed)
{
    36b4:	df 93       	push	r29
    36b6:	cf 93       	push	r28
    36b8:	cd b7       	in	r28, 0x3d	; 61
    36ba:	de b7       	in	r29, 0x3e	; 62
    36bc:	c9 54       	subi	r28, 0x49	; 73
    36be:	d0 40       	sbci	r29, 0x00	; 0
    36c0:	0f b6       	in	r0, 0x3f	; 63
    36c2:	f8 94       	cli
    36c4:	de bf       	out	0x3e, r29	; 62
    36c6:	0f be       	out	0x3f, r0	; 63
    36c8:	cd bf       	out	0x3d, r28	; 61
    36ca:	fe 01       	movw	r30, r28
    36cc:	e7 5b       	subi	r30, 0xB7	; 183
    36ce:	ff 4f       	sbci	r31, 0xFF	; 255
    36d0:	80 83       	st	Z, r24

	DIO_enuWritePin(STPR_COIL_0,DIO_HIGH); //activate coil 1
    36d2:	88 e1       	ldi	r24, 0x18	; 24
    36d4:	61 e0       	ldi	r22, 0x01	; 1
    36d6:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	Delay_ms(speed);
    36da:	fe 01       	movw	r30, r28
    36dc:	e7 5b       	subi	r30, 0xB7	; 183
    36de:	ff 4f       	sbci	r31, 0xFF	; 255
    36e0:	80 81       	ld	r24, Z
    36e2:	86 95       	lsr	r24
    36e4:	86 95       	lsr	r24
    36e6:	86 95       	lsr	r24
    36e8:	fe 01       	movw	r30, r28
    36ea:	eb 5b       	subi	r30, 0xBB	; 187
    36ec:	ff 4f       	sbci	r31, 0xFF	; 255
    36ee:	88 2f       	mov	r24, r24
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	a0 e0       	ldi	r26, 0x00	; 0
    36f4:	b0 e0       	ldi	r27, 0x00	; 0
    36f6:	80 83       	st	Z, r24
    36f8:	91 83       	std	Z+1, r25	; 0x01
    36fa:	a2 83       	std	Z+2, r26	; 0x02
    36fc:	b3 83       	std	Z+3, r27	; 0x03
    36fe:	3c c0       	rjmp	.+120    	; 0x3778 <STPR_HalfStep_Right+0xc4>
    3700:	fe 01       	movw	r30, r28
    3702:	ef 5b       	subi	r30, 0xBF	; 191
    3704:	ff 4f       	sbci	r31, 0xFF	; 255
    3706:	80 ed       	ldi	r24, 0xD0	; 208
    3708:	97 e0       	ldi	r25, 0x07	; 7
    370a:	a0 e0       	ldi	r26, 0x00	; 0
    370c:	b0 e0       	ldi	r27, 0x00	; 0
    370e:	80 83       	st	Z, r24
    3710:	91 83       	std	Z+1, r25	; 0x01
    3712:	a2 83       	std	Z+2, r26	; 0x02
    3714:	b3 83       	std	Z+3, r27	; 0x03
    3716:	13 c0       	rjmp	.+38     	; 0x373e <STPR_HalfStep_Right+0x8a>
    3718:	00 00       	nop
    371a:	9e 01       	movw	r18, r28
    371c:	2f 5b       	subi	r18, 0xBF	; 191
    371e:	3f 4f       	sbci	r19, 0xFF	; 255
    3720:	fe 01       	movw	r30, r28
    3722:	ef 5b       	subi	r30, 0xBF	; 191
    3724:	ff 4f       	sbci	r31, 0xFF	; 255
    3726:	80 81       	ld	r24, Z
    3728:	91 81       	ldd	r25, Z+1	; 0x01
    372a:	a2 81       	ldd	r26, Z+2	; 0x02
    372c:	b3 81       	ldd	r27, Z+3	; 0x03
    372e:	01 97       	sbiw	r24, 0x01	; 1
    3730:	a1 09       	sbc	r26, r1
    3732:	b1 09       	sbc	r27, r1
    3734:	f9 01       	movw	r30, r18
    3736:	80 83       	st	Z, r24
    3738:	91 83       	std	Z+1, r25	; 0x01
    373a:	a2 83       	std	Z+2, r26	; 0x02
    373c:	b3 83       	std	Z+3, r27	; 0x03
    373e:	fe 01       	movw	r30, r28
    3740:	ef 5b       	subi	r30, 0xBF	; 191
    3742:	ff 4f       	sbci	r31, 0xFF	; 255
    3744:	80 81       	ld	r24, Z
    3746:	91 81       	ldd	r25, Z+1	; 0x01
    3748:	a2 81       	ldd	r26, Z+2	; 0x02
    374a:	b3 81       	ldd	r27, Z+3	; 0x03
    374c:	00 97       	sbiw	r24, 0x00	; 0
    374e:	a1 05       	cpc	r26, r1
    3750:	b1 05       	cpc	r27, r1
    3752:	11 f7       	brne	.-60     	; 0x3718 <STPR_HalfStep_Right+0x64>
    3754:	9e 01       	movw	r18, r28
    3756:	2b 5b       	subi	r18, 0xBB	; 187
    3758:	3f 4f       	sbci	r19, 0xFF	; 255
    375a:	fe 01       	movw	r30, r28
    375c:	eb 5b       	subi	r30, 0xBB	; 187
    375e:	ff 4f       	sbci	r31, 0xFF	; 255
    3760:	80 81       	ld	r24, Z
    3762:	91 81       	ldd	r25, Z+1	; 0x01
    3764:	a2 81       	ldd	r26, Z+2	; 0x02
    3766:	b3 81       	ldd	r27, Z+3	; 0x03
    3768:	01 97       	sbiw	r24, 0x01	; 1
    376a:	a1 09       	sbc	r26, r1
    376c:	b1 09       	sbc	r27, r1
    376e:	f9 01       	movw	r30, r18
    3770:	80 83       	st	Z, r24
    3772:	91 83       	std	Z+1, r25	; 0x01
    3774:	a2 83       	std	Z+2, r26	; 0x02
    3776:	b3 83       	std	Z+3, r27	; 0x03
    3778:	fe 01       	movw	r30, r28
    377a:	eb 5b       	subi	r30, 0xBB	; 187
    377c:	ff 4f       	sbci	r31, 0xFF	; 255
    377e:	80 81       	ld	r24, Z
    3780:	91 81       	ldd	r25, Z+1	; 0x01
    3782:	a2 81       	ldd	r26, Z+2	; 0x02
    3784:	b3 81       	ldd	r27, Z+3	; 0x03
    3786:	00 97       	sbiw	r24, 0x00	; 0
    3788:	a1 05       	cpc	r26, r1
    378a:	b1 05       	cpc	r27, r1
    378c:	09 f0       	breq	.+2      	; 0x3790 <STPR_HalfStep_Right+0xdc>
    378e:	b8 cf       	rjmp	.-144    	; 0x3700 <STPR_HalfStep_Right+0x4c>
	DIO_enuWritePin(STPR_COIL_0,DIO_LOW);
    3790:	88 e1       	ldi	r24, 0x18	; 24
    3792:	60 e0       	ldi	r22, 0x00	; 0
    3794:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_0,DIO_HIGH);//activate coil 1,2
    3798:	88 e1       	ldi	r24, 0x18	; 24
    379a:	61 e0       	ldi	r22, 0x01	; 1
    379c:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_1,DIO_HIGH);
    37a0:	89 e1       	ldi	r24, 0x19	; 25
    37a2:	61 e0       	ldi	r22, 0x01	; 1
    37a4:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	Delay_ms(speed);
    37a8:	fe 01       	movw	r30, r28
    37aa:	e7 5b       	subi	r30, 0xB7	; 183
    37ac:	ff 4f       	sbci	r31, 0xFF	; 255
    37ae:	80 81       	ld	r24, Z
    37b0:	86 95       	lsr	r24
    37b2:	86 95       	lsr	r24
    37b4:	86 95       	lsr	r24
    37b6:	88 2f       	mov	r24, r24
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	a0 e0       	ldi	r26, 0x00	; 0
    37bc:	b0 e0       	ldi	r27, 0x00	; 0
    37be:	fe 01       	movw	r30, r28
    37c0:	fd 96       	adiw	r30, 0x3d	; 61
    37c2:	80 83       	st	Z, r24
    37c4:	91 83       	std	Z+1, r25	; 0x01
    37c6:	a2 83       	std	Z+2, r26	; 0x02
    37c8:	b3 83       	std	Z+3, r27	; 0x03
    37ca:	2c c0       	rjmp	.+88     	; 0x3824 <STPR_HalfStep_Right+0x170>
    37cc:	80 ed       	ldi	r24, 0xD0	; 208
    37ce:	97 e0       	ldi	r25, 0x07	; 7
    37d0:	a0 e0       	ldi	r26, 0x00	; 0
    37d2:	b0 e0       	ldi	r27, 0x00	; 0
    37d4:	89 af       	std	Y+57, r24	; 0x39
    37d6:	9a af       	std	Y+58, r25	; 0x3a
    37d8:	ab af       	std	Y+59, r26	; 0x3b
    37da:	bc af       	std	Y+60, r27	; 0x3c
    37dc:	0c c0       	rjmp	.+24     	; 0x37f6 <STPR_HalfStep_Right+0x142>
    37de:	00 00       	nop
    37e0:	89 ad       	ldd	r24, Y+57	; 0x39
    37e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    37e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    37e6:	bc ad       	ldd	r27, Y+60	; 0x3c
    37e8:	01 97       	sbiw	r24, 0x01	; 1
    37ea:	a1 09       	sbc	r26, r1
    37ec:	b1 09       	sbc	r27, r1
    37ee:	89 af       	std	Y+57, r24	; 0x39
    37f0:	9a af       	std	Y+58, r25	; 0x3a
    37f2:	ab af       	std	Y+59, r26	; 0x3b
    37f4:	bc af       	std	Y+60, r27	; 0x3c
    37f6:	89 ad       	ldd	r24, Y+57	; 0x39
    37f8:	9a ad       	ldd	r25, Y+58	; 0x3a
    37fa:	ab ad       	ldd	r26, Y+59	; 0x3b
    37fc:	bc ad       	ldd	r27, Y+60	; 0x3c
    37fe:	00 97       	sbiw	r24, 0x00	; 0
    3800:	a1 05       	cpc	r26, r1
    3802:	b1 05       	cpc	r27, r1
    3804:	61 f7       	brne	.-40     	; 0x37de <STPR_HalfStep_Right+0x12a>
    3806:	fe 01       	movw	r30, r28
    3808:	fd 96       	adiw	r30, 0x3d	; 61
    380a:	80 81       	ld	r24, Z
    380c:	91 81       	ldd	r25, Z+1	; 0x01
    380e:	a2 81       	ldd	r26, Z+2	; 0x02
    3810:	b3 81       	ldd	r27, Z+3	; 0x03
    3812:	01 97       	sbiw	r24, 0x01	; 1
    3814:	a1 09       	sbc	r26, r1
    3816:	b1 09       	sbc	r27, r1
    3818:	fe 01       	movw	r30, r28
    381a:	fd 96       	adiw	r30, 0x3d	; 61
    381c:	80 83       	st	Z, r24
    381e:	91 83       	std	Z+1, r25	; 0x01
    3820:	a2 83       	std	Z+2, r26	; 0x02
    3822:	b3 83       	std	Z+3, r27	; 0x03
    3824:	fe 01       	movw	r30, r28
    3826:	fd 96       	adiw	r30, 0x3d	; 61
    3828:	80 81       	ld	r24, Z
    382a:	91 81       	ldd	r25, Z+1	; 0x01
    382c:	a2 81       	ldd	r26, Z+2	; 0x02
    382e:	b3 81       	ldd	r27, Z+3	; 0x03
    3830:	00 97       	sbiw	r24, 0x00	; 0
    3832:	a1 05       	cpc	r26, r1
    3834:	b1 05       	cpc	r27, r1
    3836:	51 f6       	brne	.-108    	; 0x37cc <STPR_HalfStep_Right+0x118>
	DIO_enuWritePin(STPR_COIL_0,DIO_LOW);//deactivate coil 1,2
    3838:	88 e1       	ldi	r24, 0x18	; 24
    383a:	60 e0       	ldi	r22, 0x00	; 0
    383c:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_1,DIO_LOW);
    3840:	89 e1       	ldi	r24, 0x19	; 25
    3842:	60 e0       	ldi	r22, 0x00	; 0
    3844:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_1,DIO_HIGH);//activate coil 2
    3848:	89 e1       	ldi	r24, 0x19	; 25
    384a:	61 e0       	ldi	r22, 0x01	; 1
    384c:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	Delay_ms(speed);
    3850:	fe 01       	movw	r30, r28
    3852:	e7 5b       	subi	r30, 0xB7	; 183
    3854:	ff 4f       	sbci	r31, 0xFF	; 255
    3856:	80 81       	ld	r24, Z
    3858:	86 95       	lsr	r24
    385a:	86 95       	lsr	r24
    385c:	86 95       	lsr	r24
    385e:	88 2f       	mov	r24, r24
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	a0 e0       	ldi	r26, 0x00	; 0
    3864:	b0 e0       	ldi	r27, 0x00	; 0
    3866:	8d ab       	std	Y+53, r24	; 0x35
    3868:	9e ab       	std	Y+54, r25	; 0x36
    386a:	af ab       	std	Y+55, r26	; 0x37
    386c:	b8 af       	std	Y+56, r27	; 0x38
    386e:	28 c0       	rjmp	.+80     	; 0x38c0 <STPR_HalfStep_Right+0x20c>
    3870:	80 ed       	ldi	r24, 0xD0	; 208
    3872:	97 e0       	ldi	r25, 0x07	; 7
    3874:	a0 e0       	ldi	r26, 0x00	; 0
    3876:	b0 e0       	ldi	r27, 0x00	; 0
    3878:	89 ab       	std	Y+49, r24	; 0x31
    387a:	9a ab       	std	Y+50, r25	; 0x32
    387c:	ab ab       	std	Y+51, r26	; 0x33
    387e:	bc ab       	std	Y+52, r27	; 0x34
    3880:	0c c0       	rjmp	.+24     	; 0x389a <STPR_HalfStep_Right+0x1e6>
    3882:	00 00       	nop
    3884:	89 a9       	ldd	r24, Y+49	; 0x31
    3886:	9a a9       	ldd	r25, Y+50	; 0x32
    3888:	ab a9       	ldd	r26, Y+51	; 0x33
    388a:	bc a9       	ldd	r27, Y+52	; 0x34
    388c:	01 97       	sbiw	r24, 0x01	; 1
    388e:	a1 09       	sbc	r26, r1
    3890:	b1 09       	sbc	r27, r1
    3892:	89 ab       	std	Y+49, r24	; 0x31
    3894:	9a ab       	std	Y+50, r25	; 0x32
    3896:	ab ab       	std	Y+51, r26	; 0x33
    3898:	bc ab       	std	Y+52, r27	; 0x34
    389a:	89 a9       	ldd	r24, Y+49	; 0x31
    389c:	9a a9       	ldd	r25, Y+50	; 0x32
    389e:	ab a9       	ldd	r26, Y+51	; 0x33
    38a0:	bc a9       	ldd	r27, Y+52	; 0x34
    38a2:	00 97       	sbiw	r24, 0x00	; 0
    38a4:	a1 05       	cpc	r26, r1
    38a6:	b1 05       	cpc	r27, r1
    38a8:	61 f7       	brne	.-40     	; 0x3882 <STPR_HalfStep_Right+0x1ce>
    38aa:	8d a9       	ldd	r24, Y+53	; 0x35
    38ac:	9e a9       	ldd	r25, Y+54	; 0x36
    38ae:	af a9       	ldd	r26, Y+55	; 0x37
    38b0:	b8 ad       	ldd	r27, Y+56	; 0x38
    38b2:	01 97       	sbiw	r24, 0x01	; 1
    38b4:	a1 09       	sbc	r26, r1
    38b6:	b1 09       	sbc	r27, r1
    38b8:	8d ab       	std	Y+53, r24	; 0x35
    38ba:	9e ab       	std	Y+54, r25	; 0x36
    38bc:	af ab       	std	Y+55, r26	; 0x37
    38be:	b8 af       	std	Y+56, r27	; 0x38
    38c0:	8d a9       	ldd	r24, Y+53	; 0x35
    38c2:	9e a9       	ldd	r25, Y+54	; 0x36
    38c4:	af a9       	ldd	r26, Y+55	; 0x37
    38c6:	b8 ad       	ldd	r27, Y+56	; 0x38
    38c8:	00 97       	sbiw	r24, 0x00	; 0
    38ca:	a1 05       	cpc	r26, r1
    38cc:	b1 05       	cpc	r27, r1
    38ce:	81 f6       	brne	.-96     	; 0x3870 <STPR_HalfStep_Right+0x1bc>
	DIO_enuWritePin(STPR_COIL_1,DIO_LOW);
    38d0:	89 e1       	ldi	r24, 0x19	; 25
    38d2:	60 e0       	ldi	r22, 0x00	; 0
    38d4:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_1,DIO_HIGH); //activate coil 2,3
    38d8:	89 e1       	ldi	r24, 0x19	; 25
    38da:	61 e0       	ldi	r22, 0x01	; 1
    38dc:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_2,DIO_HIGH);
    38e0:	8a e1       	ldi	r24, 0x1A	; 26
    38e2:	61 e0       	ldi	r22, 0x01	; 1
    38e4:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	Delay_ms(speed);
    38e8:	fe 01       	movw	r30, r28
    38ea:	e7 5b       	subi	r30, 0xB7	; 183
    38ec:	ff 4f       	sbci	r31, 0xFF	; 255
    38ee:	80 81       	ld	r24, Z
    38f0:	86 95       	lsr	r24
    38f2:	86 95       	lsr	r24
    38f4:	86 95       	lsr	r24
    38f6:	88 2f       	mov	r24, r24
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	a0 e0       	ldi	r26, 0x00	; 0
    38fc:	b0 e0       	ldi	r27, 0x00	; 0
    38fe:	8d a7       	std	Y+45, r24	; 0x2d
    3900:	9e a7       	std	Y+46, r25	; 0x2e
    3902:	af a7       	std	Y+47, r26	; 0x2f
    3904:	b8 ab       	std	Y+48, r27	; 0x30
    3906:	28 c0       	rjmp	.+80     	; 0x3958 <STPR_HalfStep_Right+0x2a4>
    3908:	80 ed       	ldi	r24, 0xD0	; 208
    390a:	97 e0       	ldi	r25, 0x07	; 7
    390c:	a0 e0       	ldi	r26, 0x00	; 0
    390e:	b0 e0       	ldi	r27, 0x00	; 0
    3910:	89 a7       	std	Y+41, r24	; 0x29
    3912:	9a a7       	std	Y+42, r25	; 0x2a
    3914:	ab a7       	std	Y+43, r26	; 0x2b
    3916:	bc a7       	std	Y+44, r27	; 0x2c
    3918:	0c c0       	rjmp	.+24     	; 0x3932 <STPR_HalfStep_Right+0x27e>
    391a:	00 00       	nop
    391c:	89 a5       	ldd	r24, Y+41	; 0x29
    391e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3920:	ab a5       	ldd	r26, Y+43	; 0x2b
    3922:	bc a5       	ldd	r27, Y+44	; 0x2c
    3924:	01 97       	sbiw	r24, 0x01	; 1
    3926:	a1 09       	sbc	r26, r1
    3928:	b1 09       	sbc	r27, r1
    392a:	89 a7       	std	Y+41, r24	; 0x29
    392c:	9a a7       	std	Y+42, r25	; 0x2a
    392e:	ab a7       	std	Y+43, r26	; 0x2b
    3930:	bc a7       	std	Y+44, r27	; 0x2c
    3932:	89 a5       	ldd	r24, Y+41	; 0x29
    3934:	9a a5       	ldd	r25, Y+42	; 0x2a
    3936:	ab a5       	ldd	r26, Y+43	; 0x2b
    3938:	bc a5       	ldd	r27, Y+44	; 0x2c
    393a:	00 97       	sbiw	r24, 0x00	; 0
    393c:	a1 05       	cpc	r26, r1
    393e:	b1 05       	cpc	r27, r1
    3940:	61 f7       	brne	.-40     	; 0x391a <STPR_HalfStep_Right+0x266>
    3942:	8d a5       	ldd	r24, Y+45	; 0x2d
    3944:	9e a5       	ldd	r25, Y+46	; 0x2e
    3946:	af a5       	ldd	r26, Y+47	; 0x2f
    3948:	b8 a9       	ldd	r27, Y+48	; 0x30
    394a:	01 97       	sbiw	r24, 0x01	; 1
    394c:	a1 09       	sbc	r26, r1
    394e:	b1 09       	sbc	r27, r1
    3950:	8d a7       	std	Y+45, r24	; 0x2d
    3952:	9e a7       	std	Y+46, r25	; 0x2e
    3954:	af a7       	std	Y+47, r26	; 0x2f
    3956:	b8 ab       	std	Y+48, r27	; 0x30
    3958:	8d a5       	ldd	r24, Y+45	; 0x2d
    395a:	9e a5       	ldd	r25, Y+46	; 0x2e
    395c:	af a5       	ldd	r26, Y+47	; 0x2f
    395e:	b8 a9       	ldd	r27, Y+48	; 0x30
    3960:	00 97       	sbiw	r24, 0x00	; 0
    3962:	a1 05       	cpc	r26, r1
    3964:	b1 05       	cpc	r27, r1
    3966:	81 f6       	brne	.-96     	; 0x3908 <STPR_HalfStep_Right+0x254>
	DIO_enuWritePin(STPR_COIL_1,DIO_LOW); //deactivate coil 2,3
    3968:	89 e1       	ldi	r24, 0x19	; 25
    396a:	60 e0       	ldi	r22, 0x00	; 0
    396c:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_2,DIO_LOW);
    3970:	8a e1       	ldi	r24, 0x1A	; 26
    3972:	60 e0       	ldi	r22, 0x00	; 0
    3974:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_2,DIO_HIGH); //activate coil 3
    3978:	8a e1       	ldi	r24, 0x1A	; 26
    397a:	61 e0       	ldi	r22, 0x01	; 1
    397c:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	Delay_ms(speed);
    3980:	fe 01       	movw	r30, r28
    3982:	e7 5b       	subi	r30, 0xB7	; 183
    3984:	ff 4f       	sbci	r31, 0xFF	; 255
    3986:	80 81       	ld	r24, Z
    3988:	86 95       	lsr	r24
    398a:	86 95       	lsr	r24
    398c:	86 95       	lsr	r24
    398e:	88 2f       	mov	r24, r24
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	a0 e0       	ldi	r26, 0x00	; 0
    3994:	b0 e0       	ldi	r27, 0x00	; 0
    3996:	8d a3       	std	Y+37, r24	; 0x25
    3998:	9e a3       	std	Y+38, r25	; 0x26
    399a:	af a3       	std	Y+39, r26	; 0x27
    399c:	b8 a7       	std	Y+40, r27	; 0x28
    399e:	28 c0       	rjmp	.+80     	; 0x39f0 <STPR_HalfStep_Right+0x33c>
    39a0:	80 ed       	ldi	r24, 0xD0	; 208
    39a2:	97 e0       	ldi	r25, 0x07	; 7
    39a4:	a0 e0       	ldi	r26, 0x00	; 0
    39a6:	b0 e0       	ldi	r27, 0x00	; 0
    39a8:	89 a3       	std	Y+33, r24	; 0x21
    39aa:	9a a3       	std	Y+34, r25	; 0x22
    39ac:	ab a3       	std	Y+35, r26	; 0x23
    39ae:	bc a3       	std	Y+36, r27	; 0x24
    39b0:	0c c0       	rjmp	.+24     	; 0x39ca <STPR_HalfStep_Right+0x316>
    39b2:	00 00       	nop
    39b4:	89 a1       	ldd	r24, Y+33	; 0x21
    39b6:	9a a1       	ldd	r25, Y+34	; 0x22
    39b8:	ab a1       	ldd	r26, Y+35	; 0x23
    39ba:	bc a1       	ldd	r27, Y+36	; 0x24
    39bc:	01 97       	sbiw	r24, 0x01	; 1
    39be:	a1 09       	sbc	r26, r1
    39c0:	b1 09       	sbc	r27, r1
    39c2:	89 a3       	std	Y+33, r24	; 0x21
    39c4:	9a a3       	std	Y+34, r25	; 0x22
    39c6:	ab a3       	std	Y+35, r26	; 0x23
    39c8:	bc a3       	std	Y+36, r27	; 0x24
    39ca:	89 a1       	ldd	r24, Y+33	; 0x21
    39cc:	9a a1       	ldd	r25, Y+34	; 0x22
    39ce:	ab a1       	ldd	r26, Y+35	; 0x23
    39d0:	bc a1       	ldd	r27, Y+36	; 0x24
    39d2:	00 97       	sbiw	r24, 0x00	; 0
    39d4:	a1 05       	cpc	r26, r1
    39d6:	b1 05       	cpc	r27, r1
    39d8:	61 f7       	brne	.-40     	; 0x39b2 <STPR_HalfStep_Right+0x2fe>
    39da:	8d a1       	ldd	r24, Y+37	; 0x25
    39dc:	9e a1       	ldd	r25, Y+38	; 0x26
    39de:	af a1       	ldd	r26, Y+39	; 0x27
    39e0:	b8 a5       	ldd	r27, Y+40	; 0x28
    39e2:	01 97       	sbiw	r24, 0x01	; 1
    39e4:	a1 09       	sbc	r26, r1
    39e6:	b1 09       	sbc	r27, r1
    39e8:	8d a3       	std	Y+37, r24	; 0x25
    39ea:	9e a3       	std	Y+38, r25	; 0x26
    39ec:	af a3       	std	Y+39, r26	; 0x27
    39ee:	b8 a7       	std	Y+40, r27	; 0x28
    39f0:	8d a1       	ldd	r24, Y+37	; 0x25
    39f2:	9e a1       	ldd	r25, Y+38	; 0x26
    39f4:	af a1       	ldd	r26, Y+39	; 0x27
    39f6:	b8 a5       	ldd	r27, Y+40	; 0x28
    39f8:	00 97       	sbiw	r24, 0x00	; 0
    39fa:	a1 05       	cpc	r26, r1
    39fc:	b1 05       	cpc	r27, r1
    39fe:	81 f6       	brne	.-96     	; 0x39a0 <STPR_HalfStep_Right+0x2ec>
	DIO_enuWritePin(STPR_COIL_2,DIO_LOW);
    3a00:	8a e1       	ldi	r24, 0x1A	; 26
    3a02:	60 e0       	ldi	r22, 0x00	; 0
    3a04:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_2,DIO_HIGH); //activate coil 3,4
    3a08:	8a e1       	ldi	r24, 0x1A	; 26
    3a0a:	61 e0       	ldi	r22, 0x01	; 1
    3a0c:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_3,DIO_HIGH);
    3a10:	8b e1       	ldi	r24, 0x1B	; 27
    3a12:	61 e0       	ldi	r22, 0x01	; 1
    3a14:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	Delay_ms(speed);
    3a18:	fe 01       	movw	r30, r28
    3a1a:	e7 5b       	subi	r30, 0xB7	; 183
    3a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1e:	80 81       	ld	r24, Z
    3a20:	86 95       	lsr	r24
    3a22:	86 95       	lsr	r24
    3a24:	86 95       	lsr	r24
    3a26:	88 2f       	mov	r24, r24
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	a0 e0       	ldi	r26, 0x00	; 0
    3a2c:	b0 e0       	ldi	r27, 0x00	; 0
    3a2e:	8d 8f       	std	Y+29, r24	; 0x1d
    3a30:	9e 8f       	std	Y+30, r25	; 0x1e
    3a32:	af 8f       	std	Y+31, r26	; 0x1f
    3a34:	b8 a3       	std	Y+32, r27	; 0x20
    3a36:	28 c0       	rjmp	.+80     	; 0x3a88 <STPR_HalfStep_Right+0x3d4>
    3a38:	80 ed       	ldi	r24, 0xD0	; 208
    3a3a:	97 e0       	ldi	r25, 0x07	; 7
    3a3c:	a0 e0       	ldi	r26, 0x00	; 0
    3a3e:	b0 e0       	ldi	r27, 0x00	; 0
    3a40:	89 8f       	std	Y+25, r24	; 0x19
    3a42:	9a 8f       	std	Y+26, r25	; 0x1a
    3a44:	ab 8f       	std	Y+27, r26	; 0x1b
    3a46:	bc 8f       	std	Y+28, r27	; 0x1c
    3a48:	0c c0       	rjmp	.+24     	; 0x3a62 <STPR_HalfStep_Right+0x3ae>
    3a4a:	00 00       	nop
    3a4c:	89 8d       	ldd	r24, Y+25	; 0x19
    3a4e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3a50:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3a52:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3a54:	01 97       	sbiw	r24, 0x01	; 1
    3a56:	a1 09       	sbc	r26, r1
    3a58:	b1 09       	sbc	r27, r1
    3a5a:	89 8f       	std	Y+25, r24	; 0x19
    3a5c:	9a 8f       	std	Y+26, r25	; 0x1a
    3a5e:	ab 8f       	std	Y+27, r26	; 0x1b
    3a60:	bc 8f       	std	Y+28, r27	; 0x1c
    3a62:	89 8d       	ldd	r24, Y+25	; 0x19
    3a64:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3a66:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3a68:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3a6a:	00 97       	sbiw	r24, 0x00	; 0
    3a6c:	a1 05       	cpc	r26, r1
    3a6e:	b1 05       	cpc	r27, r1
    3a70:	61 f7       	brne	.-40     	; 0x3a4a <STPR_HalfStep_Right+0x396>
    3a72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a74:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a76:	af 8d       	ldd	r26, Y+31	; 0x1f
    3a78:	b8 a1       	ldd	r27, Y+32	; 0x20
    3a7a:	01 97       	sbiw	r24, 0x01	; 1
    3a7c:	a1 09       	sbc	r26, r1
    3a7e:	b1 09       	sbc	r27, r1
    3a80:	8d 8f       	std	Y+29, r24	; 0x1d
    3a82:	9e 8f       	std	Y+30, r25	; 0x1e
    3a84:	af 8f       	std	Y+31, r26	; 0x1f
    3a86:	b8 a3       	std	Y+32, r27	; 0x20
    3a88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a8a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a8c:	af 8d       	ldd	r26, Y+31	; 0x1f
    3a8e:	b8 a1       	ldd	r27, Y+32	; 0x20
    3a90:	00 97       	sbiw	r24, 0x00	; 0
    3a92:	a1 05       	cpc	r26, r1
    3a94:	b1 05       	cpc	r27, r1
    3a96:	81 f6       	brne	.-96     	; 0x3a38 <STPR_HalfStep_Right+0x384>
	DIO_enuWritePin(STPR_COIL_2,DIO_LOW); //deactivate coil 3,4
    3a98:	8a e1       	ldi	r24, 0x1A	; 26
    3a9a:	60 e0       	ldi	r22, 0x00	; 0
    3a9c:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_3,DIO_LOW);
    3aa0:	8b e1       	ldi	r24, 0x1B	; 27
    3aa2:	60 e0       	ldi	r22, 0x00	; 0
    3aa4:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_3,DIO_HIGH); //activate coil 4
    3aa8:	8b e1       	ldi	r24, 0x1B	; 27
    3aaa:	61 e0       	ldi	r22, 0x01	; 1
    3aac:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	Delay_ms(speed);
    3ab0:	fe 01       	movw	r30, r28
    3ab2:	e7 5b       	subi	r30, 0xB7	; 183
    3ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab6:	80 81       	ld	r24, Z
    3ab8:	86 95       	lsr	r24
    3aba:	86 95       	lsr	r24
    3abc:	86 95       	lsr	r24
    3abe:	88 2f       	mov	r24, r24
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	a0 e0       	ldi	r26, 0x00	; 0
    3ac4:	b0 e0       	ldi	r27, 0x00	; 0
    3ac6:	8d 8b       	std	Y+21, r24	; 0x15
    3ac8:	9e 8b       	std	Y+22, r25	; 0x16
    3aca:	af 8b       	std	Y+23, r26	; 0x17
    3acc:	b8 8f       	std	Y+24, r27	; 0x18
    3ace:	28 c0       	rjmp	.+80     	; 0x3b20 <STPR_HalfStep_Right+0x46c>
    3ad0:	80 ed       	ldi	r24, 0xD0	; 208
    3ad2:	97 e0       	ldi	r25, 0x07	; 7
    3ad4:	a0 e0       	ldi	r26, 0x00	; 0
    3ad6:	b0 e0       	ldi	r27, 0x00	; 0
    3ad8:	89 8b       	std	Y+17, r24	; 0x11
    3ada:	9a 8b       	std	Y+18, r25	; 0x12
    3adc:	ab 8b       	std	Y+19, r26	; 0x13
    3ade:	bc 8b       	std	Y+20, r27	; 0x14
    3ae0:	0c c0       	rjmp	.+24     	; 0x3afa <STPR_HalfStep_Right+0x446>
    3ae2:	00 00       	nop
    3ae4:	89 89       	ldd	r24, Y+17	; 0x11
    3ae6:	9a 89       	ldd	r25, Y+18	; 0x12
    3ae8:	ab 89       	ldd	r26, Y+19	; 0x13
    3aea:	bc 89       	ldd	r27, Y+20	; 0x14
    3aec:	01 97       	sbiw	r24, 0x01	; 1
    3aee:	a1 09       	sbc	r26, r1
    3af0:	b1 09       	sbc	r27, r1
    3af2:	89 8b       	std	Y+17, r24	; 0x11
    3af4:	9a 8b       	std	Y+18, r25	; 0x12
    3af6:	ab 8b       	std	Y+19, r26	; 0x13
    3af8:	bc 8b       	std	Y+20, r27	; 0x14
    3afa:	89 89       	ldd	r24, Y+17	; 0x11
    3afc:	9a 89       	ldd	r25, Y+18	; 0x12
    3afe:	ab 89       	ldd	r26, Y+19	; 0x13
    3b00:	bc 89       	ldd	r27, Y+20	; 0x14
    3b02:	00 97       	sbiw	r24, 0x00	; 0
    3b04:	a1 05       	cpc	r26, r1
    3b06:	b1 05       	cpc	r27, r1
    3b08:	61 f7       	brne	.-40     	; 0x3ae2 <STPR_HalfStep_Right+0x42e>
    3b0a:	8d 89       	ldd	r24, Y+21	; 0x15
    3b0c:	9e 89       	ldd	r25, Y+22	; 0x16
    3b0e:	af 89       	ldd	r26, Y+23	; 0x17
    3b10:	b8 8d       	ldd	r27, Y+24	; 0x18
    3b12:	01 97       	sbiw	r24, 0x01	; 1
    3b14:	a1 09       	sbc	r26, r1
    3b16:	b1 09       	sbc	r27, r1
    3b18:	8d 8b       	std	Y+21, r24	; 0x15
    3b1a:	9e 8b       	std	Y+22, r25	; 0x16
    3b1c:	af 8b       	std	Y+23, r26	; 0x17
    3b1e:	b8 8f       	std	Y+24, r27	; 0x18
    3b20:	8d 89       	ldd	r24, Y+21	; 0x15
    3b22:	9e 89       	ldd	r25, Y+22	; 0x16
    3b24:	af 89       	ldd	r26, Y+23	; 0x17
    3b26:	b8 8d       	ldd	r27, Y+24	; 0x18
    3b28:	00 97       	sbiw	r24, 0x00	; 0
    3b2a:	a1 05       	cpc	r26, r1
    3b2c:	b1 05       	cpc	r27, r1
    3b2e:	81 f6       	brne	.-96     	; 0x3ad0 <STPR_HalfStep_Right+0x41c>
	DIO_enuWritePin(STPR_COIL_3,DIO_LOW);
    3b30:	8b e1       	ldi	r24, 0x1B	; 27
    3b32:	60 e0       	ldi	r22, 0x00	; 0
    3b34:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_0,DIO_HIGH);  //activate coil 1,4
    3b38:	88 e1       	ldi	r24, 0x18	; 24
    3b3a:	61 e0       	ldi	r22, 0x01	; 1
    3b3c:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_3,DIO_HIGH);
    3b40:	8b e1       	ldi	r24, 0x1B	; 27
    3b42:	61 e0       	ldi	r22, 0x01	; 1
    3b44:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	Delay_ms(speed);
    3b48:	fe 01       	movw	r30, r28
    3b4a:	e7 5b       	subi	r30, 0xB7	; 183
    3b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4e:	80 81       	ld	r24, Z
    3b50:	86 95       	lsr	r24
    3b52:	86 95       	lsr	r24
    3b54:	86 95       	lsr	r24
    3b56:	88 2f       	mov	r24, r24
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	a0 e0       	ldi	r26, 0x00	; 0
    3b5c:	b0 e0       	ldi	r27, 0x00	; 0
    3b5e:	8d 87       	std	Y+13, r24	; 0x0d
    3b60:	9e 87       	std	Y+14, r25	; 0x0e
    3b62:	af 87       	std	Y+15, r26	; 0x0f
    3b64:	b8 8b       	std	Y+16, r27	; 0x10
    3b66:	28 c0       	rjmp	.+80     	; 0x3bb8 <STPR_HalfStep_Right+0x504>
    3b68:	80 ed       	ldi	r24, 0xD0	; 208
    3b6a:	97 e0       	ldi	r25, 0x07	; 7
    3b6c:	a0 e0       	ldi	r26, 0x00	; 0
    3b6e:	b0 e0       	ldi	r27, 0x00	; 0
    3b70:	89 87       	std	Y+9, r24	; 0x09
    3b72:	9a 87       	std	Y+10, r25	; 0x0a
    3b74:	ab 87       	std	Y+11, r26	; 0x0b
    3b76:	bc 87       	std	Y+12, r27	; 0x0c
    3b78:	0c c0       	rjmp	.+24     	; 0x3b92 <STPR_HalfStep_Right+0x4de>
    3b7a:	00 00       	nop
    3b7c:	89 85       	ldd	r24, Y+9	; 0x09
    3b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b80:	ab 85       	ldd	r26, Y+11	; 0x0b
    3b82:	bc 85       	ldd	r27, Y+12	; 0x0c
    3b84:	01 97       	sbiw	r24, 0x01	; 1
    3b86:	a1 09       	sbc	r26, r1
    3b88:	b1 09       	sbc	r27, r1
    3b8a:	89 87       	std	Y+9, r24	; 0x09
    3b8c:	9a 87       	std	Y+10, r25	; 0x0a
    3b8e:	ab 87       	std	Y+11, r26	; 0x0b
    3b90:	bc 87       	std	Y+12, r27	; 0x0c
    3b92:	89 85       	ldd	r24, Y+9	; 0x09
    3b94:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b96:	ab 85       	ldd	r26, Y+11	; 0x0b
    3b98:	bc 85       	ldd	r27, Y+12	; 0x0c
    3b9a:	00 97       	sbiw	r24, 0x00	; 0
    3b9c:	a1 05       	cpc	r26, r1
    3b9e:	b1 05       	cpc	r27, r1
    3ba0:	61 f7       	brne	.-40     	; 0x3b7a <STPR_HalfStep_Right+0x4c6>
    3ba2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ba4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ba6:	af 85       	ldd	r26, Y+15	; 0x0f
    3ba8:	b8 89       	ldd	r27, Y+16	; 0x10
    3baa:	01 97       	sbiw	r24, 0x01	; 1
    3bac:	a1 09       	sbc	r26, r1
    3bae:	b1 09       	sbc	r27, r1
    3bb0:	8d 87       	std	Y+13, r24	; 0x0d
    3bb2:	9e 87       	std	Y+14, r25	; 0x0e
    3bb4:	af 87       	std	Y+15, r26	; 0x0f
    3bb6:	b8 8b       	std	Y+16, r27	; 0x10
    3bb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bba:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bbc:	af 85       	ldd	r26, Y+15	; 0x0f
    3bbe:	b8 89       	ldd	r27, Y+16	; 0x10
    3bc0:	00 97       	sbiw	r24, 0x00	; 0
    3bc2:	a1 05       	cpc	r26, r1
    3bc4:	b1 05       	cpc	r27, r1
    3bc6:	81 f6       	brne	.-96     	; 0x3b68 <STPR_HalfStep_Right+0x4b4>
	DIO_enuWritePin(STPR_COIL_0,DIO_LOW);  //deactivate coil 1,4
    3bc8:	88 e1       	ldi	r24, 0x18	; 24
    3bca:	60 e0       	ldi	r22, 0x00	; 0
    3bcc:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_3,DIO_LOW);
    3bd0:	8b e1       	ldi	r24, 0x1B	; 27
    3bd2:	60 e0       	ldi	r22, 0x00	; 0
    3bd4:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_0,DIO_HIGH);
    3bd8:	88 e1       	ldi	r24, 0x18	; 24
    3bda:	61 e0       	ldi	r22, 0x01	; 1
    3bdc:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	Delay_ms(speed);
    3be0:	fe 01       	movw	r30, r28
    3be2:	e7 5b       	subi	r30, 0xB7	; 183
    3be4:	ff 4f       	sbci	r31, 0xFF	; 255
    3be6:	80 81       	ld	r24, Z
    3be8:	86 95       	lsr	r24
    3bea:	86 95       	lsr	r24
    3bec:	86 95       	lsr	r24
    3bee:	88 2f       	mov	r24, r24
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	a0 e0       	ldi	r26, 0x00	; 0
    3bf4:	b0 e0       	ldi	r27, 0x00	; 0
    3bf6:	8d 83       	std	Y+5, r24	; 0x05
    3bf8:	9e 83       	std	Y+6, r25	; 0x06
    3bfa:	af 83       	std	Y+7, r26	; 0x07
    3bfc:	b8 87       	std	Y+8, r27	; 0x08
    3bfe:	28 c0       	rjmp	.+80     	; 0x3c50 <STPR_HalfStep_Right+0x59c>
    3c00:	80 ed       	ldi	r24, 0xD0	; 208
    3c02:	97 e0       	ldi	r25, 0x07	; 7
    3c04:	a0 e0       	ldi	r26, 0x00	; 0
    3c06:	b0 e0       	ldi	r27, 0x00	; 0
    3c08:	89 83       	std	Y+1, r24	; 0x01
    3c0a:	9a 83       	std	Y+2, r25	; 0x02
    3c0c:	ab 83       	std	Y+3, r26	; 0x03
    3c0e:	bc 83       	std	Y+4, r27	; 0x04
    3c10:	0c c0       	rjmp	.+24     	; 0x3c2a <STPR_HalfStep_Right+0x576>
    3c12:	00 00       	nop
    3c14:	89 81       	ldd	r24, Y+1	; 0x01
    3c16:	9a 81       	ldd	r25, Y+2	; 0x02
    3c18:	ab 81       	ldd	r26, Y+3	; 0x03
    3c1a:	bc 81       	ldd	r27, Y+4	; 0x04
    3c1c:	01 97       	sbiw	r24, 0x01	; 1
    3c1e:	a1 09       	sbc	r26, r1
    3c20:	b1 09       	sbc	r27, r1
    3c22:	89 83       	std	Y+1, r24	; 0x01
    3c24:	9a 83       	std	Y+2, r25	; 0x02
    3c26:	ab 83       	std	Y+3, r26	; 0x03
    3c28:	bc 83       	std	Y+4, r27	; 0x04
    3c2a:	89 81       	ldd	r24, Y+1	; 0x01
    3c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c2e:	ab 81       	ldd	r26, Y+3	; 0x03
    3c30:	bc 81       	ldd	r27, Y+4	; 0x04
    3c32:	00 97       	sbiw	r24, 0x00	; 0
    3c34:	a1 05       	cpc	r26, r1
    3c36:	b1 05       	cpc	r27, r1
    3c38:	61 f7       	brne	.-40     	; 0x3c12 <STPR_HalfStep_Right+0x55e>
    3c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c3e:	af 81       	ldd	r26, Y+7	; 0x07
    3c40:	b8 85       	ldd	r27, Y+8	; 0x08
    3c42:	01 97       	sbiw	r24, 0x01	; 1
    3c44:	a1 09       	sbc	r26, r1
    3c46:	b1 09       	sbc	r27, r1
    3c48:	8d 83       	std	Y+5, r24	; 0x05
    3c4a:	9e 83       	std	Y+6, r25	; 0x06
    3c4c:	af 83       	std	Y+7, r26	; 0x07
    3c4e:	b8 87       	std	Y+8, r27	; 0x08
    3c50:	8d 81       	ldd	r24, Y+5	; 0x05
    3c52:	9e 81       	ldd	r25, Y+6	; 0x06
    3c54:	af 81       	ldd	r26, Y+7	; 0x07
    3c56:	b8 85       	ldd	r27, Y+8	; 0x08
    3c58:	00 97       	sbiw	r24, 0x00	; 0
    3c5a:	a1 05       	cpc	r26, r1
    3c5c:	b1 05       	cpc	r27, r1
    3c5e:	81 f6       	brne	.-96     	; 0x3c00 <STPR_HalfStep_Right+0x54c>
}
    3c60:	c7 5b       	subi	r28, 0xB7	; 183
    3c62:	df 4f       	sbci	r29, 0xFF	; 255
    3c64:	0f b6       	in	r0, 0x3f	; 63
    3c66:	f8 94       	cli
    3c68:	de bf       	out	0x3e, r29	; 62
    3c6a:	0f be       	out	0x3f, r0	; 63
    3c6c:	cd bf       	out	0x3d, r28	; 61
    3c6e:	cf 91       	pop	r28
    3c70:	df 91       	pop	r29
    3c72:	08 95       	ret

00003c74 <STPR_HalfStep_Left>:

void STPR_HalfStep_Left(u8 speed)
{
    3c74:	df 93       	push	r29
    3c76:	cf 93       	push	r28
    3c78:	cd b7       	in	r28, 0x3d	; 61
    3c7a:	de b7       	in	r29, 0x3e	; 62
    3c7c:	c1 54       	subi	r28, 0x41	; 65
    3c7e:	d0 40       	sbci	r29, 0x00	; 0
    3c80:	0f b6       	in	r0, 0x3f	; 63
    3c82:	f8 94       	cli
    3c84:	de bf       	out	0x3e, r29	; 62
    3c86:	0f be       	out	0x3f, r0	; 63
    3c88:	cd bf       	out	0x3d, r28	; 61
    3c8a:	fe 01       	movw	r30, r28
    3c8c:	ef 5b       	subi	r30, 0xBF	; 191
    3c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c90:	80 83       	st	Z, r24
	//half step
	DIO_enuWritePin(STPR_COIL_0,DIO_HIGH);  //deactivate coil 1,4
    3c92:	88 e1       	ldi	r24, 0x18	; 24
    3c94:	61 e0       	ldi	r22, 0x01	; 1
    3c96:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_3,DIO_HIGH);
    3c9a:	8b e1       	ldi	r24, 0x1B	; 27
    3c9c:	61 e0       	ldi	r22, 0x01	; 1
    3c9e:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	Delay_ms(speed);
    3ca2:	fe 01       	movw	r30, r28
    3ca4:	ef 5b       	subi	r30, 0xBF	; 191
    3ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca8:	80 81       	ld	r24, Z
    3caa:	86 95       	lsr	r24
    3cac:	86 95       	lsr	r24
    3cae:	86 95       	lsr	r24
    3cb0:	88 2f       	mov	r24, r24
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
    3cb4:	a0 e0       	ldi	r26, 0x00	; 0
    3cb6:	b0 e0       	ldi	r27, 0x00	; 0
    3cb8:	fe 01       	movw	r30, r28
    3cba:	fd 96       	adiw	r30, 0x3d	; 61
    3cbc:	80 83       	st	Z, r24
    3cbe:	91 83       	std	Z+1, r25	; 0x01
    3cc0:	a2 83       	std	Z+2, r26	; 0x02
    3cc2:	b3 83       	std	Z+3, r27	; 0x03
    3cc4:	2c c0       	rjmp	.+88     	; 0x3d1e <STPR_HalfStep_Left+0xaa>
    3cc6:	80 ed       	ldi	r24, 0xD0	; 208
    3cc8:	97 e0       	ldi	r25, 0x07	; 7
    3cca:	a0 e0       	ldi	r26, 0x00	; 0
    3ccc:	b0 e0       	ldi	r27, 0x00	; 0
    3cce:	89 af       	std	Y+57, r24	; 0x39
    3cd0:	9a af       	std	Y+58, r25	; 0x3a
    3cd2:	ab af       	std	Y+59, r26	; 0x3b
    3cd4:	bc af       	std	Y+60, r27	; 0x3c
    3cd6:	0c c0       	rjmp	.+24     	; 0x3cf0 <STPR_HalfStep_Left+0x7c>
    3cd8:	00 00       	nop
    3cda:	89 ad       	ldd	r24, Y+57	; 0x39
    3cdc:	9a ad       	ldd	r25, Y+58	; 0x3a
    3cde:	ab ad       	ldd	r26, Y+59	; 0x3b
    3ce0:	bc ad       	ldd	r27, Y+60	; 0x3c
    3ce2:	01 97       	sbiw	r24, 0x01	; 1
    3ce4:	a1 09       	sbc	r26, r1
    3ce6:	b1 09       	sbc	r27, r1
    3ce8:	89 af       	std	Y+57, r24	; 0x39
    3cea:	9a af       	std	Y+58, r25	; 0x3a
    3cec:	ab af       	std	Y+59, r26	; 0x3b
    3cee:	bc af       	std	Y+60, r27	; 0x3c
    3cf0:	89 ad       	ldd	r24, Y+57	; 0x39
    3cf2:	9a ad       	ldd	r25, Y+58	; 0x3a
    3cf4:	ab ad       	ldd	r26, Y+59	; 0x3b
    3cf6:	bc ad       	ldd	r27, Y+60	; 0x3c
    3cf8:	00 97       	sbiw	r24, 0x00	; 0
    3cfa:	a1 05       	cpc	r26, r1
    3cfc:	b1 05       	cpc	r27, r1
    3cfe:	61 f7       	brne	.-40     	; 0x3cd8 <STPR_HalfStep_Left+0x64>
    3d00:	fe 01       	movw	r30, r28
    3d02:	fd 96       	adiw	r30, 0x3d	; 61
    3d04:	80 81       	ld	r24, Z
    3d06:	91 81       	ldd	r25, Z+1	; 0x01
    3d08:	a2 81       	ldd	r26, Z+2	; 0x02
    3d0a:	b3 81       	ldd	r27, Z+3	; 0x03
    3d0c:	01 97       	sbiw	r24, 0x01	; 1
    3d0e:	a1 09       	sbc	r26, r1
    3d10:	b1 09       	sbc	r27, r1
    3d12:	fe 01       	movw	r30, r28
    3d14:	fd 96       	adiw	r30, 0x3d	; 61
    3d16:	80 83       	st	Z, r24
    3d18:	91 83       	std	Z+1, r25	; 0x01
    3d1a:	a2 83       	std	Z+2, r26	; 0x02
    3d1c:	b3 83       	std	Z+3, r27	; 0x03
    3d1e:	fe 01       	movw	r30, r28
    3d20:	fd 96       	adiw	r30, 0x3d	; 61
    3d22:	80 81       	ld	r24, Z
    3d24:	91 81       	ldd	r25, Z+1	; 0x01
    3d26:	a2 81       	ldd	r26, Z+2	; 0x02
    3d28:	b3 81       	ldd	r27, Z+3	; 0x03
    3d2a:	00 97       	sbiw	r24, 0x00	; 0
    3d2c:	a1 05       	cpc	r26, r1
    3d2e:	b1 05       	cpc	r27, r1
    3d30:	51 f6       	brne	.-108    	; 0x3cc6 <STPR_HalfStep_Left+0x52>
	DIO_enuWritePin(STPR_COIL_0,DIO_LOW);  //deactivate coil 1,4
    3d32:	88 e1       	ldi	r24, 0x18	; 24
    3d34:	60 e0       	ldi	r22, 0x00	; 0
    3d36:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_3,DIO_LOW);
    3d3a:	8b e1       	ldi	r24, 0x1B	; 27
    3d3c:	60 e0       	ldi	r22, 0x00	; 0
    3d3e:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_3,DIO_HIGH);  //activate coil 4
    3d42:	8b e1       	ldi	r24, 0x1B	; 27
    3d44:	61 e0       	ldi	r22, 0x01	; 1
    3d46:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	Delay_ms(speed);
    3d4a:	fe 01       	movw	r30, r28
    3d4c:	ef 5b       	subi	r30, 0xBF	; 191
    3d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d50:	80 81       	ld	r24, Z
    3d52:	86 95       	lsr	r24
    3d54:	86 95       	lsr	r24
    3d56:	86 95       	lsr	r24
    3d58:	88 2f       	mov	r24, r24
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	a0 e0       	ldi	r26, 0x00	; 0
    3d5e:	b0 e0       	ldi	r27, 0x00	; 0
    3d60:	8d ab       	std	Y+53, r24	; 0x35
    3d62:	9e ab       	std	Y+54, r25	; 0x36
    3d64:	af ab       	std	Y+55, r26	; 0x37
    3d66:	b8 af       	std	Y+56, r27	; 0x38
    3d68:	28 c0       	rjmp	.+80     	; 0x3dba <STPR_HalfStep_Left+0x146>
    3d6a:	80 ed       	ldi	r24, 0xD0	; 208
    3d6c:	97 e0       	ldi	r25, 0x07	; 7
    3d6e:	a0 e0       	ldi	r26, 0x00	; 0
    3d70:	b0 e0       	ldi	r27, 0x00	; 0
    3d72:	89 ab       	std	Y+49, r24	; 0x31
    3d74:	9a ab       	std	Y+50, r25	; 0x32
    3d76:	ab ab       	std	Y+51, r26	; 0x33
    3d78:	bc ab       	std	Y+52, r27	; 0x34
    3d7a:	0c c0       	rjmp	.+24     	; 0x3d94 <STPR_HalfStep_Left+0x120>
    3d7c:	00 00       	nop
    3d7e:	89 a9       	ldd	r24, Y+49	; 0x31
    3d80:	9a a9       	ldd	r25, Y+50	; 0x32
    3d82:	ab a9       	ldd	r26, Y+51	; 0x33
    3d84:	bc a9       	ldd	r27, Y+52	; 0x34
    3d86:	01 97       	sbiw	r24, 0x01	; 1
    3d88:	a1 09       	sbc	r26, r1
    3d8a:	b1 09       	sbc	r27, r1
    3d8c:	89 ab       	std	Y+49, r24	; 0x31
    3d8e:	9a ab       	std	Y+50, r25	; 0x32
    3d90:	ab ab       	std	Y+51, r26	; 0x33
    3d92:	bc ab       	std	Y+52, r27	; 0x34
    3d94:	89 a9       	ldd	r24, Y+49	; 0x31
    3d96:	9a a9       	ldd	r25, Y+50	; 0x32
    3d98:	ab a9       	ldd	r26, Y+51	; 0x33
    3d9a:	bc a9       	ldd	r27, Y+52	; 0x34
    3d9c:	00 97       	sbiw	r24, 0x00	; 0
    3d9e:	a1 05       	cpc	r26, r1
    3da0:	b1 05       	cpc	r27, r1
    3da2:	61 f7       	brne	.-40     	; 0x3d7c <STPR_HalfStep_Left+0x108>
    3da4:	8d a9       	ldd	r24, Y+53	; 0x35
    3da6:	9e a9       	ldd	r25, Y+54	; 0x36
    3da8:	af a9       	ldd	r26, Y+55	; 0x37
    3daa:	b8 ad       	ldd	r27, Y+56	; 0x38
    3dac:	01 97       	sbiw	r24, 0x01	; 1
    3dae:	a1 09       	sbc	r26, r1
    3db0:	b1 09       	sbc	r27, r1
    3db2:	8d ab       	std	Y+53, r24	; 0x35
    3db4:	9e ab       	std	Y+54, r25	; 0x36
    3db6:	af ab       	std	Y+55, r26	; 0x37
    3db8:	b8 af       	std	Y+56, r27	; 0x38
    3dba:	8d a9       	ldd	r24, Y+53	; 0x35
    3dbc:	9e a9       	ldd	r25, Y+54	; 0x36
    3dbe:	af a9       	ldd	r26, Y+55	; 0x37
    3dc0:	b8 ad       	ldd	r27, Y+56	; 0x38
    3dc2:	00 97       	sbiw	r24, 0x00	; 0
    3dc4:	a1 05       	cpc	r26, r1
    3dc6:	b1 05       	cpc	r27, r1
    3dc8:	81 f6       	brne	.-96     	; 0x3d6a <STPR_HalfStep_Left+0xf6>
	DIO_enuWritePin(STPR_COIL_3,DIO_LOW);
    3dca:	8b e1       	ldi	r24, 0x1B	; 27
    3dcc:	60 e0       	ldi	r22, 0x00	; 0
    3dce:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_3,DIO_HIGH); //activate coil 3,4
    3dd2:	8b e1       	ldi	r24, 0x1B	; 27
    3dd4:	61 e0       	ldi	r22, 0x01	; 1
    3dd6:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_2,DIO_HIGH);
    3dda:	8a e1       	ldi	r24, 0x1A	; 26
    3ddc:	61 e0       	ldi	r22, 0x01	; 1
    3dde:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	Delay_ms(speed);
    3de2:	fe 01       	movw	r30, r28
    3de4:	ef 5b       	subi	r30, 0xBF	; 191
    3de6:	ff 4f       	sbci	r31, 0xFF	; 255
    3de8:	80 81       	ld	r24, Z
    3dea:	86 95       	lsr	r24
    3dec:	86 95       	lsr	r24
    3dee:	86 95       	lsr	r24
    3df0:	88 2f       	mov	r24, r24
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	a0 e0       	ldi	r26, 0x00	; 0
    3df6:	b0 e0       	ldi	r27, 0x00	; 0
    3df8:	8d a7       	std	Y+45, r24	; 0x2d
    3dfa:	9e a7       	std	Y+46, r25	; 0x2e
    3dfc:	af a7       	std	Y+47, r26	; 0x2f
    3dfe:	b8 ab       	std	Y+48, r27	; 0x30
    3e00:	28 c0       	rjmp	.+80     	; 0x3e52 <STPR_HalfStep_Left+0x1de>
    3e02:	80 ed       	ldi	r24, 0xD0	; 208
    3e04:	97 e0       	ldi	r25, 0x07	; 7
    3e06:	a0 e0       	ldi	r26, 0x00	; 0
    3e08:	b0 e0       	ldi	r27, 0x00	; 0
    3e0a:	89 a7       	std	Y+41, r24	; 0x29
    3e0c:	9a a7       	std	Y+42, r25	; 0x2a
    3e0e:	ab a7       	std	Y+43, r26	; 0x2b
    3e10:	bc a7       	std	Y+44, r27	; 0x2c
    3e12:	0c c0       	rjmp	.+24     	; 0x3e2c <STPR_HalfStep_Left+0x1b8>
    3e14:	00 00       	nop
    3e16:	89 a5       	ldd	r24, Y+41	; 0x29
    3e18:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e1a:	ab a5       	ldd	r26, Y+43	; 0x2b
    3e1c:	bc a5       	ldd	r27, Y+44	; 0x2c
    3e1e:	01 97       	sbiw	r24, 0x01	; 1
    3e20:	a1 09       	sbc	r26, r1
    3e22:	b1 09       	sbc	r27, r1
    3e24:	89 a7       	std	Y+41, r24	; 0x29
    3e26:	9a a7       	std	Y+42, r25	; 0x2a
    3e28:	ab a7       	std	Y+43, r26	; 0x2b
    3e2a:	bc a7       	std	Y+44, r27	; 0x2c
    3e2c:	89 a5       	ldd	r24, Y+41	; 0x29
    3e2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e30:	ab a5       	ldd	r26, Y+43	; 0x2b
    3e32:	bc a5       	ldd	r27, Y+44	; 0x2c
    3e34:	00 97       	sbiw	r24, 0x00	; 0
    3e36:	a1 05       	cpc	r26, r1
    3e38:	b1 05       	cpc	r27, r1
    3e3a:	61 f7       	brne	.-40     	; 0x3e14 <STPR_HalfStep_Left+0x1a0>
    3e3c:	8d a5       	ldd	r24, Y+45	; 0x2d
    3e3e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3e40:	af a5       	ldd	r26, Y+47	; 0x2f
    3e42:	b8 a9       	ldd	r27, Y+48	; 0x30
    3e44:	01 97       	sbiw	r24, 0x01	; 1
    3e46:	a1 09       	sbc	r26, r1
    3e48:	b1 09       	sbc	r27, r1
    3e4a:	8d a7       	std	Y+45, r24	; 0x2d
    3e4c:	9e a7       	std	Y+46, r25	; 0x2e
    3e4e:	af a7       	std	Y+47, r26	; 0x2f
    3e50:	b8 ab       	std	Y+48, r27	; 0x30
    3e52:	8d a5       	ldd	r24, Y+45	; 0x2d
    3e54:	9e a5       	ldd	r25, Y+46	; 0x2e
    3e56:	af a5       	ldd	r26, Y+47	; 0x2f
    3e58:	b8 a9       	ldd	r27, Y+48	; 0x30
    3e5a:	00 97       	sbiw	r24, 0x00	; 0
    3e5c:	a1 05       	cpc	r26, r1
    3e5e:	b1 05       	cpc	r27, r1
    3e60:	81 f6       	brne	.-96     	; 0x3e02 <STPR_HalfStep_Left+0x18e>
	DIO_enuWritePin(STPR_COIL_3,DIO_LOW); //deactivate coil 3,4
    3e62:	8b e1       	ldi	r24, 0x1B	; 27
    3e64:	60 e0       	ldi	r22, 0x00	; 0
    3e66:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_2,DIO_LOW);
    3e6a:	8a e1       	ldi	r24, 0x1A	; 26
    3e6c:	60 e0       	ldi	r22, 0x00	; 0
    3e6e:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_2,DIO_HIGH);//activate coil 3
    3e72:	8a e1       	ldi	r24, 0x1A	; 26
    3e74:	61 e0       	ldi	r22, 0x01	; 1
    3e76:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	Delay_ms(speed);
    3e7a:	fe 01       	movw	r30, r28
    3e7c:	ef 5b       	subi	r30, 0xBF	; 191
    3e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e80:	80 81       	ld	r24, Z
    3e82:	86 95       	lsr	r24
    3e84:	86 95       	lsr	r24
    3e86:	86 95       	lsr	r24
    3e88:	88 2f       	mov	r24, r24
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	a0 e0       	ldi	r26, 0x00	; 0
    3e8e:	b0 e0       	ldi	r27, 0x00	; 0
    3e90:	8d a3       	std	Y+37, r24	; 0x25
    3e92:	9e a3       	std	Y+38, r25	; 0x26
    3e94:	af a3       	std	Y+39, r26	; 0x27
    3e96:	b8 a7       	std	Y+40, r27	; 0x28
    3e98:	28 c0       	rjmp	.+80     	; 0x3eea <STPR_HalfStep_Left+0x276>
    3e9a:	80 ed       	ldi	r24, 0xD0	; 208
    3e9c:	97 e0       	ldi	r25, 0x07	; 7
    3e9e:	a0 e0       	ldi	r26, 0x00	; 0
    3ea0:	b0 e0       	ldi	r27, 0x00	; 0
    3ea2:	89 a3       	std	Y+33, r24	; 0x21
    3ea4:	9a a3       	std	Y+34, r25	; 0x22
    3ea6:	ab a3       	std	Y+35, r26	; 0x23
    3ea8:	bc a3       	std	Y+36, r27	; 0x24
    3eaa:	0c c0       	rjmp	.+24     	; 0x3ec4 <STPR_HalfStep_Left+0x250>
    3eac:	00 00       	nop
    3eae:	89 a1       	ldd	r24, Y+33	; 0x21
    3eb0:	9a a1       	ldd	r25, Y+34	; 0x22
    3eb2:	ab a1       	ldd	r26, Y+35	; 0x23
    3eb4:	bc a1       	ldd	r27, Y+36	; 0x24
    3eb6:	01 97       	sbiw	r24, 0x01	; 1
    3eb8:	a1 09       	sbc	r26, r1
    3eba:	b1 09       	sbc	r27, r1
    3ebc:	89 a3       	std	Y+33, r24	; 0x21
    3ebe:	9a a3       	std	Y+34, r25	; 0x22
    3ec0:	ab a3       	std	Y+35, r26	; 0x23
    3ec2:	bc a3       	std	Y+36, r27	; 0x24
    3ec4:	89 a1       	ldd	r24, Y+33	; 0x21
    3ec6:	9a a1       	ldd	r25, Y+34	; 0x22
    3ec8:	ab a1       	ldd	r26, Y+35	; 0x23
    3eca:	bc a1       	ldd	r27, Y+36	; 0x24
    3ecc:	00 97       	sbiw	r24, 0x00	; 0
    3ece:	a1 05       	cpc	r26, r1
    3ed0:	b1 05       	cpc	r27, r1
    3ed2:	61 f7       	brne	.-40     	; 0x3eac <STPR_HalfStep_Left+0x238>
    3ed4:	8d a1       	ldd	r24, Y+37	; 0x25
    3ed6:	9e a1       	ldd	r25, Y+38	; 0x26
    3ed8:	af a1       	ldd	r26, Y+39	; 0x27
    3eda:	b8 a5       	ldd	r27, Y+40	; 0x28
    3edc:	01 97       	sbiw	r24, 0x01	; 1
    3ede:	a1 09       	sbc	r26, r1
    3ee0:	b1 09       	sbc	r27, r1
    3ee2:	8d a3       	std	Y+37, r24	; 0x25
    3ee4:	9e a3       	std	Y+38, r25	; 0x26
    3ee6:	af a3       	std	Y+39, r26	; 0x27
    3ee8:	b8 a7       	std	Y+40, r27	; 0x28
    3eea:	8d a1       	ldd	r24, Y+37	; 0x25
    3eec:	9e a1       	ldd	r25, Y+38	; 0x26
    3eee:	af a1       	ldd	r26, Y+39	; 0x27
    3ef0:	b8 a5       	ldd	r27, Y+40	; 0x28
    3ef2:	00 97       	sbiw	r24, 0x00	; 0
    3ef4:	a1 05       	cpc	r26, r1
    3ef6:	b1 05       	cpc	r27, r1
    3ef8:	81 f6       	brne	.-96     	; 0x3e9a <STPR_HalfStep_Left+0x226>
	DIO_enuWritePin(STPR_COIL_2,DIO_LOW);
    3efa:	8a e1       	ldi	r24, 0x1A	; 26
    3efc:	60 e0       	ldi	r22, 0x00	; 0
    3efe:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_2,DIO_HIGH); //activate coil 2,3
    3f02:	8a e1       	ldi	r24, 0x1A	; 26
    3f04:	61 e0       	ldi	r22, 0x01	; 1
    3f06:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_1,DIO_HIGH);
    3f0a:	89 e1       	ldi	r24, 0x19	; 25
    3f0c:	61 e0       	ldi	r22, 0x01	; 1
    3f0e:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	Delay_ms(speed);
    3f12:	fe 01       	movw	r30, r28
    3f14:	ef 5b       	subi	r30, 0xBF	; 191
    3f16:	ff 4f       	sbci	r31, 0xFF	; 255
    3f18:	80 81       	ld	r24, Z
    3f1a:	86 95       	lsr	r24
    3f1c:	86 95       	lsr	r24
    3f1e:	86 95       	lsr	r24
    3f20:	88 2f       	mov	r24, r24
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	a0 e0       	ldi	r26, 0x00	; 0
    3f26:	b0 e0       	ldi	r27, 0x00	; 0
    3f28:	8d 8f       	std	Y+29, r24	; 0x1d
    3f2a:	9e 8f       	std	Y+30, r25	; 0x1e
    3f2c:	af 8f       	std	Y+31, r26	; 0x1f
    3f2e:	b8 a3       	std	Y+32, r27	; 0x20
    3f30:	28 c0       	rjmp	.+80     	; 0x3f82 <STPR_HalfStep_Left+0x30e>
    3f32:	80 ed       	ldi	r24, 0xD0	; 208
    3f34:	97 e0       	ldi	r25, 0x07	; 7
    3f36:	a0 e0       	ldi	r26, 0x00	; 0
    3f38:	b0 e0       	ldi	r27, 0x00	; 0
    3f3a:	89 8f       	std	Y+25, r24	; 0x19
    3f3c:	9a 8f       	std	Y+26, r25	; 0x1a
    3f3e:	ab 8f       	std	Y+27, r26	; 0x1b
    3f40:	bc 8f       	std	Y+28, r27	; 0x1c
    3f42:	0c c0       	rjmp	.+24     	; 0x3f5c <STPR_HalfStep_Left+0x2e8>
    3f44:	00 00       	nop
    3f46:	89 8d       	ldd	r24, Y+25	; 0x19
    3f48:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3f4a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3f4c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3f4e:	01 97       	sbiw	r24, 0x01	; 1
    3f50:	a1 09       	sbc	r26, r1
    3f52:	b1 09       	sbc	r27, r1
    3f54:	89 8f       	std	Y+25, r24	; 0x19
    3f56:	9a 8f       	std	Y+26, r25	; 0x1a
    3f58:	ab 8f       	std	Y+27, r26	; 0x1b
    3f5a:	bc 8f       	std	Y+28, r27	; 0x1c
    3f5c:	89 8d       	ldd	r24, Y+25	; 0x19
    3f5e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3f60:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3f62:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3f64:	00 97       	sbiw	r24, 0x00	; 0
    3f66:	a1 05       	cpc	r26, r1
    3f68:	b1 05       	cpc	r27, r1
    3f6a:	61 f7       	brne	.-40     	; 0x3f44 <STPR_HalfStep_Left+0x2d0>
    3f6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f70:	af 8d       	ldd	r26, Y+31	; 0x1f
    3f72:	b8 a1       	ldd	r27, Y+32	; 0x20
    3f74:	01 97       	sbiw	r24, 0x01	; 1
    3f76:	a1 09       	sbc	r26, r1
    3f78:	b1 09       	sbc	r27, r1
    3f7a:	8d 8f       	std	Y+29, r24	; 0x1d
    3f7c:	9e 8f       	std	Y+30, r25	; 0x1e
    3f7e:	af 8f       	std	Y+31, r26	; 0x1f
    3f80:	b8 a3       	std	Y+32, r27	; 0x20
    3f82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f86:	af 8d       	ldd	r26, Y+31	; 0x1f
    3f88:	b8 a1       	ldd	r27, Y+32	; 0x20
    3f8a:	00 97       	sbiw	r24, 0x00	; 0
    3f8c:	a1 05       	cpc	r26, r1
    3f8e:	b1 05       	cpc	r27, r1
    3f90:	81 f6       	brne	.-96     	; 0x3f32 <STPR_HalfStep_Left+0x2be>
	DIO_enuWritePin(STPR_COIL_2,DIO_LOW); //deactivate coil 2,3
    3f92:	8a e1       	ldi	r24, 0x1A	; 26
    3f94:	60 e0       	ldi	r22, 0x00	; 0
    3f96:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_1,DIO_LOW);
    3f9a:	89 e1       	ldi	r24, 0x19	; 25
    3f9c:	60 e0       	ldi	r22, 0x00	; 0
    3f9e:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_1,DIO_HIGH);//activate coil 2
    3fa2:	89 e1       	ldi	r24, 0x19	; 25
    3fa4:	61 e0       	ldi	r22, 0x01	; 1
    3fa6:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	Delay_ms(speed);
    3faa:	fe 01       	movw	r30, r28
    3fac:	ef 5b       	subi	r30, 0xBF	; 191
    3fae:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb0:	80 81       	ld	r24, Z
    3fb2:	86 95       	lsr	r24
    3fb4:	86 95       	lsr	r24
    3fb6:	86 95       	lsr	r24
    3fb8:	88 2f       	mov	r24, r24
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	a0 e0       	ldi	r26, 0x00	; 0
    3fbe:	b0 e0       	ldi	r27, 0x00	; 0
    3fc0:	8d 8b       	std	Y+21, r24	; 0x15
    3fc2:	9e 8b       	std	Y+22, r25	; 0x16
    3fc4:	af 8b       	std	Y+23, r26	; 0x17
    3fc6:	b8 8f       	std	Y+24, r27	; 0x18
    3fc8:	28 c0       	rjmp	.+80     	; 0x401a <STPR_HalfStep_Left+0x3a6>
    3fca:	80 ed       	ldi	r24, 0xD0	; 208
    3fcc:	97 e0       	ldi	r25, 0x07	; 7
    3fce:	a0 e0       	ldi	r26, 0x00	; 0
    3fd0:	b0 e0       	ldi	r27, 0x00	; 0
    3fd2:	89 8b       	std	Y+17, r24	; 0x11
    3fd4:	9a 8b       	std	Y+18, r25	; 0x12
    3fd6:	ab 8b       	std	Y+19, r26	; 0x13
    3fd8:	bc 8b       	std	Y+20, r27	; 0x14
    3fda:	0c c0       	rjmp	.+24     	; 0x3ff4 <STPR_HalfStep_Left+0x380>
    3fdc:	00 00       	nop
    3fde:	89 89       	ldd	r24, Y+17	; 0x11
    3fe0:	9a 89       	ldd	r25, Y+18	; 0x12
    3fe2:	ab 89       	ldd	r26, Y+19	; 0x13
    3fe4:	bc 89       	ldd	r27, Y+20	; 0x14
    3fe6:	01 97       	sbiw	r24, 0x01	; 1
    3fe8:	a1 09       	sbc	r26, r1
    3fea:	b1 09       	sbc	r27, r1
    3fec:	89 8b       	std	Y+17, r24	; 0x11
    3fee:	9a 8b       	std	Y+18, r25	; 0x12
    3ff0:	ab 8b       	std	Y+19, r26	; 0x13
    3ff2:	bc 8b       	std	Y+20, r27	; 0x14
    3ff4:	89 89       	ldd	r24, Y+17	; 0x11
    3ff6:	9a 89       	ldd	r25, Y+18	; 0x12
    3ff8:	ab 89       	ldd	r26, Y+19	; 0x13
    3ffa:	bc 89       	ldd	r27, Y+20	; 0x14
    3ffc:	00 97       	sbiw	r24, 0x00	; 0
    3ffe:	a1 05       	cpc	r26, r1
    4000:	b1 05       	cpc	r27, r1
    4002:	61 f7       	brne	.-40     	; 0x3fdc <STPR_HalfStep_Left+0x368>
    4004:	8d 89       	ldd	r24, Y+21	; 0x15
    4006:	9e 89       	ldd	r25, Y+22	; 0x16
    4008:	af 89       	ldd	r26, Y+23	; 0x17
    400a:	b8 8d       	ldd	r27, Y+24	; 0x18
    400c:	01 97       	sbiw	r24, 0x01	; 1
    400e:	a1 09       	sbc	r26, r1
    4010:	b1 09       	sbc	r27, r1
    4012:	8d 8b       	std	Y+21, r24	; 0x15
    4014:	9e 8b       	std	Y+22, r25	; 0x16
    4016:	af 8b       	std	Y+23, r26	; 0x17
    4018:	b8 8f       	std	Y+24, r27	; 0x18
    401a:	8d 89       	ldd	r24, Y+21	; 0x15
    401c:	9e 89       	ldd	r25, Y+22	; 0x16
    401e:	af 89       	ldd	r26, Y+23	; 0x17
    4020:	b8 8d       	ldd	r27, Y+24	; 0x18
    4022:	00 97       	sbiw	r24, 0x00	; 0
    4024:	a1 05       	cpc	r26, r1
    4026:	b1 05       	cpc	r27, r1
    4028:	81 f6       	brne	.-96     	; 0x3fca <STPR_HalfStep_Left+0x356>
	DIO_enuWritePin(STPR_COIL_1,DIO_LOW);
    402a:	89 e1       	ldi	r24, 0x19	; 25
    402c:	60 e0       	ldi	r22, 0x00	; 0
    402e:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_1,DIO_HIGH); //activate coil 1,2
    4032:	89 e1       	ldi	r24, 0x19	; 25
    4034:	61 e0       	ldi	r22, 0x01	; 1
    4036:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_0,DIO_HIGH);
    403a:	88 e1       	ldi	r24, 0x18	; 24
    403c:	61 e0       	ldi	r22, 0x01	; 1
    403e:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	Delay_ms(speed);
    4042:	fe 01       	movw	r30, r28
    4044:	ef 5b       	subi	r30, 0xBF	; 191
    4046:	ff 4f       	sbci	r31, 0xFF	; 255
    4048:	80 81       	ld	r24, Z
    404a:	86 95       	lsr	r24
    404c:	86 95       	lsr	r24
    404e:	86 95       	lsr	r24
    4050:	88 2f       	mov	r24, r24
    4052:	90 e0       	ldi	r25, 0x00	; 0
    4054:	a0 e0       	ldi	r26, 0x00	; 0
    4056:	b0 e0       	ldi	r27, 0x00	; 0
    4058:	8d 87       	std	Y+13, r24	; 0x0d
    405a:	9e 87       	std	Y+14, r25	; 0x0e
    405c:	af 87       	std	Y+15, r26	; 0x0f
    405e:	b8 8b       	std	Y+16, r27	; 0x10
    4060:	28 c0       	rjmp	.+80     	; 0x40b2 <STPR_HalfStep_Left+0x43e>
    4062:	80 ed       	ldi	r24, 0xD0	; 208
    4064:	97 e0       	ldi	r25, 0x07	; 7
    4066:	a0 e0       	ldi	r26, 0x00	; 0
    4068:	b0 e0       	ldi	r27, 0x00	; 0
    406a:	89 87       	std	Y+9, r24	; 0x09
    406c:	9a 87       	std	Y+10, r25	; 0x0a
    406e:	ab 87       	std	Y+11, r26	; 0x0b
    4070:	bc 87       	std	Y+12, r27	; 0x0c
    4072:	0c c0       	rjmp	.+24     	; 0x408c <STPR_HalfStep_Left+0x418>
    4074:	00 00       	nop
    4076:	89 85       	ldd	r24, Y+9	; 0x09
    4078:	9a 85       	ldd	r25, Y+10	; 0x0a
    407a:	ab 85       	ldd	r26, Y+11	; 0x0b
    407c:	bc 85       	ldd	r27, Y+12	; 0x0c
    407e:	01 97       	sbiw	r24, 0x01	; 1
    4080:	a1 09       	sbc	r26, r1
    4082:	b1 09       	sbc	r27, r1
    4084:	89 87       	std	Y+9, r24	; 0x09
    4086:	9a 87       	std	Y+10, r25	; 0x0a
    4088:	ab 87       	std	Y+11, r26	; 0x0b
    408a:	bc 87       	std	Y+12, r27	; 0x0c
    408c:	89 85       	ldd	r24, Y+9	; 0x09
    408e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4090:	ab 85       	ldd	r26, Y+11	; 0x0b
    4092:	bc 85       	ldd	r27, Y+12	; 0x0c
    4094:	00 97       	sbiw	r24, 0x00	; 0
    4096:	a1 05       	cpc	r26, r1
    4098:	b1 05       	cpc	r27, r1
    409a:	61 f7       	brne	.-40     	; 0x4074 <STPR_HalfStep_Left+0x400>
    409c:	8d 85       	ldd	r24, Y+13	; 0x0d
    409e:	9e 85       	ldd	r25, Y+14	; 0x0e
    40a0:	af 85       	ldd	r26, Y+15	; 0x0f
    40a2:	b8 89       	ldd	r27, Y+16	; 0x10
    40a4:	01 97       	sbiw	r24, 0x01	; 1
    40a6:	a1 09       	sbc	r26, r1
    40a8:	b1 09       	sbc	r27, r1
    40aa:	8d 87       	std	Y+13, r24	; 0x0d
    40ac:	9e 87       	std	Y+14, r25	; 0x0e
    40ae:	af 87       	std	Y+15, r26	; 0x0f
    40b0:	b8 8b       	std	Y+16, r27	; 0x10
    40b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    40b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    40b6:	af 85       	ldd	r26, Y+15	; 0x0f
    40b8:	b8 89       	ldd	r27, Y+16	; 0x10
    40ba:	00 97       	sbiw	r24, 0x00	; 0
    40bc:	a1 05       	cpc	r26, r1
    40be:	b1 05       	cpc	r27, r1
    40c0:	81 f6       	brne	.-96     	; 0x4062 <STPR_HalfStep_Left+0x3ee>
	DIO_enuWritePin(STPR_COIL_1,DIO_LOW); //deactivate coil 1,2
    40c2:	89 e1       	ldi	r24, 0x19	; 25
    40c4:	60 e0       	ldi	r22, 0x00	; 0
    40c6:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_0,DIO_LOW);
    40ca:	88 e1       	ldi	r24, 0x18	; 24
    40cc:	60 e0       	ldi	r22, 0x00	; 0
    40ce:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(STPR_COIL_0,DIO_HIGH); //activate coil 1
    40d2:	88 e1       	ldi	r24, 0x18	; 24
    40d4:	61 e0       	ldi	r22, 0x01	; 1
    40d6:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	Delay_ms(speed);
    40da:	fe 01       	movw	r30, r28
    40dc:	ef 5b       	subi	r30, 0xBF	; 191
    40de:	ff 4f       	sbci	r31, 0xFF	; 255
    40e0:	80 81       	ld	r24, Z
    40e2:	86 95       	lsr	r24
    40e4:	86 95       	lsr	r24
    40e6:	86 95       	lsr	r24
    40e8:	88 2f       	mov	r24, r24
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	a0 e0       	ldi	r26, 0x00	; 0
    40ee:	b0 e0       	ldi	r27, 0x00	; 0
    40f0:	8d 83       	std	Y+5, r24	; 0x05
    40f2:	9e 83       	std	Y+6, r25	; 0x06
    40f4:	af 83       	std	Y+7, r26	; 0x07
    40f6:	b8 87       	std	Y+8, r27	; 0x08
    40f8:	28 c0       	rjmp	.+80     	; 0x414a <STPR_HalfStep_Left+0x4d6>
    40fa:	80 ed       	ldi	r24, 0xD0	; 208
    40fc:	97 e0       	ldi	r25, 0x07	; 7
    40fe:	a0 e0       	ldi	r26, 0x00	; 0
    4100:	b0 e0       	ldi	r27, 0x00	; 0
    4102:	89 83       	std	Y+1, r24	; 0x01
    4104:	9a 83       	std	Y+2, r25	; 0x02
    4106:	ab 83       	std	Y+3, r26	; 0x03
    4108:	bc 83       	std	Y+4, r27	; 0x04
    410a:	0c c0       	rjmp	.+24     	; 0x4124 <STPR_HalfStep_Left+0x4b0>
    410c:	00 00       	nop
    410e:	89 81       	ldd	r24, Y+1	; 0x01
    4110:	9a 81       	ldd	r25, Y+2	; 0x02
    4112:	ab 81       	ldd	r26, Y+3	; 0x03
    4114:	bc 81       	ldd	r27, Y+4	; 0x04
    4116:	01 97       	sbiw	r24, 0x01	; 1
    4118:	a1 09       	sbc	r26, r1
    411a:	b1 09       	sbc	r27, r1
    411c:	89 83       	std	Y+1, r24	; 0x01
    411e:	9a 83       	std	Y+2, r25	; 0x02
    4120:	ab 83       	std	Y+3, r26	; 0x03
    4122:	bc 83       	std	Y+4, r27	; 0x04
    4124:	89 81       	ldd	r24, Y+1	; 0x01
    4126:	9a 81       	ldd	r25, Y+2	; 0x02
    4128:	ab 81       	ldd	r26, Y+3	; 0x03
    412a:	bc 81       	ldd	r27, Y+4	; 0x04
    412c:	00 97       	sbiw	r24, 0x00	; 0
    412e:	a1 05       	cpc	r26, r1
    4130:	b1 05       	cpc	r27, r1
    4132:	61 f7       	brne	.-40     	; 0x410c <STPR_HalfStep_Left+0x498>
    4134:	8d 81       	ldd	r24, Y+5	; 0x05
    4136:	9e 81       	ldd	r25, Y+6	; 0x06
    4138:	af 81       	ldd	r26, Y+7	; 0x07
    413a:	b8 85       	ldd	r27, Y+8	; 0x08
    413c:	01 97       	sbiw	r24, 0x01	; 1
    413e:	a1 09       	sbc	r26, r1
    4140:	b1 09       	sbc	r27, r1
    4142:	8d 83       	std	Y+5, r24	; 0x05
    4144:	9e 83       	std	Y+6, r25	; 0x06
    4146:	af 83       	std	Y+7, r26	; 0x07
    4148:	b8 87       	std	Y+8, r27	; 0x08
    414a:	8d 81       	ldd	r24, Y+5	; 0x05
    414c:	9e 81       	ldd	r25, Y+6	; 0x06
    414e:	af 81       	ldd	r26, Y+7	; 0x07
    4150:	b8 85       	ldd	r27, Y+8	; 0x08
    4152:	00 97       	sbiw	r24, 0x00	; 0
    4154:	a1 05       	cpc	r26, r1
    4156:	b1 05       	cpc	r27, r1
    4158:	81 f6       	brne	.-96     	; 0x40fa <STPR_HalfStep_Left+0x486>

}
    415a:	cf 5b       	subi	r28, 0xBF	; 191
    415c:	df 4f       	sbci	r29, 0xFF	; 255
    415e:	0f b6       	in	r0, 0x3f	; 63
    4160:	f8 94       	cli
    4162:	de bf       	out	0x3e, r29	; 62
    4164:	0f be       	out	0x3f, r0	; 63
    4166:	cd bf       	out	0x3d, r28	; 61
    4168:	cf 91       	pop	r28
    416a:	df 91       	pop	r29
    416c:	08 95       	ret

0000416e <STPR_Stop>:




void STPR_Stop(void)
{
    416e:	df 93       	push	r29
    4170:	cf 93       	push	r28
    4172:	cd b7       	in	r28, 0x3d	; 61
    4174:	de b7       	in	r29, 0x3e	; 62
    4176:	28 97       	sbiw	r28, 0x08	; 8
    4178:	0f b6       	in	r0, 0x3f	; 63
    417a:	f8 94       	cli
    417c:	de bf       	out	0x3e, r29	; 62
    417e:	0f be       	out	0x3f, r0	; 63
    4180:	cd bf       	out	0x3d, r28	; 61
	u8 allPins[4] = {STPR_COIL_0, STPR_COIL_1, STPR_COIL_2, STPR_COIL_3};
    4182:	88 e1       	ldi	r24, 0x18	; 24
    4184:	89 83       	std	Y+1, r24	; 0x01
    4186:	89 e1       	ldi	r24, 0x19	; 25
    4188:	8a 83       	std	Y+2, r24	; 0x02
    418a:	8a e1       	ldi	r24, 0x1A	; 26
    418c:	8b 83       	std	Y+3, r24	; 0x03
    418e:	8b e1       	ldi	r24, 0x1B	; 27
    4190:	8c 83       	std	Y+4, r24	; 0x04
	u8 disableAll[4] = {DIO_LOW};
    4192:	1d 82       	std	Y+5, r1	; 0x05
    4194:	1e 82       	std	Y+6, r1	; 0x06
    4196:	1f 82       	std	Y+7, r1	; 0x07
    4198:	18 86       	std	Y+8, r1	; 0x08
	DIO_enuWriteGroup(allPins, disableAll, 4); //disable all coils
    419a:	9e 01       	movw	r18, r28
    419c:	2b 5f       	subi	r18, 0xFB	; 251
    419e:	3f 4f       	sbci	r19, 0xFF	; 255
    41a0:	ce 01       	movw	r24, r28
    41a2:	01 96       	adiw	r24, 0x01	; 1
    41a4:	b9 01       	movw	r22, r18
    41a6:	44 e0       	ldi	r20, 0x04	; 4
    41a8:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <DIO_enuWriteGroup>

}
    41ac:	28 96       	adiw	r28, 0x08	; 8
    41ae:	0f b6       	in	r0, 0x3f	; 63
    41b0:	f8 94       	cli
    41b2:	de bf       	out	0x3e, r29	; 62
    41b4:	0f be       	out	0x3f, r0	; 63
    41b6:	cd bf       	out	0x3d, r28	; 61
    41b8:	cf 91       	pop	r28
    41ba:	df 91       	pop	r29
    41bc:	08 95       	ret

000041be <Sev_Display>:
#include "SEV_cfg.h"
#include "SEV_priv.h"



tenuErrorStatus Sev_Display(u8 u8sevIndex, u8 u8num){
    41be:	df 93       	push	r29
    41c0:	cf 93       	push	r28
    41c2:	cd b7       	in	r28, 0x3d	; 61
    41c4:	de b7       	in	r29, 0x3e	; 62
    41c6:	62 97       	sbiw	r28, 0x12	; 18
    41c8:	0f b6       	in	r0, 0x3f	; 63
    41ca:	f8 94       	cli
    41cc:	de bf       	out	0x3e, r29	; 62
    41ce:	0f be       	out	0x3f, r0	; 63
    41d0:	cd bf       	out	0x3d, r28	; 61
    41d2:	8c 87       	std	Y+12, r24	; 0x0c
    41d4:	6d 87       	std	Y+13, r22	; 0x0d
    tenuErrorStatus enuReturnLoc = EOK;
    41d6:	19 82       	std	Y+1, r1	; 0x01
    u8 au8Cathode[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
    41d8:	ce 01       	movw	r24, r28
    41da:	02 96       	adiw	r24, 0x02	; 2
    41dc:	9f 87       	std	Y+15, r25	; 0x0f
    41de:	8e 87       	std	Y+14, r24	; 0x0e
    41e0:	ea e9       	ldi	r30, 0x9A	; 154
    41e2:	f1 e0       	ldi	r31, 0x01	; 1
    41e4:	f9 8b       	std	Y+17, r31	; 0x11
    41e6:	e8 8b       	std	Y+16, r30	; 0x10
    41e8:	fa e0       	ldi	r31, 0x0A	; 10
    41ea:	fa 8b       	std	Y+18, r31	; 0x12
    41ec:	e8 89       	ldd	r30, Y+16	; 0x10
    41ee:	f9 89       	ldd	r31, Y+17	; 0x11
    41f0:	00 80       	ld	r0, Z
    41f2:	88 89       	ldd	r24, Y+16	; 0x10
    41f4:	99 89       	ldd	r25, Y+17	; 0x11
    41f6:	01 96       	adiw	r24, 0x01	; 1
    41f8:	99 8b       	std	Y+17, r25	; 0x11
    41fa:	88 8b       	std	Y+16, r24	; 0x10
    41fc:	ee 85       	ldd	r30, Y+14	; 0x0e
    41fe:	ff 85       	ldd	r31, Y+15	; 0x0f
    4200:	00 82       	st	Z, r0
    4202:	8e 85       	ldd	r24, Y+14	; 0x0e
    4204:	9f 85       	ldd	r25, Y+15	; 0x0f
    4206:	01 96       	adiw	r24, 0x01	; 1
    4208:	9f 87       	std	Y+15, r25	; 0x0f
    420a:	8e 87       	std	Y+14, r24	; 0x0e
    420c:	9a 89       	ldd	r25, Y+18	; 0x12
    420e:	91 50       	subi	r25, 0x01	; 1
    4210:	9a 8b       	std	Y+18, r25	; 0x12
    4212:	ea 89       	ldd	r30, Y+18	; 0x12
    4214:	ee 23       	and	r30, r30
    4216:	51 f7       	brne	.-44     	; 0x41ec <Sev_Display+0x2e>
    if(u8sevIndex < MAX_SEV_SEGMENT){
    4218:	8c 85       	ldd	r24, Y+12	; 0x0c
    421a:	82 30       	cpi	r24, 0x02	; 2
    421c:	98 f5       	brcc	.+102    	; 0x4284 <Sev_Display+0xc6>
        if(u8num < 10){
    421e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4220:	8a 30       	cpi	r24, 0x0A	; 10
    4222:	90 f5       	brcc	.+100    	; 0x4288 <Sev_Display+0xca>
            if(SEV_ConfigSet[u8sevIndex].common_mode == Common_Cathode){
    4224:	8c 85       	ldd	r24, Y+12	; 0x0c
    4226:	28 2f       	mov	r18, r24
    4228:	30 e0       	ldi	r19, 0x00	; 0
    422a:	c9 01       	movw	r24, r18
    422c:	88 0f       	add	r24, r24
    422e:	99 1f       	adc	r25, r25
    4230:	88 0f       	add	r24, r24
    4232:	99 1f       	adc	r25, r25
    4234:	88 0f       	add	r24, r24
    4236:	99 1f       	adc	r25, r25
    4238:	82 0f       	add	r24, r18
    423a:	93 1f       	adc	r25, r19
    423c:	fc 01       	movw	r30, r24
    423e:	e0 59       	subi	r30, 0x90	; 144
    4240:	fe 4f       	sbci	r31, 0xFE	; 254
    4242:	80 81       	ld	r24, Z
    4244:	88 23       	and	r24, r24
    4246:	71 f4       	brne	.+28     	; 0x4264 <Sev_Display+0xa6>
            	PutOnBus(u8sevIndex, au8Cathode[u8num]);
    4248:	8d 85       	ldd	r24, Y+13	; 0x0d
    424a:	28 2f       	mov	r18, r24
    424c:	30 e0       	ldi	r19, 0x00	; 0
    424e:	ce 01       	movw	r24, r28
    4250:	02 96       	adiw	r24, 0x02	; 2
    4252:	fc 01       	movw	r30, r24
    4254:	e2 0f       	add	r30, r18
    4256:	f3 1f       	adc	r31, r19
    4258:	90 81       	ld	r25, Z
    425a:	8c 85       	ldd	r24, Y+12	; 0x0c
    425c:	69 2f       	mov	r22, r25
    425e:	0e 94 4e 21 	call	0x429c	; 0x429c <PutOnBus>
    4262:	12 c0       	rjmp	.+36     	; 0x4288 <Sev_Display+0xca>
            }
            else{
            	PutOnBus(u8sevIndex, ~au8Cathode[u8num]);
    4264:	8d 85       	ldd	r24, Y+13	; 0x0d
    4266:	28 2f       	mov	r18, r24
    4268:	30 e0       	ldi	r19, 0x00	; 0
    426a:	ce 01       	movw	r24, r28
    426c:	02 96       	adiw	r24, 0x02	; 2
    426e:	fc 01       	movw	r30, r24
    4270:	e2 0f       	add	r30, r18
    4272:	f3 1f       	adc	r31, r19
    4274:	80 81       	ld	r24, Z
    4276:	98 2f       	mov	r25, r24
    4278:	90 95       	com	r25
    427a:	8c 85       	ldd	r24, Y+12	; 0x0c
    427c:	69 2f       	mov	r22, r25
    427e:	0e 94 4e 21 	call	0x429c	; 0x429c <PutOnBus>
    4282:	02 c0       	rjmp	.+4      	; 0x4288 <Sev_Display+0xca>
            }
        }
    }else{
        enuReturnLoc = PARAM_OUT_RANGE;
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	89 83       	std	Y+1, r24	; 0x01
    }
    return enuReturnLoc;
    4288:	89 81       	ldd	r24, Y+1	; 0x01
}
    428a:	62 96       	adiw	r28, 0x12	; 18
    428c:	0f b6       	in	r0, 0x3f	; 63
    428e:	f8 94       	cli
    4290:	de bf       	out	0x3e, r29	; 62
    4292:	0f be       	out	0x3f, r0	; 63
    4294:	cd bf       	out	0x3d, r28	; 61
    4296:	cf 91       	pop	r28
    4298:	df 91       	pop	r29
    429a:	08 95       	ret

0000429c <PutOnBus>:

static void PutOnBus(u8 u8sevIndex, u8 u8num){
    429c:	df 93       	push	r29
    429e:	cf 93       	push	r28
    42a0:	cd b7       	in	r28, 0x3d	; 61
    42a2:	de b7       	in	r29, 0x3e	; 62
    42a4:	2a 97       	sbiw	r28, 0x0a	; 10
    42a6:	0f b6       	in	r0, 0x3f	; 63
    42a8:	f8 94       	cli
    42aa:	de bf       	out	0x3e, r29	; 62
    42ac:	0f be       	out	0x3f, r0	; 63
    42ae:	cd bf       	out	0x3d, r28	; 61
    42b0:	89 87       	std	Y+9, r24	; 0x09
    42b2:	6a 87       	std	Y+10, r22	; 0x0a
    u8 u8Num[7]; //0x0011 1111
	u8 cntr;
	for(cntr = 0; cntr < 7; cntr++){
    42b4:	19 82       	std	Y+1, r1	; 0x01
    42b6:	1b c0       	rjmp	.+54     	; 0x42ee <PutOnBus+0x52>
		u8Num[cntr] = GET_BIT(u8num, cntr);
    42b8:	89 81       	ldd	r24, Y+1	; 0x01
    42ba:	48 2f       	mov	r20, r24
    42bc:	50 e0       	ldi	r21, 0x00	; 0
    42be:	8a 85       	ldd	r24, Y+10	; 0x0a
    42c0:	28 2f       	mov	r18, r24
    42c2:	30 e0       	ldi	r19, 0x00	; 0
    42c4:	89 81       	ldd	r24, Y+1	; 0x01
    42c6:	88 2f       	mov	r24, r24
    42c8:	90 e0       	ldi	r25, 0x00	; 0
    42ca:	b9 01       	movw	r22, r18
    42cc:	02 c0       	rjmp	.+4      	; 0x42d2 <PutOnBus+0x36>
    42ce:	75 95       	asr	r23
    42d0:	67 95       	ror	r22
    42d2:	8a 95       	dec	r24
    42d4:	e2 f7       	brpl	.-8      	; 0x42ce <PutOnBus+0x32>
    42d6:	cb 01       	movw	r24, r22
    42d8:	28 2f       	mov	r18, r24
    42da:	21 70       	andi	r18, 0x01	; 1
    42dc:	ce 01       	movw	r24, r28
    42de:	02 96       	adiw	r24, 0x02	; 2
    42e0:	fc 01       	movw	r30, r24
    42e2:	e4 0f       	add	r30, r20
    42e4:	f5 1f       	adc	r31, r21
    42e6:	20 83       	st	Z, r18
}

static void PutOnBus(u8 u8sevIndex, u8 u8num){
    u8 u8Num[7]; //0x0011 1111
	u8 cntr;
	for(cntr = 0; cntr < 7; cntr++){
    42e8:	89 81       	ldd	r24, Y+1	; 0x01
    42ea:	8f 5f       	subi	r24, 0xFF	; 255
    42ec:	89 83       	std	Y+1, r24	; 0x01
    42ee:	89 81       	ldd	r24, Y+1	; 0x01
    42f0:	87 30       	cpi	r24, 0x07	; 7
    42f2:	10 f3       	brcs	.-60     	; 0x42b8 <PutOnBus+0x1c>
		u8Num[cntr] = GET_BIT(u8num, cntr);
	}
    DIO_enuWriteGroup(SEV_ConfigSet[u8sevIndex].Au8Pin, u8Num, 7 );
    42f4:	89 85       	ldd	r24, Y+9	; 0x09
    42f6:	28 2f       	mov	r18, r24
    42f8:	30 e0       	ldi	r19, 0x00	; 0
    42fa:	c9 01       	movw	r24, r18
    42fc:	88 0f       	add	r24, r24
    42fe:	99 1f       	adc	r25, r25
    4300:	88 0f       	add	r24, r24
    4302:	99 1f       	adc	r25, r25
    4304:	88 0f       	add	r24, r24
    4306:	99 1f       	adc	r25, r25
    4308:	82 0f       	add	r24, r18
    430a:	93 1f       	adc	r25, r19
    430c:	88 59       	subi	r24, 0x98	; 152
    430e:	9e 4f       	sbci	r25, 0xFE	; 254
    4310:	9e 01       	movw	r18, r28
    4312:	2e 5f       	subi	r18, 0xFE	; 254
    4314:	3f 4f       	sbci	r19, 0xFF	; 255
    4316:	b9 01       	movw	r22, r18
    4318:	47 e0       	ldi	r20, 0x07	; 7
    431a:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <DIO_enuWriteGroup>
}
    431e:	2a 96       	adiw	r28, 0x0a	; 10
    4320:	0f b6       	in	r0, 0x3f	; 63
    4322:	f8 94       	cli
    4324:	de bf       	out	0x3e, r29	; 62
    4326:	0f be       	out	0x3f, r0	; 63
    4328:	cd bf       	out	0x3d, r28	; 61
    432a:	cf 91       	pop	r28
    432c:	df 91       	pop	r29
    432e:	08 95       	ret

00004330 <Sev_PowerOn>:

tenuErrorStatus Sev_PowerOn(u8 u8sevIndex){
    4330:	df 93       	push	r29
    4332:	cf 93       	push	r28
    4334:	00 d0       	rcall	.+0      	; 0x4336 <Sev_PowerOn+0x6>
    4336:	cd b7       	in	r28, 0x3d	; 61
    4338:	de b7       	in	r29, 0x3e	; 62
    433a:	8a 83       	std	Y+2, r24	; 0x02
    tenuErrorStatus enuReturnLoc = EOK;
    433c:	19 82       	std	Y+1, r1	; 0x01
    
    if(u8sevIndex < MAX_SEV_SEGMENT){
    433e:	8a 81       	ldd	r24, Y+2	; 0x02
    4340:	82 30       	cpi	r24, 0x02	; 2
    4342:	e0 f5       	brcc	.+120    	; 0x43bc <Sev_PowerOn+0x8c>
        if(SEV_ConfigSet[u8sevIndex].common_mode == Common_Cathode){
    4344:	8a 81       	ldd	r24, Y+2	; 0x02
    4346:	28 2f       	mov	r18, r24
    4348:	30 e0       	ldi	r19, 0x00	; 0
    434a:	c9 01       	movw	r24, r18
    434c:	88 0f       	add	r24, r24
    434e:	99 1f       	adc	r25, r25
    4350:	88 0f       	add	r24, r24
    4352:	99 1f       	adc	r25, r25
    4354:	88 0f       	add	r24, r24
    4356:	99 1f       	adc	r25, r25
    4358:	82 0f       	add	r24, r18
    435a:	93 1f       	adc	r25, r19
    435c:	fc 01       	movw	r30, r24
    435e:	e0 59       	subi	r30, 0x90	; 144
    4360:	fe 4f       	sbci	r31, 0xFE	; 254
    4362:	80 81       	ld	r24, Z
    4364:	88 23       	and	r24, r24
    4366:	a9 f4       	brne	.+42     	; 0x4392 <Sev_PowerOn+0x62>
            enuReturnLoc = DIO_enuWritePin(SEV_ConfigSet[u8sevIndex].common, Common_Cathode);
    4368:	8a 81       	ldd	r24, Y+2	; 0x02
    436a:	28 2f       	mov	r18, r24
    436c:	30 e0       	ldi	r19, 0x00	; 0
    436e:	c9 01       	movw	r24, r18
    4370:	88 0f       	add	r24, r24
    4372:	99 1f       	adc	r25, r25
    4374:	88 0f       	add	r24, r24
    4376:	99 1f       	adc	r25, r25
    4378:	88 0f       	add	r24, r24
    437a:	99 1f       	adc	r25, r25
    437c:	82 0f       	add	r24, r18
    437e:	93 1f       	adc	r25, r19
    4380:	fc 01       	movw	r30, r24
    4382:	e1 59       	subi	r30, 0x91	; 145
    4384:	fe 4f       	sbci	r31, 0xFE	; 254
    4386:	80 81       	ld	r24, Z
    4388:	60 e0       	ldi	r22, 0x00	; 0
    438a:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    438e:	89 83       	std	Y+1, r24	; 0x01
    4390:	17 c0       	rjmp	.+46     	; 0x43c0 <Sev_PowerOn+0x90>
        }else{
        	 enuReturnLoc = DIO_enuWritePin(SEV_ConfigSet[u8sevIndex].common, Common_Anode);
    4392:	8a 81       	ldd	r24, Y+2	; 0x02
    4394:	28 2f       	mov	r18, r24
    4396:	30 e0       	ldi	r19, 0x00	; 0
    4398:	c9 01       	movw	r24, r18
    439a:	88 0f       	add	r24, r24
    439c:	99 1f       	adc	r25, r25
    439e:	88 0f       	add	r24, r24
    43a0:	99 1f       	adc	r25, r25
    43a2:	88 0f       	add	r24, r24
    43a4:	99 1f       	adc	r25, r25
    43a6:	82 0f       	add	r24, r18
    43a8:	93 1f       	adc	r25, r19
    43aa:	fc 01       	movw	r30, r24
    43ac:	e1 59       	subi	r30, 0x91	; 145
    43ae:	fe 4f       	sbci	r31, 0xFE	; 254
    43b0:	80 81       	ld	r24, Z
    43b2:	61 e0       	ldi	r22, 0x01	; 1
    43b4:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    43b8:	89 83       	std	Y+1, r24	; 0x01
    43ba:	02 c0       	rjmp	.+4      	; 0x43c0 <Sev_PowerOn+0x90>
        }
       
    }else{
        enuReturnLoc = PARAM_OUT_RANGE;
    43bc:	81 e0       	ldi	r24, 0x01	; 1
    43be:	89 83       	std	Y+1, r24	; 0x01
    }
    return enuReturnLoc;
    43c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    43c2:	0f 90       	pop	r0
    43c4:	0f 90       	pop	r0
    43c6:	cf 91       	pop	r28
    43c8:	df 91       	pop	r29
    43ca:	08 95       	ret

000043cc <Sev_PowerOff>:

tenuErrorStatus Sev_PowerOff(u8 u8sevIndex){
    43cc:	df 93       	push	r29
    43ce:	cf 93       	push	r28
    43d0:	00 d0       	rcall	.+0      	; 0x43d2 <Sev_PowerOff+0x6>
    43d2:	cd b7       	in	r28, 0x3d	; 61
    43d4:	de b7       	in	r29, 0x3e	; 62
    43d6:	8a 83       	std	Y+2, r24	; 0x02
    tenuErrorStatus enuReturnLoc = EOK;
    43d8:	19 82       	std	Y+1, r1	; 0x01
    
    if(u8sevIndex < MAX_SEV_SEGMENT){
    43da:	8a 81       	ldd	r24, Y+2	; 0x02
    43dc:	82 30       	cpi	r24, 0x02	; 2
    43de:	e0 f5       	brcc	.+120    	; 0x4458 <Sev_PowerOff+0x8c>
        if(SEV_ConfigSet[u8sevIndex].common_mode == Common_Cathode){
    43e0:	8a 81       	ldd	r24, Y+2	; 0x02
    43e2:	28 2f       	mov	r18, r24
    43e4:	30 e0       	ldi	r19, 0x00	; 0
    43e6:	c9 01       	movw	r24, r18
    43e8:	88 0f       	add	r24, r24
    43ea:	99 1f       	adc	r25, r25
    43ec:	88 0f       	add	r24, r24
    43ee:	99 1f       	adc	r25, r25
    43f0:	88 0f       	add	r24, r24
    43f2:	99 1f       	adc	r25, r25
    43f4:	82 0f       	add	r24, r18
    43f6:	93 1f       	adc	r25, r19
    43f8:	fc 01       	movw	r30, r24
    43fa:	e0 59       	subi	r30, 0x90	; 144
    43fc:	fe 4f       	sbci	r31, 0xFE	; 254
    43fe:	80 81       	ld	r24, Z
    4400:	88 23       	and	r24, r24
    4402:	a9 f4       	brne	.+42     	; 0x442e <Sev_PowerOff+0x62>
        	 enuReturnLoc = DIO_enuWritePin(SEV_ConfigSet[u8sevIndex].common, Common_Anode);
    4404:	8a 81       	ldd	r24, Y+2	; 0x02
    4406:	28 2f       	mov	r18, r24
    4408:	30 e0       	ldi	r19, 0x00	; 0
    440a:	c9 01       	movw	r24, r18
    440c:	88 0f       	add	r24, r24
    440e:	99 1f       	adc	r25, r25
    4410:	88 0f       	add	r24, r24
    4412:	99 1f       	adc	r25, r25
    4414:	88 0f       	add	r24, r24
    4416:	99 1f       	adc	r25, r25
    4418:	82 0f       	add	r24, r18
    441a:	93 1f       	adc	r25, r19
    441c:	fc 01       	movw	r30, r24
    441e:	e1 59       	subi	r30, 0x91	; 145
    4420:	fe 4f       	sbci	r31, 0xFE	; 254
    4422:	80 81       	ld	r24, Z
    4424:	61 e0       	ldi	r22, 0x01	; 1
    4426:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    442a:	89 83       	std	Y+1, r24	; 0x01
    442c:	17 c0       	rjmp	.+46     	; 0x445c <Sev_PowerOff+0x90>
        }else{
        	 enuReturnLoc = DIO_enuWritePin(SEV_ConfigSet[u8sevIndex].common, Common_Cathode);
    442e:	8a 81       	ldd	r24, Y+2	; 0x02
    4430:	28 2f       	mov	r18, r24
    4432:	30 e0       	ldi	r19, 0x00	; 0
    4434:	c9 01       	movw	r24, r18
    4436:	88 0f       	add	r24, r24
    4438:	99 1f       	adc	r25, r25
    443a:	88 0f       	add	r24, r24
    443c:	99 1f       	adc	r25, r25
    443e:	88 0f       	add	r24, r24
    4440:	99 1f       	adc	r25, r25
    4442:	82 0f       	add	r24, r18
    4444:	93 1f       	adc	r25, r19
    4446:	fc 01       	movw	r30, r24
    4448:	e1 59       	subi	r30, 0x91	; 145
    444a:	fe 4f       	sbci	r31, 0xFE	; 254
    444c:	80 81       	ld	r24, Z
    444e:	60 e0       	ldi	r22, 0x00	; 0
    4450:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    4454:	89 83       	std	Y+1, r24	; 0x01
    4456:	02 c0       	rjmp	.+4      	; 0x445c <Sev_PowerOff+0x90>
        }
       
    }else{
        enuReturnLoc = PARAM_OUT_RANGE;
    4458:	81 e0       	ldi	r24, 0x01	; 1
    445a:	89 83       	std	Y+1, r24	; 0x01
    }
    return enuReturnLoc;
    445c:	89 81       	ldd	r24, Y+1	; 0x01
}
    445e:	0f 90       	pop	r0
    4460:	0f 90       	pop	r0
    4462:	cf 91       	pop	r28
    4464:	df 91       	pop	r29
    4466:	08 95       	ret

00004468 <PutOnLCD>:
#include "../../MCAL/DIO/DIO.h"
#include "LCD_interface.h"
#include "LCD_Extra.h"
u8 REG[8] = {LCD_D0, LCD_D1, LCD_D2, LCD_D3, LCD_D4, LCD_D5, LCD_D6, LCD_D7};

void PutOnLCD(u8* u8REG, u8 u8num){
    4468:	df 93       	push	r29
    446a:	cf 93       	push	r28
    446c:	cd b7       	in	r28, 0x3d	; 61
    446e:	de b7       	in	r29, 0x3e	; 62
    4470:	2c 97       	sbiw	r28, 0x0c	; 12
    4472:	0f b6       	in	r0, 0x3f	; 63
    4474:	f8 94       	cli
    4476:	de bf       	out	0x3e, r29	; 62
    4478:	0f be       	out	0x3f, r0	; 63
    447a:	cd bf       	out	0x3d, r28	; 61
    447c:	9b 87       	std	Y+11, r25	; 0x0b
    447e:	8a 87       	std	Y+10, r24	; 0x0a
    4480:	6c 87       	std	Y+12, r22	; 0x0c
    u8 u8Num[8]; //0x0011 1111
  	u8 cntr;
  	for(cntr = 0; cntr < 8; cntr++){
    4482:	19 82       	std	Y+1, r1	; 0x01
    4484:	1b c0       	rjmp	.+54     	; 0x44bc <PutOnLCD+0x54>
  		u8Num[cntr] = GET_BIT(u8num, cntr);
    4486:	89 81       	ldd	r24, Y+1	; 0x01
    4488:	48 2f       	mov	r20, r24
    448a:	50 e0       	ldi	r21, 0x00	; 0
    448c:	8c 85       	ldd	r24, Y+12	; 0x0c
    448e:	28 2f       	mov	r18, r24
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	89 81       	ldd	r24, Y+1	; 0x01
    4494:	88 2f       	mov	r24, r24
    4496:	90 e0       	ldi	r25, 0x00	; 0
    4498:	b9 01       	movw	r22, r18
    449a:	02 c0       	rjmp	.+4      	; 0x44a0 <PutOnLCD+0x38>
    449c:	75 95       	asr	r23
    449e:	67 95       	ror	r22
    44a0:	8a 95       	dec	r24
    44a2:	e2 f7       	brpl	.-8      	; 0x449c <PutOnLCD+0x34>
    44a4:	cb 01       	movw	r24, r22
    44a6:	28 2f       	mov	r18, r24
    44a8:	21 70       	andi	r18, 0x01	; 1
    44aa:	ce 01       	movw	r24, r28
    44ac:	02 96       	adiw	r24, 0x02	; 2
    44ae:	fc 01       	movw	r30, r24
    44b0:	e4 0f       	add	r30, r20
    44b2:	f5 1f       	adc	r31, r21
    44b4:	20 83       	st	Z, r18
u8 REG[8] = {LCD_D0, LCD_D1, LCD_D2, LCD_D3, LCD_D4, LCD_D5, LCD_D6, LCD_D7};

void PutOnLCD(u8* u8REG, u8 u8num){
    u8 u8Num[8]; //0x0011 1111
  	u8 cntr;
  	for(cntr = 0; cntr < 8; cntr++){
    44b6:	89 81       	ldd	r24, Y+1	; 0x01
    44b8:	8f 5f       	subi	r24, 0xFF	; 255
    44ba:	89 83       	std	Y+1, r24	; 0x01
    44bc:	89 81       	ldd	r24, Y+1	; 0x01
    44be:	88 30       	cpi	r24, 0x08	; 8
    44c0:	10 f3       	brcs	.-60     	; 0x4486 <PutOnLCD+0x1e>
  		u8Num[cntr] = GET_BIT(u8num, cntr);
  	}
    DIO_enuWriteGroup(u8REG, u8Num, 8);
    44c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    44c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    44c6:	9e 01       	movw	r18, r28
    44c8:	2e 5f       	subi	r18, 0xFE	; 254
    44ca:	3f 4f       	sbci	r19, 0xFF	; 255
    44cc:	b9 01       	movw	r22, r18
    44ce:	48 e0       	ldi	r20, 0x08	; 8
    44d0:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <DIO_enuWriteGroup>
}
    44d4:	2c 96       	adiw	r28, 0x0c	; 12
    44d6:	0f b6       	in	r0, 0x3f	; 63
    44d8:	f8 94       	cli
    44da:	de bf       	out	0x3e, r29	; 62
    44dc:	0f be       	out	0x3f, r0	; 63
    44de:	cd bf       	out	0x3d, r28	; 61
    44e0:	cf 91       	pop	r28
    44e2:	df 91       	pop	r29
    44e4:	08 95       	ret

000044e6 <LCD_vidInit>:
/* Description! Apply initialization sequence for LCD module                           */
/* Input      ! Nothing                                                                */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidInit(void)
{
    44e6:	0f 93       	push	r16
    44e8:	1f 93       	push	r17
    44ea:	df 93       	push	r29
    44ec:	cf 93       	push	r28
    44ee:	cd b7       	in	r28, 0x3d	; 61
    44f0:	de b7       	in	r29, 0x3e	; 62
    44f2:	c4 55       	subi	r28, 0x54	; 84
    44f4:	d0 40       	sbci	r29, 0x00	; 0
    44f6:	0f b6       	in	r0, 0x3f	; 63
    44f8:	f8 94       	cli
    44fa:	de bf       	out	0x3e, r29	; 62
    44fc:	0f be       	out	0x3f, r0	; 63
    44fe:	cd bf       	out	0x3d, r28	; 61
    4500:	fe 01       	movw	r30, r28
    4502:	ef 5a       	subi	r30, 0xAF	; 175
    4504:	ff 4f       	sbci	r31, 0xFF	; 255
    4506:	80 e0       	ldi	r24, 0x00	; 0
    4508:	90 e0       	ldi	r25, 0x00	; 0
    450a:	a0 ef       	ldi	r26, 0xF0	; 240
    450c:	b1 e4       	ldi	r27, 0x41	; 65
    450e:	80 83       	st	Z, r24
    4510:	91 83       	std	Z+1, r25	; 0x01
    4512:	a2 83       	std	Z+2, r26	; 0x02
    4514:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4516:	8e 01       	movw	r16, r28
    4518:	03 5b       	subi	r16, 0xB3	; 179
    451a:	1f 4f       	sbci	r17, 0xFF	; 255
    451c:	fe 01       	movw	r30, r28
    451e:	ef 5a       	subi	r30, 0xAF	; 175
    4520:	ff 4f       	sbci	r31, 0xFF	; 255
    4522:	60 81       	ld	r22, Z
    4524:	71 81       	ldd	r23, Z+1	; 0x01
    4526:	82 81       	ldd	r24, Z+2	; 0x02
    4528:	93 81       	ldd	r25, Z+3	; 0x03
    452a:	20 e0       	ldi	r18, 0x00	; 0
    452c:	30 e0       	ldi	r19, 0x00	; 0
    452e:	4a e7       	ldi	r20, 0x7A	; 122
    4530:	55 e4       	ldi	r21, 0x45	; 69
    4532:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4536:	dc 01       	movw	r26, r24
    4538:	cb 01       	movw	r24, r22
    453a:	f8 01       	movw	r30, r16
    453c:	80 83       	st	Z, r24
    453e:	91 83       	std	Z+1, r25	; 0x01
    4540:	a2 83       	std	Z+2, r26	; 0x02
    4542:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4544:	fe 01       	movw	r30, r28
    4546:	e3 5b       	subi	r30, 0xB3	; 179
    4548:	ff 4f       	sbci	r31, 0xFF	; 255
    454a:	60 81       	ld	r22, Z
    454c:	71 81       	ldd	r23, Z+1	; 0x01
    454e:	82 81       	ldd	r24, Z+2	; 0x02
    4550:	93 81       	ldd	r25, Z+3	; 0x03
    4552:	20 e0       	ldi	r18, 0x00	; 0
    4554:	30 e0       	ldi	r19, 0x00	; 0
    4556:	40 e8       	ldi	r20, 0x80	; 128
    4558:	5f e3       	ldi	r21, 0x3F	; 63
    455a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    455e:	88 23       	and	r24, r24
    4560:	44 f4       	brge	.+16     	; 0x4572 <LCD_vidInit+0x8c>
		__ticks = 1;
    4562:	fe 01       	movw	r30, r28
    4564:	e5 5b       	subi	r30, 0xB5	; 181
    4566:	ff 4f       	sbci	r31, 0xFF	; 255
    4568:	81 e0       	ldi	r24, 0x01	; 1
    456a:	90 e0       	ldi	r25, 0x00	; 0
    456c:	91 83       	std	Z+1, r25	; 0x01
    456e:	80 83       	st	Z, r24
    4570:	64 c0       	rjmp	.+200    	; 0x463a <LCD_vidInit+0x154>
	else if (__tmp > 65535)
    4572:	fe 01       	movw	r30, r28
    4574:	e3 5b       	subi	r30, 0xB3	; 179
    4576:	ff 4f       	sbci	r31, 0xFF	; 255
    4578:	60 81       	ld	r22, Z
    457a:	71 81       	ldd	r23, Z+1	; 0x01
    457c:	82 81       	ldd	r24, Z+2	; 0x02
    457e:	93 81       	ldd	r25, Z+3	; 0x03
    4580:	20 e0       	ldi	r18, 0x00	; 0
    4582:	3f ef       	ldi	r19, 0xFF	; 255
    4584:	4f e7       	ldi	r20, 0x7F	; 127
    4586:	57 e4       	ldi	r21, 0x47	; 71
    4588:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    458c:	18 16       	cp	r1, r24
    458e:	0c f0       	brlt	.+2      	; 0x4592 <LCD_vidInit+0xac>
    4590:	43 c0       	rjmp	.+134    	; 0x4618 <LCD_vidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4592:	fe 01       	movw	r30, r28
    4594:	ef 5a       	subi	r30, 0xAF	; 175
    4596:	ff 4f       	sbci	r31, 0xFF	; 255
    4598:	60 81       	ld	r22, Z
    459a:	71 81       	ldd	r23, Z+1	; 0x01
    459c:	82 81       	ldd	r24, Z+2	; 0x02
    459e:	93 81       	ldd	r25, Z+3	; 0x03
    45a0:	20 e0       	ldi	r18, 0x00	; 0
    45a2:	30 e0       	ldi	r19, 0x00	; 0
    45a4:	40 e2       	ldi	r20, 0x20	; 32
    45a6:	51 e4       	ldi	r21, 0x41	; 65
    45a8:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    45ac:	dc 01       	movw	r26, r24
    45ae:	cb 01       	movw	r24, r22
    45b0:	8e 01       	movw	r16, r28
    45b2:	05 5b       	subi	r16, 0xB5	; 181
    45b4:	1f 4f       	sbci	r17, 0xFF	; 255
    45b6:	bc 01       	movw	r22, r24
    45b8:	cd 01       	movw	r24, r26
    45ba:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    45be:	dc 01       	movw	r26, r24
    45c0:	cb 01       	movw	r24, r22
    45c2:	f8 01       	movw	r30, r16
    45c4:	91 83       	std	Z+1, r25	; 0x01
    45c6:	80 83       	st	Z, r24
    45c8:	1f c0       	rjmp	.+62     	; 0x4608 <LCD_vidInit+0x122>
    45ca:	fe 01       	movw	r30, r28
    45cc:	e7 5b       	subi	r30, 0xB7	; 183
    45ce:	ff 4f       	sbci	r31, 0xFF	; 255
    45d0:	80 e9       	ldi	r24, 0x90	; 144
    45d2:	91 e0       	ldi	r25, 0x01	; 1
    45d4:	91 83       	std	Z+1, r25	; 0x01
    45d6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    45d8:	fe 01       	movw	r30, r28
    45da:	e7 5b       	subi	r30, 0xB7	; 183
    45dc:	ff 4f       	sbci	r31, 0xFF	; 255
    45de:	80 81       	ld	r24, Z
    45e0:	91 81       	ldd	r25, Z+1	; 0x01
    45e2:	01 97       	sbiw	r24, 0x01	; 1
    45e4:	f1 f7       	brne	.-4      	; 0x45e2 <LCD_vidInit+0xfc>
    45e6:	fe 01       	movw	r30, r28
    45e8:	e7 5b       	subi	r30, 0xB7	; 183
    45ea:	ff 4f       	sbci	r31, 0xFF	; 255
    45ec:	91 83       	std	Z+1, r25	; 0x01
    45ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45f0:	de 01       	movw	r26, r28
    45f2:	a5 5b       	subi	r26, 0xB5	; 181
    45f4:	bf 4f       	sbci	r27, 0xFF	; 255
    45f6:	fe 01       	movw	r30, r28
    45f8:	e5 5b       	subi	r30, 0xB5	; 181
    45fa:	ff 4f       	sbci	r31, 0xFF	; 255
    45fc:	80 81       	ld	r24, Z
    45fe:	91 81       	ldd	r25, Z+1	; 0x01
    4600:	01 97       	sbiw	r24, 0x01	; 1
    4602:	11 96       	adiw	r26, 0x01	; 1
    4604:	9c 93       	st	X, r25
    4606:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4608:	fe 01       	movw	r30, r28
    460a:	e5 5b       	subi	r30, 0xB5	; 181
    460c:	ff 4f       	sbci	r31, 0xFF	; 255
    460e:	80 81       	ld	r24, Z
    4610:	91 81       	ldd	r25, Z+1	; 0x01
    4612:	00 97       	sbiw	r24, 0x00	; 0
    4614:	d1 f6       	brne	.-76     	; 0x45ca <LCD_vidInit+0xe4>
    4616:	27 c0       	rjmp	.+78     	; 0x4666 <LCD_vidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4618:	8e 01       	movw	r16, r28
    461a:	05 5b       	subi	r16, 0xB5	; 181
    461c:	1f 4f       	sbci	r17, 0xFF	; 255
    461e:	fe 01       	movw	r30, r28
    4620:	e3 5b       	subi	r30, 0xB3	; 179
    4622:	ff 4f       	sbci	r31, 0xFF	; 255
    4624:	60 81       	ld	r22, Z
    4626:	71 81       	ldd	r23, Z+1	; 0x01
    4628:	82 81       	ldd	r24, Z+2	; 0x02
    462a:	93 81       	ldd	r25, Z+3	; 0x03
    462c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4630:	dc 01       	movw	r26, r24
    4632:	cb 01       	movw	r24, r22
    4634:	f8 01       	movw	r30, r16
    4636:	91 83       	std	Z+1, r25	; 0x01
    4638:	80 83       	st	Z, r24
    463a:	de 01       	movw	r26, r28
    463c:	a9 5b       	subi	r26, 0xB9	; 185
    463e:	bf 4f       	sbci	r27, 0xFF	; 255
    4640:	fe 01       	movw	r30, r28
    4642:	e5 5b       	subi	r30, 0xB5	; 181
    4644:	ff 4f       	sbci	r31, 0xFF	; 255
    4646:	80 81       	ld	r24, Z
    4648:	91 81       	ldd	r25, Z+1	; 0x01
    464a:	8d 93       	st	X+, r24
    464c:	9c 93       	st	X, r25
    464e:	fe 01       	movw	r30, r28
    4650:	e9 5b       	subi	r30, 0xB9	; 185
    4652:	ff 4f       	sbci	r31, 0xFF	; 255
    4654:	80 81       	ld	r24, Z
    4656:	91 81       	ldd	r25, Z+1	; 0x01
    4658:	01 97       	sbiw	r24, 0x01	; 1
    465a:	f1 f7       	brne	.-4      	; 0x4658 <LCD_vidInit+0x172>
    465c:	fe 01       	movw	r30, r28
    465e:	e9 5b       	subi	r30, 0xB9	; 185
    4660:	ff 4f       	sbci	r31, 0xFF	; 255
    4662:	91 83       	std	Z+1, r25	; 0x01
    4664:	80 83       	st	Z, r24
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Return Home  */
	LCD_vidSendCommand(lcd_Home);
    4666:	82 e0       	ldi	r24, 0x02	; 2
    4668:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <LCD_vidSendCommand>
    466c:	fe 01       	movw	r30, r28
    466e:	ed 5b       	subi	r30, 0xBD	; 189
    4670:	ff 4f       	sbci	r31, 0xFF	; 255
    4672:	80 e0       	ldi	r24, 0x00	; 0
    4674:	90 e0       	ldi	r25, 0x00	; 0
    4676:	a0 e7       	ldi	r26, 0x70	; 112
    4678:	b1 e4       	ldi	r27, 0x41	; 65
    467a:	80 83       	st	Z, r24
    467c:	91 83       	std	Z+1, r25	; 0x01
    467e:	a2 83       	std	Z+2, r26	; 0x02
    4680:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4682:	8e 01       	movw	r16, r28
    4684:	01 5c       	subi	r16, 0xC1	; 193
    4686:	1f 4f       	sbci	r17, 0xFF	; 255
    4688:	fe 01       	movw	r30, r28
    468a:	ed 5b       	subi	r30, 0xBD	; 189
    468c:	ff 4f       	sbci	r31, 0xFF	; 255
    468e:	60 81       	ld	r22, Z
    4690:	71 81       	ldd	r23, Z+1	; 0x01
    4692:	82 81       	ldd	r24, Z+2	; 0x02
    4694:	93 81       	ldd	r25, Z+3	; 0x03
    4696:	20 e0       	ldi	r18, 0x00	; 0
    4698:	30 e0       	ldi	r19, 0x00	; 0
    469a:	4a e7       	ldi	r20, 0x7A	; 122
    469c:	55 e4       	ldi	r21, 0x45	; 69
    469e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    46a2:	dc 01       	movw	r26, r24
    46a4:	cb 01       	movw	r24, r22
    46a6:	f8 01       	movw	r30, r16
    46a8:	80 83       	st	Z, r24
    46aa:	91 83       	std	Z+1, r25	; 0x01
    46ac:	a2 83       	std	Z+2, r26	; 0x02
    46ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    46b0:	fe 01       	movw	r30, r28
    46b2:	ff 96       	adiw	r30, 0x3f	; 63
    46b4:	60 81       	ld	r22, Z
    46b6:	71 81       	ldd	r23, Z+1	; 0x01
    46b8:	82 81       	ldd	r24, Z+2	; 0x02
    46ba:	93 81       	ldd	r25, Z+3	; 0x03
    46bc:	20 e0       	ldi	r18, 0x00	; 0
    46be:	30 e0       	ldi	r19, 0x00	; 0
    46c0:	40 e8       	ldi	r20, 0x80	; 128
    46c2:	5f e3       	ldi	r21, 0x3F	; 63
    46c4:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    46c8:	88 23       	and	r24, r24
    46ca:	2c f4       	brge	.+10     	; 0x46d6 <LCD_vidInit+0x1f0>
		__ticks = 1;
    46cc:	81 e0       	ldi	r24, 0x01	; 1
    46ce:	90 e0       	ldi	r25, 0x00	; 0
    46d0:	9e af       	std	Y+62, r25	; 0x3e
    46d2:	8d af       	std	Y+61, r24	; 0x3d
    46d4:	46 c0       	rjmp	.+140    	; 0x4762 <LCD_vidInit+0x27c>
	else if (__tmp > 65535)
    46d6:	fe 01       	movw	r30, r28
    46d8:	ff 96       	adiw	r30, 0x3f	; 63
    46da:	60 81       	ld	r22, Z
    46dc:	71 81       	ldd	r23, Z+1	; 0x01
    46de:	82 81       	ldd	r24, Z+2	; 0x02
    46e0:	93 81       	ldd	r25, Z+3	; 0x03
    46e2:	20 e0       	ldi	r18, 0x00	; 0
    46e4:	3f ef       	ldi	r19, 0xFF	; 255
    46e6:	4f e7       	ldi	r20, 0x7F	; 127
    46e8:	57 e4       	ldi	r21, 0x47	; 71
    46ea:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    46ee:	18 16       	cp	r1, r24
    46f0:	64 f5       	brge	.+88     	; 0x474a <LCD_vidInit+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46f2:	fe 01       	movw	r30, r28
    46f4:	ed 5b       	subi	r30, 0xBD	; 189
    46f6:	ff 4f       	sbci	r31, 0xFF	; 255
    46f8:	60 81       	ld	r22, Z
    46fa:	71 81       	ldd	r23, Z+1	; 0x01
    46fc:	82 81       	ldd	r24, Z+2	; 0x02
    46fe:	93 81       	ldd	r25, Z+3	; 0x03
    4700:	20 e0       	ldi	r18, 0x00	; 0
    4702:	30 e0       	ldi	r19, 0x00	; 0
    4704:	40 e2       	ldi	r20, 0x20	; 32
    4706:	51 e4       	ldi	r21, 0x41	; 65
    4708:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    470c:	dc 01       	movw	r26, r24
    470e:	cb 01       	movw	r24, r22
    4710:	bc 01       	movw	r22, r24
    4712:	cd 01       	movw	r24, r26
    4714:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4718:	dc 01       	movw	r26, r24
    471a:	cb 01       	movw	r24, r22
    471c:	9e af       	std	Y+62, r25	; 0x3e
    471e:	8d af       	std	Y+61, r24	; 0x3d
    4720:	0f c0       	rjmp	.+30     	; 0x4740 <LCD_vidInit+0x25a>
    4722:	80 e9       	ldi	r24, 0x90	; 144
    4724:	91 e0       	ldi	r25, 0x01	; 1
    4726:	9c af       	std	Y+60, r25	; 0x3c
    4728:	8b af       	std	Y+59, r24	; 0x3b
    472a:	8b ad       	ldd	r24, Y+59	; 0x3b
    472c:	9c ad       	ldd	r25, Y+60	; 0x3c
    472e:	01 97       	sbiw	r24, 0x01	; 1
    4730:	f1 f7       	brne	.-4      	; 0x472e <LCD_vidInit+0x248>
    4732:	9c af       	std	Y+60, r25	; 0x3c
    4734:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4736:	8d ad       	ldd	r24, Y+61	; 0x3d
    4738:	9e ad       	ldd	r25, Y+62	; 0x3e
    473a:	01 97       	sbiw	r24, 0x01	; 1
    473c:	9e af       	std	Y+62, r25	; 0x3e
    473e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4740:	8d ad       	ldd	r24, Y+61	; 0x3d
    4742:	9e ad       	ldd	r25, Y+62	; 0x3e
    4744:	00 97       	sbiw	r24, 0x00	; 0
    4746:	69 f7       	brne	.-38     	; 0x4722 <LCD_vidInit+0x23c>
    4748:	16 c0       	rjmp	.+44     	; 0x4776 <LCD_vidInit+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    474a:	fe 01       	movw	r30, r28
    474c:	ff 96       	adiw	r30, 0x3f	; 63
    474e:	60 81       	ld	r22, Z
    4750:	71 81       	ldd	r23, Z+1	; 0x01
    4752:	82 81       	ldd	r24, Z+2	; 0x02
    4754:	93 81       	ldd	r25, Z+3	; 0x03
    4756:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    475a:	dc 01       	movw	r26, r24
    475c:	cb 01       	movw	r24, r22
    475e:	9e af       	std	Y+62, r25	; 0x3e
    4760:	8d af       	std	Y+61, r24	; 0x3d
    4762:	8d ad       	ldd	r24, Y+61	; 0x3d
    4764:	9e ad       	ldd	r25, Y+62	; 0x3e
    4766:	9a af       	std	Y+58, r25	; 0x3a
    4768:	89 af       	std	Y+57, r24	; 0x39
    476a:	89 ad       	ldd	r24, Y+57	; 0x39
    476c:	9a ad       	ldd	r25, Y+58	; 0x3a
    476e:	01 97       	sbiw	r24, 0x01	; 1
    4770:	f1 f7       	brne	.-4      	; 0x476e <LCD_vidInit+0x288>
    4772:	9a af       	std	Y+58, r25	; 0x3a
    4774:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(15);

	/* Function Set  */
	LCD_vidSendCommand(lcd_FunctionSet8bit);
    4776:	88 e3       	ldi	r24, 0x38	; 56
    4778:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <LCD_vidSendCommand>
    477c:	80 e0       	ldi	r24, 0x00	; 0
    477e:	90 e0       	ldi	r25, 0x00	; 0
    4780:	a0 e8       	ldi	r26, 0x80	; 128
    4782:	bf e3       	ldi	r27, 0x3F	; 63
    4784:	8d ab       	std	Y+53, r24	; 0x35
    4786:	9e ab       	std	Y+54, r25	; 0x36
    4788:	af ab       	std	Y+55, r26	; 0x37
    478a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    478c:	6d a9       	ldd	r22, Y+53	; 0x35
    478e:	7e a9       	ldd	r23, Y+54	; 0x36
    4790:	8f a9       	ldd	r24, Y+55	; 0x37
    4792:	98 ad       	ldd	r25, Y+56	; 0x38
    4794:	20 e0       	ldi	r18, 0x00	; 0
    4796:	30 e0       	ldi	r19, 0x00	; 0
    4798:	4a e7       	ldi	r20, 0x7A	; 122
    479a:	55 e4       	ldi	r21, 0x45	; 69
    479c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    47a0:	dc 01       	movw	r26, r24
    47a2:	cb 01       	movw	r24, r22
    47a4:	89 ab       	std	Y+49, r24	; 0x31
    47a6:	9a ab       	std	Y+50, r25	; 0x32
    47a8:	ab ab       	std	Y+51, r26	; 0x33
    47aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    47ac:	69 a9       	ldd	r22, Y+49	; 0x31
    47ae:	7a a9       	ldd	r23, Y+50	; 0x32
    47b0:	8b a9       	ldd	r24, Y+51	; 0x33
    47b2:	9c a9       	ldd	r25, Y+52	; 0x34
    47b4:	20 e0       	ldi	r18, 0x00	; 0
    47b6:	30 e0       	ldi	r19, 0x00	; 0
    47b8:	40 e8       	ldi	r20, 0x80	; 128
    47ba:	5f e3       	ldi	r21, 0x3F	; 63
    47bc:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    47c0:	88 23       	and	r24, r24
    47c2:	2c f4       	brge	.+10     	; 0x47ce <LCD_vidInit+0x2e8>
		__ticks = 1;
    47c4:	81 e0       	ldi	r24, 0x01	; 1
    47c6:	90 e0       	ldi	r25, 0x00	; 0
    47c8:	98 ab       	std	Y+48, r25	; 0x30
    47ca:	8f a7       	std	Y+47, r24	; 0x2f
    47cc:	3f c0       	rjmp	.+126    	; 0x484c <LCD_vidInit+0x366>
	else if (__tmp > 65535)
    47ce:	69 a9       	ldd	r22, Y+49	; 0x31
    47d0:	7a a9       	ldd	r23, Y+50	; 0x32
    47d2:	8b a9       	ldd	r24, Y+51	; 0x33
    47d4:	9c a9       	ldd	r25, Y+52	; 0x34
    47d6:	20 e0       	ldi	r18, 0x00	; 0
    47d8:	3f ef       	ldi	r19, 0xFF	; 255
    47da:	4f e7       	ldi	r20, 0x7F	; 127
    47dc:	57 e4       	ldi	r21, 0x47	; 71
    47de:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    47e2:	18 16       	cp	r1, r24
    47e4:	4c f5       	brge	.+82     	; 0x4838 <LCD_vidInit+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47e6:	6d a9       	ldd	r22, Y+53	; 0x35
    47e8:	7e a9       	ldd	r23, Y+54	; 0x36
    47ea:	8f a9       	ldd	r24, Y+55	; 0x37
    47ec:	98 ad       	ldd	r25, Y+56	; 0x38
    47ee:	20 e0       	ldi	r18, 0x00	; 0
    47f0:	30 e0       	ldi	r19, 0x00	; 0
    47f2:	40 e2       	ldi	r20, 0x20	; 32
    47f4:	51 e4       	ldi	r21, 0x41	; 65
    47f6:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    47fa:	dc 01       	movw	r26, r24
    47fc:	cb 01       	movw	r24, r22
    47fe:	bc 01       	movw	r22, r24
    4800:	cd 01       	movw	r24, r26
    4802:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4806:	dc 01       	movw	r26, r24
    4808:	cb 01       	movw	r24, r22
    480a:	98 ab       	std	Y+48, r25	; 0x30
    480c:	8f a7       	std	Y+47, r24	; 0x2f
    480e:	0f c0       	rjmp	.+30     	; 0x482e <LCD_vidInit+0x348>
    4810:	80 e9       	ldi	r24, 0x90	; 144
    4812:	91 e0       	ldi	r25, 0x01	; 1
    4814:	9e a7       	std	Y+46, r25	; 0x2e
    4816:	8d a7       	std	Y+45, r24	; 0x2d
    4818:	8d a5       	ldd	r24, Y+45	; 0x2d
    481a:	9e a5       	ldd	r25, Y+46	; 0x2e
    481c:	01 97       	sbiw	r24, 0x01	; 1
    481e:	f1 f7       	brne	.-4      	; 0x481c <LCD_vidInit+0x336>
    4820:	9e a7       	std	Y+46, r25	; 0x2e
    4822:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4824:	8f a5       	ldd	r24, Y+47	; 0x2f
    4826:	98 a9       	ldd	r25, Y+48	; 0x30
    4828:	01 97       	sbiw	r24, 0x01	; 1
    482a:	98 ab       	std	Y+48, r25	; 0x30
    482c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    482e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4830:	98 a9       	ldd	r25, Y+48	; 0x30
    4832:	00 97       	sbiw	r24, 0x00	; 0
    4834:	69 f7       	brne	.-38     	; 0x4810 <LCD_vidInit+0x32a>
    4836:	14 c0       	rjmp	.+40     	; 0x4860 <LCD_vidInit+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4838:	69 a9       	ldd	r22, Y+49	; 0x31
    483a:	7a a9       	ldd	r23, Y+50	; 0x32
    483c:	8b a9       	ldd	r24, Y+51	; 0x33
    483e:	9c a9       	ldd	r25, Y+52	; 0x34
    4840:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4844:	dc 01       	movw	r26, r24
    4846:	cb 01       	movw	r24, r22
    4848:	98 ab       	std	Y+48, r25	; 0x30
    484a:	8f a7       	std	Y+47, r24	; 0x2f
    484c:	8f a5       	ldd	r24, Y+47	; 0x2f
    484e:	98 a9       	ldd	r25, Y+48	; 0x30
    4850:	9c a7       	std	Y+44, r25	; 0x2c
    4852:	8b a7       	std	Y+43, r24	; 0x2b
    4854:	8b a5       	ldd	r24, Y+43	; 0x2b
    4856:	9c a5       	ldd	r25, Y+44	; 0x2c
    4858:	01 97       	sbiw	r24, 0x01	; 1
    485a:	f1 f7       	brne	.-4      	; 0x4858 <LCD_vidInit+0x372>
    485c:	9c a7       	std	Y+44, r25	; 0x2c
    485e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/* Display ON OFF Control */
	LCD_vidSendCommand(lcd_DisplayOn);
    4860:	8c e0       	ldi	r24, 0x0C	; 12
    4862:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <LCD_vidSendCommand>
    4866:	80 e0       	ldi	r24, 0x00	; 0
    4868:	90 e0       	ldi	r25, 0x00	; 0
    486a:	a0 e8       	ldi	r26, 0x80	; 128
    486c:	bf e3       	ldi	r27, 0x3F	; 63
    486e:	8f a3       	std	Y+39, r24	; 0x27
    4870:	98 a7       	std	Y+40, r25	; 0x28
    4872:	a9 a7       	std	Y+41, r26	; 0x29
    4874:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4876:	6f a1       	ldd	r22, Y+39	; 0x27
    4878:	78 a5       	ldd	r23, Y+40	; 0x28
    487a:	89 a5       	ldd	r24, Y+41	; 0x29
    487c:	9a a5       	ldd	r25, Y+42	; 0x2a
    487e:	20 e0       	ldi	r18, 0x00	; 0
    4880:	30 e0       	ldi	r19, 0x00	; 0
    4882:	4a e7       	ldi	r20, 0x7A	; 122
    4884:	55 e4       	ldi	r21, 0x45	; 69
    4886:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    488a:	dc 01       	movw	r26, r24
    488c:	cb 01       	movw	r24, r22
    488e:	8b a3       	std	Y+35, r24	; 0x23
    4890:	9c a3       	std	Y+36, r25	; 0x24
    4892:	ad a3       	std	Y+37, r26	; 0x25
    4894:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4896:	6b a1       	ldd	r22, Y+35	; 0x23
    4898:	7c a1       	ldd	r23, Y+36	; 0x24
    489a:	8d a1       	ldd	r24, Y+37	; 0x25
    489c:	9e a1       	ldd	r25, Y+38	; 0x26
    489e:	20 e0       	ldi	r18, 0x00	; 0
    48a0:	30 e0       	ldi	r19, 0x00	; 0
    48a2:	40 e8       	ldi	r20, 0x80	; 128
    48a4:	5f e3       	ldi	r21, 0x3F	; 63
    48a6:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    48aa:	88 23       	and	r24, r24
    48ac:	2c f4       	brge	.+10     	; 0x48b8 <LCD_vidInit+0x3d2>
		__ticks = 1;
    48ae:	81 e0       	ldi	r24, 0x01	; 1
    48b0:	90 e0       	ldi	r25, 0x00	; 0
    48b2:	9a a3       	std	Y+34, r25	; 0x22
    48b4:	89 a3       	std	Y+33, r24	; 0x21
    48b6:	3f c0       	rjmp	.+126    	; 0x4936 <LCD_vidInit+0x450>
	else if (__tmp > 65535)
    48b8:	6b a1       	ldd	r22, Y+35	; 0x23
    48ba:	7c a1       	ldd	r23, Y+36	; 0x24
    48bc:	8d a1       	ldd	r24, Y+37	; 0x25
    48be:	9e a1       	ldd	r25, Y+38	; 0x26
    48c0:	20 e0       	ldi	r18, 0x00	; 0
    48c2:	3f ef       	ldi	r19, 0xFF	; 255
    48c4:	4f e7       	ldi	r20, 0x7F	; 127
    48c6:	57 e4       	ldi	r21, 0x47	; 71
    48c8:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    48cc:	18 16       	cp	r1, r24
    48ce:	4c f5       	brge	.+82     	; 0x4922 <LCD_vidInit+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48d0:	6f a1       	ldd	r22, Y+39	; 0x27
    48d2:	78 a5       	ldd	r23, Y+40	; 0x28
    48d4:	89 a5       	ldd	r24, Y+41	; 0x29
    48d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    48d8:	20 e0       	ldi	r18, 0x00	; 0
    48da:	30 e0       	ldi	r19, 0x00	; 0
    48dc:	40 e2       	ldi	r20, 0x20	; 32
    48de:	51 e4       	ldi	r21, 0x41	; 65
    48e0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    48e4:	dc 01       	movw	r26, r24
    48e6:	cb 01       	movw	r24, r22
    48e8:	bc 01       	movw	r22, r24
    48ea:	cd 01       	movw	r24, r26
    48ec:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    48f0:	dc 01       	movw	r26, r24
    48f2:	cb 01       	movw	r24, r22
    48f4:	9a a3       	std	Y+34, r25	; 0x22
    48f6:	89 a3       	std	Y+33, r24	; 0x21
    48f8:	0f c0       	rjmp	.+30     	; 0x4918 <LCD_vidInit+0x432>
    48fa:	80 e9       	ldi	r24, 0x90	; 144
    48fc:	91 e0       	ldi	r25, 0x01	; 1
    48fe:	98 a3       	std	Y+32, r25	; 0x20
    4900:	8f 8f       	std	Y+31, r24	; 0x1f
    4902:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4904:	98 a1       	ldd	r25, Y+32	; 0x20
    4906:	01 97       	sbiw	r24, 0x01	; 1
    4908:	f1 f7       	brne	.-4      	; 0x4906 <LCD_vidInit+0x420>
    490a:	98 a3       	std	Y+32, r25	; 0x20
    490c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    490e:	89 a1       	ldd	r24, Y+33	; 0x21
    4910:	9a a1       	ldd	r25, Y+34	; 0x22
    4912:	01 97       	sbiw	r24, 0x01	; 1
    4914:	9a a3       	std	Y+34, r25	; 0x22
    4916:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4918:	89 a1       	ldd	r24, Y+33	; 0x21
    491a:	9a a1       	ldd	r25, Y+34	; 0x22
    491c:	00 97       	sbiw	r24, 0x00	; 0
    491e:	69 f7       	brne	.-38     	; 0x48fa <LCD_vidInit+0x414>
    4920:	14 c0       	rjmp	.+40     	; 0x494a <LCD_vidInit+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4922:	6b a1       	ldd	r22, Y+35	; 0x23
    4924:	7c a1       	ldd	r23, Y+36	; 0x24
    4926:	8d a1       	ldd	r24, Y+37	; 0x25
    4928:	9e a1       	ldd	r25, Y+38	; 0x26
    492a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    492e:	dc 01       	movw	r26, r24
    4930:	cb 01       	movw	r24, r22
    4932:	9a a3       	std	Y+34, r25	; 0x22
    4934:	89 a3       	std	Y+33, r24	; 0x21
    4936:	89 a1       	ldd	r24, Y+33	; 0x21
    4938:	9a a1       	ldd	r25, Y+34	; 0x22
    493a:	9e 8f       	std	Y+30, r25	; 0x1e
    493c:	8d 8f       	std	Y+29, r24	; 0x1d
    493e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4940:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4942:	01 97       	sbiw	r24, 0x01	; 1
    4944:	f1 f7       	brne	.-4      	; 0x4942 <LCD_vidInit+0x45c>
    4946:	9e 8f       	std	Y+30, r25	; 0x1e
    4948:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* Clear Display */
	LCD_vidSendCommand(lcd_Clear);
    494a:	81 e0       	ldi	r24, 0x01	; 1
    494c:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <LCD_vidSendCommand>
    4950:	80 e0       	ldi	r24, 0x00	; 0
    4952:	90 e0       	ldi	r25, 0x00	; 0
    4954:	a0 e7       	ldi	r26, 0x70	; 112
    4956:	b1 e4       	ldi	r27, 0x41	; 65
    4958:	89 8f       	std	Y+25, r24	; 0x19
    495a:	9a 8f       	std	Y+26, r25	; 0x1a
    495c:	ab 8f       	std	Y+27, r26	; 0x1b
    495e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4960:	69 8d       	ldd	r22, Y+25	; 0x19
    4962:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4964:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4966:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4968:	20 e0       	ldi	r18, 0x00	; 0
    496a:	30 e0       	ldi	r19, 0x00	; 0
    496c:	4a e7       	ldi	r20, 0x7A	; 122
    496e:	55 e4       	ldi	r21, 0x45	; 69
    4970:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4974:	dc 01       	movw	r26, r24
    4976:	cb 01       	movw	r24, r22
    4978:	8d 8b       	std	Y+21, r24	; 0x15
    497a:	9e 8b       	std	Y+22, r25	; 0x16
    497c:	af 8b       	std	Y+23, r26	; 0x17
    497e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4980:	6d 89       	ldd	r22, Y+21	; 0x15
    4982:	7e 89       	ldd	r23, Y+22	; 0x16
    4984:	8f 89       	ldd	r24, Y+23	; 0x17
    4986:	98 8d       	ldd	r25, Y+24	; 0x18
    4988:	20 e0       	ldi	r18, 0x00	; 0
    498a:	30 e0       	ldi	r19, 0x00	; 0
    498c:	40 e8       	ldi	r20, 0x80	; 128
    498e:	5f e3       	ldi	r21, 0x3F	; 63
    4990:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    4994:	88 23       	and	r24, r24
    4996:	2c f4       	brge	.+10     	; 0x49a2 <LCD_vidInit+0x4bc>
		__ticks = 1;
    4998:	81 e0       	ldi	r24, 0x01	; 1
    499a:	90 e0       	ldi	r25, 0x00	; 0
    499c:	9c 8b       	std	Y+20, r25	; 0x14
    499e:	8b 8b       	std	Y+19, r24	; 0x13
    49a0:	3f c0       	rjmp	.+126    	; 0x4a20 <LCD_vidInit+0x53a>
	else if (__tmp > 65535)
    49a2:	6d 89       	ldd	r22, Y+21	; 0x15
    49a4:	7e 89       	ldd	r23, Y+22	; 0x16
    49a6:	8f 89       	ldd	r24, Y+23	; 0x17
    49a8:	98 8d       	ldd	r25, Y+24	; 0x18
    49aa:	20 e0       	ldi	r18, 0x00	; 0
    49ac:	3f ef       	ldi	r19, 0xFF	; 255
    49ae:	4f e7       	ldi	r20, 0x7F	; 127
    49b0:	57 e4       	ldi	r21, 0x47	; 71
    49b2:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    49b6:	18 16       	cp	r1, r24
    49b8:	4c f5       	brge	.+82     	; 0x4a0c <LCD_vidInit+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49ba:	69 8d       	ldd	r22, Y+25	; 0x19
    49bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    49be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    49c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    49c2:	20 e0       	ldi	r18, 0x00	; 0
    49c4:	30 e0       	ldi	r19, 0x00	; 0
    49c6:	40 e2       	ldi	r20, 0x20	; 32
    49c8:	51 e4       	ldi	r21, 0x41	; 65
    49ca:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    49ce:	dc 01       	movw	r26, r24
    49d0:	cb 01       	movw	r24, r22
    49d2:	bc 01       	movw	r22, r24
    49d4:	cd 01       	movw	r24, r26
    49d6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    49da:	dc 01       	movw	r26, r24
    49dc:	cb 01       	movw	r24, r22
    49de:	9c 8b       	std	Y+20, r25	; 0x14
    49e0:	8b 8b       	std	Y+19, r24	; 0x13
    49e2:	0f c0       	rjmp	.+30     	; 0x4a02 <LCD_vidInit+0x51c>
    49e4:	80 e9       	ldi	r24, 0x90	; 144
    49e6:	91 e0       	ldi	r25, 0x01	; 1
    49e8:	9a 8b       	std	Y+18, r25	; 0x12
    49ea:	89 8b       	std	Y+17, r24	; 0x11
    49ec:	89 89       	ldd	r24, Y+17	; 0x11
    49ee:	9a 89       	ldd	r25, Y+18	; 0x12
    49f0:	01 97       	sbiw	r24, 0x01	; 1
    49f2:	f1 f7       	brne	.-4      	; 0x49f0 <LCD_vidInit+0x50a>
    49f4:	9a 8b       	std	Y+18, r25	; 0x12
    49f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49f8:	8b 89       	ldd	r24, Y+19	; 0x13
    49fa:	9c 89       	ldd	r25, Y+20	; 0x14
    49fc:	01 97       	sbiw	r24, 0x01	; 1
    49fe:	9c 8b       	std	Y+20, r25	; 0x14
    4a00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a02:	8b 89       	ldd	r24, Y+19	; 0x13
    4a04:	9c 89       	ldd	r25, Y+20	; 0x14
    4a06:	00 97       	sbiw	r24, 0x00	; 0
    4a08:	69 f7       	brne	.-38     	; 0x49e4 <LCD_vidInit+0x4fe>
    4a0a:	14 c0       	rjmp	.+40     	; 0x4a34 <LCD_vidInit+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a0c:	6d 89       	ldd	r22, Y+21	; 0x15
    4a0e:	7e 89       	ldd	r23, Y+22	; 0x16
    4a10:	8f 89       	ldd	r24, Y+23	; 0x17
    4a12:	98 8d       	ldd	r25, Y+24	; 0x18
    4a14:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4a18:	dc 01       	movw	r26, r24
    4a1a:	cb 01       	movw	r24, r22
    4a1c:	9c 8b       	std	Y+20, r25	; 0x14
    4a1e:	8b 8b       	std	Y+19, r24	; 0x13
    4a20:	8b 89       	ldd	r24, Y+19	; 0x13
    4a22:	9c 89       	ldd	r25, Y+20	; 0x14
    4a24:	98 8b       	std	Y+16, r25	; 0x10
    4a26:	8f 87       	std	Y+15, r24	; 0x0f
    4a28:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a2a:	98 89       	ldd	r25, Y+16	; 0x10
    4a2c:	01 97       	sbiw	r24, 0x01	; 1
    4a2e:	f1 f7       	brne	.-4      	; 0x4a2c <LCD_vidInit+0x546>
    4a30:	98 8b       	std	Y+16, r25	; 0x10
    4a32:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(15);

	/* Entry Mode Set  */
	LCD_vidSendCommand(lcd_EntryMode);
    4a34:	86 e0       	ldi	r24, 0x06	; 6
    4a36:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <LCD_vidSendCommand>
    4a3a:	80 e0       	ldi	r24, 0x00	; 0
    4a3c:	90 e0       	ldi	r25, 0x00	; 0
    4a3e:	a0 e0       	ldi	r26, 0x00	; 0
    4a40:	b0 e4       	ldi	r27, 0x40	; 64
    4a42:	8b 87       	std	Y+11, r24	; 0x0b
    4a44:	9c 87       	std	Y+12, r25	; 0x0c
    4a46:	ad 87       	std	Y+13, r26	; 0x0d
    4a48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a50:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a52:	20 e0       	ldi	r18, 0x00	; 0
    4a54:	30 e0       	ldi	r19, 0x00	; 0
    4a56:	4a e7       	ldi	r20, 0x7A	; 122
    4a58:	55 e4       	ldi	r21, 0x45	; 69
    4a5a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4a5e:	dc 01       	movw	r26, r24
    4a60:	cb 01       	movw	r24, r22
    4a62:	8f 83       	std	Y+7, r24	; 0x07
    4a64:	98 87       	std	Y+8, r25	; 0x08
    4a66:	a9 87       	std	Y+9, r26	; 0x09
    4a68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    4a6c:	78 85       	ldd	r23, Y+8	; 0x08
    4a6e:	89 85       	ldd	r24, Y+9	; 0x09
    4a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a72:	20 e0       	ldi	r18, 0x00	; 0
    4a74:	30 e0       	ldi	r19, 0x00	; 0
    4a76:	40 e8       	ldi	r20, 0x80	; 128
    4a78:	5f e3       	ldi	r21, 0x3F	; 63
    4a7a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    4a7e:	88 23       	and	r24, r24
    4a80:	2c f4       	brge	.+10     	; 0x4a8c <LCD_vidInit+0x5a6>
		__ticks = 1;
    4a82:	81 e0       	ldi	r24, 0x01	; 1
    4a84:	90 e0       	ldi	r25, 0x00	; 0
    4a86:	9e 83       	std	Y+6, r25	; 0x06
    4a88:	8d 83       	std	Y+5, r24	; 0x05
    4a8a:	3f c0       	rjmp	.+126    	; 0x4b0a <LCD_vidInit+0x624>
	else if (__tmp > 65535)
    4a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    4a8e:	78 85       	ldd	r23, Y+8	; 0x08
    4a90:	89 85       	ldd	r24, Y+9	; 0x09
    4a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a94:	20 e0       	ldi	r18, 0x00	; 0
    4a96:	3f ef       	ldi	r19, 0xFF	; 255
    4a98:	4f e7       	ldi	r20, 0x7F	; 127
    4a9a:	57 e4       	ldi	r21, 0x47	; 71
    4a9c:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    4aa0:	18 16       	cp	r1, r24
    4aa2:	4c f5       	brge	.+82     	; 0x4af6 <LCD_vidInit+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4aa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    4aa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4aaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    4aac:	20 e0       	ldi	r18, 0x00	; 0
    4aae:	30 e0       	ldi	r19, 0x00	; 0
    4ab0:	40 e2       	ldi	r20, 0x20	; 32
    4ab2:	51 e4       	ldi	r21, 0x41	; 65
    4ab4:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4ab8:	dc 01       	movw	r26, r24
    4aba:	cb 01       	movw	r24, r22
    4abc:	bc 01       	movw	r22, r24
    4abe:	cd 01       	movw	r24, r26
    4ac0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4ac4:	dc 01       	movw	r26, r24
    4ac6:	cb 01       	movw	r24, r22
    4ac8:	9e 83       	std	Y+6, r25	; 0x06
    4aca:	8d 83       	std	Y+5, r24	; 0x05
    4acc:	0f c0       	rjmp	.+30     	; 0x4aec <LCD_vidInit+0x606>
    4ace:	80 e9       	ldi	r24, 0x90	; 144
    4ad0:	91 e0       	ldi	r25, 0x01	; 1
    4ad2:	9c 83       	std	Y+4, r25	; 0x04
    4ad4:	8b 83       	std	Y+3, r24	; 0x03
    4ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    4ada:	01 97       	sbiw	r24, 0x01	; 1
    4adc:	f1 f7       	brne	.-4      	; 0x4ada <LCD_vidInit+0x5f4>
    4ade:	9c 83       	std	Y+4, r25	; 0x04
    4ae0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    4ae6:	01 97       	sbiw	r24, 0x01	; 1
    4ae8:	9e 83       	std	Y+6, r25	; 0x06
    4aea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aec:	8d 81       	ldd	r24, Y+5	; 0x05
    4aee:	9e 81       	ldd	r25, Y+6	; 0x06
    4af0:	00 97       	sbiw	r24, 0x00	; 0
    4af2:	69 f7       	brne	.-38     	; 0x4ace <LCD_vidInit+0x5e8>
    4af4:	14 c0       	rjmp	.+40     	; 0x4b1e <LCD_vidInit+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4af6:	6f 81       	ldd	r22, Y+7	; 0x07
    4af8:	78 85       	ldd	r23, Y+8	; 0x08
    4afa:	89 85       	ldd	r24, Y+9	; 0x09
    4afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4afe:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4b02:	dc 01       	movw	r26, r24
    4b04:	cb 01       	movw	r24, r22
    4b06:	9e 83       	std	Y+6, r25	; 0x06
    4b08:	8d 83       	std	Y+5, r24	; 0x05
    4b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    4b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    4b0e:	9a 83       	std	Y+2, r25	; 0x02
    4b10:	89 83       	std	Y+1, r24	; 0x01
    4b12:	89 81       	ldd	r24, Y+1	; 0x01
    4b14:	9a 81       	ldd	r25, Y+2	; 0x02
    4b16:	01 97       	sbiw	r24, 0x01	; 1
    4b18:	f1 f7       	brne	.-4      	; 0x4b16 <LCD_vidInit+0x630>
    4b1a:	9a 83       	std	Y+2, r25	; 0x02
    4b1c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    4b1e:	cc 5a       	subi	r28, 0xAC	; 172
    4b20:	df 4f       	sbci	r29, 0xFF	; 255
    4b22:	0f b6       	in	r0, 0x3f	; 63
    4b24:	f8 94       	cli
    4b26:	de bf       	out	0x3e, r29	; 62
    4b28:	0f be       	out	0x3f, r0	; 63
    4b2a:	cd bf       	out	0x3d, r28	; 61
    4b2c:	cf 91       	pop	r28
    4b2e:	df 91       	pop	r29
    4b30:	1f 91       	pop	r17
    4b32:	0f 91       	pop	r16
    4b34:	08 95       	ret

00004b36 <LCD_vidSendCommand>:
/* Description! Interface to send the configuration commands to the LCD Driver         */
/* Input      ! Command number                                                         */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidSendCommand(u8 u8CmdCpy)
{
    4b36:	df 93       	push	r29
    4b38:	cf 93       	push	r28
    4b3a:	cd b7       	in	r28, 0x3d	; 61
    4b3c:	de b7       	in	r29, 0x3e	; 62
    4b3e:	6d 97       	sbiw	r28, 0x1d	; 29
    4b40:	0f b6       	in	r0, 0x3f	; 63
    4b42:	f8 94       	cli
    4b44:	de bf       	out	0x3e, r29	; 62
    4b46:	0f be       	out	0x3f, r0	; 63
    4b48:	cd bf       	out	0x3d, r28	; 61
    4b4a:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Set RS to LOW */
	DIO_enuWritePin(LCD_RS, DIO_LOW);
    4b4c:	87 e1       	ldi	r24, 0x17	; 23
    4b4e:	60 e0       	ldi	r22, 0x00	; 0
    4b50:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>

	/* Set R/W to LOW */
	DIO_enuWritePin(LCD_RW, DIO_LOW);
    4b54:	86 e1       	ldi	r24, 0x16	; 22
    4b56:	60 e0       	ldi	r22, 0x00	; 0
    4b58:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>

	/* Set E to HIGH  */
	DIO_enuWritePin(LCD_EN, DIO_HIGH);
    4b5c:	85 e1       	ldi	r24, 0x15	; 21
    4b5e:	61 e0       	ldi	r22, 0x01	; 1
    4b60:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>

	/* Load Command on Data bus */

	PutOnLCD(REG, u8CmdCpy);
    4b64:	8a e7       	ldi	r24, 0x7A	; 122
    4b66:	91 e0       	ldi	r25, 0x01	; 1
    4b68:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4b6a:	0e 94 34 22 	call	0x4468	; 0x4468 <PutOnLCD>



	/* Set E to LOW */
	DIO_enuWritePin(LCD_EN, DIO_LOW);
    4b6e:	85 e1       	ldi	r24, 0x15	; 21
    4b70:	60 e0       	ldi	r22, 0x00	; 0
    4b72:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    4b76:	80 e0       	ldi	r24, 0x00	; 0
    4b78:	90 e0       	ldi	r25, 0x00	; 0
    4b7a:	a0 ea       	ldi	r26, 0xA0	; 160
    4b7c:	b0 e4       	ldi	r27, 0x40	; 64
    4b7e:	89 8f       	std	Y+25, r24	; 0x19
    4b80:	9a 8f       	std	Y+26, r25	; 0x1a
    4b82:	ab 8f       	std	Y+27, r26	; 0x1b
    4b84:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b86:	69 8d       	ldd	r22, Y+25	; 0x19
    4b88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b8e:	20 e0       	ldi	r18, 0x00	; 0
    4b90:	30 e0       	ldi	r19, 0x00	; 0
    4b92:	4a e7       	ldi	r20, 0x7A	; 122
    4b94:	55 e4       	ldi	r21, 0x45	; 69
    4b96:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4b9a:	dc 01       	movw	r26, r24
    4b9c:	cb 01       	movw	r24, r22
    4b9e:	8d 8b       	std	Y+21, r24	; 0x15
    4ba0:	9e 8b       	std	Y+22, r25	; 0x16
    4ba2:	af 8b       	std	Y+23, r26	; 0x17
    4ba4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4ba6:	6d 89       	ldd	r22, Y+21	; 0x15
    4ba8:	7e 89       	ldd	r23, Y+22	; 0x16
    4baa:	8f 89       	ldd	r24, Y+23	; 0x17
    4bac:	98 8d       	ldd	r25, Y+24	; 0x18
    4bae:	20 e0       	ldi	r18, 0x00	; 0
    4bb0:	30 e0       	ldi	r19, 0x00	; 0
    4bb2:	40 e8       	ldi	r20, 0x80	; 128
    4bb4:	5f e3       	ldi	r21, 0x3F	; 63
    4bb6:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    4bba:	88 23       	and	r24, r24
    4bbc:	2c f4       	brge	.+10     	; 0x4bc8 <LCD_vidSendCommand+0x92>
		__ticks = 1;
    4bbe:	81 e0       	ldi	r24, 0x01	; 1
    4bc0:	90 e0       	ldi	r25, 0x00	; 0
    4bc2:	9c 8b       	std	Y+20, r25	; 0x14
    4bc4:	8b 8b       	std	Y+19, r24	; 0x13
    4bc6:	3f c0       	rjmp	.+126    	; 0x4c46 <LCD_vidSendCommand+0x110>
	else if (__tmp > 65535)
    4bc8:	6d 89       	ldd	r22, Y+21	; 0x15
    4bca:	7e 89       	ldd	r23, Y+22	; 0x16
    4bcc:	8f 89       	ldd	r24, Y+23	; 0x17
    4bce:	98 8d       	ldd	r25, Y+24	; 0x18
    4bd0:	20 e0       	ldi	r18, 0x00	; 0
    4bd2:	3f ef       	ldi	r19, 0xFF	; 255
    4bd4:	4f e7       	ldi	r20, 0x7F	; 127
    4bd6:	57 e4       	ldi	r21, 0x47	; 71
    4bd8:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    4bdc:	18 16       	cp	r1, r24
    4bde:	4c f5       	brge	.+82     	; 0x4c32 <LCD_vidSendCommand+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4be0:	69 8d       	ldd	r22, Y+25	; 0x19
    4be2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4be4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4be6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4be8:	20 e0       	ldi	r18, 0x00	; 0
    4bea:	30 e0       	ldi	r19, 0x00	; 0
    4bec:	40 e2       	ldi	r20, 0x20	; 32
    4bee:	51 e4       	ldi	r21, 0x41	; 65
    4bf0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4bf4:	dc 01       	movw	r26, r24
    4bf6:	cb 01       	movw	r24, r22
    4bf8:	bc 01       	movw	r22, r24
    4bfa:	cd 01       	movw	r24, r26
    4bfc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4c00:	dc 01       	movw	r26, r24
    4c02:	cb 01       	movw	r24, r22
    4c04:	9c 8b       	std	Y+20, r25	; 0x14
    4c06:	8b 8b       	std	Y+19, r24	; 0x13
    4c08:	0f c0       	rjmp	.+30     	; 0x4c28 <LCD_vidSendCommand+0xf2>
    4c0a:	80 e9       	ldi	r24, 0x90	; 144
    4c0c:	91 e0       	ldi	r25, 0x01	; 1
    4c0e:	9a 8b       	std	Y+18, r25	; 0x12
    4c10:	89 8b       	std	Y+17, r24	; 0x11
    4c12:	89 89       	ldd	r24, Y+17	; 0x11
    4c14:	9a 89       	ldd	r25, Y+18	; 0x12
    4c16:	01 97       	sbiw	r24, 0x01	; 1
    4c18:	f1 f7       	brne	.-4      	; 0x4c16 <LCD_vidSendCommand+0xe0>
    4c1a:	9a 8b       	std	Y+18, r25	; 0x12
    4c1c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c1e:	8b 89       	ldd	r24, Y+19	; 0x13
    4c20:	9c 89       	ldd	r25, Y+20	; 0x14
    4c22:	01 97       	sbiw	r24, 0x01	; 1
    4c24:	9c 8b       	std	Y+20, r25	; 0x14
    4c26:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c28:	8b 89       	ldd	r24, Y+19	; 0x13
    4c2a:	9c 89       	ldd	r25, Y+20	; 0x14
    4c2c:	00 97       	sbiw	r24, 0x00	; 0
    4c2e:	69 f7       	brne	.-38     	; 0x4c0a <LCD_vidSendCommand+0xd4>
    4c30:	14 c0       	rjmp	.+40     	; 0x4c5a <LCD_vidSendCommand+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c32:	6d 89       	ldd	r22, Y+21	; 0x15
    4c34:	7e 89       	ldd	r23, Y+22	; 0x16
    4c36:	8f 89       	ldd	r24, Y+23	; 0x17
    4c38:	98 8d       	ldd	r25, Y+24	; 0x18
    4c3a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4c3e:	dc 01       	movw	r26, r24
    4c40:	cb 01       	movw	r24, r22
    4c42:	9c 8b       	std	Y+20, r25	; 0x14
    4c44:	8b 8b       	std	Y+19, r24	; 0x13
    4c46:	8b 89       	ldd	r24, Y+19	; 0x13
    4c48:	9c 89       	ldd	r25, Y+20	; 0x14
    4c4a:	98 8b       	std	Y+16, r25	; 0x10
    4c4c:	8f 87       	std	Y+15, r24	; 0x0f
    4c4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c50:	98 89       	ldd	r25, Y+16	; 0x10
    4c52:	01 97       	sbiw	r24, 0x01	; 1
    4c54:	f1 f7       	brne	.-4      	; 0x4c52 <LCD_vidSendCommand+0x11c>
    4c56:	98 8b       	std	Y+16, r25	; 0x10
    4c58:	8f 87       	std	Y+15, r24	; 0x0f

	/* Wait for E to settle */
	_delay_ms(5);

	/* Set E to HIGH */
	DIO_enuWritePin(LCD_EN, DIO_HIGH);
    4c5a:	85 e1       	ldi	r24, 0x15	; 21
    4c5c:	61 e0       	ldi	r22, 0x01	; 1
    4c5e:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    4c62:	80 e0       	ldi	r24, 0x00	; 0
    4c64:	90 e0       	ldi	r25, 0x00	; 0
    4c66:	a0 e2       	ldi	r26, 0x20	; 32
    4c68:	b1 e4       	ldi	r27, 0x41	; 65
    4c6a:	8b 87       	std	Y+11, r24	; 0x0b
    4c6c:	9c 87       	std	Y+12, r25	; 0x0c
    4c6e:	ad 87       	std	Y+13, r26	; 0x0d
    4c70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c72:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c74:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c76:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c78:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c7a:	20 e0       	ldi	r18, 0x00	; 0
    4c7c:	30 e0       	ldi	r19, 0x00	; 0
    4c7e:	4a e7       	ldi	r20, 0x7A	; 122
    4c80:	55 e4       	ldi	r21, 0x45	; 69
    4c82:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4c86:	dc 01       	movw	r26, r24
    4c88:	cb 01       	movw	r24, r22
    4c8a:	8f 83       	std	Y+7, r24	; 0x07
    4c8c:	98 87       	std	Y+8, r25	; 0x08
    4c8e:	a9 87       	std	Y+9, r26	; 0x09
    4c90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c92:	6f 81       	ldd	r22, Y+7	; 0x07
    4c94:	78 85       	ldd	r23, Y+8	; 0x08
    4c96:	89 85       	ldd	r24, Y+9	; 0x09
    4c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c9a:	20 e0       	ldi	r18, 0x00	; 0
    4c9c:	30 e0       	ldi	r19, 0x00	; 0
    4c9e:	40 e8       	ldi	r20, 0x80	; 128
    4ca0:	5f e3       	ldi	r21, 0x3F	; 63
    4ca2:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    4ca6:	88 23       	and	r24, r24
    4ca8:	2c f4       	brge	.+10     	; 0x4cb4 <LCD_vidSendCommand+0x17e>
		__ticks = 1;
    4caa:	81 e0       	ldi	r24, 0x01	; 1
    4cac:	90 e0       	ldi	r25, 0x00	; 0
    4cae:	9e 83       	std	Y+6, r25	; 0x06
    4cb0:	8d 83       	std	Y+5, r24	; 0x05
    4cb2:	3f c0       	rjmp	.+126    	; 0x4d32 <LCD_vidSendCommand+0x1fc>
	else if (__tmp > 65535)
    4cb4:	6f 81       	ldd	r22, Y+7	; 0x07
    4cb6:	78 85       	ldd	r23, Y+8	; 0x08
    4cb8:	89 85       	ldd	r24, Y+9	; 0x09
    4cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cbc:	20 e0       	ldi	r18, 0x00	; 0
    4cbe:	3f ef       	ldi	r19, 0xFF	; 255
    4cc0:	4f e7       	ldi	r20, 0x7F	; 127
    4cc2:	57 e4       	ldi	r21, 0x47	; 71
    4cc4:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    4cc8:	18 16       	cp	r1, r24
    4cca:	4c f5       	brge	.+82     	; 0x4d1e <LCD_vidSendCommand+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ccc:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cce:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cd4:	20 e0       	ldi	r18, 0x00	; 0
    4cd6:	30 e0       	ldi	r19, 0x00	; 0
    4cd8:	40 e2       	ldi	r20, 0x20	; 32
    4cda:	51 e4       	ldi	r21, 0x41	; 65
    4cdc:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4ce0:	dc 01       	movw	r26, r24
    4ce2:	cb 01       	movw	r24, r22
    4ce4:	bc 01       	movw	r22, r24
    4ce6:	cd 01       	movw	r24, r26
    4ce8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4cec:	dc 01       	movw	r26, r24
    4cee:	cb 01       	movw	r24, r22
    4cf0:	9e 83       	std	Y+6, r25	; 0x06
    4cf2:	8d 83       	std	Y+5, r24	; 0x05
    4cf4:	0f c0       	rjmp	.+30     	; 0x4d14 <LCD_vidSendCommand+0x1de>
    4cf6:	80 e9       	ldi	r24, 0x90	; 144
    4cf8:	91 e0       	ldi	r25, 0x01	; 1
    4cfa:	9c 83       	std	Y+4, r25	; 0x04
    4cfc:	8b 83       	std	Y+3, r24	; 0x03
    4cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    4d00:	9c 81       	ldd	r25, Y+4	; 0x04
    4d02:	01 97       	sbiw	r24, 0x01	; 1
    4d04:	f1 f7       	brne	.-4      	; 0x4d02 <LCD_vidSendCommand+0x1cc>
    4d06:	9c 83       	std	Y+4, r25	; 0x04
    4d08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    4d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    4d0e:	01 97       	sbiw	r24, 0x01	; 1
    4d10:	9e 83       	std	Y+6, r25	; 0x06
    4d12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d14:	8d 81       	ldd	r24, Y+5	; 0x05
    4d16:	9e 81       	ldd	r25, Y+6	; 0x06
    4d18:	00 97       	sbiw	r24, 0x00	; 0
    4d1a:	69 f7       	brne	.-38     	; 0x4cf6 <LCD_vidSendCommand+0x1c0>
    4d1c:	14 c0       	rjmp	.+40     	; 0x4d46 <LCD_vidSendCommand+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d1e:	6f 81       	ldd	r22, Y+7	; 0x07
    4d20:	78 85       	ldd	r23, Y+8	; 0x08
    4d22:	89 85       	ldd	r24, Y+9	; 0x09
    4d24:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d26:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4d2a:	dc 01       	movw	r26, r24
    4d2c:	cb 01       	movw	r24, r22
    4d2e:	9e 83       	std	Y+6, r25	; 0x06
    4d30:	8d 83       	std	Y+5, r24	; 0x05
    4d32:	8d 81       	ldd	r24, Y+5	; 0x05
    4d34:	9e 81       	ldd	r25, Y+6	; 0x06
    4d36:	9a 83       	std	Y+2, r25	; 0x02
    4d38:	89 83       	std	Y+1, r24	; 0x01
    4d3a:	89 81       	ldd	r24, Y+1	; 0x01
    4d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    4d3e:	01 97       	sbiw	r24, 0x01	; 1
    4d40:	f1 f7       	brne	.-4      	; 0x4d3e <LCD_vidSendCommand+0x208>
    4d42:	9a 83       	std	Y+2, r25	; 0x02
    4d44:	89 83       	std	Y+1, r24	; 0x01

	/* Delay for 10ms to let the LCD execute command */
	_delay_ms(10);

}
    4d46:	6d 96       	adiw	r28, 0x1d	; 29
    4d48:	0f b6       	in	r0, 0x3f	; 63
    4d4a:	f8 94       	cli
    4d4c:	de bf       	out	0x3e, r29	; 62
    4d4e:	0f be       	out	0x3f, r0	; 63
    4d50:	cd bf       	out	0x3d, r28	; 61
    4d52:	cf 91       	pop	r28
    4d54:	df 91       	pop	r29
    4d56:	08 95       	ret

00004d58 <LCD_vidWriteCharctr>:
/* Description! Interface to write character on LCD screen                             */
/* Input      ! Data to send                                                           */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidWriteCharctr(u8 u8DataCpy)
{
    4d58:	df 93       	push	r29
    4d5a:	cf 93       	push	r28
    4d5c:	cd b7       	in	r28, 0x3d	; 61
    4d5e:	de b7       	in	r29, 0x3e	; 62
    4d60:	6d 97       	sbiw	r28, 0x1d	; 29
    4d62:	0f b6       	in	r0, 0x3f	; 63
    4d64:	f8 94       	cli
    4d66:	de bf       	out	0x3e, r29	; 62
    4d68:	0f be       	out	0x3f, r0	; 63
    4d6a:	cd bf       	out	0x3d, r28	; 61
    4d6c:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Set RS to HIG */
	DIO_enuWritePin(LCD_RS, DIO_HIGH);
    4d6e:	87 e1       	ldi	r24, 0x17	; 23
    4d70:	61 e0       	ldi	r22, 0x01	; 1
    4d72:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>

	/* Set R/W to LOW */
	DIO_enuWritePin(LCD_RW, DIO_LOW);
    4d76:	86 e1       	ldi	r24, 0x16	; 22
    4d78:	60 e0       	ldi	r22, 0x00	; 0
    4d7a:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>

	/* Set E to HIGH */
	DIO_enuWritePin(LCD_EN, DIO_HIGH);
    4d7e:	85 e1       	ldi	r24, 0x15	; 21
    4d80:	61 e0       	ldi	r22, 0x01	; 1
    4d82:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>

	/* Load Command on Data bus */
	PutOnLCD(REG, u8DataCpy);
    4d86:	8a e7       	ldi	r24, 0x7A	; 122
    4d88:	91 e0       	ldi	r25, 0x01	; 1
    4d8a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4d8c:	0e 94 34 22 	call	0x4468	; 0x4468 <PutOnLCD>

	/* Set E to LOW */
	DIO_enuWritePin(LCD_EN, DIO_LOW);
    4d90:	85 e1       	ldi	r24, 0x15	; 21
    4d92:	60 e0       	ldi	r22, 0x00	; 0
    4d94:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    4d98:	80 e0       	ldi	r24, 0x00	; 0
    4d9a:	90 e0       	ldi	r25, 0x00	; 0
    4d9c:	a0 ea       	ldi	r26, 0xA0	; 160
    4d9e:	b0 e4       	ldi	r27, 0x40	; 64
    4da0:	89 8f       	std	Y+25, r24	; 0x19
    4da2:	9a 8f       	std	Y+26, r25	; 0x1a
    4da4:	ab 8f       	std	Y+27, r26	; 0x1b
    4da6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4da8:	69 8d       	ldd	r22, Y+25	; 0x19
    4daa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4dac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4dae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4db0:	20 e0       	ldi	r18, 0x00	; 0
    4db2:	30 e0       	ldi	r19, 0x00	; 0
    4db4:	4a e7       	ldi	r20, 0x7A	; 122
    4db6:	55 e4       	ldi	r21, 0x45	; 69
    4db8:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4dbc:	dc 01       	movw	r26, r24
    4dbe:	cb 01       	movw	r24, r22
    4dc0:	8d 8b       	std	Y+21, r24	; 0x15
    4dc2:	9e 8b       	std	Y+22, r25	; 0x16
    4dc4:	af 8b       	std	Y+23, r26	; 0x17
    4dc6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4dc8:	6d 89       	ldd	r22, Y+21	; 0x15
    4dca:	7e 89       	ldd	r23, Y+22	; 0x16
    4dcc:	8f 89       	ldd	r24, Y+23	; 0x17
    4dce:	98 8d       	ldd	r25, Y+24	; 0x18
    4dd0:	20 e0       	ldi	r18, 0x00	; 0
    4dd2:	30 e0       	ldi	r19, 0x00	; 0
    4dd4:	40 e8       	ldi	r20, 0x80	; 128
    4dd6:	5f e3       	ldi	r21, 0x3F	; 63
    4dd8:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    4ddc:	88 23       	and	r24, r24
    4dde:	2c f4       	brge	.+10     	; 0x4dea <LCD_vidWriteCharctr+0x92>
		__ticks = 1;
    4de0:	81 e0       	ldi	r24, 0x01	; 1
    4de2:	90 e0       	ldi	r25, 0x00	; 0
    4de4:	9c 8b       	std	Y+20, r25	; 0x14
    4de6:	8b 8b       	std	Y+19, r24	; 0x13
    4de8:	3f c0       	rjmp	.+126    	; 0x4e68 <LCD_vidWriteCharctr+0x110>
	else if (__tmp > 65535)
    4dea:	6d 89       	ldd	r22, Y+21	; 0x15
    4dec:	7e 89       	ldd	r23, Y+22	; 0x16
    4dee:	8f 89       	ldd	r24, Y+23	; 0x17
    4df0:	98 8d       	ldd	r25, Y+24	; 0x18
    4df2:	20 e0       	ldi	r18, 0x00	; 0
    4df4:	3f ef       	ldi	r19, 0xFF	; 255
    4df6:	4f e7       	ldi	r20, 0x7F	; 127
    4df8:	57 e4       	ldi	r21, 0x47	; 71
    4dfa:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    4dfe:	18 16       	cp	r1, r24
    4e00:	4c f5       	brge	.+82     	; 0x4e54 <LCD_vidWriteCharctr+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e02:	69 8d       	ldd	r22, Y+25	; 0x19
    4e04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e0a:	20 e0       	ldi	r18, 0x00	; 0
    4e0c:	30 e0       	ldi	r19, 0x00	; 0
    4e0e:	40 e2       	ldi	r20, 0x20	; 32
    4e10:	51 e4       	ldi	r21, 0x41	; 65
    4e12:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4e16:	dc 01       	movw	r26, r24
    4e18:	cb 01       	movw	r24, r22
    4e1a:	bc 01       	movw	r22, r24
    4e1c:	cd 01       	movw	r24, r26
    4e1e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4e22:	dc 01       	movw	r26, r24
    4e24:	cb 01       	movw	r24, r22
    4e26:	9c 8b       	std	Y+20, r25	; 0x14
    4e28:	8b 8b       	std	Y+19, r24	; 0x13
    4e2a:	0f c0       	rjmp	.+30     	; 0x4e4a <LCD_vidWriteCharctr+0xf2>
    4e2c:	80 e9       	ldi	r24, 0x90	; 144
    4e2e:	91 e0       	ldi	r25, 0x01	; 1
    4e30:	9a 8b       	std	Y+18, r25	; 0x12
    4e32:	89 8b       	std	Y+17, r24	; 0x11
    4e34:	89 89       	ldd	r24, Y+17	; 0x11
    4e36:	9a 89       	ldd	r25, Y+18	; 0x12
    4e38:	01 97       	sbiw	r24, 0x01	; 1
    4e3a:	f1 f7       	brne	.-4      	; 0x4e38 <LCD_vidWriteCharctr+0xe0>
    4e3c:	9a 8b       	std	Y+18, r25	; 0x12
    4e3e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e40:	8b 89       	ldd	r24, Y+19	; 0x13
    4e42:	9c 89       	ldd	r25, Y+20	; 0x14
    4e44:	01 97       	sbiw	r24, 0x01	; 1
    4e46:	9c 8b       	std	Y+20, r25	; 0x14
    4e48:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e4a:	8b 89       	ldd	r24, Y+19	; 0x13
    4e4c:	9c 89       	ldd	r25, Y+20	; 0x14
    4e4e:	00 97       	sbiw	r24, 0x00	; 0
    4e50:	69 f7       	brne	.-38     	; 0x4e2c <LCD_vidWriteCharctr+0xd4>
    4e52:	14 c0       	rjmp	.+40     	; 0x4e7c <LCD_vidWriteCharctr+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e54:	6d 89       	ldd	r22, Y+21	; 0x15
    4e56:	7e 89       	ldd	r23, Y+22	; 0x16
    4e58:	8f 89       	ldd	r24, Y+23	; 0x17
    4e5a:	98 8d       	ldd	r25, Y+24	; 0x18
    4e5c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4e60:	dc 01       	movw	r26, r24
    4e62:	cb 01       	movw	r24, r22
    4e64:	9c 8b       	std	Y+20, r25	; 0x14
    4e66:	8b 8b       	std	Y+19, r24	; 0x13
    4e68:	8b 89       	ldd	r24, Y+19	; 0x13
    4e6a:	9c 89       	ldd	r25, Y+20	; 0x14
    4e6c:	98 8b       	std	Y+16, r25	; 0x10
    4e6e:	8f 87       	std	Y+15, r24	; 0x0f
    4e70:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e72:	98 89       	ldd	r25, Y+16	; 0x10
    4e74:	01 97       	sbiw	r24, 0x01	; 1
    4e76:	f1 f7       	brne	.-4      	; 0x4e74 <LCD_vidWriteCharctr+0x11c>
    4e78:	98 8b       	std	Y+16, r25	; 0x10
    4e7a:	8f 87       	std	Y+15, r24	; 0x0f

	/* Wait for E to settle */
	_delay_ms(5);

	/* Set E to HIGH */
	DIO_enuWritePin(LCD_EN, DIO_HIGH);
    4e7c:	85 e1       	ldi	r24, 0x15	; 21
    4e7e:	61 e0       	ldi	r22, 0x01	; 1
    4e80:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    4e84:	80 e0       	ldi	r24, 0x00	; 0
    4e86:	90 e0       	ldi	r25, 0x00	; 0
    4e88:	a0 e2       	ldi	r26, 0x20	; 32
    4e8a:	b1 e4       	ldi	r27, 0x41	; 65
    4e8c:	8b 87       	std	Y+11, r24	; 0x0b
    4e8e:	9c 87       	std	Y+12, r25	; 0x0c
    4e90:	ad 87       	std	Y+13, r26	; 0x0d
    4e92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e94:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e96:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e98:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e9c:	20 e0       	ldi	r18, 0x00	; 0
    4e9e:	30 e0       	ldi	r19, 0x00	; 0
    4ea0:	4a e7       	ldi	r20, 0x7A	; 122
    4ea2:	55 e4       	ldi	r21, 0x45	; 69
    4ea4:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4ea8:	dc 01       	movw	r26, r24
    4eaa:	cb 01       	movw	r24, r22
    4eac:	8f 83       	std	Y+7, r24	; 0x07
    4eae:	98 87       	std	Y+8, r25	; 0x08
    4eb0:	a9 87       	std	Y+9, r26	; 0x09
    4eb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4eb4:	6f 81       	ldd	r22, Y+7	; 0x07
    4eb6:	78 85       	ldd	r23, Y+8	; 0x08
    4eb8:	89 85       	ldd	r24, Y+9	; 0x09
    4eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ebc:	20 e0       	ldi	r18, 0x00	; 0
    4ebe:	30 e0       	ldi	r19, 0x00	; 0
    4ec0:	40 e8       	ldi	r20, 0x80	; 128
    4ec2:	5f e3       	ldi	r21, 0x3F	; 63
    4ec4:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    4ec8:	88 23       	and	r24, r24
    4eca:	2c f4       	brge	.+10     	; 0x4ed6 <LCD_vidWriteCharctr+0x17e>
		__ticks = 1;
    4ecc:	81 e0       	ldi	r24, 0x01	; 1
    4ece:	90 e0       	ldi	r25, 0x00	; 0
    4ed0:	9e 83       	std	Y+6, r25	; 0x06
    4ed2:	8d 83       	std	Y+5, r24	; 0x05
    4ed4:	3f c0       	rjmp	.+126    	; 0x4f54 <LCD_vidWriteCharctr+0x1fc>
	else if (__tmp > 65535)
    4ed6:	6f 81       	ldd	r22, Y+7	; 0x07
    4ed8:	78 85       	ldd	r23, Y+8	; 0x08
    4eda:	89 85       	ldd	r24, Y+9	; 0x09
    4edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ede:	20 e0       	ldi	r18, 0x00	; 0
    4ee0:	3f ef       	ldi	r19, 0xFF	; 255
    4ee2:	4f e7       	ldi	r20, 0x7F	; 127
    4ee4:	57 e4       	ldi	r21, 0x47	; 71
    4ee6:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    4eea:	18 16       	cp	r1, r24
    4eec:	4c f5       	brge	.+82     	; 0x4f40 <LCD_vidWriteCharctr+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eee:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ef0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ef2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ef4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ef6:	20 e0       	ldi	r18, 0x00	; 0
    4ef8:	30 e0       	ldi	r19, 0x00	; 0
    4efa:	40 e2       	ldi	r20, 0x20	; 32
    4efc:	51 e4       	ldi	r21, 0x41	; 65
    4efe:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4f02:	dc 01       	movw	r26, r24
    4f04:	cb 01       	movw	r24, r22
    4f06:	bc 01       	movw	r22, r24
    4f08:	cd 01       	movw	r24, r26
    4f0a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4f0e:	dc 01       	movw	r26, r24
    4f10:	cb 01       	movw	r24, r22
    4f12:	9e 83       	std	Y+6, r25	; 0x06
    4f14:	8d 83       	std	Y+5, r24	; 0x05
    4f16:	0f c0       	rjmp	.+30     	; 0x4f36 <LCD_vidWriteCharctr+0x1de>
    4f18:	80 e9       	ldi	r24, 0x90	; 144
    4f1a:	91 e0       	ldi	r25, 0x01	; 1
    4f1c:	9c 83       	std	Y+4, r25	; 0x04
    4f1e:	8b 83       	std	Y+3, r24	; 0x03
    4f20:	8b 81       	ldd	r24, Y+3	; 0x03
    4f22:	9c 81       	ldd	r25, Y+4	; 0x04
    4f24:	01 97       	sbiw	r24, 0x01	; 1
    4f26:	f1 f7       	brne	.-4      	; 0x4f24 <LCD_vidWriteCharctr+0x1cc>
    4f28:	9c 83       	std	Y+4, r25	; 0x04
    4f2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    4f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    4f30:	01 97       	sbiw	r24, 0x01	; 1
    4f32:	9e 83       	std	Y+6, r25	; 0x06
    4f34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f36:	8d 81       	ldd	r24, Y+5	; 0x05
    4f38:	9e 81       	ldd	r25, Y+6	; 0x06
    4f3a:	00 97       	sbiw	r24, 0x00	; 0
    4f3c:	69 f7       	brne	.-38     	; 0x4f18 <LCD_vidWriteCharctr+0x1c0>
    4f3e:	14 c0       	rjmp	.+40     	; 0x4f68 <LCD_vidWriteCharctr+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f40:	6f 81       	ldd	r22, Y+7	; 0x07
    4f42:	78 85       	ldd	r23, Y+8	; 0x08
    4f44:	89 85       	ldd	r24, Y+9	; 0x09
    4f46:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f48:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4f4c:	dc 01       	movw	r26, r24
    4f4e:	cb 01       	movw	r24, r22
    4f50:	9e 83       	std	Y+6, r25	; 0x06
    4f52:	8d 83       	std	Y+5, r24	; 0x05
    4f54:	8d 81       	ldd	r24, Y+5	; 0x05
    4f56:	9e 81       	ldd	r25, Y+6	; 0x06
    4f58:	9a 83       	std	Y+2, r25	; 0x02
    4f5a:	89 83       	std	Y+1, r24	; 0x01
    4f5c:	89 81       	ldd	r24, Y+1	; 0x01
    4f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    4f60:	01 97       	sbiw	r24, 0x01	; 1
    4f62:	f1 f7       	brne	.-4      	; 0x4f60 <LCD_vidWriteCharctr+0x208>
    4f64:	9a 83       	std	Y+2, r25	; 0x02
    4f66:	89 83       	std	Y+1, r24	; 0x01

	/* Delay to let the LCD Display the character */
	_delay_ms(10);

}
    4f68:	6d 96       	adiw	r28, 0x1d	; 29
    4f6a:	0f b6       	in	r0, 0x3f	; 63
    4f6c:	f8 94       	cli
    4f6e:	de bf       	out	0x3e, r29	; 62
    4f70:	0f be       	out	0x3f, r0	; 63
    4f72:	cd bf       	out	0x3d, r28	; 61
    4f74:	cf 91       	pop	r28
    4f76:	df 91       	pop	r29
    4f78:	08 95       	ret

00004f7a <LCD_vidWriteString>:
/* Description! Interface to write string on LCD screen                                */
/* Input      ! Pointer to the string                                                  */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidWriteString (u8* pu8StringCpy, u8 u8Index)
{
    4f7a:	df 93       	push	r29
    4f7c:	cf 93       	push	r28
    4f7e:	cd b7       	in	r28, 0x3d	; 61
    4f80:	de b7       	in	r29, 0x3e	; 62
    4f82:	62 97       	sbiw	r28, 0x12	; 18
    4f84:	0f b6       	in	r0, 0x3f	; 63
    4f86:	f8 94       	cli
    4f88:	de bf       	out	0x3e, r29	; 62
    4f8a:	0f be       	out	0x3f, r0	; 63
    4f8c:	cd bf       	out	0x3d, r28	; 61
    4f8e:	99 8b       	std	Y+17, r25	; 0x11
    4f90:	88 8b       	std	Y+16, r24	; 0x10
    4f92:	6a 8b       	std	Y+18, r22	; 0x12

//	/* Local loop index */
//	u8 u8Index = 0;
	u8 iteration=0;
    4f94:	1f 86       	std	Y+15, r1	; 0x0f
//	while (pu8StringCpy[u8Index] != '\0')
	for (iteration=0; iteration<u8Index ; iteration++)
    4f96:	1f 86       	std	Y+15, r1	; 0x0f
    4f98:	80 c0       	rjmp	.+256    	; 0x509a <LCD_vidWriteString+0x120>
	{

		/* Write Character on LCD */
		LCD_vidWriteCharctr(pu8StringCpy[iteration]);
    4f9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f9c:	28 2f       	mov	r18, r24
    4f9e:	30 e0       	ldi	r19, 0x00	; 0
    4fa0:	88 89       	ldd	r24, Y+16	; 0x10
    4fa2:	99 89       	ldd	r25, Y+17	; 0x11
    4fa4:	fc 01       	movw	r30, r24
    4fa6:	e2 0f       	add	r30, r18
    4fa8:	f3 1f       	adc	r31, r19
    4faa:	80 81       	ld	r24, Z
    4fac:	0e 94 ac 26 	call	0x4d58	; 0x4d58 <LCD_vidWriteCharctr>
    4fb0:	80 e0       	ldi	r24, 0x00	; 0
    4fb2:	90 e0       	ldi	r25, 0x00	; 0
    4fb4:	a0 e0       	ldi	r26, 0x00	; 0
    4fb6:	b0 e4       	ldi	r27, 0x40	; 64
    4fb8:	8b 87       	std	Y+11, r24	; 0x0b
    4fba:	9c 87       	std	Y+12, r25	; 0x0c
    4fbc:	ad 87       	std	Y+13, r26	; 0x0d
    4fbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fc8:	20 e0       	ldi	r18, 0x00	; 0
    4fca:	30 e0       	ldi	r19, 0x00	; 0
    4fcc:	4a e7       	ldi	r20, 0x7A	; 122
    4fce:	55 e4       	ldi	r21, 0x45	; 69
    4fd0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4fd4:	dc 01       	movw	r26, r24
    4fd6:	cb 01       	movw	r24, r22
    4fd8:	8f 83       	std	Y+7, r24	; 0x07
    4fda:	98 87       	std	Y+8, r25	; 0x08
    4fdc:	a9 87       	std	Y+9, r26	; 0x09
    4fde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4fe0:	6f 81       	ldd	r22, Y+7	; 0x07
    4fe2:	78 85       	ldd	r23, Y+8	; 0x08
    4fe4:	89 85       	ldd	r24, Y+9	; 0x09
    4fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fe8:	20 e0       	ldi	r18, 0x00	; 0
    4fea:	30 e0       	ldi	r19, 0x00	; 0
    4fec:	40 e8       	ldi	r20, 0x80	; 128
    4fee:	5f e3       	ldi	r21, 0x3F	; 63
    4ff0:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    4ff4:	88 23       	and	r24, r24
    4ff6:	2c f4       	brge	.+10     	; 0x5002 <LCD_vidWriteString+0x88>
		__ticks = 1;
    4ff8:	81 e0       	ldi	r24, 0x01	; 1
    4ffa:	90 e0       	ldi	r25, 0x00	; 0
    4ffc:	9e 83       	std	Y+6, r25	; 0x06
    4ffe:	8d 83       	std	Y+5, r24	; 0x05
    5000:	3f c0       	rjmp	.+126    	; 0x5080 <LCD_vidWriteString+0x106>
	else if (__tmp > 65535)
    5002:	6f 81       	ldd	r22, Y+7	; 0x07
    5004:	78 85       	ldd	r23, Y+8	; 0x08
    5006:	89 85       	ldd	r24, Y+9	; 0x09
    5008:	9a 85       	ldd	r25, Y+10	; 0x0a
    500a:	20 e0       	ldi	r18, 0x00	; 0
    500c:	3f ef       	ldi	r19, 0xFF	; 255
    500e:	4f e7       	ldi	r20, 0x7F	; 127
    5010:	57 e4       	ldi	r21, 0x47	; 71
    5012:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    5016:	18 16       	cp	r1, r24
    5018:	4c f5       	brge	.+82     	; 0x506c <LCD_vidWriteString+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    501a:	6b 85       	ldd	r22, Y+11	; 0x0b
    501c:	7c 85       	ldd	r23, Y+12	; 0x0c
    501e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5020:	9e 85       	ldd	r25, Y+14	; 0x0e
    5022:	20 e0       	ldi	r18, 0x00	; 0
    5024:	30 e0       	ldi	r19, 0x00	; 0
    5026:	40 e2       	ldi	r20, 0x20	; 32
    5028:	51 e4       	ldi	r21, 0x41	; 65
    502a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    502e:	dc 01       	movw	r26, r24
    5030:	cb 01       	movw	r24, r22
    5032:	bc 01       	movw	r22, r24
    5034:	cd 01       	movw	r24, r26
    5036:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    503a:	dc 01       	movw	r26, r24
    503c:	cb 01       	movw	r24, r22
    503e:	9e 83       	std	Y+6, r25	; 0x06
    5040:	8d 83       	std	Y+5, r24	; 0x05
    5042:	0f c0       	rjmp	.+30     	; 0x5062 <LCD_vidWriteString+0xe8>
    5044:	80 e9       	ldi	r24, 0x90	; 144
    5046:	91 e0       	ldi	r25, 0x01	; 1
    5048:	9c 83       	std	Y+4, r25	; 0x04
    504a:	8b 83       	std	Y+3, r24	; 0x03
    504c:	8b 81       	ldd	r24, Y+3	; 0x03
    504e:	9c 81       	ldd	r25, Y+4	; 0x04
    5050:	01 97       	sbiw	r24, 0x01	; 1
    5052:	f1 f7       	brne	.-4      	; 0x5050 <LCD_vidWriteString+0xd6>
    5054:	9c 83       	std	Y+4, r25	; 0x04
    5056:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5058:	8d 81       	ldd	r24, Y+5	; 0x05
    505a:	9e 81       	ldd	r25, Y+6	; 0x06
    505c:	01 97       	sbiw	r24, 0x01	; 1
    505e:	9e 83       	std	Y+6, r25	; 0x06
    5060:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5062:	8d 81       	ldd	r24, Y+5	; 0x05
    5064:	9e 81       	ldd	r25, Y+6	; 0x06
    5066:	00 97       	sbiw	r24, 0x00	; 0
    5068:	69 f7       	brne	.-38     	; 0x5044 <LCD_vidWriteString+0xca>
    506a:	14 c0       	rjmp	.+40     	; 0x5094 <LCD_vidWriteString+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    506c:	6f 81       	ldd	r22, Y+7	; 0x07
    506e:	78 85       	ldd	r23, Y+8	; 0x08
    5070:	89 85       	ldd	r24, Y+9	; 0x09
    5072:	9a 85       	ldd	r25, Y+10	; 0x0a
    5074:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5078:	dc 01       	movw	r26, r24
    507a:	cb 01       	movw	r24, r22
    507c:	9e 83       	std	Y+6, r25	; 0x06
    507e:	8d 83       	std	Y+5, r24	; 0x05
    5080:	8d 81       	ldd	r24, Y+5	; 0x05
    5082:	9e 81       	ldd	r25, Y+6	; 0x06
    5084:	9a 83       	std	Y+2, r25	; 0x02
    5086:	89 83       	std	Y+1, r24	; 0x01
    5088:	89 81       	ldd	r24, Y+1	; 0x01
    508a:	9a 81       	ldd	r25, Y+2	; 0x02
    508c:	01 97       	sbiw	r24, 0x01	; 1
    508e:	f1 f7       	brne	.-4      	; 0x508c <LCD_vidWriteString+0x112>
    5090:	9a 83       	std	Y+2, r25	; 0x02
    5092:	89 83       	std	Y+1, r24	; 0x01

//	/* Local loop index */
//	u8 u8Index = 0;
	u8 iteration=0;
//	while (pu8StringCpy[u8Index] != '\0')
	for (iteration=0; iteration<u8Index ; iteration++)
    5094:	8f 85       	ldd	r24, Y+15	; 0x0f
    5096:	8f 5f       	subi	r24, 0xFF	; 255
    5098:	8f 87       	std	Y+15, r24	; 0x0f
    509a:	9f 85       	ldd	r25, Y+15	; 0x0f
    509c:	8a 89       	ldd	r24, Y+18	; 0x12
    509e:	98 17       	cp	r25, r24
    50a0:	08 f4       	brcc	.+2      	; 0x50a4 <LCD_vidWriteString+0x12a>
    50a2:	7b cf       	rjmp	.-266    	; 0x4f9a <LCD_vidWriteString+0x20>

		/* Delay to let the LCD show the character */
		_delay_ms(2);
	}

}
    50a4:	62 96       	adiw	r28, 0x12	; 18
    50a6:	0f b6       	in	r0, 0x3f	; 63
    50a8:	f8 94       	cli
    50aa:	de bf       	out	0x3e, r29	; 62
    50ac:	0f be       	out	0x3f, r0	; 63
    50ae:	cd bf       	out	0x3d, r28	; 61
    50b0:	cf 91       	pop	r28
    50b2:	df 91       	pop	r29
    50b4:	08 95       	ret

000050b6 <Gotoxy>:
/* Description! Interface to start the writing process at certain digit in the LCD     */
/* Input      ! Y = Row position , X = Column position                                 */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void Gotoxy (u8 Y,u8 X)
{
    50b6:	df 93       	push	r29
    50b8:	cf 93       	push	r28
    50ba:	00 d0       	rcall	.+0      	; 0x50bc <Gotoxy+0x6>
    50bc:	00 d0       	rcall	.+0      	; 0x50be <Gotoxy+0x8>
    50be:	cd b7       	in	r28, 0x3d	; 61
    50c0:	de b7       	in	r29, 0x3e	; 62
    50c2:	89 83       	std	Y+1, r24	; 0x01
    50c4:	6a 83       	std	Y+2, r22	; 0x02
	if (X>0 && X<=16)
    50c6:	8a 81       	ldd	r24, Y+2	; 0x02
    50c8:	88 23       	and	r24, r24
    50ca:	e1 f0       	breq	.+56     	; 0x5104 <Gotoxy+0x4e>
    50cc:	8a 81       	ldd	r24, Y+2	; 0x02
    50ce:	81 31       	cpi	r24, 0x11	; 17
    50d0:	c8 f4       	brcc	.+50     	; 0x5104 <Gotoxy+0x4e>
	{
	    switch(Y)
    50d2:	89 81       	ldd	r24, Y+1	; 0x01
    50d4:	28 2f       	mov	r18, r24
    50d6:	30 e0       	ldi	r19, 0x00	; 0
    50d8:	3c 83       	std	Y+4, r19	; 0x04
    50da:	2b 83       	std	Y+3, r18	; 0x03
    50dc:	8b 81       	ldd	r24, Y+3	; 0x03
    50de:	9c 81       	ldd	r25, Y+4	; 0x04
    50e0:	81 30       	cpi	r24, 0x01	; 1
    50e2:	91 05       	cpc	r25, r1
    50e4:	31 f0       	breq	.+12     	; 0x50f2 <Gotoxy+0x3c>
    50e6:	2b 81       	ldd	r18, Y+3	; 0x03
    50e8:	3c 81       	ldd	r19, Y+4	; 0x04
    50ea:	22 30       	cpi	r18, 0x02	; 2
    50ec:	31 05       	cpc	r19, r1
    50ee:	31 f0       	breq	.+12     	; 0x50fc <Gotoxy+0x46>
    50f0:	09 c0       	rjmp	.+18     	; 0x5104 <Gotoxy+0x4e>
	    {
		    case 1:
		    	LCD_vidSendCommand(X+127);
    50f2:	8a 81       	ldd	r24, Y+2	; 0x02
    50f4:	81 58       	subi	r24, 0x81	; 129
    50f6:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <LCD_vidSendCommand>
    50fa:	04 c0       	rjmp	.+8      	; 0x5104 <Gotoxy+0x4e>
		    break;
		    case 2:
		    	LCD_vidSendCommand(X+191);
    50fc:	8a 81       	ldd	r24, Y+2	; 0x02
    50fe:	81 54       	subi	r24, 0x41	; 65
    5100:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <LCD_vidSendCommand>
		    break;
		    default:
		    break;
	    }
	}
}
    5104:	0f 90       	pop	r0
    5106:	0f 90       	pop	r0
    5108:	0f 90       	pop	r0
    510a:	0f 90       	pop	r0
    510c:	cf 91       	pop	r28
    510e:	df 91       	pop	r29
    5110:	08 95       	ret

00005112 <LCD_vidWriteExtraChar>:
/* Description! Interface to write extra characters saved in the CGRAM                 */
/* Input      ! Y = Row position , X = Column position                                 */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidWriteExtraChar (u8 Y,u8 X)
{
    5112:	df 93       	push	r29
    5114:	cf 93       	push	r28
    5116:	cd b7       	in	r28, 0x3d	; 61
    5118:	de b7       	in	r29, 0x3e	; 62
    511a:	62 97       	sbiw	r28, 0x12	; 18
    511c:	0f b6       	in	r0, 0x3f	; 63
    511e:	f8 94       	cli
    5120:	de bf       	out	0x3e, r29	; 62
    5122:	0f be       	out	0x3f, r0	; 63
    5124:	cd bf       	out	0x3d, r28	; 61
    5126:	89 8b       	std	Y+17, r24	; 0x11
    5128:	6a 8b       	std	Y+18, r22	; 0x12
    u8 iteration1,iteration2;

    /*DDRAM-->CGRAM*/
    LCD_vidSendCommand(64);
    512a:	80 e4       	ldi	r24, 0x40	; 64
    512c:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <LCD_vidSendCommand>
	for(iteration1=0 ; iteration1<64 ; iteration1++)
    5130:	18 8a       	std	Y+16, r1	; 0x10
    5132:	0c c0       	rjmp	.+24     	; 0x514c <LCD_vidWriteExtraChar+0x3a>
	{
		LCD_vidWriteCharctr(ExtraChar[iteration1]);
    5134:	88 89       	ldd	r24, Y+16	; 0x10
    5136:	88 2f       	mov	r24, r24
    5138:	90 e0       	ldi	r25, 0x00	; 0
    513a:	fc 01       	movw	r30, r24
    513c:	ec 55       	subi	r30, 0x5C	; 92
    513e:	fe 4f       	sbci	r31, 0xFE	; 254
    5140:	80 81       	ld	r24, Z
    5142:	0e 94 ac 26 	call	0x4d58	; 0x4d58 <LCD_vidWriteCharctr>
{
    u8 iteration1,iteration2;

    /*DDRAM-->CGRAM*/
    LCD_vidSendCommand(64);
	for(iteration1=0 ; iteration1<64 ; iteration1++)
    5146:	88 89       	ldd	r24, Y+16	; 0x10
    5148:	8f 5f       	subi	r24, 0xFF	; 255
    514a:	88 8b       	std	Y+16, r24	; 0x10
    514c:	88 89       	ldd	r24, Y+16	; 0x10
    514e:	80 34       	cpi	r24, 0x40	; 64
    5150:	88 f3       	brcs	.-30     	; 0x5134 <LCD_vidWriteExtraChar+0x22>
	{
		LCD_vidWriteCharctr(ExtraChar[iteration1]);
	}
	/*CGRAM-->DDRAM*/
	LCD_vidSendCommand(128);
    5152:	80 e8       	ldi	r24, 0x80	; 128
    5154:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <LCD_vidSendCommand>
	Gotoxy(Y,X);
    5158:	89 89       	ldd	r24, Y+17	; 0x11
    515a:	6a 89       	ldd	r22, Y+18	; 0x12
    515c:	0e 94 5b 28 	call	0x50b6	; 0x50b6 <Gotoxy>
	/*First eight character which saved at CGRAM*/
	for (iteration2=0; iteration2<=7 ; iteration2++)
    5160:	1f 86       	std	Y+15, r1	; 0x0f
    5162:	78 c0       	rjmp	.+240    	; 0x5254 <LCD_vidWriteExtraChar+0x142>
	{
		/* Write bytes of DDRAM */
		LCD_vidWriteCharctr(iteration2);
    5164:	8f 85       	ldd	r24, Y+15	; 0x0f
    5166:	0e 94 ac 26 	call	0x4d58	; 0x4d58 <LCD_vidWriteCharctr>
    516a:	80 e0       	ldi	r24, 0x00	; 0
    516c:	90 e0       	ldi	r25, 0x00	; 0
    516e:	a0 ea       	ldi	r26, 0xA0	; 160
    5170:	b0 e4       	ldi	r27, 0x40	; 64
    5172:	8b 87       	std	Y+11, r24	; 0x0b
    5174:	9c 87       	std	Y+12, r25	; 0x0c
    5176:	ad 87       	std	Y+13, r26	; 0x0d
    5178:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    517a:	6b 85       	ldd	r22, Y+11	; 0x0b
    517c:	7c 85       	ldd	r23, Y+12	; 0x0c
    517e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5180:	9e 85       	ldd	r25, Y+14	; 0x0e
    5182:	20 e0       	ldi	r18, 0x00	; 0
    5184:	30 e0       	ldi	r19, 0x00	; 0
    5186:	4a e7       	ldi	r20, 0x7A	; 122
    5188:	55 e4       	ldi	r21, 0x45	; 69
    518a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    518e:	dc 01       	movw	r26, r24
    5190:	cb 01       	movw	r24, r22
    5192:	8f 83       	std	Y+7, r24	; 0x07
    5194:	98 87       	std	Y+8, r25	; 0x08
    5196:	a9 87       	std	Y+9, r26	; 0x09
    5198:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    519a:	6f 81       	ldd	r22, Y+7	; 0x07
    519c:	78 85       	ldd	r23, Y+8	; 0x08
    519e:	89 85       	ldd	r24, Y+9	; 0x09
    51a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    51a2:	20 e0       	ldi	r18, 0x00	; 0
    51a4:	30 e0       	ldi	r19, 0x00	; 0
    51a6:	40 e8       	ldi	r20, 0x80	; 128
    51a8:	5f e3       	ldi	r21, 0x3F	; 63
    51aa:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    51ae:	88 23       	and	r24, r24
    51b0:	2c f4       	brge	.+10     	; 0x51bc <LCD_vidWriteExtraChar+0xaa>
		__ticks = 1;
    51b2:	81 e0       	ldi	r24, 0x01	; 1
    51b4:	90 e0       	ldi	r25, 0x00	; 0
    51b6:	9e 83       	std	Y+6, r25	; 0x06
    51b8:	8d 83       	std	Y+5, r24	; 0x05
    51ba:	3f c0       	rjmp	.+126    	; 0x523a <LCD_vidWriteExtraChar+0x128>
	else if (__tmp > 65535)
    51bc:	6f 81       	ldd	r22, Y+7	; 0x07
    51be:	78 85       	ldd	r23, Y+8	; 0x08
    51c0:	89 85       	ldd	r24, Y+9	; 0x09
    51c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    51c4:	20 e0       	ldi	r18, 0x00	; 0
    51c6:	3f ef       	ldi	r19, 0xFF	; 255
    51c8:	4f e7       	ldi	r20, 0x7F	; 127
    51ca:	57 e4       	ldi	r21, 0x47	; 71
    51cc:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    51d0:	18 16       	cp	r1, r24
    51d2:	4c f5       	brge	.+82     	; 0x5226 <LCD_vidWriteExtraChar+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    51d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    51d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    51da:	9e 85       	ldd	r25, Y+14	; 0x0e
    51dc:	20 e0       	ldi	r18, 0x00	; 0
    51de:	30 e0       	ldi	r19, 0x00	; 0
    51e0:	40 e2       	ldi	r20, 0x20	; 32
    51e2:	51 e4       	ldi	r21, 0x41	; 65
    51e4:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    51e8:	dc 01       	movw	r26, r24
    51ea:	cb 01       	movw	r24, r22
    51ec:	bc 01       	movw	r22, r24
    51ee:	cd 01       	movw	r24, r26
    51f0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    51f4:	dc 01       	movw	r26, r24
    51f6:	cb 01       	movw	r24, r22
    51f8:	9e 83       	std	Y+6, r25	; 0x06
    51fa:	8d 83       	std	Y+5, r24	; 0x05
    51fc:	0f c0       	rjmp	.+30     	; 0x521c <LCD_vidWriteExtraChar+0x10a>
    51fe:	80 e9       	ldi	r24, 0x90	; 144
    5200:	91 e0       	ldi	r25, 0x01	; 1
    5202:	9c 83       	std	Y+4, r25	; 0x04
    5204:	8b 83       	std	Y+3, r24	; 0x03
    5206:	8b 81       	ldd	r24, Y+3	; 0x03
    5208:	9c 81       	ldd	r25, Y+4	; 0x04
    520a:	01 97       	sbiw	r24, 0x01	; 1
    520c:	f1 f7       	brne	.-4      	; 0x520a <LCD_vidWriteExtraChar+0xf8>
    520e:	9c 83       	std	Y+4, r25	; 0x04
    5210:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5212:	8d 81       	ldd	r24, Y+5	; 0x05
    5214:	9e 81       	ldd	r25, Y+6	; 0x06
    5216:	01 97       	sbiw	r24, 0x01	; 1
    5218:	9e 83       	std	Y+6, r25	; 0x06
    521a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    521c:	8d 81       	ldd	r24, Y+5	; 0x05
    521e:	9e 81       	ldd	r25, Y+6	; 0x06
    5220:	00 97       	sbiw	r24, 0x00	; 0
    5222:	69 f7       	brne	.-38     	; 0x51fe <LCD_vidWriteExtraChar+0xec>
    5224:	14 c0       	rjmp	.+40     	; 0x524e <LCD_vidWriteExtraChar+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5226:	6f 81       	ldd	r22, Y+7	; 0x07
    5228:	78 85       	ldd	r23, Y+8	; 0x08
    522a:	89 85       	ldd	r24, Y+9	; 0x09
    522c:	9a 85       	ldd	r25, Y+10	; 0x0a
    522e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5232:	dc 01       	movw	r26, r24
    5234:	cb 01       	movw	r24, r22
    5236:	9e 83       	std	Y+6, r25	; 0x06
    5238:	8d 83       	std	Y+5, r24	; 0x05
    523a:	8d 81       	ldd	r24, Y+5	; 0x05
    523c:	9e 81       	ldd	r25, Y+6	; 0x06
    523e:	9a 83       	std	Y+2, r25	; 0x02
    5240:	89 83       	std	Y+1, r24	; 0x01
    5242:	89 81       	ldd	r24, Y+1	; 0x01
    5244:	9a 81       	ldd	r25, Y+2	; 0x02
    5246:	01 97       	sbiw	r24, 0x01	; 1
    5248:	f1 f7       	brne	.-4      	; 0x5246 <LCD_vidWriteExtraChar+0x134>
    524a:	9a 83       	std	Y+2, r25	; 0x02
    524c:	89 83       	std	Y+1, r24	; 0x01
	}
	/*CGRAM-->DDRAM*/
	LCD_vidSendCommand(128);
	Gotoxy(Y,X);
	/*First eight character which saved at CGRAM*/
	for (iteration2=0; iteration2<=7 ; iteration2++)
    524e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5250:	8f 5f       	subi	r24, 0xFF	; 255
    5252:	8f 87       	std	Y+15, r24	; 0x0f
    5254:	8f 85       	ldd	r24, Y+15	; 0x0f
    5256:	88 30       	cpi	r24, 0x08	; 8
    5258:	08 f4       	brcc	.+2      	; 0x525c <LCD_vidWriteExtraChar+0x14a>
    525a:	84 cf       	rjmp	.-248    	; 0x5164 <LCD_vidWriteExtraChar+0x52>
		/* Write bytes of DDRAM */
		LCD_vidWriteCharctr(iteration2);

		_delay_ms(5);
	}
}
    525c:	62 96       	adiw	r28, 0x12	; 18
    525e:	0f b6       	in	r0, 0x3f	; 63
    5260:	f8 94       	cli
    5262:	de bf       	out	0x3e, r29	; 62
    5264:	0f be       	out	0x3f, r0	; 63
    5266:	cd bf       	out	0x3d, r28	; 61
    5268:	cf 91       	pop	r28
    526a:	df 91       	pop	r29
    526c:	08 95       	ret

0000526e <Lcd_Init>:
static void Lcd_SendData(u8 data);
#if LCD_MODE == LCD_MODE_4_BIT
static void Lcd_Enter_4Bit_Mode(void);
#endif

void Lcd_Init(const Lcd_DisplayControlType* control) {
    526e:	df 93       	push	r29
    5270:	cf 93       	push	r28
    5272:	00 d0       	rcall	.+0      	; 0x5274 <Lcd_Init+0x6>
    5274:	cd b7       	in	r28, 0x3d	; 61
    5276:	de b7       	in	r29, 0x3e	; 62
    5278:	9a 83       	std	Y+2, r25	; 0x02
    527a:	89 83       	std	Y+1, r24	; 0x01
#if LCD_MODE == LCD_MODE_4_BIT
    Lcd_Enter_4Bit_Mode();
#endif

    Lcd_ControlDisplay(control);
    527c:	89 81       	ldd	r24, Y+1	; 0x01
    527e:	9a 81       	ldd	r25, Y+2	; 0x02
    5280:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <Lcd_ControlDisplay>

   /* Display Clear */
   Lcd_SendCommand(0b00000001);
    5284:	81 e0       	ldi	r24, 0x01	; 1
    5286:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <Lcd_SendCommand>
}
    528a:	0f 90       	pop	r0
    528c:	0f 90       	pop	r0
    528e:	cf 91       	pop	r28
    5290:	df 91       	pop	r29
    5292:	08 95       	ret

00005294 <Lcd_DisplayCharcter>:


void Lcd_DisplayCharcter(char data) {
    5294:	df 93       	push	r29
    5296:	cf 93       	push	r28
    5298:	0f 92       	push	r0
    529a:	cd b7       	in	r28, 0x3d	; 61
    529c:	de b7       	in	r29, 0x3e	; 62
    529e:	89 83       	std	Y+1, r24	; 0x01
    Lcd_SendData(data);
    52a0:	89 81       	ldd	r24, Y+1	; 0x01
    52a2:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <Lcd_SendData>
}
    52a6:	0f 90       	pop	r0
    52a8:	cf 91       	pop	r28
    52aa:	df 91       	pop	r29
    52ac:	08 95       	ret

000052ae <Lcd_DisplayString>:

void Lcd_DisplayString(const char* str) {
    52ae:	df 93       	push	r29
    52b0:	cf 93       	push	r28
    52b2:	00 d0       	rcall	.+0      	; 0x52b4 <Lcd_DisplayString+0x6>
    52b4:	00 d0       	rcall	.+0      	; 0x52b6 <Lcd_DisplayString+0x8>
    52b6:	cd b7       	in	r28, 0x3d	; 61
    52b8:	de b7       	in	r29, 0x3e	; 62
    52ba:	9c 83       	std	Y+4, r25	; 0x04
    52bc:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0;
    52be:	1a 82       	std	Y+2, r1	; 0x02
    52c0:	19 82       	std	Y+1, r1	; 0x01
    52c2:	0f c0       	rjmp	.+30     	; 0x52e2 <Lcd_DisplayString+0x34>
    while (str[i] != '\0') {
        Lcd_SendData(str[i]);
    52c4:	29 81       	ldd	r18, Y+1	; 0x01
    52c6:	3a 81       	ldd	r19, Y+2	; 0x02
    52c8:	8b 81       	ldd	r24, Y+3	; 0x03
    52ca:	9c 81       	ldd	r25, Y+4	; 0x04
    52cc:	fc 01       	movw	r30, r24
    52ce:	e2 0f       	add	r30, r18
    52d0:	f3 1f       	adc	r31, r19
    52d2:	80 81       	ld	r24, Z
    52d4:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <Lcd_SendData>
        i++;
    52d8:	89 81       	ldd	r24, Y+1	; 0x01
    52da:	9a 81       	ldd	r25, Y+2	; 0x02
    52dc:	01 96       	adiw	r24, 0x01	; 1
    52de:	9a 83       	std	Y+2, r25	; 0x02
    52e0:	89 83       	std	Y+1, r24	; 0x01
    Lcd_SendData(data);
}

void Lcd_DisplayString(const char* str) {
	int i = 0;
    while (str[i] != '\0') {
    52e2:	29 81       	ldd	r18, Y+1	; 0x01
    52e4:	3a 81       	ldd	r19, Y+2	; 0x02
    52e6:	8b 81       	ldd	r24, Y+3	; 0x03
    52e8:	9c 81       	ldd	r25, Y+4	; 0x04
    52ea:	fc 01       	movw	r30, r24
    52ec:	e2 0f       	add	r30, r18
    52ee:	f3 1f       	adc	r31, r19
    52f0:	80 81       	ld	r24, Z
    52f2:	88 23       	and	r24, r24
    52f4:	39 f7       	brne	.-50     	; 0x52c4 <Lcd_DisplayString+0x16>
        Lcd_SendData(str[i]);
        i++;
    }
}
    52f6:	0f 90       	pop	r0
    52f8:	0f 90       	pop	r0
    52fa:	0f 90       	pop	r0
    52fc:	0f 90       	pop	r0
    52fe:	cf 91       	pop	r28
    5300:	df 91       	pop	r29
    5302:	08 95       	ret

00005304 <Lcd_DisplayNumber>:

void Lcd_DisplayNumber(s32 number) {
    5304:	af 92       	push	r10
    5306:	bf 92       	push	r11
    5308:	cf 92       	push	r12
    530a:	df 92       	push	r13
    530c:	ef 92       	push	r14
    530e:	ff 92       	push	r15
    5310:	0f 93       	push	r16
    5312:	1f 93       	push	r17
    5314:	df 93       	push	r29
    5316:	cf 93       	push	r28
    5318:	cd b7       	in	r28, 0x3d	; 61
    531a:	de b7       	in	r29, 0x3e	; 62
    531c:	c3 56       	subi	r28, 0x63	; 99
    531e:	d0 40       	sbci	r29, 0x00	; 0
    5320:	0f b6       	in	r0, 0x3f	; 63
    5322:	f8 94       	cli
    5324:	de bf       	out	0x3e, r29	; 62
    5326:	0f be       	out	0x3f, r0	; 63
    5328:	cd bf       	out	0x3d, r28	; 61
    532a:	6a 87       	std	Y+10, r22	; 0x0a
    532c:	7b 87       	std	Y+11, r23	; 0x0b
    532e:	8c 87       	std	Y+12, r24	; 0x0c
    5330:	9d 87       	std	Y+13, r25	; 0x0d
    u64 reversed = 0;
    5332:	1a 82       	std	Y+2, r1	; 0x02
    5334:	1b 82       	std	Y+3, r1	; 0x03
    5336:	1c 82       	std	Y+4, r1	; 0x04
    5338:	1d 82       	std	Y+5, r1	; 0x05
    533a:	1e 82       	std	Y+6, r1	; 0x06
    533c:	1f 82       	std	Y+7, r1	; 0x07
    533e:	18 86       	std	Y+8, r1	; 0x08
    5340:	19 86       	std	Y+9, r1	; 0x09
    u8 digitsCounter = 0;
    5342:	19 82       	std	Y+1, r1	; 0x01
    if (number < 0) {
    5344:	8a 85       	ldd	r24, Y+10	; 0x0a
    5346:	9b 85       	ldd	r25, Y+11	; 0x0b
    5348:	ac 85       	ldd	r26, Y+12	; 0x0c
    534a:	bd 85       	ldd	r27, Y+13	; 0x0d
    534c:	bb 23       	and	r27, r27
    534e:	94 f4       	brge	.+36     	; 0x5374 <Lcd_DisplayNumber+0x70>
        number = number * -1;
    5350:	8a 85       	ldd	r24, Y+10	; 0x0a
    5352:	9b 85       	ldd	r25, Y+11	; 0x0b
    5354:	ac 85       	ldd	r26, Y+12	; 0x0c
    5356:	bd 85       	ldd	r27, Y+13	; 0x0d
    5358:	b0 95       	com	r27
    535a:	a0 95       	com	r26
    535c:	90 95       	com	r25
    535e:	81 95       	neg	r24
    5360:	9f 4f       	sbci	r25, 0xFF	; 255
    5362:	af 4f       	sbci	r26, 0xFF	; 255
    5364:	bf 4f       	sbci	r27, 0xFF	; 255
    5366:	8a 87       	std	Y+10, r24	; 0x0a
    5368:	9b 87       	std	Y+11, r25	; 0x0b
    536a:	ac 87       	std	Y+12, r26	; 0x0c
    536c:	bd 87       	std	Y+13, r27	; 0x0d
        Lcd_SendData('-');
    536e:	8d e2       	ldi	r24, 0x2D	; 45
    5370:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <Lcd_SendData>
    }
    do {
        reversed = (reversed*10) + (number%10);
    5374:	2a 81       	ldd	r18, Y+2	; 0x02
    5376:	3b 81       	ldd	r19, Y+3	; 0x03
    5378:	4c 81       	ldd	r20, Y+4	; 0x04
    537a:	5d 81       	ldd	r21, Y+5	; 0x05
    537c:	6e 81       	ldd	r22, Y+6	; 0x06
    537e:	7f 81       	ldd	r23, Y+7	; 0x07
    5380:	88 85       	ldd	r24, Y+8	; 0x08
    5382:	99 85       	ldd	r25, Y+9	; 0x09
    5384:	a2 2e       	mov	r10, r18
    5386:	b3 2e       	mov	r11, r19
    5388:	c4 2e       	mov	r12, r20
    538a:	d5 2e       	mov	r13, r21
    538c:	e6 2e       	mov	r14, r22
    538e:	f7 2e       	mov	r15, r23
    5390:	08 2f       	mov	r16, r24
    5392:	19 2f       	mov	r17, r25
    5394:	2a 2d       	mov	r18, r10
    5396:	3b 2d       	mov	r19, r11
    5398:	4c 2d       	mov	r20, r12
    539a:	5d 2d       	mov	r21, r13
    539c:	6e 2d       	mov	r22, r14
    539e:	7f 2d       	mov	r23, r15
    53a0:	80 2f       	mov	r24, r16
    53a2:	91 2f       	mov	r25, r17
    53a4:	01 e0       	ldi	r16, 0x01	; 1
    53a6:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    53aa:	2e 8f       	std	Y+30, r18	; 0x1e
    53ac:	3f 8f       	std	Y+31, r19	; 0x1f
    53ae:	48 a3       	std	Y+32, r20	; 0x20
    53b0:	59 a3       	std	Y+33, r21	; 0x21
    53b2:	6a a3       	std	Y+34, r22	; 0x22
    53b4:	7b a3       	std	Y+35, r23	; 0x23
    53b6:	8c a3       	std	Y+36, r24	; 0x24
    53b8:	9d a3       	std	Y+37, r25	; 0x25
    53ba:	2e 8d       	ldd	r18, Y+30	; 0x1e
    53bc:	3f 8d       	ldd	r19, Y+31	; 0x1f
    53be:	48 a1       	ldd	r20, Y+32	; 0x20
    53c0:	59 a1       	ldd	r21, Y+33	; 0x21
    53c2:	6a a1       	ldd	r22, Y+34	; 0x22
    53c4:	7b a1       	ldd	r23, Y+35	; 0x23
    53c6:	8c a1       	ldd	r24, Y+36	; 0x24
    53c8:	9d a1       	ldd	r25, Y+37	; 0x25
    53ca:	02 e0       	ldi	r16, 0x02	; 2
    53cc:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    53d0:	2e a3       	std	Y+38, r18	; 0x26
    53d2:	3f a3       	std	Y+39, r19	; 0x27
    53d4:	48 a7       	std	Y+40, r20	; 0x28
    53d6:	59 a7       	std	Y+41, r21	; 0x29
    53d8:	6a a7       	std	Y+42, r22	; 0x2a
    53da:	7b a7       	std	Y+43, r23	; 0x2b
    53dc:	8c a7       	std	Y+44, r24	; 0x2c
    53de:	9d a7       	std	Y+45, r25	; 0x2d
    53e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    53e2:	9e a1       	ldd	r25, Y+38	; 0x26
    53e4:	89 0f       	add	r24, r25
    53e6:	8e a7       	std	Y+46, r24	; 0x2e
    53e8:	81 e0       	ldi	r24, 0x01	; 1
    53ea:	8e ab       	std	Y+54, r24	; 0x36
    53ec:	9e a5       	ldd	r25, Y+46	; 0x2e
    53ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    53f0:	98 17       	cp	r25, r24
    53f2:	08 f0       	brcs	.+2      	; 0x53f6 <Lcd_DisplayNumber+0xf2>
    53f4:	1e aa       	std	Y+54, r1	; 0x36
    53f6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    53f8:	8f a1       	ldd	r24, Y+39	; 0x27
    53fa:	98 0f       	add	r25, r24
    53fc:	9f a7       	std	Y+47, r25	; 0x2f
    53fe:	91 e0       	ldi	r25, 0x01	; 1
    5400:	9f ab       	std	Y+55, r25	; 0x37
    5402:	8f a5       	ldd	r24, Y+47	; 0x2f
    5404:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5406:	89 17       	cp	r24, r25
    5408:	08 f0       	brcs	.+2      	; 0x540c <Lcd_DisplayNumber+0x108>
    540a:	1f aa       	std	Y+55, r1	; 0x37
    540c:	8e a9       	ldd	r24, Y+54	; 0x36
    540e:	9f a5       	ldd	r25, Y+47	; 0x2f
    5410:	89 0f       	add	r24, r25
    5412:	88 af       	std	Y+56, r24	; 0x38
    5414:	81 e0       	ldi	r24, 0x01	; 1
    5416:	89 af       	std	Y+57, r24	; 0x39
    5418:	98 ad       	ldd	r25, Y+56	; 0x38
    541a:	8f a5       	ldd	r24, Y+47	; 0x2f
    541c:	98 17       	cp	r25, r24
    541e:	08 f0       	brcs	.+2      	; 0x5422 <Lcd_DisplayNumber+0x11e>
    5420:	19 ae       	std	Y+57, r1	; 0x39
    5422:	9f a9       	ldd	r25, Y+55	; 0x37
    5424:	89 ad       	ldd	r24, Y+57	; 0x39
    5426:	98 2b       	or	r25, r24
    5428:	9f ab       	std	Y+55, r25	; 0x37
    542a:	98 ad       	ldd	r25, Y+56	; 0x38
    542c:	9f a7       	std	Y+47, r25	; 0x2f
    542e:	88 a1       	ldd	r24, Y+32	; 0x20
    5430:	98 a5       	ldd	r25, Y+40	; 0x28
    5432:	89 0f       	add	r24, r25
    5434:	88 ab       	std	Y+48, r24	; 0x30
    5436:	81 e0       	ldi	r24, 0x01	; 1
    5438:	8a af       	std	Y+58, r24	; 0x3a
    543a:	98 a9       	ldd	r25, Y+48	; 0x30
    543c:	88 a1       	ldd	r24, Y+32	; 0x20
    543e:	98 17       	cp	r25, r24
    5440:	08 f0       	brcs	.+2      	; 0x5444 <Lcd_DisplayNumber+0x140>
    5442:	1a ae       	std	Y+58, r1	; 0x3a
    5444:	9f a9       	ldd	r25, Y+55	; 0x37
    5446:	88 a9       	ldd	r24, Y+48	; 0x30
    5448:	98 0f       	add	r25, r24
    544a:	9b af       	std	Y+59, r25	; 0x3b
    544c:	91 e0       	ldi	r25, 0x01	; 1
    544e:	9c af       	std	Y+60, r25	; 0x3c
    5450:	8b ad       	ldd	r24, Y+59	; 0x3b
    5452:	98 a9       	ldd	r25, Y+48	; 0x30
    5454:	89 17       	cp	r24, r25
    5456:	08 f0       	brcs	.+2      	; 0x545a <Lcd_DisplayNumber+0x156>
    5458:	1c ae       	std	Y+60, r1	; 0x3c
    545a:	8a ad       	ldd	r24, Y+58	; 0x3a
    545c:	9c ad       	ldd	r25, Y+60	; 0x3c
    545e:	89 2b       	or	r24, r25
    5460:	8a af       	std	Y+58, r24	; 0x3a
    5462:	8b ad       	ldd	r24, Y+59	; 0x3b
    5464:	88 ab       	std	Y+48, r24	; 0x30
    5466:	99 a1       	ldd	r25, Y+33	; 0x21
    5468:	89 a5       	ldd	r24, Y+41	; 0x29
    546a:	98 0f       	add	r25, r24
    546c:	99 ab       	std	Y+49, r25	; 0x31
    546e:	91 e0       	ldi	r25, 0x01	; 1
    5470:	9d af       	std	Y+61, r25	; 0x3d
    5472:	89 a9       	ldd	r24, Y+49	; 0x31
    5474:	99 a1       	ldd	r25, Y+33	; 0x21
    5476:	89 17       	cp	r24, r25
    5478:	08 f0       	brcs	.+2      	; 0x547c <Lcd_DisplayNumber+0x178>
    547a:	1d ae       	std	Y+61, r1	; 0x3d
    547c:	8a ad       	ldd	r24, Y+58	; 0x3a
    547e:	99 a9       	ldd	r25, Y+49	; 0x31
    5480:	89 0f       	add	r24, r25
    5482:	8e af       	std	Y+62, r24	; 0x3e
    5484:	81 e0       	ldi	r24, 0x01	; 1
    5486:	8f af       	std	Y+63, r24	; 0x3f
    5488:	9e ad       	ldd	r25, Y+62	; 0x3e
    548a:	89 a9       	ldd	r24, Y+49	; 0x31
    548c:	98 17       	cp	r25, r24
    548e:	08 f0       	brcs	.+2      	; 0x5492 <Lcd_DisplayNumber+0x18e>
    5490:	1f ae       	std	Y+63, r1	; 0x3f
    5492:	9d ad       	ldd	r25, Y+61	; 0x3d
    5494:	8f ad       	ldd	r24, Y+63	; 0x3f
    5496:	98 2b       	or	r25, r24
    5498:	9d af       	std	Y+61, r25	; 0x3d
    549a:	9e ad       	ldd	r25, Y+62	; 0x3e
    549c:	99 ab       	std	Y+49, r25	; 0x31
    549e:	8a a1       	ldd	r24, Y+34	; 0x22
    54a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    54a2:	89 0f       	add	r24, r25
    54a4:	8a ab       	std	Y+50, r24	; 0x32
    54a6:	81 e0       	ldi	r24, 0x01	; 1
    54a8:	21 96       	adiw	r28, 0x01	; 1
    54aa:	8f af       	std	Y+63, r24	; 0x3f
    54ac:	21 97       	sbiw	r28, 0x01	; 1
    54ae:	9a a9       	ldd	r25, Y+50	; 0x32
    54b0:	8a a1       	ldd	r24, Y+34	; 0x22
    54b2:	98 17       	cp	r25, r24
    54b4:	18 f0       	brcs	.+6      	; 0x54bc <Lcd_DisplayNumber+0x1b8>
    54b6:	21 96       	adiw	r28, 0x01	; 1
    54b8:	1f ae       	std	Y+63, r1	; 0x3f
    54ba:	21 97       	sbiw	r28, 0x01	; 1
    54bc:	9d ad       	ldd	r25, Y+61	; 0x3d
    54be:	8a a9       	ldd	r24, Y+50	; 0x32
    54c0:	98 0f       	add	r25, r24
    54c2:	22 96       	adiw	r28, 0x02	; 2
    54c4:	9f af       	std	Y+63, r25	; 0x3f
    54c6:	22 97       	sbiw	r28, 0x02	; 2
    54c8:	91 e0       	ldi	r25, 0x01	; 1
    54ca:	23 96       	adiw	r28, 0x03	; 3
    54cc:	9f af       	std	Y+63, r25	; 0x3f
    54ce:	23 97       	sbiw	r28, 0x03	; 3
    54d0:	22 96       	adiw	r28, 0x02	; 2
    54d2:	8f ad       	ldd	r24, Y+63	; 0x3f
    54d4:	22 97       	sbiw	r28, 0x02	; 2
    54d6:	9a a9       	ldd	r25, Y+50	; 0x32
    54d8:	89 17       	cp	r24, r25
    54da:	18 f0       	brcs	.+6      	; 0x54e2 <Lcd_DisplayNumber+0x1de>
    54dc:	23 96       	adiw	r28, 0x03	; 3
    54de:	1f ae       	std	Y+63, r1	; 0x3f
    54e0:	23 97       	sbiw	r28, 0x03	; 3
    54e2:	21 96       	adiw	r28, 0x01	; 1
    54e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    54e6:	21 97       	sbiw	r28, 0x01	; 1
    54e8:	23 96       	adiw	r28, 0x03	; 3
    54ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    54ec:	23 97       	sbiw	r28, 0x03	; 3
    54ee:	89 2b       	or	r24, r25
    54f0:	21 96       	adiw	r28, 0x01	; 1
    54f2:	8f af       	std	Y+63, r24	; 0x3f
    54f4:	21 97       	sbiw	r28, 0x01	; 1
    54f6:	22 96       	adiw	r28, 0x02	; 2
    54f8:	8f ad       	ldd	r24, Y+63	; 0x3f
    54fa:	22 97       	sbiw	r28, 0x02	; 2
    54fc:	8a ab       	std	Y+50, r24	; 0x32
    54fe:	9b a1       	ldd	r25, Y+35	; 0x23
    5500:	8b a5       	ldd	r24, Y+43	; 0x2b
    5502:	98 0f       	add	r25, r24
    5504:	9b ab       	std	Y+51, r25	; 0x33
    5506:	91 e0       	ldi	r25, 0x01	; 1
    5508:	24 96       	adiw	r28, 0x04	; 4
    550a:	9f af       	std	Y+63, r25	; 0x3f
    550c:	24 97       	sbiw	r28, 0x04	; 4
    550e:	8b a9       	ldd	r24, Y+51	; 0x33
    5510:	9b a1       	ldd	r25, Y+35	; 0x23
    5512:	89 17       	cp	r24, r25
    5514:	18 f0       	brcs	.+6      	; 0x551c <Lcd_DisplayNumber+0x218>
    5516:	24 96       	adiw	r28, 0x04	; 4
    5518:	1f ae       	std	Y+63, r1	; 0x3f
    551a:	24 97       	sbiw	r28, 0x04	; 4
    551c:	21 96       	adiw	r28, 0x01	; 1
    551e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5520:	21 97       	sbiw	r28, 0x01	; 1
    5522:	9b a9       	ldd	r25, Y+51	; 0x33
    5524:	89 0f       	add	r24, r25
    5526:	25 96       	adiw	r28, 0x05	; 5
    5528:	8f af       	std	Y+63, r24	; 0x3f
    552a:	25 97       	sbiw	r28, 0x05	; 5
    552c:	81 e0       	ldi	r24, 0x01	; 1
    552e:	26 96       	adiw	r28, 0x06	; 6
    5530:	8f af       	std	Y+63, r24	; 0x3f
    5532:	26 97       	sbiw	r28, 0x06	; 6
    5534:	25 96       	adiw	r28, 0x05	; 5
    5536:	9f ad       	ldd	r25, Y+63	; 0x3f
    5538:	25 97       	sbiw	r28, 0x05	; 5
    553a:	8b a9       	ldd	r24, Y+51	; 0x33
    553c:	98 17       	cp	r25, r24
    553e:	18 f0       	brcs	.+6      	; 0x5546 <Lcd_DisplayNumber+0x242>
    5540:	26 96       	adiw	r28, 0x06	; 6
    5542:	1f ae       	std	Y+63, r1	; 0x3f
    5544:	26 97       	sbiw	r28, 0x06	; 6
    5546:	24 96       	adiw	r28, 0x04	; 4
    5548:	9f ad       	ldd	r25, Y+63	; 0x3f
    554a:	24 97       	sbiw	r28, 0x04	; 4
    554c:	26 96       	adiw	r28, 0x06	; 6
    554e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5550:	26 97       	sbiw	r28, 0x06	; 6
    5552:	98 2b       	or	r25, r24
    5554:	24 96       	adiw	r28, 0x04	; 4
    5556:	9f af       	std	Y+63, r25	; 0x3f
    5558:	24 97       	sbiw	r28, 0x04	; 4
    555a:	25 96       	adiw	r28, 0x05	; 5
    555c:	9f ad       	ldd	r25, Y+63	; 0x3f
    555e:	25 97       	sbiw	r28, 0x05	; 5
    5560:	9b ab       	std	Y+51, r25	; 0x33
    5562:	8c a1       	ldd	r24, Y+36	; 0x24
    5564:	9c a5       	ldd	r25, Y+44	; 0x2c
    5566:	89 0f       	add	r24, r25
    5568:	8c ab       	std	Y+52, r24	; 0x34
    556a:	81 e0       	ldi	r24, 0x01	; 1
    556c:	27 96       	adiw	r28, 0x07	; 7
    556e:	8f af       	std	Y+63, r24	; 0x3f
    5570:	27 97       	sbiw	r28, 0x07	; 7
    5572:	9c a9       	ldd	r25, Y+52	; 0x34
    5574:	8c a1       	ldd	r24, Y+36	; 0x24
    5576:	98 17       	cp	r25, r24
    5578:	18 f0       	brcs	.+6      	; 0x5580 <Lcd_DisplayNumber+0x27c>
    557a:	27 96       	adiw	r28, 0x07	; 7
    557c:	1f ae       	std	Y+63, r1	; 0x3f
    557e:	27 97       	sbiw	r28, 0x07	; 7
    5580:	24 96       	adiw	r28, 0x04	; 4
    5582:	9f ad       	ldd	r25, Y+63	; 0x3f
    5584:	24 97       	sbiw	r28, 0x04	; 4
    5586:	8c a9       	ldd	r24, Y+52	; 0x34
    5588:	98 0f       	add	r25, r24
    558a:	28 96       	adiw	r28, 0x08	; 8
    558c:	9f af       	std	Y+63, r25	; 0x3f
    558e:	28 97       	sbiw	r28, 0x08	; 8
    5590:	91 e0       	ldi	r25, 0x01	; 1
    5592:	29 96       	adiw	r28, 0x09	; 9
    5594:	9f af       	std	Y+63, r25	; 0x3f
    5596:	29 97       	sbiw	r28, 0x09	; 9
    5598:	28 96       	adiw	r28, 0x08	; 8
    559a:	8f ad       	ldd	r24, Y+63	; 0x3f
    559c:	28 97       	sbiw	r28, 0x08	; 8
    559e:	9c a9       	ldd	r25, Y+52	; 0x34
    55a0:	89 17       	cp	r24, r25
    55a2:	18 f0       	brcs	.+6      	; 0x55aa <Lcd_DisplayNumber+0x2a6>
    55a4:	29 96       	adiw	r28, 0x09	; 9
    55a6:	1f ae       	std	Y+63, r1	; 0x3f
    55a8:	29 97       	sbiw	r28, 0x09	; 9
    55aa:	27 96       	adiw	r28, 0x07	; 7
    55ac:	8f ad       	ldd	r24, Y+63	; 0x3f
    55ae:	27 97       	sbiw	r28, 0x07	; 7
    55b0:	29 96       	adiw	r28, 0x09	; 9
    55b2:	9f ad       	ldd	r25, Y+63	; 0x3f
    55b4:	29 97       	sbiw	r28, 0x09	; 9
    55b6:	89 2b       	or	r24, r25
    55b8:	27 96       	adiw	r28, 0x07	; 7
    55ba:	8f af       	std	Y+63, r24	; 0x3f
    55bc:	27 97       	sbiw	r28, 0x07	; 7
    55be:	28 96       	adiw	r28, 0x08	; 8
    55c0:	8f ad       	ldd	r24, Y+63	; 0x3f
    55c2:	28 97       	sbiw	r28, 0x08	; 8
    55c4:	8c ab       	std	Y+52, r24	; 0x34
    55c6:	9d a1       	ldd	r25, Y+37	; 0x25
    55c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    55ca:	98 0f       	add	r25, r24
    55cc:	9d ab       	std	Y+53, r25	; 0x35
    55ce:	27 96       	adiw	r28, 0x07	; 7
    55d0:	8f ad       	ldd	r24, Y+63	; 0x3f
    55d2:	27 97       	sbiw	r28, 0x07	; 7
    55d4:	9d a9       	ldd	r25, Y+53	; 0x35
    55d6:	89 0f       	add	r24, r25
    55d8:	8d ab       	std	Y+53, r24	; 0x35
    55da:	8e a5       	ldd	r24, Y+46	; 0x2e
    55dc:	8e 8b       	std	Y+22, r24	; 0x16
    55de:	9f a5       	ldd	r25, Y+47	; 0x2f
    55e0:	9f 8b       	std	Y+23, r25	; 0x17
    55e2:	88 a9       	ldd	r24, Y+48	; 0x30
    55e4:	88 8f       	std	Y+24, r24	; 0x18
    55e6:	99 a9       	ldd	r25, Y+49	; 0x31
    55e8:	99 8f       	std	Y+25, r25	; 0x19
    55ea:	8a a9       	ldd	r24, Y+50	; 0x32
    55ec:	8a 8f       	std	Y+26, r24	; 0x1a
    55ee:	9b a9       	ldd	r25, Y+51	; 0x33
    55f0:	9b 8f       	std	Y+27, r25	; 0x1b
    55f2:	8c a9       	ldd	r24, Y+52	; 0x34
    55f4:	8c 8f       	std	Y+28, r24	; 0x1c
    55f6:	9d a9       	ldd	r25, Y+53	; 0x35
    55f8:	9d 8f       	std	Y+29, r25	; 0x1d
    55fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    55fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    55fe:	ac 85       	ldd	r26, Y+12	; 0x0c
    5600:	bd 85       	ldd	r27, Y+13	; 0x0d
    5602:	2a e0       	ldi	r18, 0x0A	; 10
    5604:	30 e0       	ldi	r19, 0x00	; 0
    5606:	40 e0       	ldi	r20, 0x00	; 0
    5608:	50 e0       	ldi	r21, 0x00	; 0
    560a:	bc 01       	movw	r22, r24
    560c:	cd 01       	movw	r24, r26
    560e:	0e 94 50 32 	call	0x64a0	; 0x64a0 <__divmodsi4>
    5612:	dc 01       	movw	r26, r24
    5614:	cb 01       	movw	r24, r22
    5616:	9c 01       	movw	r18, r24
    5618:	ad 01       	movw	r20, r26
    561a:	da 01       	movw	r26, r20
    561c:	c9 01       	movw	r24, r18
    561e:	bb 0f       	add	r27, r27
    5620:	88 0b       	sbc	r24, r24
    5622:	98 2f       	mov	r25, r24
    5624:	dc 01       	movw	r26, r24
    5626:	2e 87       	std	Y+14, r18	; 0x0e
    5628:	3f 87       	std	Y+15, r19	; 0x0f
    562a:	48 8b       	std	Y+16, r20	; 0x10
    562c:	59 8b       	std	Y+17, r21	; 0x11
    562e:	8a 8b       	std	Y+18, r24	; 0x12
    5630:	8b 8b       	std	Y+19, r24	; 0x13
    5632:	8c 8b       	std	Y+20, r24	; 0x14
    5634:	8d 8b       	std	Y+21, r24	; 0x15
    5636:	8e 89       	ldd	r24, Y+22	; 0x16
    5638:	9e 85       	ldd	r25, Y+14	; 0x0e
    563a:	89 0f       	add	r24, r25
    563c:	2a 96       	adiw	r28, 0x0a	; 10
    563e:	8f af       	std	Y+63, r24	; 0x3f
    5640:	2a 97       	sbiw	r28, 0x0a	; 10
    5642:	81 e0       	ldi	r24, 0x01	; 1
    5644:	62 96       	adiw	r28, 0x12	; 18
    5646:	8f af       	std	Y+63, r24	; 0x3f
    5648:	62 97       	sbiw	r28, 0x12	; 18
    564a:	2a 96       	adiw	r28, 0x0a	; 10
    564c:	9f ad       	ldd	r25, Y+63	; 0x3f
    564e:	2a 97       	sbiw	r28, 0x0a	; 10
    5650:	8e 89       	ldd	r24, Y+22	; 0x16
    5652:	98 17       	cp	r25, r24
    5654:	18 f0       	brcs	.+6      	; 0x565c <Lcd_DisplayNumber+0x358>
    5656:	62 96       	adiw	r28, 0x12	; 18
    5658:	1f ae       	std	Y+63, r1	; 0x3f
    565a:	62 97       	sbiw	r28, 0x12	; 18
    565c:	9f 89       	ldd	r25, Y+23	; 0x17
    565e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5660:	98 0f       	add	r25, r24
    5662:	2b 96       	adiw	r28, 0x0b	; 11
    5664:	9f af       	std	Y+63, r25	; 0x3f
    5666:	2b 97       	sbiw	r28, 0x0b	; 11
    5668:	91 e0       	ldi	r25, 0x01	; 1
    566a:	63 96       	adiw	r28, 0x13	; 19
    566c:	9f af       	std	Y+63, r25	; 0x3f
    566e:	63 97       	sbiw	r28, 0x13	; 19
    5670:	2b 96       	adiw	r28, 0x0b	; 11
    5672:	8f ad       	ldd	r24, Y+63	; 0x3f
    5674:	2b 97       	sbiw	r28, 0x0b	; 11
    5676:	9f 89       	ldd	r25, Y+23	; 0x17
    5678:	89 17       	cp	r24, r25
    567a:	18 f0       	brcs	.+6      	; 0x5682 <Lcd_DisplayNumber+0x37e>
    567c:	63 96       	adiw	r28, 0x13	; 19
    567e:	1f ae       	std	Y+63, r1	; 0x3f
    5680:	63 97       	sbiw	r28, 0x13	; 19
    5682:	62 96       	adiw	r28, 0x12	; 18
    5684:	8f ad       	ldd	r24, Y+63	; 0x3f
    5686:	62 97       	sbiw	r28, 0x12	; 18
    5688:	2b 96       	adiw	r28, 0x0b	; 11
    568a:	9f ad       	ldd	r25, Y+63	; 0x3f
    568c:	2b 97       	sbiw	r28, 0x0b	; 11
    568e:	89 0f       	add	r24, r25
    5690:	64 96       	adiw	r28, 0x14	; 20
    5692:	8f af       	std	Y+63, r24	; 0x3f
    5694:	64 97       	sbiw	r28, 0x14	; 20
    5696:	81 e0       	ldi	r24, 0x01	; 1
    5698:	65 96       	adiw	r28, 0x15	; 21
    569a:	8f af       	std	Y+63, r24	; 0x3f
    569c:	65 97       	sbiw	r28, 0x15	; 21
    569e:	64 96       	adiw	r28, 0x14	; 20
    56a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    56a2:	64 97       	sbiw	r28, 0x14	; 20
    56a4:	2b 96       	adiw	r28, 0x0b	; 11
    56a6:	8f ad       	ldd	r24, Y+63	; 0x3f
    56a8:	2b 97       	sbiw	r28, 0x0b	; 11
    56aa:	98 17       	cp	r25, r24
    56ac:	18 f0       	brcs	.+6      	; 0x56b4 <Lcd_DisplayNumber+0x3b0>
    56ae:	65 96       	adiw	r28, 0x15	; 21
    56b0:	1f ae       	std	Y+63, r1	; 0x3f
    56b2:	65 97       	sbiw	r28, 0x15	; 21
    56b4:	63 96       	adiw	r28, 0x13	; 19
    56b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    56b8:	63 97       	sbiw	r28, 0x13	; 19
    56ba:	65 96       	adiw	r28, 0x15	; 21
    56bc:	8f ad       	ldd	r24, Y+63	; 0x3f
    56be:	65 97       	sbiw	r28, 0x15	; 21
    56c0:	98 2b       	or	r25, r24
    56c2:	63 96       	adiw	r28, 0x13	; 19
    56c4:	9f af       	std	Y+63, r25	; 0x3f
    56c6:	63 97       	sbiw	r28, 0x13	; 19
    56c8:	64 96       	adiw	r28, 0x14	; 20
    56ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    56cc:	64 97       	sbiw	r28, 0x14	; 20
    56ce:	2b 96       	adiw	r28, 0x0b	; 11
    56d0:	9f af       	std	Y+63, r25	; 0x3f
    56d2:	2b 97       	sbiw	r28, 0x0b	; 11
    56d4:	88 8d       	ldd	r24, Y+24	; 0x18
    56d6:	98 89       	ldd	r25, Y+16	; 0x10
    56d8:	89 0f       	add	r24, r25
    56da:	2c 96       	adiw	r28, 0x0c	; 12
    56dc:	8f af       	std	Y+63, r24	; 0x3f
    56de:	2c 97       	sbiw	r28, 0x0c	; 12
    56e0:	81 e0       	ldi	r24, 0x01	; 1
    56e2:	66 96       	adiw	r28, 0x16	; 22
    56e4:	8f af       	std	Y+63, r24	; 0x3f
    56e6:	66 97       	sbiw	r28, 0x16	; 22
    56e8:	2c 96       	adiw	r28, 0x0c	; 12
    56ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    56ec:	2c 97       	sbiw	r28, 0x0c	; 12
    56ee:	88 8d       	ldd	r24, Y+24	; 0x18
    56f0:	98 17       	cp	r25, r24
    56f2:	18 f0       	brcs	.+6      	; 0x56fa <Lcd_DisplayNumber+0x3f6>
    56f4:	66 96       	adiw	r28, 0x16	; 22
    56f6:	1f ae       	std	Y+63, r1	; 0x3f
    56f8:	66 97       	sbiw	r28, 0x16	; 22
    56fa:	63 96       	adiw	r28, 0x13	; 19
    56fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    56fe:	63 97       	sbiw	r28, 0x13	; 19
    5700:	2c 96       	adiw	r28, 0x0c	; 12
    5702:	8f ad       	ldd	r24, Y+63	; 0x3f
    5704:	2c 97       	sbiw	r28, 0x0c	; 12
    5706:	98 0f       	add	r25, r24
    5708:	67 96       	adiw	r28, 0x17	; 23
    570a:	9f af       	std	Y+63, r25	; 0x3f
    570c:	67 97       	sbiw	r28, 0x17	; 23
    570e:	91 e0       	ldi	r25, 0x01	; 1
    5710:	68 96       	adiw	r28, 0x18	; 24
    5712:	9f af       	std	Y+63, r25	; 0x3f
    5714:	68 97       	sbiw	r28, 0x18	; 24
    5716:	67 96       	adiw	r28, 0x17	; 23
    5718:	8f ad       	ldd	r24, Y+63	; 0x3f
    571a:	67 97       	sbiw	r28, 0x17	; 23
    571c:	2c 96       	adiw	r28, 0x0c	; 12
    571e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5720:	2c 97       	sbiw	r28, 0x0c	; 12
    5722:	89 17       	cp	r24, r25
    5724:	18 f0       	brcs	.+6      	; 0x572c <Lcd_DisplayNumber+0x428>
    5726:	68 96       	adiw	r28, 0x18	; 24
    5728:	1f ae       	std	Y+63, r1	; 0x3f
    572a:	68 97       	sbiw	r28, 0x18	; 24
    572c:	66 96       	adiw	r28, 0x16	; 22
    572e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5730:	66 97       	sbiw	r28, 0x16	; 22
    5732:	68 96       	adiw	r28, 0x18	; 24
    5734:	9f ad       	ldd	r25, Y+63	; 0x3f
    5736:	68 97       	sbiw	r28, 0x18	; 24
    5738:	89 2b       	or	r24, r25
    573a:	66 96       	adiw	r28, 0x16	; 22
    573c:	8f af       	std	Y+63, r24	; 0x3f
    573e:	66 97       	sbiw	r28, 0x16	; 22
    5740:	67 96       	adiw	r28, 0x17	; 23
    5742:	8f ad       	ldd	r24, Y+63	; 0x3f
    5744:	67 97       	sbiw	r28, 0x17	; 23
    5746:	2c 96       	adiw	r28, 0x0c	; 12
    5748:	8f af       	std	Y+63, r24	; 0x3f
    574a:	2c 97       	sbiw	r28, 0x0c	; 12
    574c:	99 8d       	ldd	r25, Y+25	; 0x19
    574e:	89 89       	ldd	r24, Y+17	; 0x11
    5750:	98 0f       	add	r25, r24
    5752:	2d 96       	adiw	r28, 0x0d	; 13
    5754:	9f af       	std	Y+63, r25	; 0x3f
    5756:	2d 97       	sbiw	r28, 0x0d	; 13
    5758:	91 e0       	ldi	r25, 0x01	; 1
    575a:	69 96       	adiw	r28, 0x19	; 25
    575c:	9f af       	std	Y+63, r25	; 0x3f
    575e:	69 97       	sbiw	r28, 0x19	; 25
    5760:	2d 96       	adiw	r28, 0x0d	; 13
    5762:	8f ad       	ldd	r24, Y+63	; 0x3f
    5764:	2d 97       	sbiw	r28, 0x0d	; 13
    5766:	99 8d       	ldd	r25, Y+25	; 0x19
    5768:	89 17       	cp	r24, r25
    576a:	18 f0       	brcs	.+6      	; 0x5772 <Lcd_DisplayNumber+0x46e>
    576c:	69 96       	adiw	r28, 0x19	; 25
    576e:	1f ae       	std	Y+63, r1	; 0x3f
    5770:	69 97       	sbiw	r28, 0x19	; 25
    5772:	66 96       	adiw	r28, 0x16	; 22
    5774:	8f ad       	ldd	r24, Y+63	; 0x3f
    5776:	66 97       	sbiw	r28, 0x16	; 22
    5778:	2d 96       	adiw	r28, 0x0d	; 13
    577a:	9f ad       	ldd	r25, Y+63	; 0x3f
    577c:	2d 97       	sbiw	r28, 0x0d	; 13
    577e:	89 0f       	add	r24, r25
    5780:	6a 96       	adiw	r28, 0x1a	; 26
    5782:	8f af       	std	Y+63, r24	; 0x3f
    5784:	6a 97       	sbiw	r28, 0x1a	; 26
    5786:	81 e0       	ldi	r24, 0x01	; 1
    5788:	6b 96       	adiw	r28, 0x1b	; 27
    578a:	8f af       	std	Y+63, r24	; 0x3f
    578c:	6b 97       	sbiw	r28, 0x1b	; 27
    578e:	6a 96       	adiw	r28, 0x1a	; 26
    5790:	9f ad       	ldd	r25, Y+63	; 0x3f
    5792:	6a 97       	sbiw	r28, 0x1a	; 26
    5794:	2d 96       	adiw	r28, 0x0d	; 13
    5796:	8f ad       	ldd	r24, Y+63	; 0x3f
    5798:	2d 97       	sbiw	r28, 0x0d	; 13
    579a:	98 17       	cp	r25, r24
    579c:	18 f0       	brcs	.+6      	; 0x57a4 <Lcd_DisplayNumber+0x4a0>
    579e:	6b 96       	adiw	r28, 0x1b	; 27
    57a0:	1f ae       	std	Y+63, r1	; 0x3f
    57a2:	6b 97       	sbiw	r28, 0x1b	; 27
    57a4:	69 96       	adiw	r28, 0x19	; 25
    57a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    57a8:	69 97       	sbiw	r28, 0x19	; 25
    57aa:	6b 96       	adiw	r28, 0x1b	; 27
    57ac:	8f ad       	ldd	r24, Y+63	; 0x3f
    57ae:	6b 97       	sbiw	r28, 0x1b	; 27
    57b0:	98 2b       	or	r25, r24
    57b2:	69 96       	adiw	r28, 0x19	; 25
    57b4:	9f af       	std	Y+63, r25	; 0x3f
    57b6:	69 97       	sbiw	r28, 0x19	; 25
    57b8:	6a 96       	adiw	r28, 0x1a	; 26
    57ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    57bc:	6a 97       	sbiw	r28, 0x1a	; 26
    57be:	2d 96       	adiw	r28, 0x0d	; 13
    57c0:	9f af       	std	Y+63, r25	; 0x3f
    57c2:	2d 97       	sbiw	r28, 0x0d	; 13
    57c4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    57c6:	9a 89       	ldd	r25, Y+18	; 0x12
    57c8:	89 0f       	add	r24, r25
    57ca:	2e 96       	adiw	r28, 0x0e	; 14
    57cc:	8f af       	std	Y+63, r24	; 0x3f
    57ce:	2e 97       	sbiw	r28, 0x0e	; 14
    57d0:	81 e0       	ldi	r24, 0x01	; 1
    57d2:	6c 96       	adiw	r28, 0x1c	; 28
    57d4:	8f af       	std	Y+63, r24	; 0x3f
    57d6:	6c 97       	sbiw	r28, 0x1c	; 28
    57d8:	2e 96       	adiw	r28, 0x0e	; 14
    57da:	9f ad       	ldd	r25, Y+63	; 0x3f
    57dc:	2e 97       	sbiw	r28, 0x0e	; 14
    57de:	8a 8d       	ldd	r24, Y+26	; 0x1a
    57e0:	98 17       	cp	r25, r24
    57e2:	18 f0       	brcs	.+6      	; 0x57ea <Lcd_DisplayNumber+0x4e6>
    57e4:	6c 96       	adiw	r28, 0x1c	; 28
    57e6:	1f ae       	std	Y+63, r1	; 0x3f
    57e8:	6c 97       	sbiw	r28, 0x1c	; 28
    57ea:	69 96       	adiw	r28, 0x19	; 25
    57ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    57ee:	69 97       	sbiw	r28, 0x19	; 25
    57f0:	2e 96       	adiw	r28, 0x0e	; 14
    57f2:	8f ad       	ldd	r24, Y+63	; 0x3f
    57f4:	2e 97       	sbiw	r28, 0x0e	; 14
    57f6:	98 0f       	add	r25, r24
    57f8:	6d 96       	adiw	r28, 0x1d	; 29
    57fa:	9f af       	std	Y+63, r25	; 0x3f
    57fc:	6d 97       	sbiw	r28, 0x1d	; 29
    57fe:	91 e0       	ldi	r25, 0x01	; 1
    5800:	6e 96       	adiw	r28, 0x1e	; 30
    5802:	9f af       	std	Y+63, r25	; 0x3f
    5804:	6e 97       	sbiw	r28, 0x1e	; 30
    5806:	6d 96       	adiw	r28, 0x1d	; 29
    5808:	8f ad       	ldd	r24, Y+63	; 0x3f
    580a:	6d 97       	sbiw	r28, 0x1d	; 29
    580c:	2e 96       	adiw	r28, 0x0e	; 14
    580e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5810:	2e 97       	sbiw	r28, 0x0e	; 14
    5812:	89 17       	cp	r24, r25
    5814:	18 f0       	brcs	.+6      	; 0x581c <Lcd_DisplayNumber+0x518>
    5816:	6e 96       	adiw	r28, 0x1e	; 30
    5818:	1f ae       	std	Y+63, r1	; 0x3f
    581a:	6e 97       	sbiw	r28, 0x1e	; 30
    581c:	6c 96       	adiw	r28, 0x1c	; 28
    581e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5820:	6c 97       	sbiw	r28, 0x1c	; 28
    5822:	6e 96       	adiw	r28, 0x1e	; 30
    5824:	9f ad       	ldd	r25, Y+63	; 0x3f
    5826:	6e 97       	sbiw	r28, 0x1e	; 30
    5828:	89 2b       	or	r24, r25
    582a:	6c 96       	adiw	r28, 0x1c	; 28
    582c:	8f af       	std	Y+63, r24	; 0x3f
    582e:	6c 97       	sbiw	r28, 0x1c	; 28
    5830:	6d 96       	adiw	r28, 0x1d	; 29
    5832:	8f ad       	ldd	r24, Y+63	; 0x3f
    5834:	6d 97       	sbiw	r28, 0x1d	; 29
    5836:	2e 96       	adiw	r28, 0x0e	; 14
    5838:	8f af       	std	Y+63, r24	; 0x3f
    583a:	2e 97       	sbiw	r28, 0x0e	; 14
    583c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    583e:	8b 89       	ldd	r24, Y+19	; 0x13
    5840:	98 0f       	add	r25, r24
    5842:	2f 96       	adiw	r28, 0x0f	; 15
    5844:	9f af       	std	Y+63, r25	; 0x3f
    5846:	2f 97       	sbiw	r28, 0x0f	; 15
    5848:	91 e0       	ldi	r25, 0x01	; 1
    584a:	6f 96       	adiw	r28, 0x1f	; 31
    584c:	9f af       	std	Y+63, r25	; 0x3f
    584e:	6f 97       	sbiw	r28, 0x1f	; 31
    5850:	2f 96       	adiw	r28, 0x0f	; 15
    5852:	8f ad       	ldd	r24, Y+63	; 0x3f
    5854:	2f 97       	sbiw	r28, 0x0f	; 15
    5856:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5858:	89 17       	cp	r24, r25
    585a:	18 f0       	brcs	.+6      	; 0x5862 <Lcd_DisplayNumber+0x55e>
    585c:	6f 96       	adiw	r28, 0x1f	; 31
    585e:	1f ae       	std	Y+63, r1	; 0x3f
    5860:	6f 97       	sbiw	r28, 0x1f	; 31
    5862:	6c 96       	adiw	r28, 0x1c	; 28
    5864:	8f ad       	ldd	r24, Y+63	; 0x3f
    5866:	6c 97       	sbiw	r28, 0x1c	; 28
    5868:	2f 96       	adiw	r28, 0x0f	; 15
    586a:	9f ad       	ldd	r25, Y+63	; 0x3f
    586c:	2f 97       	sbiw	r28, 0x0f	; 15
    586e:	89 0f       	add	r24, r25
    5870:	a0 96       	adiw	r28, 0x20	; 32
    5872:	8f af       	std	Y+63, r24	; 0x3f
    5874:	a0 97       	sbiw	r28, 0x20	; 32
    5876:	81 e0       	ldi	r24, 0x01	; 1
    5878:	a1 96       	adiw	r28, 0x21	; 33
    587a:	8f af       	std	Y+63, r24	; 0x3f
    587c:	a1 97       	sbiw	r28, 0x21	; 33
    587e:	a0 96       	adiw	r28, 0x20	; 32
    5880:	9f ad       	ldd	r25, Y+63	; 0x3f
    5882:	a0 97       	sbiw	r28, 0x20	; 32
    5884:	2f 96       	adiw	r28, 0x0f	; 15
    5886:	8f ad       	ldd	r24, Y+63	; 0x3f
    5888:	2f 97       	sbiw	r28, 0x0f	; 15
    588a:	98 17       	cp	r25, r24
    588c:	18 f0       	brcs	.+6      	; 0x5894 <Lcd_DisplayNumber+0x590>
    588e:	a1 96       	adiw	r28, 0x21	; 33
    5890:	1f ae       	std	Y+63, r1	; 0x3f
    5892:	a1 97       	sbiw	r28, 0x21	; 33
    5894:	6f 96       	adiw	r28, 0x1f	; 31
    5896:	9f ad       	ldd	r25, Y+63	; 0x3f
    5898:	6f 97       	sbiw	r28, 0x1f	; 31
    589a:	a1 96       	adiw	r28, 0x21	; 33
    589c:	8f ad       	ldd	r24, Y+63	; 0x3f
    589e:	a1 97       	sbiw	r28, 0x21	; 33
    58a0:	98 2b       	or	r25, r24
    58a2:	6f 96       	adiw	r28, 0x1f	; 31
    58a4:	9f af       	std	Y+63, r25	; 0x3f
    58a6:	6f 97       	sbiw	r28, 0x1f	; 31
    58a8:	a0 96       	adiw	r28, 0x20	; 32
    58aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    58ac:	a0 97       	sbiw	r28, 0x20	; 32
    58ae:	2f 96       	adiw	r28, 0x0f	; 15
    58b0:	9f af       	std	Y+63, r25	; 0x3f
    58b2:	2f 97       	sbiw	r28, 0x0f	; 15
    58b4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    58b6:	9c 89       	ldd	r25, Y+20	; 0x14
    58b8:	89 0f       	add	r24, r25
    58ba:	60 96       	adiw	r28, 0x10	; 16
    58bc:	8f af       	std	Y+63, r24	; 0x3f
    58be:	60 97       	sbiw	r28, 0x10	; 16
    58c0:	81 e0       	ldi	r24, 0x01	; 1
    58c2:	a2 96       	adiw	r28, 0x22	; 34
    58c4:	8f af       	std	Y+63, r24	; 0x3f
    58c6:	a2 97       	sbiw	r28, 0x22	; 34
    58c8:	60 96       	adiw	r28, 0x10	; 16
    58ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    58cc:	60 97       	sbiw	r28, 0x10	; 16
    58ce:	8c 8d       	ldd	r24, Y+28	; 0x1c
    58d0:	98 17       	cp	r25, r24
    58d2:	18 f0       	brcs	.+6      	; 0x58da <Lcd_DisplayNumber+0x5d6>
    58d4:	a2 96       	adiw	r28, 0x22	; 34
    58d6:	1f ae       	std	Y+63, r1	; 0x3f
    58d8:	a2 97       	sbiw	r28, 0x22	; 34
    58da:	6f 96       	adiw	r28, 0x1f	; 31
    58dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    58de:	6f 97       	sbiw	r28, 0x1f	; 31
    58e0:	60 96       	adiw	r28, 0x10	; 16
    58e2:	8f ad       	ldd	r24, Y+63	; 0x3f
    58e4:	60 97       	sbiw	r28, 0x10	; 16
    58e6:	98 0f       	add	r25, r24
    58e8:	a3 96       	adiw	r28, 0x23	; 35
    58ea:	9f af       	std	Y+63, r25	; 0x3f
    58ec:	a3 97       	sbiw	r28, 0x23	; 35
    58ee:	91 e0       	ldi	r25, 0x01	; 1
    58f0:	a4 96       	adiw	r28, 0x24	; 36
    58f2:	9f af       	std	Y+63, r25	; 0x3f
    58f4:	a4 97       	sbiw	r28, 0x24	; 36
    58f6:	a3 96       	adiw	r28, 0x23	; 35
    58f8:	8f ad       	ldd	r24, Y+63	; 0x3f
    58fa:	a3 97       	sbiw	r28, 0x23	; 35
    58fc:	60 96       	adiw	r28, 0x10	; 16
    58fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    5900:	60 97       	sbiw	r28, 0x10	; 16
    5902:	89 17       	cp	r24, r25
    5904:	18 f0       	brcs	.+6      	; 0x590c <Lcd_DisplayNumber+0x608>
    5906:	a4 96       	adiw	r28, 0x24	; 36
    5908:	1f ae       	std	Y+63, r1	; 0x3f
    590a:	a4 97       	sbiw	r28, 0x24	; 36
    590c:	a2 96       	adiw	r28, 0x22	; 34
    590e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5910:	a2 97       	sbiw	r28, 0x22	; 34
    5912:	a4 96       	adiw	r28, 0x24	; 36
    5914:	9f ad       	ldd	r25, Y+63	; 0x3f
    5916:	a4 97       	sbiw	r28, 0x24	; 36
    5918:	89 2b       	or	r24, r25
    591a:	a2 96       	adiw	r28, 0x22	; 34
    591c:	8f af       	std	Y+63, r24	; 0x3f
    591e:	a2 97       	sbiw	r28, 0x22	; 34
    5920:	a3 96       	adiw	r28, 0x23	; 35
    5922:	8f ad       	ldd	r24, Y+63	; 0x3f
    5924:	a3 97       	sbiw	r28, 0x23	; 35
    5926:	60 96       	adiw	r28, 0x10	; 16
    5928:	8f af       	std	Y+63, r24	; 0x3f
    592a:	60 97       	sbiw	r28, 0x10	; 16
    592c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    592e:	8d 89       	ldd	r24, Y+21	; 0x15
    5930:	98 0f       	add	r25, r24
    5932:	61 96       	adiw	r28, 0x11	; 17
    5934:	9f af       	std	Y+63, r25	; 0x3f
    5936:	61 97       	sbiw	r28, 0x11	; 17
    5938:	a2 96       	adiw	r28, 0x22	; 34
    593a:	8f ad       	ldd	r24, Y+63	; 0x3f
    593c:	a2 97       	sbiw	r28, 0x22	; 34
    593e:	61 96       	adiw	r28, 0x11	; 17
    5940:	9f ad       	ldd	r25, Y+63	; 0x3f
    5942:	61 97       	sbiw	r28, 0x11	; 17
    5944:	89 0f       	add	r24, r25
    5946:	61 96       	adiw	r28, 0x11	; 17
    5948:	8f af       	std	Y+63, r24	; 0x3f
    594a:	61 97       	sbiw	r28, 0x11	; 17
    594c:	2a 96       	adiw	r28, 0x0a	; 10
    594e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5950:	2a 97       	sbiw	r28, 0x0a	; 10
    5952:	8a 83       	std	Y+2, r24	; 0x02
    5954:	2b 96       	adiw	r28, 0x0b	; 11
    5956:	9f ad       	ldd	r25, Y+63	; 0x3f
    5958:	2b 97       	sbiw	r28, 0x0b	; 11
    595a:	9b 83       	std	Y+3, r25	; 0x03
    595c:	2c 96       	adiw	r28, 0x0c	; 12
    595e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5960:	2c 97       	sbiw	r28, 0x0c	; 12
    5962:	8c 83       	std	Y+4, r24	; 0x04
    5964:	2d 96       	adiw	r28, 0x0d	; 13
    5966:	9f ad       	ldd	r25, Y+63	; 0x3f
    5968:	2d 97       	sbiw	r28, 0x0d	; 13
    596a:	9d 83       	std	Y+5, r25	; 0x05
    596c:	2e 96       	adiw	r28, 0x0e	; 14
    596e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5970:	2e 97       	sbiw	r28, 0x0e	; 14
    5972:	8e 83       	std	Y+6, r24	; 0x06
    5974:	2f 96       	adiw	r28, 0x0f	; 15
    5976:	9f ad       	ldd	r25, Y+63	; 0x3f
    5978:	2f 97       	sbiw	r28, 0x0f	; 15
    597a:	9f 83       	std	Y+7, r25	; 0x07
    597c:	60 96       	adiw	r28, 0x10	; 16
    597e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5980:	60 97       	sbiw	r28, 0x10	; 16
    5982:	88 87       	std	Y+8, r24	; 0x08
    5984:	61 96       	adiw	r28, 0x11	; 17
    5986:	9f ad       	ldd	r25, Y+63	; 0x3f
    5988:	61 97       	sbiw	r28, 0x11	; 17
    598a:	99 87       	std	Y+9, r25	; 0x09
        number /= 10;
    598c:	8a 85       	ldd	r24, Y+10	; 0x0a
    598e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5990:	ac 85       	ldd	r26, Y+12	; 0x0c
    5992:	bd 85       	ldd	r27, Y+13	; 0x0d
    5994:	2a e0       	ldi	r18, 0x0A	; 10
    5996:	30 e0       	ldi	r19, 0x00	; 0
    5998:	40 e0       	ldi	r20, 0x00	; 0
    599a:	50 e0       	ldi	r21, 0x00	; 0
    599c:	bc 01       	movw	r22, r24
    599e:	cd 01       	movw	r24, r26
    59a0:	0e 94 50 32 	call	0x64a0	; 0x64a0 <__divmodsi4>
    59a4:	da 01       	movw	r26, r20
    59a6:	c9 01       	movw	r24, r18
    59a8:	8a 87       	std	Y+10, r24	; 0x0a
    59aa:	9b 87       	std	Y+11, r25	; 0x0b
    59ac:	ac 87       	std	Y+12, r26	; 0x0c
    59ae:	bd 87       	std	Y+13, r27	; 0x0d
        digitsCounter++;
    59b0:	89 81       	ldd	r24, Y+1	; 0x01
    59b2:	8f 5f       	subi	r24, 0xFF	; 255
    59b4:	89 83       	std	Y+1, r24	; 0x01
    } while (number > 0);
    59b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    59b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    59ba:	ac 85       	ldd	r26, Y+12	; 0x0c
    59bc:	bd 85       	ldd	r27, Y+13	; 0x0d
    59be:	18 16       	cp	r1, r24
    59c0:	19 06       	cpc	r1, r25
    59c2:	1a 06       	cpc	r1, r26
    59c4:	1b 06       	cpc	r1, r27
    59c6:	0c f4       	brge	.+2      	; 0x59ca <Lcd_DisplayNumber+0x6c6>
    59c8:	d5 cc       	rjmp	.-1622   	; 0x5374 <Lcd_DisplayNumber+0x70>
    59ca:	61 c0       	rjmp	.+194    	; 0x5a8e <Lcd_DisplayNumber+0x78a>
    while (digitsCounter > 0) {
        Lcd_SendData(reversed%10 + '0');
    59cc:	aa 80       	ldd	r10, Y+2	; 0x02
    59ce:	bb 80       	ldd	r11, Y+3	; 0x03
    59d0:	cc 80       	ldd	r12, Y+4	; 0x04
    59d2:	dd 80       	ldd	r13, Y+5	; 0x05
    59d4:	ee 80       	ldd	r14, Y+6	; 0x06
    59d6:	ff 80       	ldd	r15, Y+7	; 0x07
    59d8:	08 85       	ldd	r16, Y+8	; 0x08
    59da:	19 85       	ldd	r17, Y+9	; 0x09
    59dc:	2a 2d       	mov	r18, r10
    59de:	3b 2d       	mov	r19, r11
    59e0:	4c 2d       	mov	r20, r12
    59e2:	5d 2d       	mov	r21, r13
    59e4:	6e 2d       	mov	r22, r14
    59e6:	7f 2d       	mov	r23, r15
    59e8:	80 2f       	mov	r24, r16
    59ea:	91 2f       	mov	r25, r17
    59ec:	0f 2e       	mov	r0, r31
    59ee:	fa e0       	ldi	r31, 0x0A	; 10
    59f0:	af 2e       	mov	r10, r31
    59f2:	f0 2d       	mov	r31, r0
    59f4:	bb 24       	eor	r11, r11
    59f6:	cc 24       	eor	r12, r12
    59f8:	dd 24       	eor	r13, r13
    59fa:	ee 24       	eor	r14, r14
    59fc:	ff 24       	eor	r15, r15
    59fe:	00 e0       	ldi	r16, 0x00	; 0
    5a00:	10 e0       	ldi	r17, 0x00	; 0
    5a02:	0e 94 69 07 	call	0xed2	; 0xed2 <__umoddi3>
    5a06:	a2 2e       	mov	r10, r18
    5a08:	b3 2e       	mov	r11, r19
    5a0a:	c4 2e       	mov	r12, r20
    5a0c:	d5 2e       	mov	r13, r21
    5a0e:	e6 2e       	mov	r14, r22
    5a10:	f7 2e       	mov	r15, r23
    5a12:	08 2f       	mov	r16, r24
    5a14:	19 2f       	mov	r17, r25
    5a16:	2a 2d       	mov	r18, r10
    5a18:	3b 2d       	mov	r19, r11
    5a1a:	4c 2d       	mov	r20, r12
    5a1c:	5d 2d       	mov	r21, r13
    5a1e:	6e 2d       	mov	r22, r14
    5a20:	7f 2d       	mov	r23, r15
    5a22:	80 2f       	mov	r24, r16
    5a24:	91 2f       	mov	r25, r17
    5a26:	82 2f       	mov	r24, r18
    5a28:	80 5d       	subi	r24, 0xD0	; 208
    5a2a:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <Lcd_SendData>
        reversed /= 10;
    5a2e:	aa 80       	ldd	r10, Y+2	; 0x02
    5a30:	bb 80       	ldd	r11, Y+3	; 0x03
    5a32:	cc 80       	ldd	r12, Y+4	; 0x04
    5a34:	dd 80       	ldd	r13, Y+5	; 0x05
    5a36:	ee 80       	ldd	r14, Y+6	; 0x06
    5a38:	ff 80       	ldd	r15, Y+7	; 0x07
    5a3a:	08 85       	ldd	r16, Y+8	; 0x08
    5a3c:	19 85       	ldd	r17, Y+9	; 0x09
    5a3e:	2a 2d       	mov	r18, r10
    5a40:	3b 2d       	mov	r19, r11
    5a42:	4c 2d       	mov	r20, r12
    5a44:	5d 2d       	mov	r21, r13
    5a46:	6e 2d       	mov	r22, r14
    5a48:	7f 2d       	mov	r23, r15
    5a4a:	80 2f       	mov	r24, r16
    5a4c:	91 2f       	mov	r25, r17
    5a4e:	0f 2e       	mov	r0, r31
    5a50:	fa e0       	ldi	r31, 0x0A	; 10
    5a52:	af 2e       	mov	r10, r31
    5a54:	f0 2d       	mov	r31, r0
    5a56:	bb 24       	eor	r11, r11
    5a58:	cc 24       	eor	r12, r12
    5a5a:	dd 24       	eor	r13, r13
    5a5c:	ee 24       	eor	r14, r14
    5a5e:	ff 24       	eor	r15, r15
    5a60:	00 e0       	ldi	r16, 0x00	; 0
    5a62:	10 e0       	ldi	r17, 0x00	; 0
    5a64:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__udivdi3>
    5a68:	a2 2e       	mov	r10, r18
    5a6a:	b3 2e       	mov	r11, r19
    5a6c:	c4 2e       	mov	r12, r20
    5a6e:	d5 2e       	mov	r13, r21
    5a70:	e6 2e       	mov	r14, r22
    5a72:	f7 2e       	mov	r15, r23
    5a74:	08 2f       	mov	r16, r24
    5a76:	19 2f       	mov	r17, r25
    5a78:	aa 82       	std	Y+2, r10	; 0x02
    5a7a:	bb 82       	std	Y+3, r11	; 0x03
    5a7c:	cc 82       	std	Y+4, r12	; 0x04
    5a7e:	dd 82       	std	Y+5, r13	; 0x05
    5a80:	ee 82       	std	Y+6, r14	; 0x06
    5a82:	ff 82       	std	Y+7, r15	; 0x07
    5a84:	08 87       	std	Y+8, r16	; 0x08
    5a86:	19 87       	std	Y+9, r17	; 0x09
        digitsCounter--;
    5a88:	89 81       	ldd	r24, Y+1	; 0x01
    5a8a:	81 50       	subi	r24, 0x01	; 1
    5a8c:	89 83       	std	Y+1, r24	; 0x01
    do {
        reversed = (reversed*10) + (number%10);
        number /= 10;
        digitsCounter++;
    } while (number > 0);
    while (digitsCounter > 0) {
    5a8e:	89 81       	ldd	r24, Y+1	; 0x01
    5a90:	88 23       	and	r24, r24
    5a92:	09 f0       	breq	.+2      	; 0x5a96 <Lcd_DisplayNumber+0x792>
    5a94:	9b cf       	rjmp	.-202    	; 0x59cc <Lcd_DisplayNumber+0x6c8>
        Lcd_SendData(reversed%10 + '0');
        reversed /= 10;
        digitsCounter--;
    }
}
    5a96:	cd 59       	subi	r28, 0x9D	; 157
    5a98:	df 4f       	sbci	r29, 0xFF	; 255
    5a9a:	0f b6       	in	r0, 0x3f	; 63
    5a9c:	f8 94       	cli
    5a9e:	de bf       	out	0x3e, r29	; 62
    5aa0:	0f be       	out	0x3f, r0	; 63
    5aa2:	cd bf       	out	0x3d, r28	; 61
    5aa4:	cf 91       	pop	r28
    5aa6:	df 91       	pop	r29
    5aa8:	1f 91       	pop	r17
    5aaa:	0f 91       	pop	r16
    5aac:	ff 90       	pop	r15
    5aae:	ef 90       	pop	r14
    5ab0:	df 90       	pop	r13
    5ab2:	cf 90       	pop	r12
    5ab4:	bf 90       	pop	r11
    5ab6:	af 90       	pop	r10
    5ab8:	08 95       	ret

00005aba <Lcd_ClearDisplay>:

void Lcd_ClearDisplay(void) {
    5aba:	df 93       	push	r29
    5abc:	cf 93       	push	r28
    5abe:	cd b7       	in	r28, 0x3d	; 61
    5ac0:	de b7       	in	r29, 0x3e	; 62
    Lcd_SendCommand(1);
    5ac2:	81 e0       	ldi	r24, 0x01	; 1
    5ac4:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <Lcd_SendCommand>
}
    5ac8:	cf 91       	pop	r28
    5aca:	df 91       	pop	r29
    5acc:	08 95       	ret

00005ace <Lcd_SetCursorPosition>:
// 1, 39 -> 1*0x40 + 39 = 0x40 + 0x27 = 0x67
void Lcd_SetCursorPosition(u8 row, u8 column) {
    5ace:	df 93       	push	r29
    5ad0:	cf 93       	push	r28
    5ad2:	00 d0       	rcall	.+0      	; 0x5ad4 <Lcd_SetCursorPosition+0x6>
    5ad4:	0f 92       	push	r0
    5ad6:	cd b7       	in	r28, 0x3d	; 61
    5ad8:	de b7       	in	r29, 0x3e	; 62
    5ada:	8a 83       	std	Y+2, r24	; 0x02
    5adc:	6b 83       	std	Y+3, r22	; 0x03
    u8 address = row*0x40 + column;
    5ade:	8a 81       	ldd	r24, Y+2	; 0x02
    5ae0:	88 2f       	mov	r24, r24
    5ae2:	90 e0       	ldi	r25, 0x00	; 0
    5ae4:	00 24       	eor	r0, r0
    5ae6:	96 95       	lsr	r25
    5ae8:	87 95       	ror	r24
    5aea:	07 94       	ror	r0
    5aec:	96 95       	lsr	r25
    5aee:	87 95       	ror	r24
    5af0:	07 94       	ror	r0
    5af2:	98 2f       	mov	r25, r24
    5af4:	80 2d       	mov	r24, r0
    5af6:	98 2f       	mov	r25, r24
    5af8:	8b 81       	ldd	r24, Y+3	; 0x03
    5afa:	89 0f       	add	r24, r25
    5afc:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(address, 7);
    5afe:	89 81       	ldd	r24, Y+1	; 0x01
    5b00:	80 68       	ori	r24, 0x80	; 128
    5b02:	89 83       	std	Y+1, r24	; 0x01
    Lcd_SendCommand(address);
    5b04:	89 81       	ldd	r24, Y+1	; 0x01
    5b06:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <Lcd_SendCommand>
}
    5b0a:	0f 90       	pop	r0
    5b0c:	0f 90       	pop	r0
    5b0e:	0f 90       	pop	r0
    5b10:	cf 91       	pop	r28
    5b12:	df 91       	pop	r29
    5b14:	08 95       	ret

00005b16 <Lcd_ShiftDisplayLeft>:

void Lcd_ShiftDisplayLeft(u8 count) {
    5b16:	df 93       	push	r29
    5b18:	cf 93       	push	r28
    5b1a:	0f 92       	push	r0
    5b1c:	cd b7       	in	r28, 0x3d	; 61
    5b1e:	de b7       	in	r29, 0x3e	; 62
    5b20:	89 83       	std	Y+1, r24	; 0x01
    5b22:	06 c0       	rjmp	.+12     	; 0x5b30 <Lcd_ShiftDisplayLeft+0x1a>
    while (count > 0) {
        Lcd_SendCommand(0b00011000);
    5b24:	88 e1       	ldi	r24, 0x18	; 24
    5b26:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <Lcd_SendCommand>
        count--;
    5b2a:	89 81       	ldd	r24, Y+1	; 0x01
    5b2c:	81 50       	subi	r24, 0x01	; 1
    5b2e:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(address, 7);
    Lcd_SendCommand(address);
}

void Lcd_ShiftDisplayLeft(u8 count) {
    while (count > 0) {
    5b30:	89 81       	ldd	r24, Y+1	; 0x01
    5b32:	88 23       	and	r24, r24
    5b34:	b9 f7       	brne	.-18     	; 0x5b24 <Lcd_ShiftDisplayLeft+0xe>
        Lcd_SendCommand(0b00011000);
        count--;
    }
}
    5b36:	0f 90       	pop	r0
    5b38:	cf 91       	pop	r28
    5b3a:	df 91       	pop	r29
    5b3c:	08 95       	ret

00005b3e <Lcd_ShiftDisplayRight>:

void Lcd_ShiftDisplayRight(u8 count) {
    5b3e:	df 93       	push	r29
    5b40:	cf 93       	push	r28
    5b42:	0f 92       	push	r0
    5b44:	cd b7       	in	r28, 0x3d	; 61
    5b46:	de b7       	in	r29, 0x3e	; 62
    5b48:	89 83       	std	Y+1, r24	; 0x01
    5b4a:	06 c0       	rjmp	.+12     	; 0x5b58 <Lcd_ShiftDisplayRight+0x1a>
    while (count > 0) {
        Lcd_SendCommand(0b00011100);
    5b4c:	8c e1       	ldi	r24, 0x1C	; 28
    5b4e:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <Lcd_SendCommand>
        count--;
    5b52:	89 81       	ldd	r24, Y+1	; 0x01
    5b54:	81 50       	subi	r24, 0x01	; 1
    5b56:	89 83       	std	Y+1, r24	; 0x01
        count--;
    }
}

void Lcd_ShiftDisplayRight(u8 count) {
    while (count > 0) {
    5b58:	89 81       	ldd	r24, Y+1	; 0x01
    5b5a:	88 23       	and	r24, r24
    5b5c:	b9 f7       	brne	.-18     	; 0x5b4c <Lcd_ShiftDisplayRight+0xe>
        Lcd_SendCommand(0b00011100);
        count--;
    }
}
    5b5e:	0f 90       	pop	r0
    5b60:	cf 91       	pop	r28
    5b62:	df 91       	pop	r29
    5b64:	08 95       	ret

00005b66 <Lcd_ReturnHome>:

void Lcd_ReturnHome(void) {
    5b66:	df 93       	push	r29
    5b68:	cf 93       	push	r28
    5b6a:	cd b7       	in	r28, 0x3d	; 61
    5b6c:	de b7       	in	r29, 0x3e	; 62
    Lcd_SendCommand(0b00000010);
    5b6e:	82 e0       	ldi	r24, 0x02	; 2
    5b70:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <Lcd_SendCommand>
}
    5b74:	cf 91       	pop	r28
    5b76:	df 91       	pop	r29
    5b78:	08 95       	ret

00005b7a <Lcd_ShiftCursorRight>:

void Lcd_ShiftCursorRight(u8 count) {
    5b7a:	df 93       	push	r29
    5b7c:	cf 93       	push	r28
    5b7e:	0f 92       	push	r0
    5b80:	cd b7       	in	r28, 0x3d	; 61
    5b82:	de b7       	in	r29, 0x3e	; 62
    5b84:	89 83       	std	Y+1, r24	; 0x01
    5b86:	06 c0       	rjmp	.+12     	; 0x5b94 <Lcd_ShiftCursorRight+0x1a>
    while (count > 0) {
        Lcd_SendCommand(0b00010100);
    5b88:	84 e1       	ldi	r24, 0x14	; 20
    5b8a:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <Lcd_SendCommand>
        count--;
    5b8e:	89 81       	ldd	r24, Y+1	; 0x01
    5b90:	81 50       	subi	r24, 0x01	; 1
    5b92:	89 83       	std	Y+1, r24	; 0x01
void Lcd_ReturnHome(void) {
    Lcd_SendCommand(0b00000010);
}

void Lcd_ShiftCursorRight(u8 count) {
    while (count > 0) {
    5b94:	89 81       	ldd	r24, Y+1	; 0x01
    5b96:	88 23       	and	r24, r24
    5b98:	b9 f7       	brne	.-18     	; 0x5b88 <Lcd_ShiftCursorRight+0xe>
        Lcd_SendCommand(0b00010100);
        count--;
    }
}
    5b9a:	0f 90       	pop	r0
    5b9c:	cf 91       	pop	r28
    5b9e:	df 91       	pop	r29
    5ba0:	08 95       	ret

00005ba2 <Lcd_ShiftCursorLeft>:

void Lcd_ShiftCursorLeft(u8 count) {
    5ba2:	df 93       	push	r29
    5ba4:	cf 93       	push	r28
    5ba6:	0f 92       	push	r0
    5ba8:	cd b7       	in	r28, 0x3d	; 61
    5baa:	de b7       	in	r29, 0x3e	; 62
    5bac:	89 83       	std	Y+1, r24	; 0x01
    5bae:	06 c0       	rjmp	.+12     	; 0x5bbc <Lcd_ShiftCursorLeft+0x1a>
    while (count > 0) {
        Lcd_SendCommand(0b00010000);
    5bb0:	80 e1       	ldi	r24, 0x10	; 16
    5bb2:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <Lcd_SendCommand>
        count--;
    5bb6:	89 81       	ldd	r24, Y+1	; 0x01
    5bb8:	81 50       	subi	r24, 0x01	; 1
    5bba:	89 83       	std	Y+1, r24	; 0x01
        count--;
    }
}

void Lcd_ShiftCursorLeft(u8 count) {
    while (count > 0) {
    5bbc:	89 81       	ldd	r24, Y+1	; 0x01
    5bbe:	88 23       	and	r24, r24
    5bc0:	b9 f7       	brne	.-18     	; 0x5bb0 <Lcd_ShiftCursorLeft+0xe>
        Lcd_SendCommand(0b00010000);
        count--;
    }
}
    5bc2:	0f 90       	pop	r0
    5bc4:	cf 91       	pop	r28
    5bc6:	df 91       	pop	r29
    5bc8:	08 95       	ret

00005bca <Lcd_ControlDisplay>:

void Lcd_ControlDisplay(const Lcd_DisplayControlType* control) {
    5bca:	df 93       	push	r29
    5bcc:	cf 93       	push	r28
    5bce:	00 d0       	rcall	.+0      	; 0x5bd0 <Lcd_ControlDisplay+0x6>
    5bd0:	0f 92       	push	r0
    5bd2:	cd b7       	in	r28, 0x3d	; 61
    5bd4:	de b7       	in	r29, 0x3e	; 62
    5bd6:	9b 83       	std	Y+3, r25	; 0x03
    5bd8:	8a 83       	std	Y+2, r24	; 0x02
    u8 command;
    /* Display ON/OFF Control */
    command = 0b00001000;
    5bda:	88 e0       	ldi	r24, 0x08	; 8
    5bdc:	89 83       	std	Y+1, r24	; 0x01
    if (control->display == LCD_STATE_ON) {
    5bde:	ea 81       	ldd	r30, Y+2	; 0x02
    5be0:	fb 81       	ldd	r31, Y+3	; 0x03
    5be2:	80 81       	ld	r24, Z
    5be4:	81 30       	cpi	r24, 0x01	; 1
    5be6:	99 f4       	brne	.+38     	; 0x5c0e <Lcd_ControlDisplay+0x44>
        SET_BIT(command, 2);
    5be8:	89 81       	ldd	r24, Y+1	; 0x01
    5bea:	84 60       	ori	r24, 0x04	; 4
    5bec:	89 83       	std	Y+1, r24	; 0x01
        if (control->cursor == LCD_STATE_ON) {
    5bee:	ea 81       	ldd	r30, Y+2	; 0x02
    5bf0:	fb 81       	ldd	r31, Y+3	; 0x03
    5bf2:	81 81       	ldd	r24, Z+1	; 0x01
    5bf4:	81 30       	cpi	r24, 0x01	; 1
    5bf6:	59 f4       	brne	.+22     	; 0x5c0e <Lcd_ControlDisplay+0x44>
            SET_BIT(command, 1);
    5bf8:	89 81       	ldd	r24, Y+1	; 0x01
    5bfa:	82 60       	ori	r24, 0x02	; 2
    5bfc:	89 83       	std	Y+1, r24	; 0x01
            if (control->cursorBlink == LCD_STATE_ON) {
    5bfe:	ea 81       	ldd	r30, Y+2	; 0x02
    5c00:	fb 81       	ldd	r31, Y+3	; 0x03
    5c02:	82 81       	ldd	r24, Z+2	; 0x02
    5c04:	81 30       	cpi	r24, 0x01	; 1
    5c06:	19 f4       	brne	.+6      	; 0x5c0e <Lcd_ControlDisplay+0x44>
                SET_BIT(command, 0);
    5c08:	89 81       	ldd	r24, Y+1	; 0x01
    5c0a:	81 60       	ori	r24, 0x01	; 1
    5c0c:	89 83       	std	Y+1, r24	; 0x01
            }
        }
    }
    Lcd_SendCommand(command);
    5c0e:	89 81       	ldd	r24, Y+1	; 0x01
    5c10:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <Lcd_SendCommand>
    /* Function Set */
#if LCD_MODE == LCD_MODE_8_BIT
    command = 0b00110000;
    5c14:	80 e3       	ldi	r24, 0x30	; 48
    5c16:	89 83       	std	Y+1, r24	; 0x01
#elif LCD_MODE == LCD_MODE_4_BIT
    command = 0b00100000;
#endif
    if (control->lines == LCD_LINES_2) {
    5c18:	ea 81       	ldd	r30, Y+2	; 0x02
    5c1a:	fb 81       	ldd	r31, Y+3	; 0x03
    5c1c:	83 81       	ldd	r24, Z+3	; 0x03
    5c1e:	81 30       	cpi	r24, 0x01	; 1
    5c20:	19 f4       	brne	.+6      	; 0x5c28 <Lcd_ControlDisplay+0x5e>
        SET_BIT(command, 3);
    5c22:	89 81       	ldd	r24, Y+1	; 0x01
    5c24:	88 60       	ori	r24, 0x08	; 8
    5c26:	89 83       	std	Y+1, r24	; 0x01
    }
    if (control->font == LCD_FONT_5X10) {
    5c28:	ea 81       	ldd	r30, Y+2	; 0x02
    5c2a:	fb 81       	ldd	r31, Y+3	; 0x03
    5c2c:	84 81       	ldd	r24, Z+4	; 0x04
    5c2e:	81 30       	cpi	r24, 0x01	; 1
    5c30:	19 f4       	brne	.+6      	; 0x5c38 <Lcd_ControlDisplay+0x6e>
        SET_BIT(command, 2);
    5c32:	89 81       	ldd	r24, Y+1	; 0x01
    5c34:	84 60       	ori	r24, 0x04	; 4
    5c36:	89 83       	std	Y+1, r24	; 0x01
    }
    Lcd_SendCommand(command);
    5c38:	89 81       	ldd	r24, Y+1	; 0x01
    5c3a:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <Lcd_SendCommand>
}
    5c3e:	0f 90       	pop	r0
    5c40:	0f 90       	pop	r0
    5c42:	0f 90       	pop	r0
    5c44:	cf 91       	pop	r28
    5c46:	df 91       	pop	r29
    5c48:	08 95       	ret

00005c4a <Lcd_SaveSpecialCharacter>:

void Lcd_SaveSpecialCharacter(u8 location, u8* pattern) {
    5c4a:	df 93       	push	r29
    5c4c:	cf 93       	push	r28
    5c4e:	00 d0       	rcall	.+0      	; 0x5c50 <Lcd_SaveSpecialCharacter+0x6>
    5c50:	00 d0       	rcall	.+0      	; 0x5c52 <Lcd_SaveSpecialCharacter+0x8>
    5c52:	cd b7       	in	r28, 0x3d	; 61
    5c54:	de b7       	in	r29, 0x3e	; 62
    5c56:	8a 83       	std	Y+2, r24	; 0x02
    5c58:	7c 83       	std	Y+4, r23	; 0x04
    5c5a:	6b 83       	std	Y+3, r22	; 0x03
    u8 i;
    if (location < 8) {
    5c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    5c5e:	88 30       	cpi	r24, 0x08	; 8
    5c60:	18 f5       	brcc	.+70     	; 0x5ca8 <Lcd_SaveSpecialCharacter+0x5e>
        location *= 8;
    5c62:	8a 81       	ldd	r24, Y+2	; 0x02
    5c64:	88 2f       	mov	r24, r24
    5c66:	90 e0       	ldi	r25, 0x00	; 0
    5c68:	88 0f       	add	r24, r24
    5c6a:	99 1f       	adc	r25, r25
    5c6c:	88 0f       	add	r24, r24
    5c6e:	99 1f       	adc	r25, r25
    5c70:	88 0f       	add	r24, r24
    5c72:	99 1f       	adc	r25, r25
    5c74:	8a 83       	std	Y+2, r24	; 0x02
        SET_BIT(location, 6);
    5c76:	8a 81       	ldd	r24, Y+2	; 0x02
    5c78:	80 64       	ori	r24, 0x40	; 64
    5c7a:	8a 83       	std	Y+2, r24	; 0x02
        Lcd_SendCommand(location);
    5c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    5c7e:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <Lcd_SendCommand>
        for (i=0; i<8; i++) {
    5c82:	19 82       	std	Y+1, r1	; 0x01
    5c84:	0e c0       	rjmp	.+28     	; 0x5ca2 <Lcd_SaveSpecialCharacter+0x58>
            Lcd_SendData(pattern[i]);
    5c86:	89 81       	ldd	r24, Y+1	; 0x01
    5c88:	28 2f       	mov	r18, r24
    5c8a:	30 e0       	ldi	r19, 0x00	; 0
    5c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    5c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    5c90:	fc 01       	movw	r30, r24
    5c92:	e2 0f       	add	r30, r18
    5c94:	f3 1f       	adc	r31, r19
    5c96:	80 81       	ld	r24, Z
    5c98:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <Lcd_SendData>
    u8 i;
    if (location < 8) {
        location *= 8;
        SET_BIT(location, 6);
        Lcd_SendCommand(location);
        for (i=0; i<8; i++) {
    5c9c:	89 81       	ldd	r24, Y+1	; 0x01
    5c9e:	8f 5f       	subi	r24, 0xFF	; 255
    5ca0:	89 83       	std	Y+1, r24	; 0x01
    5ca2:	89 81       	ldd	r24, Y+1	; 0x01
    5ca4:	88 30       	cpi	r24, 0x08	; 8
    5ca6:	78 f3       	brcs	.-34     	; 0x5c86 <Lcd_SaveSpecialCharacter+0x3c>
            Lcd_SendData(pattern[i]);
        }
    }
}
    5ca8:	0f 90       	pop	r0
    5caa:	0f 90       	pop	r0
    5cac:	0f 90       	pop	r0
    5cae:	0f 90       	pop	r0
    5cb0:	cf 91       	pop	r28
    5cb2:	df 91       	pop	r29
    5cb4:	08 95       	ret

00005cb6 <Lcd_Print>:

void Lcd_Print(char* str, ...) {
    5cb6:	df 93       	push	r29
    5cb8:	cf 93       	push	r28
    5cba:	00 d0       	rcall	.+0      	; 0x5cbc <Lcd_Print+0x6>
    5cbc:	00 d0       	rcall	.+0      	; 0x5cbe <Lcd_Print+0x8>
    5cbe:	cd b7       	in	r28, 0x3d	; 61
    5cc0:	de b7       	in	r29, 0x3e	; 62
	va_list var_list;
	va_start(var_list, str);
    5cc2:	ce 01       	movw	r24, r28
    5cc4:	0b 96       	adiw	r24, 0x0b	; 11
    5cc6:	9a 83       	std	Y+2, r25	; 0x02
    5cc8:	89 83       	std	Y+1, r24	; 0x01
    5cca:	7c c0       	rjmp	.+248    	; 0x5dc4 <Lcd_Print+0x10e>
	while(*str != '\0') {
		if (*str == '%') {
    5ccc:	e9 85       	ldd	r30, Y+9	; 0x09
    5cce:	fa 85       	ldd	r31, Y+10	; 0x0a
    5cd0:	80 81       	ld	r24, Z
    5cd2:	85 32       	cpi	r24, 0x25	; 37
    5cd4:	09 f0       	breq	.+2      	; 0x5cd8 <Lcd_Print+0x22>
    5cd6:	6c c0       	rjmp	.+216    	; 0x5db0 <Lcd_Print+0xfa>
			str++;
    5cd8:	89 85       	ldd	r24, Y+9	; 0x09
    5cda:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cdc:	01 96       	adiw	r24, 0x01	; 1
    5cde:	9a 87       	std	Y+10, r25	; 0x0a
    5ce0:	89 87       	std	Y+9, r24	; 0x09
			switch(*str) {
    5ce2:	e9 85       	ldd	r30, Y+9	; 0x09
    5ce4:	fa 85       	ldd	r31, Y+10	; 0x0a
    5ce6:	80 81       	ld	r24, Z
    5ce8:	28 2f       	mov	r18, r24
    5cea:	30 e0       	ldi	r19, 0x00	; 0
    5cec:	3c 83       	std	Y+4, r19	; 0x04
    5cee:	2b 83       	std	Y+3, r18	; 0x03
    5cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    5cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    5cf4:	84 36       	cpi	r24, 0x64	; 100
    5cf6:	91 05       	cpc	r25, r1
    5cf8:	11 f1       	breq	.+68     	; 0x5d3e <Lcd_Print+0x88>
    5cfa:	2b 81       	ldd	r18, Y+3	; 0x03
    5cfc:	3c 81       	ldd	r19, Y+4	; 0x04
    5cfe:	25 36       	cpi	r18, 0x65	; 101
    5d00:	31 05       	cpc	r19, r1
    5d02:	34 f4       	brge	.+12     	; 0x5d10 <Lcd_Print+0x5a>
    5d04:	8b 81       	ldd	r24, Y+3	; 0x03
    5d06:	9c 81       	ldd	r25, Y+4	; 0x04
    5d08:	83 36       	cpi	r24, 0x63	; 99
    5d0a:	91 05       	cpc	r25, r1
    5d0c:	61 f0       	breq	.+24     	; 0x5d26 <Lcd_Print+0x70>
    5d0e:	4a c0       	rjmp	.+148    	; 0x5da4 <Lcd_Print+0xee>
    5d10:	2b 81       	ldd	r18, Y+3	; 0x03
    5d12:	3c 81       	ldd	r19, Y+4	; 0x04
    5d14:	2c 36       	cpi	r18, 0x6C	; 108
    5d16:	31 05       	cpc	r19, r1
    5d18:	a9 f1       	breq	.+106    	; 0x5d84 <Lcd_Print+0xce>
    5d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    5d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    5d1e:	85 37       	cpi	r24, 0x75	; 117
    5d20:	91 05       	cpc	r25, r1
    5d22:	f9 f0       	breq	.+62     	; 0x5d62 <Lcd_Print+0xac>
    5d24:	3f c0       	rjmp	.+126    	; 0x5da4 <Lcd_Print+0xee>
				case 'c':
                    Lcd_DisplayCharcter((char)va_arg(var_list, int));
    5d26:	29 81       	ldd	r18, Y+1	; 0x01
    5d28:	3a 81       	ldd	r19, Y+2	; 0x02
    5d2a:	c9 01       	movw	r24, r18
    5d2c:	02 96       	adiw	r24, 0x02	; 2
    5d2e:	9a 83       	std	Y+2, r25	; 0x02
    5d30:	89 83       	std	Y+1, r24	; 0x01
    5d32:	f9 01       	movw	r30, r18
    5d34:	80 81       	ld	r24, Z
    5d36:	91 81       	ldd	r25, Z+1	; 0x01
    5d38:	0e 94 4a 29 	call	0x5294	; 0x5294 <Lcd_DisplayCharcter>
    5d3c:	3e c0       	rjmp	.+124    	; 0x5dba <Lcd_Print+0x104>
					break;
				case 'd':
                    Lcd_DisplayNumber((int)va_arg(var_list, int));
    5d3e:	29 81       	ldd	r18, Y+1	; 0x01
    5d40:	3a 81       	ldd	r19, Y+2	; 0x02
    5d42:	c9 01       	movw	r24, r18
    5d44:	02 96       	adiw	r24, 0x02	; 2
    5d46:	9a 83       	std	Y+2, r25	; 0x02
    5d48:	89 83       	std	Y+1, r24	; 0x01
    5d4a:	f9 01       	movw	r30, r18
    5d4c:	80 81       	ld	r24, Z
    5d4e:	91 81       	ldd	r25, Z+1	; 0x01
    5d50:	aa 27       	eor	r26, r26
    5d52:	97 fd       	sbrc	r25, 7
    5d54:	a0 95       	com	r26
    5d56:	ba 2f       	mov	r27, r26
    5d58:	bc 01       	movw	r22, r24
    5d5a:	cd 01       	movw	r24, r26
    5d5c:	0e 94 82 29 	call	0x5304	; 0x5304 <Lcd_DisplayNumber>
    5d60:	2c c0       	rjmp	.+88     	; 0x5dba <Lcd_Print+0x104>
					break;
				case 'u':
                    Lcd_DisplayNumber((unsigned int)va_arg(var_list, unsigned int));
    5d62:	29 81       	ldd	r18, Y+1	; 0x01
    5d64:	3a 81       	ldd	r19, Y+2	; 0x02
    5d66:	c9 01       	movw	r24, r18
    5d68:	02 96       	adiw	r24, 0x02	; 2
    5d6a:	9a 83       	std	Y+2, r25	; 0x02
    5d6c:	89 83       	std	Y+1, r24	; 0x01
    5d6e:	f9 01       	movw	r30, r18
    5d70:	80 81       	ld	r24, Z
    5d72:	91 81       	ldd	r25, Z+1	; 0x01
    5d74:	cc 01       	movw	r24, r24
    5d76:	a0 e0       	ldi	r26, 0x00	; 0
    5d78:	b0 e0       	ldi	r27, 0x00	; 0
    5d7a:	bc 01       	movw	r22, r24
    5d7c:	cd 01       	movw	r24, r26
    5d7e:	0e 94 82 29 	call	0x5304	; 0x5304 <Lcd_DisplayNumber>
    5d82:	1b c0       	rjmp	.+54     	; 0x5dba <Lcd_Print+0x104>
					break;
				case 'l':
                    Lcd_DisplayNumber((long int)va_arg(var_list, long int));
    5d84:	29 81       	ldd	r18, Y+1	; 0x01
    5d86:	3a 81       	ldd	r19, Y+2	; 0x02
    5d88:	c9 01       	movw	r24, r18
    5d8a:	04 96       	adiw	r24, 0x04	; 4
    5d8c:	9a 83       	std	Y+2, r25	; 0x02
    5d8e:	89 83       	std	Y+1, r24	; 0x01
    5d90:	f9 01       	movw	r30, r18
    5d92:	80 81       	ld	r24, Z
    5d94:	91 81       	ldd	r25, Z+1	; 0x01
    5d96:	a2 81       	ldd	r26, Z+2	; 0x02
    5d98:	b3 81       	ldd	r27, Z+3	; 0x03
    5d9a:	bc 01       	movw	r22, r24
    5d9c:	cd 01       	movw	r24, r26
    5d9e:	0e 94 82 29 	call	0x5304	; 0x5304 <Lcd_DisplayNumber>
    5da2:	0b c0       	rjmp	.+22     	; 0x5dba <Lcd_Print+0x104>
					break;
				default:
					Lcd_DisplayCharcter(*str);
    5da4:	e9 85       	ldd	r30, Y+9	; 0x09
    5da6:	fa 85       	ldd	r31, Y+10	; 0x0a
    5da8:	80 81       	ld	r24, Z
    5daa:	0e 94 4a 29 	call	0x5294	; 0x5294 <Lcd_DisplayCharcter>
    5dae:	05 c0       	rjmp	.+10     	; 0x5dba <Lcd_Print+0x104>
					break;
			}
		}
		else {
			Lcd_DisplayCharcter(*str);
    5db0:	e9 85       	ldd	r30, Y+9	; 0x09
    5db2:	fa 85       	ldd	r31, Y+10	; 0x0a
    5db4:	80 81       	ld	r24, Z
    5db6:	0e 94 4a 29 	call	0x5294	; 0x5294 <Lcd_DisplayCharcter>
		}
		str++;
    5dba:	89 85       	ldd	r24, Y+9	; 0x09
    5dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    5dbe:	01 96       	adiw	r24, 0x01	; 1
    5dc0:	9a 87       	std	Y+10, r25	; 0x0a
    5dc2:	89 87       	std	Y+9, r24	; 0x09
}

void Lcd_Print(char* str, ...) {
	va_list var_list;
	va_start(var_list, str);
	while(*str != '\0') {
    5dc4:	e9 85       	ldd	r30, Y+9	; 0x09
    5dc6:	fa 85       	ldd	r31, Y+10	; 0x0a
    5dc8:	80 81       	ld	r24, Z
    5dca:	88 23       	and	r24, r24
    5dcc:	09 f0       	breq	.+2      	; 0x5dd0 <Lcd_Print+0x11a>
    5dce:	7e cf       	rjmp	.-260    	; 0x5ccc <Lcd_Print+0x16>
		else {
			Lcd_DisplayCharcter(*str);
		}
		str++;
	}
}
    5dd0:	0f 90       	pop	r0
    5dd2:	0f 90       	pop	r0
    5dd4:	0f 90       	pop	r0
    5dd6:	0f 90       	pop	r0
    5dd8:	cf 91       	pop	r28
    5dda:	df 91       	pop	r29
    5ddc:	08 95       	ret

00005dde <Lcd_SendCommand>:



static void Lcd_SendCommand(u8 command) {
    5dde:	df 93       	push	r29
    5de0:	cf 93       	push	r28
    5de2:	cd b7       	in	r28, 0x3d	; 61
    5de4:	de b7       	in	r29, 0x3e	; 62
    5de6:	29 97       	sbiw	r28, 0x09	; 9
    5de8:	0f b6       	in	r0, 0x3f	; 63
    5dea:	f8 94       	cli
    5dec:	de bf       	out	0x3e, r29	; 62
    5dee:	0f be       	out	0x3f, r0	; 63
    5df0:	cd bf       	out	0x3d, r28	; 61
    5df2:	89 87       	std	Y+9, r24	; 0x09
    DIO_enuWritePin(LCD_PIN_RS, DIO_LOW);
    5df4:	87 e1       	ldi	r24, 0x17	; 23
    5df6:	60 e0       	ldi	r22, 0x00	; 0
    5df8:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_RW, DIO_LOW);
    5dfc:	86 e1       	ldi	r24, 0x16	; 22
    5dfe:	60 e0       	ldi	r22, 0x00	; 0
    5e00:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
#if LCD_MODE == LCD_MODE_8_BIT
    DIO_enuWritePin(LCD_PIN_D0, GET_BIT(command, 0));
    5e04:	89 85       	ldd	r24, Y+9	; 0x09
    5e06:	98 2f       	mov	r25, r24
    5e08:	91 70       	andi	r25, 0x01	; 1
    5e0a:	88 e1       	ldi	r24, 0x18	; 24
    5e0c:	69 2f       	mov	r22, r25
    5e0e:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D1, GET_BIT(command, 1));
    5e12:	89 85       	ldd	r24, Y+9	; 0x09
    5e14:	86 95       	lsr	r24
    5e16:	98 2f       	mov	r25, r24
    5e18:	91 70       	andi	r25, 0x01	; 1
    5e1a:	89 e1       	ldi	r24, 0x19	; 25
    5e1c:	69 2f       	mov	r22, r25
    5e1e:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D2, GET_BIT(command, 2));
    5e22:	89 85       	ldd	r24, Y+9	; 0x09
    5e24:	86 95       	lsr	r24
    5e26:	86 95       	lsr	r24
    5e28:	98 2f       	mov	r25, r24
    5e2a:	91 70       	andi	r25, 0x01	; 1
    5e2c:	8a e1       	ldi	r24, 0x1A	; 26
    5e2e:	69 2f       	mov	r22, r25
    5e30:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D3, GET_BIT(command, 3));
    5e34:	89 85       	ldd	r24, Y+9	; 0x09
    5e36:	86 95       	lsr	r24
    5e38:	86 95       	lsr	r24
    5e3a:	86 95       	lsr	r24
    5e3c:	98 2f       	mov	r25, r24
    5e3e:	91 70       	andi	r25, 0x01	; 1
    5e40:	8b e1       	ldi	r24, 0x1B	; 27
    5e42:	69 2f       	mov	r22, r25
    5e44:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
#endif
    DIO_enuWritePin(LCD_PIN_D4, GET_BIT(command, 4));
    5e48:	89 85       	ldd	r24, Y+9	; 0x09
    5e4a:	82 95       	swap	r24
    5e4c:	8f 70       	andi	r24, 0x0F	; 15
    5e4e:	98 2f       	mov	r25, r24
    5e50:	91 70       	andi	r25, 0x01	; 1
    5e52:	8c e1       	ldi	r24, 0x1C	; 28
    5e54:	69 2f       	mov	r22, r25
    5e56:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D5, GET_BIT(command, 5));
    5e5a:	89 85       	ldd	r24, Y+9	; 0x09
    5e5c:	82 95       	swap	r24
    5e5e:	86 95       	lsr	r24
    5e60:	87 70       	andi	r24, 0x07	; 7
    5e62:	98 2f       	mov	r25, r24
    5e64:	91 70       	andi	r25, 0x01	; 1
    5e66:	8d e1       	ldi	r24, 0x1D	; 29
    5e68:	69 2f       	mov	r22, r25
    5e6a:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D6, GET_BIT(command, 6));
    5e6e:	89 85       	ldd	r24, Y+9	; 0x09
    5e70:	82 95       	swap	r24
    5e72:	86 95       	lsr	r24
    5e74:	86 95       	lsr	r24
    5e76:	83 70       	andi	r24, 0x03	; 3
    5e78:	98 2f       	mov	r25, r24
    5e7a:	91 70       	andi	r25, 0x01	; 1
    5e7c:	8e e1       	ldi	r24, 0x1E	; 30
    5e7e:	69 2f       	mov	r22, r25
    5e80:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D7, GET_BIT(command, 7));
    5e84:	89 85       	ldd	r24, Y+9	; 0x09
    5e86:	98 2f       	mov	r25, r24
    5e88:	99 1f       	adc	r25, r25
    5e8a:	99 27       	eor	r25, r25
    5e8c:	99 1f       	adc	r25, r25
    5e8e:	8f e1       	ldi	r24, 0x1F	; 31
    5e90:	69 2f       	mov	r22, r25
    5e92:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_EN, DIO_HIGH);
    5e96:	85 e1       	ldi	r24, 0x15	; 21
    5e98:	61 e0       	ldi	r22, 0x01	; 1
    5e9a:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    Delay_ms(2);
    5e9e:	1d 82       	std	Y+5, r1	; 0x05
    5ea0:	1e 82       	std	Y+6, r1	; 0x06
    5ea2:	1f 82       	std	Y+7, r1	; 0x07
    5ea4:	18 86       	std	Y+8, r1	; 0x08
    5ea6:	28 c0       	rjmp	.+80     	; 0x5ef8 <Lcd_SendCommand+0x11a>
    5ea8:	80 ed       	ldi	r24, 0xD0	; 208
    5eaa:	97 e0       	ldi	r25, 0x07	; 7
    5eac:	a0 e0       	ldi	r26, 0x00	; 0
    5eae:	b0 e0       	ldi	r27, 0x00	; 0
    5eb0:	89 83       	std	Y+1, r24	; 0x01
    5eb2:	9a 83       	std	Y+2, r25	; 0x02
    5eb4:	ab 83       	std	Y+3, r26	; 0x03
    5eb6:	bc 83       	std	Y+4, r27	; 0x04
    5eb8:	0c c0       	rjmp	.+24     	; 0x5ed2 <Lcd_SendCommand+0xf4>
    5eba:	00 00       	nop
    5ebc:	89 81       	ldd	r24, Y+1	; 0x01
    5ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    5ec0:	ab 81       	ldd	r26, Y+3	; 0x03
    5ec2:	bc 81       	ldd	r27, Y+4	; 0x04
    5ec4:	01 97       	sbiw	r24, 0x01	; 1
    5ec6:	a1 09       	sbc	r26, r1
    5ec8:	b1 09       	sbc	r27, r1
    5eca:	89 83       	std	Y+1, r24	; 0x01
    5ecc:	9a 83       	std	Y+2, r25	; 0x02
    5ece:	ab 83       	std	Y+3, r26	; 0x03
    5ed0:	bc 83       	std	Y+4, r27	; 0x04
    5ed2:	89 81       	ldd	r24, Y+1	; 0x01
    5ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ed6:	ab 81       	ldd	r26, Y+3	; 0x03
    5ed8:	bc 81       	ldd	r27, Y+4	; 0x04
    5eda:	00 97       	sbiw	r24, 0x00	; 0
    5edc:	a1 05       	cpc	r26, r1
    5ede:	b1 05       	cpc	r27, r1
    5ee0:	61 f7       	brne	.-40     	; 0x5eba <Lcd_SendCommand+0xdc>
    5ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    5ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    5ee6:	af 81       	ldd	r26, Y+7	; 0x07
    5ee8:	b8 85       	ldd	r27, Y+8	; 0x08
    5eea:	01 97       	sbiw	r24, 0x01	; 1
    5eec:	a1 09       	sbc	r26, r1
    5eee:	b1 09       	sbc	r27, r1
    5ef0:	8d 83       	std	Y+5, r24	; 0x05
    5ef2:	9e 83       	std	Y+6, r25	; 0x06
    5ef4:	af 83       	std	Y+7, r26	; 0x07
    5ef6:	b8 87       	std	Y+8, r27	; 0x08
    5ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    5efa:	9e 81       	ldd	r25, Y+6	; 0x06
    5efc:	af 81       	ldd	r26, Y+7	; 0x07
    5efe:	b8 85       	ldd	r27, Y+8	; 0x08
    5f00:	00 97       	sbiw	r24, 0x00	; 0
    5f02:	a1 05       	cpc	r26, r1
    5f04:	b1 05       	cpc	r27, r1
    5f06:	81 f6       	brne	.-96     	; 0x5ea8 <Lcd_SendCommand+0xca>
    DIO_enuWritePin(LCD_PIN_EN, DIO_LOW);
    5f08:	85 e1       	ldi	r24, 0x15	; 21
    5f0a:	60 e0       	ldi	r22, 0x00	; 0
    5f0c:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D7, GET_BIT(command, 3));
    DIO_enuWritePin(LCD_PIN_EN, DIO_u8_HIGH);
    Delay_ms(2);
    DIO_enuWritePin(LCD_PIN_EN, DIO_u8_LOW);
#endif
}
    5f10:	29 96       	adiw	r28, 0x09	; 9
    5f12:	0f b6       	in	r0, 0x3f	; 63
    5f14:	f8 94       	cli
    5f16:	de bf       	out	0x3e, r29	; 62
    5f18:	0f be       	out	0x3f, r0	; 63
    5f1a:	cd bf       	out	0x3d, r28	; 61
    5f1c:	cf 91       	pop	r28
    5f1e:	df 91       	pop	r29
    5f20:	08 95       	ret

00005f22 <Lcd_SendData>:

static void Lcd_SendData(u8 data) {
    5f22:	df 93       	push	r29
    5f24:	cf 93       	push	r28
    5f26:	cd b7       	in	r28, 0x3d	; 61
    5f28:	de b7       	in	r29, 0x3e	; 62
    5f2a:	29 97       	sbiw	r28, 0x09	; 9
    5f2c:	0f b6       	in	r0, 0x3f	; 63
    5f2e:	f8 94       	cli
    5f30:	de bf       	out	0x3e, r29	; 62
    5f32:	0f be       	out	0x3f, r0	; 63
    5f34:	cd bf       	out	0x3d, r28	; 61
    5f36:	89 87       	std	Y+9, r24	; 0x09
	DIO_enuWritePin(LCD_PIN_RS, DIO_HIGH);
    5f38:	87 e1       	ldi	r24, 0x17	; 23
    5f3a:	61 e0       	ldi	r22, 0x01	; 1
    5f3c:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(LCD_PIN_RW, DIO_LOW);
    5f40:	86 e1       	ldi	r24, 0x16	; 22
    5f42:	60 e0       	ldi	r22, 0x00	; 0
    5f44:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
#if LCD_MODE == LCD_MODE_8_BIT
	DIO_enuWritePin(LCD_PIN_D0, GET_BIT(data, 0));
    5f48:	89 85       	ldd	r24, Y+9	; 0x09
    5f4a:	98 2f       	mov	r25, r24
    5f4c:	91 70       	andi	r25, 0x01	; 1
    5f4e:	88 e1       	ldi	r24, 0x18	; 24
    5f50:	69 2f       	mov	r22, r25
    5f52:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
	DIO_enuWritePin(LCD_PIN_D1, GET_BIT(data, 1));
    5f56:	89 85       	ldd	r24, Y+9	; 0x09
    5f58:	86 95       	lsr	r24
    5f5a:	98 2f       	mov	r25, r24
    5f5c:	91 70       	andi	r25, 0x01	; 1
    5f5e:	89 e1       	ldi	r24, 0x19	; 25
    5f60:	69 2f       	mov	r22, r25
    5f62:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D2, GET_BIT(data, 2));
    5f66:	89 85       	ldd	r24, Y+9	; 0x09
    5f68:	86 95       	lsr	r24
    5f6a:	86 95       	lsr	r24
    5f6c:	98 2f       	mov	r25, r24
    5f6e:	91 70       	andi	r25, 0x01	; 1
    5f70:	8a e1       	ldi	r24, 0x1A	; 26
    5f72:	69 2f       	mov	r22, r25
    5f74:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D3, GET_BIT(data, 3));
    5f78:	89 85       	ldd	r24, Y+9	; 0x09
    5f7a:	86 95       	lsr	r24
    5f7c:	86 95       	lsr	r24
    5f7e:	86 95       	lsr	r24
    5f80:	98 2f       	mov	r25, r24
    5f82:	91 70       	andi	r25, 0x01	; 1
    5f84:	8b e1       	ldi	r24, 0x1B	; 27
    5f86:	69 2f       	mov	r22, r25
    5f88:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
#endif
    DIO_enuWritePin(LCD_PIN_D4, GET_BIT(data, 4));
    5f8c:	89 85       	ldd	r24, Y+9	; 0x09
    5f8e:	82 95       	swap	r24
    5f90:	8f 70       	andi	r24, 0x0F	; 15
    5f92:	98 2f       	mov	r25, r24
    5f94:	91 70       	andi	r25, 0x01	; 1
    5f96:	8c e1       	ldi	r24, 0x1C	; 28
    5f98:	69 2f       	mov	r22, r25
    5f9a:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D5, GET_BIT(data, 5));
    5f9e:	89 85       	ldd	r24, Y+9	; 0x09
    5fa0:	82 95       	swap	r24
    5fa2:	86 95       	lsr	r24
    5fa4:	87 70       	andi	r24, 0x07	; 7
    5fa6:	98 2f       	mov	r25, r24
    5fa8:	91 70       	andi	r25, 0x01	; 1
    5faa:	8d e1       	ldi	r24, 0x1D	; 29
    5fac:	69 2f       	mov	r22, r25
    5fae:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D6, GET_BIT(data, 6));
    5fb2:	89 85       	ldd	r24, Y+9	; 0x09
    5fb4:	82 95       	swap	r24
    5fb6:	86 95       	lsr	r24
    5fb8:	86 95       	lsr	r24
    5fba:	83 70       	andi	r24, 0x03	; 3
    5fbc:	98 2f       	mov	r25, r24
    5fbe:	91 70       	andi	r25, 0x01	; 1
    5fc0:	8e e1       	ldi	r24, 0x1E	; 30
    5fc2:	69 2f       	mov	r22, r25
    5fc4:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D7, GET_BIT(data, 7));
    5fc8:	89 85       	ldd	r24, Y+9	; 0x09
    5fca:	98 2f       	mov	r25, r24
    5fcc:	99 1f       	adc	r25, r25
    5fce:	99 27       	eor	r25, r25
    5fd0:	99 1f       	adc	r25, r25
    5fd2:	8f e1       	ldi	r24, 0x1F	; 31
    5fd4:	69 2f       	mov	r22, r25
    5fd6:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_EN, DIO_HIGH);
    5fda:	85 e1       	ldi	r24, 0x15	; 21
    5fdc:	61 e0       	ldi	r22, 0x01	; 1
    5fde:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    Delay_ms(2);
    5fe2:	1d 82       	std	Y+5, r1	; 0x05
    5fe4:	1e 82       	std	Y+6, r1	; 0x06
    5fe6:	1f 82       	std	Y+7, r1	; 0x07
    5fe8:	18 86       	std	Y+8, r1	; 0x08
    5fea:	28 c0       	rjmp	.+80     	; 0x603c <Lcd_SendData+0x11a>
    5fec:	80 ed       	ldi	r24, 0xD0	; 208
    5fee:	97 e0       	ldi	r25, 0x07	; 7
    5ff0:	a0 e0       	ldi	r26, 0x00	; 0
    5ff2:	b0 e0       	ldi	r27, 0x00	; 0
    5ff4:	89 83       	std	Y+1, r24	; 0x01
    5ff6:	9a 83       	std	Y+2, r25	; 0x02
    5ff8:	ab 83       	std	Y+3, r26	; 0x03
    5ffa:	bc 83       	std	Y+4, r27	; 0x04
    5ffc:	0c c0       	rjmp	.+24     	; 0x6016 <Lcd_SendData+0xf4>
    5ffe:	00 00       	nop
    6000:	89 81       	ldd	r24, Y+1	; 0x01
    6002:	9a 81       	ldd	r25, Y+2	; 0x02
    6004:	ab 81       	ldd	r26, Y+3	; 0x03
    6006:	bc 81       	ldd	r27, Y+4	; 0x04
    6008:	01 97       	sbiw	r24, 0x01	; 1
    600a:	a1 09       	sbc	r26, r1
    600c:	b1 09       	sbc	r27, r1
    600e:	89 83       	std	Y+1, r24	; 0x01
    6010:	9a 83       	std	Y+2, r25	; 0x02
    6012:	ab 83       	std	Y+3, r26	; 0x03
    6014:	bc 83       	std	Y+4, r27	; 0x04
    6016:	89 81       	ldd	r24, Y+1	; 0x01
    6018:	9a 81       	ldd	r25, Y+2	; 0x02
    601a:	ab 81       	ldd	r26, Y+3	; 0x03
    601c:	bc 81       	ldd	r27, Y+4	; 0x04
    601e:	00 97       	sbiw	r24, 0x00	; 0
    6020:	a1 05       	cpc	r26, r1
    6022:	b1 05       	cpc	r27, r1
    6024:	61 f7       	brne	.-40     	; 0x5ffe <Lcd_SendData+0xdc>
    6026:	8d 81       	ldd	r24, Y+5	; 0x05
    6028:	9e 81       	ldd	r25, Y+6	; 0x06
    602a:	af 81       	ldd	r26, Y+7	; 0x07
    602c:	b8 85       	ldd	r27, Y+8	; 0x08
    602e:	01 97       	sbiw	r24, 0x01	; 1
    6030:	a1 09       	sbc	r26, r1
    6032:	b1 09       	sbc	r27, r1
    6034:	8d 83       	std	Y+5, r24	; 0x05
    6036:	9e 83       	std	Y+6, r25	; 0x06
    6038:	af 83       	std	Y+7, r26	; 0x07
    603a:	b8 87       	std	Y+8, r27	; 0x08
    603c:	8d 81       	ldd	r24, Y+5	; 0x05
    603e:	9e 81       	ldd	r25, Y+6	; 0x06
    6040:	af 81       	ldd	r26, Y+7	; 0x07
    6042:	b8 85       	ldd	r27, Y+8	; 0x08
    6044:	00 97       	sbiw	r24, 0x00	; 0
    6046:	a1 05       	cpc	r26, r1
    6048:	b1 05       	cpc	r27, r1
    604a:	81 f6       	brne	.-96     	; 0x5fec <Lcd_SendData+0xca>
    DIO_enuWritePin(LCD_PIN_EN, DIO_LOW);
    604c:	85 e1       	ldi	r24, 0x15	; 21
    604e:	60 e0       	ldi	r22, 0x00	; 0
    6050:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D7, GET_BIT(data, 3));
    DIO_enuWritePin(LCD_PIN_EN, DIO_HIGH);
    Delay_ms(2);
    DIO_enuWritePin(LCD_PIN_EN, DIO_LOW);
#endif
}
    6054:	29 96       	adiw	r28, 0x09	; 9
    6056:	0f b6       	in	r0, 0x3f	; 63
    6058:	f8 94       	cli
    605a:	de bf       	out	0x3e, r29	; 62
    605c:	0f be       	out	0x3f, r0	; 63
    605e:	cd bf       	out	0x3d, r28	; 61
    6060:	cf 91       	pop	r28
    6062:	df 91       	pop	r29
    6064:	08 95       	ret

00006066 <KPD_u8GetPressedKeyy>:
/*              pressed at the same time                               	     		   */
/* Input      ! Nothing                                                                */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
u8 KPD_u8GetPressedKeyy(void)
{
    6066:	df 93       	push	r29
    6068:	cf 93       	push	r28
    606a:	cd b7       	in	r28, 0x3d	; 61
    606c:	de b7       	in	r29, 0x3e	; 62
    606e:	62 97       	sbiw	r28, 0x12	; 18
    6070:	0f b6       	in	r0, 0x3f	; 63
    6072:	f8 94       	cli
    6074:	de bf       	out	0x3e, r29	; 62
    6076:	0f be       	out	0x3f, r0	; 63
    6078:	cd bf       	out	0x3d, r28	; 61
  u8 LOC_u8Column;

  u8 LOC_u8Row;

  /* Initialize the switch status to NOT Pressed                                                                     */
  u8 LOC_u8Retrun = NOT_PRESSED;
    607a:	1f 86       	std	Y+15, r1	; 0x0f
  u8 status;
  /* Looping on columns of the Key Pad                                                                               */
  for (LOC_u8Column = 0 + COL_INIT; LOC_u8Column < COL_FIN; LOC_u8Column++)
    607c:	19 8a       	std	Y+17, r1	; 0x11
    607e:	b1 c0       	rjmp	.+354    	; 0x61e2 <KPD_u8GetPressedKeyy+0x17c>
  {
    /* Activate the Column                                                                                           */
    DIO_enuWritePin(LOC_u8Column, DIO_LOW);
    6080:	89 89       	ldd	r24, Y+17	; 0x11
    6082:	60 e0       	ldi	r22, 0x00	; 0
    6084:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>

    /* Loop on the rows of the Key Pad                                                                               */
    for (LOC_u8Row = 0 + ROW_INIT; LOC_u8Row < ROW_FIN; LOC_u8Row++)
    6088:	84 e0       	ldi	r24, 0x04	; 4
    608a:	88 8b       	std	Y+16, r24	; 0x10
    608c:	9f c0       	rjmp	.+318    	; 0x61cc <KPD_u8GetPressedKeyy+0x166>
    {
    	DIO_enuReadPin(LOC_u8Row, &status);
    608e:	9e 01       	movw	r18, r28
    6090:	2e 5e       	subi	r18, 0xEE	; 238
    6092:	3f 4f       	sbci	r19, 0xFF	; 255
    6094:	88 89       	ldd	r24, Y+16	; 0x10
    6096:	b9 01       	movw	r22, r18
    6098:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <DIO_enuReadPin>
      /* Check the status of the switch                                                                              */
      if (!status)
    609c:	8a 89       	ldd	r24, Y+18	; 0x12
    609e:	88 23       	and	r24, r24
    60a0:	09 f0       	breq	.+2      	; 0x60a4 <KPD_u8GetPressedKeyy+0x3e>
    60a2:	91 c0       	rjmp	.+290    	; 0x61c6 <KPD_u8GetPressedKeyy+0x160>
      {
        /* Get the value of the currently pressed switch                                                             */
        LOC_u8Retrun = KPD_au8SwitchVal[LOC_u8Column - COL_INIT][LOC_u8Row - ROW_INIT];
    60a4:	89 89       	ldd	r24, Y+17	; 0x11
    60a6:	48 2f       	mov	r20, r24
    60a8:	50 e0       	ldi	r21, 0x00	; 0
    60aa:	88 89       	ldd	r24, Y+16	; 0x10
    60ac:	88 2f       	mov	r24, r24
    60ae:	90 e0       	ldi	r25, 0x00	; 0
    60b0:	9c 01       	movw	r18, r24
    60b2:	24 50       	subi	r18, 0x04	; 4
    60b4:	30 40       	sbci	r19, 0x00	; 0
    60b6:	ca 01       	movw	r24, r20
    60b8:	88 0f       	add	r24, r24
    60ba:	99 1f       	adc	r25, r25
    60bc:	88 0f       	add	r24, r24
    60be:	99 1f       	adc	r25, r25
    60c0:	82 0f       	add	r24, r18
    60c2:	93 1f       	adc	r25, r19
    60c4:	fc 01       	movw	r30, r24
    60c6:	ec 51       	subi	r30, 0x1C	; 28
    60c8:	fe 4f       	sbci	r31, 0xFE	; 254
    60ca:	80 81       	ld	r24, Z
    60cc:	8f 87       	std	Y+15, r24	; 0x0f
        DIO_enuReadPin(LOC_u8Row, &status);
    60ce:	9e 01       	movw	r18, r28
    60d0:	2e 5e       	subi	r18, 0xEE	; 238
    60d2:	3f 4f       	sbci	r19, 0xFF	; 255
    60d4:	88 89       	ldd	r24, Y+16	; 0x10
    60d6:	b9 01       	movw	r22, r18
    60d8:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <DIO_enuReadPin>
        /* Wait until the switch is released (Single Press)                                                          */
        while (!status)
    60dc:	8a 89       	ldd	r24, Y+18	; 0x12
    60de:	88 23       	and	r24, r24
    60e0:	e9 f3       	breq	.-6      	; 0x60dc <KPD_u8GetPressedKeyy+0x76>
    60e2:	80 e0       	ldi	r24, 0x00	; 0
    60e4:	90 e0       	ldi	r25, 0x00	; 0
    60e6:	a0 e2       	ldi	r26, 0x20	; 32
    60e8:	b1 e4       	ldi	r27, 0x41	; 65
    60ea:	8b 87       	std	Y+11, r24	; 0x0b
    60ec:	9c 87       	std	Y+12, r25	; 0x0c
    60ee:	ad 87       	std	Y+13, r26	; 0x0d
    60f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    60f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    60f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    60f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    60f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    60fa:	20 e0       	ldi	r18, 0x00	; 0
    60fc:	30 e0       	ldi	r19, 0x00	; 0
    60fe:	4a ef       	ldi	r20, 0xFA	; 250
    6100:	54 e4       	ldi	r21, 0x44	; 68
    6102:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6106:	dc 01       	movw	r26, r24
    6108:	cb 01       	movw	r24, r22
    610a:	8f 83       	std	Y+7, r24	; 0x07
    610c:	98 87       	std	Y+8, r25	; 0x08
    610e:	a9 87       	std	Y+9, r26	; 0x09
    6110:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6112:	6f 81       	ldd	r22, Y+7	; 0x07
    6114:	78 85       	ldd	r23, Y+8	; 0x08
    6116:	89 85       	ldd	r24, Y+9	; 0x09
    6118:	9a 85       	ldd	r25, Y+10	; 0x0a
    611a:	20 e0       	ldi	r18, 0x00	; 0
    611c:	30 e0       	ldi	r19, 0x00	; 0
    611e:	40 e8       	ldi	r20, 0x80	; 128
    6120:	5f e3       	ldi	r21, 0x3F	; 63
    6122:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    6126:	88 23       	and	r24, r24
    6128:	2c f4       	brge	.+10     	; 0x6134 <KPD_u8GetPressedKeyy+0xce>
		__ticks = 1;
    612a:	81 e0       	ldi	r24, 0x01	; 1
    612c:	90 e0       	ldi	r25, 0x00	; 0
    612e:	9e 83       	std	Y+6, r25	; 0x06
    6130:	8d 83       	std	Y+5, r24	; 0x05
    6132:	3f c0       	rjmp	.+126    	; 0x61b2 <KPD_u8GetPressedKeyy+0x14c>
	else if (__tmp > 65535)
    6134:	6f 81       	ldd	r22, Y+7	; 0x07
    6136:	78 85       	ldd	r23, Y+8	; 0x08
    6138:	89 85       	ldd	r24, Y+9	; 0x09
    613a:	9a 85       	ldd	r25, Y+10	; 0x0a
    613c:	20 e0       	ldi	r18, 0x00	; 0
    613e:	3f ef       	ldi	r19, 0xFF	; 255
    6140:	4f e7       	ldi	r20, 0x7F	; 127
    6142:	57 e4       	ldi	r21, 0x47	; 71
    6144:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    6148:	18 16       	cp	r1, r24
    614a:	4c f5       	brge	.+82     	; 0x619e <KPD_u8GetPressedKeyy+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    614c:	6b 85       	ldd	r22, Y+11	; 0x0b
    614e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6150:	8d 85       	ldd	r24, Y+13	; 0x0d
    6152:	9e 85       	ldd	r25, Y+14	; 0x0e
    6154:	20 e0       	ldi	r18, 0x00	; 0
    6156:	30 e0       	ldi	r19, 0x00	; 0
    6158:	40 e2       	ldi	r20, 0x20	; 32
    615a:	51 e4       	ldi	r21, 0x41	; 65
    615c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6160:	dc 01       	movw	r26, r24
    6162:	cb 01       	movw	r24, r22
    6164:	bc 01       	movw	r22, r24
    6166:	cd 01       	movw	r24, r26
    6168:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    616c:	dc 01       	movw	r26, r24
    616e:	cb 01       	movw	r24, r22
    6170:	9e 83       	std	Y+6, r25	; 0x06
    6172:	8d 83       	std	Y+5, r24	; 0x05
    6174:	0f c0       	rjmp	.+30     	; 0x6194 <KPD_u8GetPressedKeyy+0x12e>
    6176:	88 ec       	ldi	r24, 0xC8	; 200
    6178:	90 e0       	ldi	r25, 0x00	; 0
    617a:	9c 83       	std	Y+4, r25	; 0x04
    617c:	8b 83       	std	Y+3, r24	; 0x03
    617e:	8b 81       	ldd	r24, Y+3	; 0x03
    6180:	9c 81       	ldd	r25, Y+4	; 0x04
    6182:	01 97       	sbiw	r24, 0x01	; 1
    6184:	f1 f7       	brne	.-4      	; 0x6182 <KPD_u8GetPressedKeyy+0x11c>
    6186:	9c 83       	std	Y+4, r25	; 0x04
    6188:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    618a:	8d 81       	ldd	r24, Y+5	; 0x05
    618c:	9e 81       	ldd	r25, Y+6	; 0x06
    618e:	01 97       	sbiw	r24, 0x01	; 1
    6190:	9e 83       	std	Y+6, r25	; 0x06
    6192:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6194:	8d 81       	ldd	r24, Y+5	; 0x05
    6196:	9e 81       	ldd	r25, Y+6	; 0x06
    6198:	00 97       	sbiw	r24, 0x00	; 0
    619a:	69 f7       	brne	.-38     	; 0x6176 <KPD_u8GetPressedKeyy+0x110>
    619c:	14 c0       	rjmp	.+40     	; 0x61c6 <KPD_u8GetPressedKeyy+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    619e:	6f 81       	ldd	r22, Y+7	; 0x07
    61a0:	78 85       	ldd	r23, Y+8	; 0x08
    61a2:	89 85       	ldd	r24, Y+9	; 0x09
    61a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    61a6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    61aa:	dc 01       	movw	r26, r24
    61ac:	cb 01       	movw	r24, r22
    61ae:	9e 83       	std	Y+6, r25	; 0x06
    61b0:	8d 83       	std	Y+5, r24	; 0x05
    61b2:	8d 81       	ldd	r24, Y+5	; 0x05
    61b4:	9e 81       	ldd	r25, Y+6	; 0x06
    61b6:	9a 83       	std	Y+2, r25	; 0x02
    61b8:	89 83       	std	Y+1, r24	; 0x01
    61ba:	89 81       	ldd	r24, Y+1	; 0x01
    61bc:	9a 81       	ldd	r25, Y+2	; 0x02
    61be:	01 97       	sbiw	r24, 0x01	; 1
    61c0:	f1 f7       	brne	.-4      	; 0x61be <KPD_u8GetPressedKeyy+0x158>
    61c2:	9a 83       	std	Y+2, r25	; 0x02
    61c4:	89 83       	std	Y+1, r24	; 0x01
  {
    /* Activate the Column                                                                                           */
    DIO_enuWritePin(LOC_u8Column, DIO_LOW);

    /* Loop on the rows of the Key Pad                                                                               */
    for (LOC_u8Row = 0 + ROW_INIT; LOC_u8Row < ROW_FIN; LOC_u8Row++)
    61c6:	88 89       	ldd	r24, Y+16	; 0x10
    61c8:	8f 5f       	subi	r24, 0xFF	; 255
    61ca:	88 8b       	std	Y+16, r24	; 0x10
    61cc:	88 89       	ldd	r24, Y+16	; 0x10
    61ce:	88 30       	cpi	r24, 0x08	; 8
    61d0:	08 f4       	brcc	.+2      	; 0x61d4 <KPD_u8GetPressedKeyy+0x16e>
    61d2:	5d cf       	rjmp	.-326    	; 0x608e <KPD_u8GetPressedKeyy+0x28>

      }
    }

    /* Deactivate the Column                                                                                         */
    DIO_enuWritePin(LOC_u8Column, DIO_HIGH);
    61d4:	89 89       	ldd	r24, Y+17	; 0x11
    61d6:	61 e0       	ldi	r22, 0x01	; 1
    61d8:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>

  /* Initialize the switch status to NOT Pressed                                                                     */
  u8 LOC_u8Retrun = NOT_PRESSED;
  u8 status;
  /* Looping on columns of the Key Pad                                                                               */
  for (LOC_u8Column = 0 + COL_INIT; LOC_u8Column < COL_FIN; LOC_u8Column++)
    61dc:	89 89       	ldd	r24, Y+17	; 0x11
    61de:	8f 5f       	subi	r24, 0xFF	; 255
    61e0:	89 8b       	std	Y+17, r24	; 0x11
    61e2:	89 89       	ldd	r24, Y+17	; 0x11
    61e4:	84 30       	cpi	r24, 0x04	; 4
    61e6:	08 f4       	brcc	.+2      	; 0x61ea <KPD_u8GetPressedKeyy+0x184>
    61e8:	4b cf       	rjmp	.-362    	; 0x6080 <KPD_u8GetPressedKeyy+0x1a>

    /* Deactivate the Column                                                                                         */
    DIO_enuWritePin(LOC_u8Column, DIO_HIGH);
  }

  return LOC_u8Retrun;
    61ea:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    61ec:	62 96       	adiw	r28, 0x12	; 18
    61ee:	0f b6       	in	r0, 0x3f	; 63
    61f0:	f8 94       	cli
    61f2:	de bf       	out	0x3e, r29	; 62
    61f4:	0f be       	out	0x3f, r0	; 63
    61f6:	cd bf       	out	0x3d, r28	; 61
    61f8:	cf 91       	pop	r28
    61fa:	df 91       	pop	r29
    61fc:	08 95       	ret

000061fe <Keypad_voidInit>:
#include "KPD_prog.h"
#include "KPD_cfg.h"
#include "KPD_priv.h"

void Keypad_voidInit(void)
{
    61fe:	df 93       	push	r29
    6200:	cf 93       	push	r28
    6202:	cd b7       	in	r28, 0x3d	; 61
    6204:	de b7       	in	r29, 0x3e	; 62
    /* Set Column Initial Values to 1111 */
    DIO_enuWritePin(C1, DIO_HIGH);
    6206:	8c e0       	ldi	r24, 0x0C	; 12
    6208:	61 e0       	ldi	r22, 0x01	; 1
    620a:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    DIO_enuWritePin(C2, DIO_HIGH);
    620e:	8d e0       	ldi	r24, 0x0D	; 13
    6210:	61 e0       	ldi	r22, 0x01	; 1
    6212:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    DIO_enuWritePin(C3, DIO_HIGH);;
    6216:	8e e0       	ldi	r24, 0x0E	; 14
    6218:	61 e0       	ldi	r22, 0x01	; 1
    621a:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    DIO_enuWritePin(C4, DIO_HIGH);
    621e:	8f e0       	ldi	r24, 0x0F	; 15
    6220:	61 e0       	ldi	r22, 0x01	; 1
    6222:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    /* Enable Pull down Resistors at Input Rows */
    DIO_enuWritePin(R1, DIO_LOW);;
    6226:	88 e0       	ldi	r24, 0x08	; 8
    6228:	60 e0       	ldi	r22, 0x00	; 0
    622a:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    DIO_enuWritePin(R2, DIO_LOW);
    622e:	89 e0       	ldi	r24, 0x09	; 9
    6230:	60 e0       	ldi	r22, 0x00	; 0
    6232:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    DIO_enuWritePin(R3, DIO_LOW);
    6236:	8a e0       	ldi	r24, 0x0A	; 10
    6238:	60 e0       	ldi	r22, 0x00	; 0
    623a:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    DIO_enuWritePin(R4, DIO_LOW);
    623e:	8b e0       	ldi	r24, 0x0B	; 11
    6240:	60 e0       	ldi	r22, 0x00	; 0
    6242:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
}
    6246:	cf 91       	pop	r28
    6248:	df 91       	pop	r29
    624a:	08 95       	ret

0000624c <Keypad_u8GetPressedButtonValue>:

Keypad_enuState Keypad_u8GetPressedButtonValue(u8 *u8PtrToVal)
{
    624c:	df 93       	push	r29
    624e:	cf 93       	push	r28
    6250:	cd b7       	in	r28, 0x3d	; 61
    6252:	de b7       	in	r29, 0x3e	; 62
    6254:	2f 97       	sbiw	r28, 0x0f	; 15
    6256:	0f b6       	in	r0, 0x3f	; 63
    6258:	f8 94       	cli
    625a:	de bf       	out	0x3e, r29	; 62
    625c:	0f be       	out	0x3f, r0	; 63
    625e:	cd bf       	out	0x3d, r28	; 61
    6260:	9f 87       	std	Y+15, r25	; 0x0f
    6262:	8e 87       	std	Y+14, r24	; 0x0e
	Keypad_enuState Local_KeypadState;
    u8 Local_ColCount, Local_RowCount;
    u8 rowVal;
    u8 flag = 0;
    6264:	19 86       	std	Y+9, r1	; 0x09
    if (u8PtrToVal != NULL_Ptr)
    6266:	8e 85       	ldd	r24, Y+14	; 0x0e
    6268:	9f 85       	ldd	r25, Y+15	; 0x0f
    626a:	00 97       	sbiw	r24, 0x00	; 0
    626c:	09 f4       	brne	.+2      	; 0x6270 <Keypad_u8GetPressedButtonValue+0x24>
    626e:	96 c0       	rjmp	.+300    	; 0x639c <Keypad_u8GetPressedButtonValue+0x150>
    {
        for (Local_ColCount = 0; Local_ColCount < KEYPADSIZE; Local_ColCount++)
    6270:	1b 86       	std	Y+11, r1	; 0x0b
    6272:	8e c0       	rjmp	.+284    	; 0x6390 <Keypad_u8GetPressedButtonValue+0x144>
        {
            //activate current colmun
        	DIO_enuWritePin(ColArr[Local_ColCount], DIO_HIGH);
    6274:	8b 85       	ldd	r24, Y+11	; 0x0b
    6276:	88 2f       	mov	r24, r24
    6278:	90 e0       	ldi	r25, 0x00	; 0
    627a:	fc 01       	movw	r30, r24
    627c:	ee 57       	subi	r30, 0x7E	; 126
    627e:	fe 4f       	sbci	r31, 0xFE	; 254
    6280:	80 81       	ld	r24, Z
    6282:	61 e0       	ldi	r22, 0x01	; 1
    6284:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
            for (Local_RowCount = 0; Local_RowCount < KEYPADSIZE; Local_RowCount++)
    6288:	1a 86       	std	Y+10, r1	; 0x0a
    628a:	71 c0       	rjmp	.+226    	; 0x636e <Keypad_u8GetPressedButtonValue+0x122>
            {
                //check row value if it is 0 then this column and row is connected
                DIO_enuReadPin(RowArr[Local_RowCount], &rowVal);
    628c:	8a 85       	ldd	r24, Y+10	; 0x0a
    628e:	88 2f       	mov	r24, r24
    6290:	90 e0       	ldi	r25, 0x00	; 0
    6292:	fc 01       	movw	r30, r24
    6294:	ea 57       	subi	r30, 0x7A	; 122
    6296:	fe 4f       	sbci	r31, 0xFE	; 254
    6298:	80 81       	ld	r24, Z
    629a:	9e 01       	movw	r18, r28
    629c:	23 5f       	subi	r18, 0xF3	; 243
    629e:	3f 4f       	sbci	r19, 0xFF	; 255
    62a0:	b9 01       	movw	r22, r18
    62a2:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <DIO_enuReadPin>
                if (rowVal)
    62a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    62a8:	88 23       	and	r24, r24
    62aa:	09 f4       	brne	.+2      	; 0x62ae <Keypad_u8GetPressedButtonValue+0x62>
    62ac:	5d c0       	rjmp	.+186    	; 0x6368 <Keypad_u8GetPressedButtonValue+0x11c>
                {
                	*u8PtrToVal = buttonArr[Local_ColCount][Local_RowCount];
    62ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    62b0:	48 2f       	mov	r20, r24
    62b2:	50 e0       	ldi	r21, 0x00	; 0
    62b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    62b6:	28 2f       	mov	r18, r24
    62b8:	30 e0       	ldi	r19, 0x00	; 0
    62ba:	ca 01       	movw	r24, r20
    62bc:	88 0f       	add	r24, r24
    62be:	99 1f       	adc	r25, r25
    62c0:	88 0f       	add	r24, r24
    62c2:	99 1f       	adc	r25, r25
    62c4:	82 0f       	add	r24, r18
    62c6:	93 1f       	adc	r25, r19
    62c8:	fc 01       	movw	r30, r24
    62ca:	e6 57       	subi	r30, 0x76	; 118
    62cc:	fe 4f       	sbci	r31, 0xFE	; 254
    62ce:	80 81       	ld	r24, Z
    62d0:	ee 85       	ldd	r30, Y+14	; 0x0e
    62d2:	ff 85       	ldd	r31, Y+15	; 0x0f
    62d4:	80 83       	st	Z, r24
                	 /* Wait until the switch is released (Single Press)                                                          */
                	 DIO_enuReadPin(RowArr[Local_RowCount], &rowVal);
    62d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    62d8:	88 2f       	mov	r24, r24
    62da:	90 e0       	ldi	r25, 0x00	; 0
    62dc:	fc 01       	movw	r30, r24
    62de:	ea 57       	subi	r30, 0x7A	; 122
    62e0:	fe 4f       	sbci	r31, 0xFE	; 254
    62e2:	80 81       	ld	r24, Z
    62e4:	9e 01       	movw	r18, r28
    62e6:	23 5f       	subi	r18, 0xF3	; 243
    62e8:	3f 4f       	sbci	r19, 0xFF	; 255
    62ea:	b9 01       	movw	r22, r18
    62ec:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <DIO_enuReadPin>
                	while (rowVal);
    62f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    62f2:	88 23       	and	r24, r24
    62f4:	e9 f7       	brne	.-6      	; 0x62f0 <Keypad_u8GetPressedButtonValue+0xa4>

					/* Delay to avoid bouncing                                                                                   */
					Delay_ms(10);
    62f6:	81 e0       	ldi	r24, 0x01	; 1
    62f8:	90 e0       	ldi	r25, 0x00	; 0
    62fa:	a0 e0       	ldi	r26, 0x00	; 0
    62fc:	b0 e0       	ldi	r27, 0x00	; 0
    62fe:	8d 83       	std	Y+5, r24	; 0x05
    6300:	9e 83       	std	Y+6, r25	; 0x06
    6302:	af 83       	std	Y+7, r26	; 0x07
    6304:	b8 87       	std	Y+8, r27	; 0x08
    6306:	28 c0       	rjmp	.+80     	; 0x6358 <Keypad_u8GetPressedButtonValue+0x10c>
    6308:	80 ed       	ldi	r24, 0xD0	; 208
    630a:	97 e0       	ldi	r25, 0x07	; 7
    630c:	a0 e0       	ldi	r26, 0x00	; 0
    630e:	b0 e0       	ldi	r27, 0x00	; 0
    6310:	89 83       	std	Y+1, r24	; 0x01
    6312:	9a 83       	std	Y+2, r25	; 0x02
    6314:	ab 83       	std	Y+3, r26	; 0x03
    6316:	bc 83       	std	Y+4, r27	; 0x04
    6318:	0c c0       	rjmp	.+24     	; 0x6332 <Keypad_u8GetPressedButtonValue+0xe6>
    631a:	00 00       	nop
    631c:	89 81       	ldd	r24, Y+1	; 0x01
    631e:	9a 81       	ldd	r25, Y+2	; 0x02
    6320:	ab 81       	ldd	r26, Y+3	; 0x03
    6322:	bc 81       	ldd	r27, Y+4	; 0x04
    6324:	01 97       	sbiw	r24, 0x01	; 1
    6326:	a1 09       	sbc	r26, r1
    6328:	b1 09       	sbc	r27, r1
    632a:	89 83       	std	Y+1, r24	; 0x01
    632c:	9a 83       	std	Y+2, r25	; 0x02
    632e:	ab 83       	std	Y+3, r26	; 0x03
    6330:	bc 83       	std	Y+4, r27	; 0x04
    6332:	89 81       	ldd	r24, Y+1	; 0x01
    6334:	9a 81       	ldd	r25, Y+2	; 0x02
    6336:	ab 81       	ldd	r26, Y+3	; 0x03
    6338:	bc 81       	ldd	r27, Y+4	; 0x04
    633a:	00 97       	sbiw	r24, 0x00	; 0
    633c:	a1 05       	cpc	r26, r1
    633e:	b1 05       	cpc	r27, r1
    6340:	61 f7       	brne	.-40     	; 0x631a <Keypad_u8GetPressedButtonValue+0xce>
    6342:	8d 81       	ldd	r24, Y+5	; 0x05
    6344:	9e 81       	ldd	r25, Y+6	; 0x06
    6346:	af 81       	ldd	r26, Y+7	; 0x07
    6348:	b8 85       	ldd	r27, Y+8	; 0x08
    634a:	01 97       	sbiw	r24, 0x01	; 1
    634c:	a1 09       	sbc	r26, r1
    634e:	b1 09       	sbc	r27, r1
    6350:	8d 83       	std	Y+5, r24	; 0x05
    6352:	9e 83       	std	Y+6, r25	; 0x06
    6354:	af 83       	std	Y+7, r26	; 0x07
    6356:	b8 87       	std	Y+8, r27	; 0x08
    6358:	8d 81       	ldd	r24, Y+5	; 0x05
    635a:	9e 81       	ldd	r25, Y+6	; 0x06
    635c:	af 81       	ldd	r26, Y+7	; 0x07
    635e:	b8 85       	ldd	r27, Y+8	; 0x08
    6360:	00 97       	sbiw	r24, 0x00	; 0
    6362:	a1 05       	cpc	r26, r1
    6364:	b1 05       	cpc	r27, r1
    6366:	81 f6       	brne	.-96     	; 0x6308 <Keypad_u8GetPressedButtonValue+0xbc>
    {
        for (Local_ColCount = 0; Local_ColCount < KEYPADSIZE; Local_ColCount++)
        {
            //activate current colmun
        	DIO_enuWritePin(ColArr[Local_ColCount], DIO_HIGH);
            for (Local_RowCount = 0; Local_RowCount < KEYPADSIZE; Local_RowCount++)
    6368:	8a 85       	ldd	r24, Y+10	; 0x0a
    636a:	8f 5f       	subi	r24, 0xFF	; 255
    636c:	8a 87       	std	Y+10, r24	; 0x0a
    636e:	8a 85       	ldd	r24, Y+10	; 0x0a
    6370:	84 30       	cpi	r24, 0x04	; 4
    6372:	08 f4       	brcc	.+2      	; 0x6376 <Keypad_u8GetPressedButtonValue+0x12a>
    6374:	8b cf       	rjmp	.-234    	; 0x628c <Keypad_u8GetPressedButtonValue+0x40>
//            }



            //de-activate current column.
            DIO_enuWritePin(ColArr[Local_ColCount], DIO_LOW);
    6376:	8b 85       	ldd	r24, Y+11	; 0x0b
    6378:	88 2f       	mov	r24, r24
    637a:	90 e0       	ldi	r25, 0x00	; 0
    637c:	fc 01       	movw	r30, r24
    637e:	ee 57       	subi	r30, 0x7E	; 126
    6380:	fe 4f       	sbci	r31, 0xFE	; 254
    6382:	80 81       	ld	r24, Z
    6384:	60 e0       	ldi	r22, 0x00	; 0
    6386:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <DIO_enuWritePin>
    u8 Local_ColCount, Local_RowCount;
    u8 rowVal;
    u8 flag = 0;
    if (u8PtrToVal != NULL_Ptr)
    {
        for (Local_ColCount = 0; Local_ColCount < KEYPADSIZE; Local_ColCount++)
    638a:	8b 85       	ldd	r24, Y+11	; 0x0b
    638c:	8f 5f       	subi	r24, 0xFF	; 255
    638e:	8b 87       	std	Y+11, r24	; 0x0b
    6390:	8b 85       	ldd	r24, Y+11	; 0x0b
    6392:	84 30       	cpi	r24, 0x04	; 4
    6394:	08 f4       	brcc	.+2      	; 0x6398 <Keypad_u8GetPressedButtonValue+0x14c>
    6396:	6e cf       	rjmp	.-292    	; 0x6274 <Keypad_u8GetPressedButtonValue+0x28>


            //de-activate current column.
            DIO_enuWritePin(ColArr[Local_ColCount], DIO_LOW);
        }
        Local_KeypadState = Keypad_enuNormalState;
    6398:	1c 86       	std	Y+12, r1	; 0x0c
    639a:	02 c0       	rjmp	.+4      	; 0x63a0 <Keypad_u8GetPressedButtonValue+0x154>
    }
    else
        Local_KeypadState = Keypad_enuNullPointerException;
    639c:	81 e0       	ldi	r24, 0x01	; 1
    639e:	8c 87       	std	Y+12, r24	; 0x0c

    return Local_KeypadState;
    63a0:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    63a2:	2f 96       	adiw	r28, 0x0f	; 15
    63a4:	0f b6       	in	r0, 0x3f	; 63
    63a6:	f8 94       	cli
    63a8:	de bf       	out	0x3e, r29	; 62
    63aa:	0f be       	out	0x3f, r0	; 63
    63ac:	cd bf       	out	0x3d, r28	; 61
    63ae:	cf 91       	pop	r28
    63b0:	df 91       	pop	r29
    63b2:	08 95       	ret

000063b4 <main>:
#include "../MCAL/DIO/DIO.h"
#include "../HAL/LCD/LCD.h"
#include "../LIBS/STD_TYPES.h"
#include "../LIBS/delay.h"
#include "../HAL/Keypad/KPD_prog.h"
int main(){
    63b4:	df 93       	push	r29
    63b6:	cf 93       	push	r28
    63b8:	cd b7       	in	r28, 0x3d	; 61
    63ba:	de b7       	in	r29, 0x3e	; 62
    63bc:	2e 97       	sbiw	r28, 0x0e	; 14
    63be:	0f b6       	in	r0, 0x3f	; 63
    63c0:	f8 94       	cli
    63c2:	de bf       	out	0x3e, r29	; 62
    63c4:	0f be       	out	0x3f, r0	; 63
    63c6:	cd bf       	out	0x3d, r28	; 61

	DIO_voidInit();
    63c8:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <DIO_voidInit>
	Keypad_voidInit();
    63cc:	0e 94 ff 30 	call	0x61fe	; 0x61fe <Keypad_voidInit>
	Lcd_DisplayControlType LCD_type;
	LCD_type.cursor = LCD_STATE_OFF;
    63d0:	1a 86       	std	Y+10, r1	; 0x0a
	LCD_type.display = LCD_STATE_ON;
    63d2:	81 e0       	ldi	r24, 0x01	; 1
    63d4:	89 87       	std	Y+9, r24	; 0x09
	LCD_type.cursorBlink = LCD_STATE_OFF;
    63d6:	1b 86       	std	Y+11, r1	; 0x0b
	LCD_type.font = LCD_FONT_5X7;
    63d8:	1d 86       	std	Y+13, r1	; 0x0d
	LCD_type.lines = LCD_LINES_1;
    63da:	1c 86       	std	Y+12, r1	; 0x0c
	Lcd_Init(&LCD_type);
    63dc:	ce 01       	movw	r24, r28
    63de:	09 96       	adiw	r24, 0x09	; 9
    63e0:	0e 94 37 29 	call	0x526e	; 0x526e <Lcd_Init>
	//Lcd_Init(LCD_type->display);
	Lcd_ClearDisplay();
    63e4:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <Lcd_ClearDisplay>
	Lcd_ReturnHome();
    63e8:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <Lcd_ReturnHome>
	u8 pressedKey;
	Lcd_SetCursorPosition(0, 1);
    63ec:	80 e0       	ldi	r24, 0x00	; 0
    63ee:	61 e0       	ldi	r22, 0x01	; 1
    63f0:	0e 94 67 2d 	call	0x5ace	; 0x5ace <Lcd_SetCursorPosition>
	Lcd_ShiftDisplayRight(2);
    63f4:	82 e0       	ldi	r24, 0x02	; 2
    63f6:	0e 94 9f 2d 	call	0x5b3e	; 0x5b3e <Lcd_ShiftDisplayRight>
	while(1){


		Keypad_u8GetPressedButtonValue(&pressedKey);
    63fa:	ce 01       	movw	r24, r28
    63fc:	0e 96       	adiw	r24, 0x0e	; 14
    63fe:	0e 94 26 31 	call	0x624c	; 0x624c <Keypad_u8GetPressedButtonValue>
		//LCD_vidWriteCharctr(1);

		Lcd_DisplayNumber(pressedKey);
    6402:	8e 85       	ldd	r24, Y+14	; 0x0e
    6404:	88 2f       	mov	r24, r24
    6406:	90 e0       	ldi	r25, 0x00	; 0
    6408:	a0 e0       	ldi	r26, 0x00	; 0
    640a:	b0 e0       	ldi	r27, 0x00	; 0
    640c:	bc 01       	movw	r22, r24
    640e:	cd 01       	movw	r24, r26
    6410:	0e 94 82 29 	call	0x5304	; 0x5304 <Lcd_DisplayNumber>
		Delay_ms(10);
    6414:	81 e0       	ldi	r24, 0x01	; 1
    6416:	90 e0       	ldi	r25, 0x00	; 0
    6418:	a0 e0       	ldi	r26, 0x00	; 0
    641a:	b0 e0       	ldi	r27, 0x00	; 0
    641c:	8d 83       	std	Y+5, r24	; 0x05
    641e:	9e 83       	std	Y+6, r25	; 0x06
    6420:	af 83       	std	Y+7, r26	; 0x07
    6422:	b8 87       	std	Y+8, r27	; 0x08
    6424:	28 c0       	rjmp	.+80     	; 0x6476 <main+0xc2>
    6426:	80 ed       	ldi	r24, 0xD0	; 208
    6428:	97 e0       	ldi	r25, 0x07	; 7
    642a:	a0 e0       	ldi	r26, 0x00	; 0
    642c:	b0 e0       	ldi	r27, 0x00	; 0
    642e:	89 83       	std	Y+1, r24	; 0x01
    6430:	9a 83       	std	Y+2, r25	; 0x02
    6432:	ab 83       	std	Y+3, r26	; 0x03
    6434:	bc 83       	std	Y+4, r27	; 0x04
    6436:	0c c0       	rjmp	.+24     	; 0x6450 <main+0x9c>
    6438:	00 00       	nop
    643a:	89 81       	ldd	r24, Y+1	; 0x01
    643c:	9a 81       	ldd	r25, Y+2	; 0x02
    643e:	ab 81       	ldd	r26, Y+3	; 0x03
    6440:	bc 81       	ldd	r27, Y+4	; 0x04
    6442:	01 97       	sbiw	r24, 0x01	; 1
    6444:	a1 09       	sbc	r26, r1
    6446:	b1 09       	sbc	r27, r1
    6448:	89 83       	std	Y+1, r24	; 0x01
    644a:	9a 83       	std	Y+2, r25	; 0x02
    644c:	ab 83       	std	Y+3, r26	; 0x03
    644e:	bc 83       	std	Y+4, r27	; 0x04
    6450:	89 81       	ldd	r24, Y+1	; 0x01
    6452:	9a 81       	ldd	r25, Y+2	; 0x02
    6454:	ab 81       	ldd	r26, Y+3	; 0x03
    6456:	bc 81       	ldd	r27, Y+4	; 0x04
    6458:	00 97       	sbiw	r24, 0x00	; 0
    645a:	a1 05       	cpc	r26, r1
    645c:	b1 05       	cpc	r27, r1
    645e:	61 f7       	brne	.-40     	; 0x6438 <main+0x84>
    6460:	8d 81       	ldd	r24, Y+5	; 0x05
    6462:	9e 81       	ldd	r25, Y+6	; 0x06
    6464:	af 81       	ldd	r26, Y+7	; 0x07
    6466:	b8 85       	ldd	r27, Y+8	; 0x08
    6468:	01 97       	sbiw	r24, 0x01	; 1
    646a:	a1 09       	sbc	r26, r1
    646c:	b1 09       	sbc	r27, r1
    646e:	8d 83       	std	Y+5, r24	; 0x05
    6470:	9e 83       	std	Y+6, r25	; 0x06
    6472:	af 83       	std	Y+7, r26	; 0x07
    6474:	b8 87       	std	Y+8, r27	; 0x08
    6476:	8d 81       	ldd	r24, Y+5	; 0x05
    6478:	9e 81       	ldd	r25, Y+6	; 0x06
    647a:	af 81       	ldd	r26, Y+7	; 0x07
    647c:	b8 85       	ldd	r27, Y+8	; 0x08
    647e:	00 97       	sbiw	r24, 0x00	; 0
    6480:	a1 05       	cpc	r26, r1
    6482:	b1 05       	cpc	r27, r1
    6484:	81 f6       	brne	.-96     	; 0x6426 <main+0x72>
    6486:	b9 cf       	rjmp	.-142    	; 0x63fa <main+0x46>

00006488 <__udivmodqi4>:
    6488:	99 1b       	sub	r25, r25
    648a:	79 e0       	ldi	r23, 0x09	; 9
    648c:	04 c0       	rjmp	.+8      	; 0x6496 <__udivmodqi4_ep>

0000648e <__udivmodqi4_loop>:
    648e:	99 1f       	adc	r25, r25
    6490:	96 17       	cp	r25, r22
    6492:	08 f0       	brcs	.+2      	; 0x6496 <__udivmodqi4_ep>
    6494:	96 1b       	sub	r25, r22

00006496 <__udivmodqi4_ep>:
    6496:	88 1f       	adc	r24, r24
    6498:	7a 95       	dec	r23
    649a:	c9 f7       	brne	.-14     	; 0x648e <__udivmodqi4_loop>
    649c:	80 95       	com	r24
    649e:	08 95       	ret

000064a0 <__divmodsi4>:
    64a0:	97 fb       	bst	r25, 7
    64a2:	09 2e       	mov	r0, r25
    64a4:	05 26       	eor	r0, r21
    64a6:	0e d0       	rcall	.+28     	; 0x64c4 <__divmodsi4_neg1>
    64a8:	57 fd       	sbrc	r21, 7
    64aa:	04 d0       	rcall	.+8      	; 0x64b4 <__divmodsi4_neg2>
    64ac:	33 d0       	rcall	.+102    	; 0x6514 <__udivmodsi4>
    64ae:	0a d0       	rcall	.+20     	; 0x64c4 <__divmodsi4_neg1>
    64b0:	00 1c       	adc	r0, r0
    64b2:	38 f4       	brcc	.+14     	; 0x64c2 <__divmodsi4_exit>

000064b4 <__divmodsi4_neg2>:
    64b4:	50 95       	com	r21
    64b6:	40 95       	com	r20
    64b8:	30 95       	com	r19
    64ba:	21 95       	neg	r18
    64bc:	3f 4f       	sbci	r19, 0xFF	; 255
    64be:	4f 4f       	sbci	r20, 0xFF	; 255
    64c0:	5f 4f       	sbci	r21, 0xFF	; 255

000064c2 <__divmodsi4_exit>:
    64c2:	08 95       	ret

000064c4 <__divmodsi4_neg1>:
    64c4:	f6 f7       	brtc	.-4      	; 0x64c2 <__divmodsi4_exit>
    64c6:	90 95       	com	r25
    64c8:	80 95       	com	r24
    64ca:	70 95       	com	r23
    64cc:	61 95       	neg	r22
    64ce:	7f 4f       	sbci	r23, 0xFF	; 255
    64d0:	8f 4f       	sbci	r24, 0xFF	; 255
    64d2:	9f 4f       	sbci	r25, 0xFF	; 255
    64d4:	08 95       	ret

000064d6 <__mulsi3>:
    64d6:	62 9f       	mul	r22, r18
    64d8:	d0 01       	movw	r26, r0
    64da:	73 9f       	mul	r23, r19
    64dc:	f0 01       	movw	r30, r0
    64de:	82 9f       	mul	r24, r18
    64e0:	e0 0d       	add	r30, r0
    64e2:	f1 1d       	adc	r31, r1
    64e4:	64 9f       	mul	r22, r20
    64e6:	e0 0d       	add	r30, r0
    64e8:	f1 1d       	adc	r31, r1
    64ea:	92 9f       	mul	r25, r18
    64ec:	f0 0d       	add	r31, r0
    64ee:	83 9f       	mul	r24, r19
    64f0:	f0 0d       	add	r31, r0
    64f2:	74 9f       	mul	r23, r20
    64f4:	f0 0d       	add	r31, r0
    64f6:	65 9f       	mul	r22, r21
    64f8:	f0 0d       	add	r31, r0
    64fa:	99 27       	eor	r25, r25
    64fc:	72 9f       	mul	r23, r18
    64fe:	b0 0d       	add	r27, r0
    6500:	e1 1d       	adc	r30, r1
    6502:	f9 1f       	adc	r31, r25
    6504:	63 9f       	mul	r22, r19
    6506:	b0 0d       	add	r27, r0
    6508:	e1 1d       	adc	r30, r1
    650a:	f9 1f       	adc	r31, r25
    650c:	bd 01       	movw	r22, r26
    650e:	cf 01       	movw	r24, r30
    6510:	11 24       	eor	r1, r1
    6512:	08 95       	ret

00006514 <__udivmodsi4>:
    6514:	a1 e2       	ldi	r26, 0x21	; 33
    6516:	1a 2e       	mov	r1, r26
    6518:	aa 1b       	sub	r26, r26
    651a:	bb 1b       	sub	r27, r27
    651c:	fd 01       	movw	r30, r26
    651e:	0d c0       	rjmp	.+26     	; 0x653a <__udivmodsi4_ep>

00006520 <__udivmodsi4_loop>:
    6520:	aa 1f       	adc	r26, r26
    6522:	bb 1f       	adc	r27, r27
    6524:	ee 1f       	adc	r30, r30
    6526:	ff 1f       	adc	r31, r31
    6528:	a2 17       	cp	r26, r18
    652a:	b3 07       	cpc	r27, r19
    652c:	e4 07       	cpc	r30, r20
    652e:	f5 07       	cpc	r31, r21
    6530:	20 f0       	brcs	.+8      	; 0x653a <__udivmodsi4_ep>
    6532:	a2 1b       	sub	r26, r18
    6534:	b3 0b       	sbc	r27, r19
    6536:	e4 0b       	sbc	r30, r20
    6538:	f5 0b       	sbc	r31, r21

0000653a <__udivmodsi4_ep>:
    653a:	66 1f       	adc	r22, r22
    653c:	77 1f       	adc	r23, r23
    653e:	88 1f       	adc	r24, r24
    6540:	99 1f       	adc	r25, r25
    6542:	1a 94       	dec	r1
    6544:	69 f7       	brne	.-38     	; 0x6520 <__udivmodsi4_loop>
    6546:	60 95       	com	r22
    6548:	70 95       	com	r23
    654a:	80 95       	com	r24
    654c:	90 95       	com	r25
    654e:	9b 01       	movw	r18, r22
    6550:	ac 01       	movw	r20, r24
    6552:	bd 01       	movw	r22, r26
    6554:	cf 01       	movw	r24, r30
    6556:	08 95       	ret

00006558 <__prologue_saves__>:
    6558:	2f 92       	push	r2
    655a:	3f 92       	push	r3
    655c:	4f 92       	push	r4
    655e:	5f 92       	push	r5
    6560:	6f 92       	push	r6
    6562:	7f 92       	push	r7
    6564:	8f 92       	push	r8
    6566:	9f 92       	push	r9
    6568:	af 92       	push	r10
    656a:	bf 92       	push	r11
    656c:	cf 92       	push	r12
    656e:	df 92       	push	r13
    6570:	ef 92       	push	r14
    6572:	ff 92       	push	r15
    6574:	0f 93       	push	r16
    6576:	1f 93       	push	r17
    6578:	cf 93       	push	r28
    657a:	df 93       	push	r29
    657c:	cd b7       	in	r28, 0x3d	; 61
    657e:	de b7       	in	r29, 0x3e	; 62
    6580:	ca 1b       	sub	r28, r26
    6582:	db 0b       	sbc	r29, r27
    6584:	0f b6       	in	r0, 0x3f	; 63
    6586:	f8 94       	cli
    6588:	de bf       	out	0x3e, r29	; 62
    658a:	0f be       	out	0x3f, r0	; 63
    658c:	cd bf       	out	0x3d, r28	; 61
    658e:	09 94       	ijmp

00006590 <__epilogue_restores__>:
    6590:	2a 88       	ldd	r2, Y+18	; 0x12
    6592:	39 88       	ldd	r3, Y+17	; 0x11
    6594:	48 88       	ldd	r4, Y+16	; 0x10
    6596:	5f 84       	ldd	r5, Y+15	; 0x0f
    6598:	6e 84       	ldd	r6, Y+14	; 0x0e
    659a:	7d 84       	ldd	r7, Y+13	; 0x0d
    659c:	8c 84       	ldd	r8, Y+12	; 0x0c
    659e:	9b 84       	ldd	r9, Y+11	; 0x0b
    65a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    65a2:	b9 84       	ldd	r11, Y+9	; 0x09
    65a4:	c8 84       	ldd	r12, Y+8	; 0x08
    65a6:	df 80       	ldd	r13, Y+7	; 0x07
    65a8:	ee 80       	ldd	r14, Y+6	; 0x06
    65aa:	fd 80       	ldd	r15, Y+5	; 0x05
    65ac:	0c 81       	ldd	r16, Y+4	; 0x04
    65ae:	1b 81       	ldd	r17, Y+3	; 0x03
    65b0:	aa 81       	ldd	r26, Y+2	; 0x02
    65b2:	b9 81       	ldd	r27, Y+1	; 0x01
    65b4:	ce 0f       	add	r28, r30
    65b6:	d1 1d       	adc	r29, r1
    65b8:	0f b6       	in	r0, 0x3f	; 63
    65ba:	f8 94       	cli
    65bc:	de bf       	out	0x3e, r29	; 62
    65be:	0f be       	out	0x3f, r0	; 63
    65c0:	cd bf       	out	0x3d, r28	; 61
    65c2:	ed 01       	movw	r28, r26
    65c4:	08 95       	ret

000065c6 <_exit>:
    65c6:	f8 94       	cli

000065c8 <__stop_program>:
    65c8:	ff cf       	rjmp	.-2      	; 0x65c8 <__stop_program>
