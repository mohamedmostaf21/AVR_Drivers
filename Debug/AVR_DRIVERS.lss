
AVR_DRIVERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000968  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000968  000009dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001158  00000000  00000000  000009f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d41  00000000  00000000  00001b50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 6f 04 	call	0x8de	; 0x8de <main>
  7a:	0c 94 b2 04 	jmp	0x964	; 0x964 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_voidInit>:
#include "DIO_priv.h"



void DIO_voidInit(void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
   DDRA = CONC(DIO_PIN_DIR_7 ,DIO_PIN_DIR_6 ,DIO_PIN_DIR_5 ,DIO_PIN_DIR_4 ,DIO_PIN_DIR_3 ,DIO_PIN_DIR_2 ,DIO_PIN_DIR_1 ,DIO_PIN_DIR_0 );
  8a:	ea e3       	ldi	r30, 0x3A	; 58
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	80 83       	st	Z, r24
   DDRB = CONC(DIO_PIN_DIR_15,DIO_PIN_DIR_14,DIO_PIN_DIR_13,DIO_PIN_DIR_12,DIO_PIN_DIR_11,DIO_PIN_DIR_10,DIO_PIN_DIR_9 ,DIO_PIN_DIR_8 );
  92:	e7 e3       	ldi	r30, 0x37	; 55
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	80 83       	st	Z, r24
   DDRC = CONC(DIO_PIN_DIR_23,DIO_PIN_DIR_22,DIO_PIN_DIR_21,DIO_PIN_DIR_20,DIO_PIN_DIR_19,DIO_PIN_DIR_18,DIO_PIN_DIR_17,DIO_PIN_DIR_16);
  9a:	e4 e3       	ldi	r30, 0x34	; 52
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	80 83       	st	Z, r24
   DDRD = CONC(DIO_PIN_DIR_31,DIO_PIN_DIR_30,DIO_PIN_DIR_29,DIO_PIN_DIR_28,DIO_PIN_DIR_27,DIO_PIN_DIR_26,DIO_PIN_DIR_25,DIO_PIN_DIR_24);
  a2:	e1 e3       	ldi	r30, 0x31	; 49
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	87 e0       	ldi	r24, 0x07	; 7
  a8:	80 83       	st	Z, r24

}
  aa:	cf 91       	pop	r28
  ac:	df 91       	pop	r29
  ae:	08 95       	ret

000000b0 <DIO_enuWritePin>:



tenuErrorStatus DIO_enuWritePin(u8 u8PinNumCpy,u8 u8PinValueCpy)
{
  b0:	df 93       	push	r29
  b2:	cf 93       	push	r28
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	2b 97       	sbiw	r28, 0x0b	; 11
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	f8 94       	cli
  be:	de bf       	out	0x3e, r29	; 62
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	cd bf       	out	0x3d, r28	; 61
  c4:	8a 83       	std	Y+2, r24	; 0x02
  c6:	6b 83       	std	Y+3, r22	; 0x03

	tenuErrorStatus enuReturnStateLoc = EOK;
  c8:	19 82       	std	Y+1, r1	; 0x01
	if (u8PinNumCpy >= DIO_PIN_NUM_0 && u8PinNumCpy <= DIO_PIN_NUM_7)
  ca:	8a 81       	ldd	r24, Y+2	; 0x02
  cc:	88 30       	cpi	r24, 0x08	; 8
  ce:	d8 f5       	brcc	.+118    	; 0x146 <DIO_enuWritePin+0x96>
	{
		switch (u8PinValueCpy)
  d0:	8b 81       	ldd	r24, Y+3	; 0x03
  d2:	28 2f       	mov	r18, r24
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	3b 87       	std	Y+11, r19	; 0x0b
  d8:	2a 87       	std	Y+10, r18	; 0x0a
  da:	8a 85       	ldd	r24, Y+10	; 0x0a
  dc:	9b 85       	ldd	r25, Y+11	; 0x0b
  de:	00 97       	sbiw	r24, 0x00	; 0
  e0:	31 f0       	breq	.+12     	; 0xee <DIO_enuWritePin+0x3e>
  e2:	2a 85       	ldd	r18, Y+10	; 0x0a
  e4:	3b 85       	ldd	r19, Y+11	; 0x0b
  e6:	21 30       	cpi	r18, 0x01	; 1
  e8:	31 05       	cpc	r19, r1
  ea:	b1 f0       	breq	.+44     	; 0x118 <DIO_enuWritePin+0x68>
  ec:	29 c0       	rjmp	.+82     	; 0x140 <DIO_enuWritePin+0x90>
		{
			case DIO_LOW :
			 CLR_BIT (ODRA ,  u8PinNumCpy);
  ee:	ab e3       	ldi	r26, 0x3B	; 59
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	eb e3       	ldi	r30, 0x3B	; 59
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	48 2f       	mov	r20, r24
  fa:	8a 81       	ldd	r24, Y+2	; 0x02
  fc:	28 2f       	mov	r18, r24
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 2e       	mov	r0, r18
 106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_enuWritePin+0x5c>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	0a 94       	dec	r0
 10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_enuWritePin+0x58>
 110:	80 95       	com	r24
 112:	84 23       	and	r24, r20
 114:	8c 93       	st	X, r24
 116:	f8 c0       	rjmp	.+496    	; 0x308 <DIO_enuWritePin+0x258>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRA , u8PinNumCpy);
 118:	ab e3       	ldi	r26, 0x3B	; 59
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	eb e3       	ldi	r30, 0x3B	; 59
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	48 2f       	mov	r20, r24
 124:	8a 81       	ldd	r24, Y+2	; 0x02
 126:	28 2f       	mov	r18, r24
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 2e       	mov	r0, r18
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_enuWritePin+0x86>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	0a 94       	dec	r0
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_enuWritePin+0x82>
 13a:	84 2b       	or	r24, r20
 13c:	8c 93       	st	X, r24
 13e:	e4 c0       	rjmp	.+456    	; 0x308 <DIO_enuWritePin+0x258>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	89 83       	std	Y+1, r24	; 0x01
 144:	e1 c0       	rjmp	.+450    	; 0x308 <DIO_enuWritePin+0x258>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_8 && u8PinNumCpy <= DIO_PIN_NUM_15)
 146:	8a 81       	ldd	r24, Y+2	; 0x02
 148:	88 30       	cpi	r24, 0x08	; 8
 14a:	08 f4       	brcc	.+2      	; 0x14e <DIO_enuWritePin+0x9e>
 14c:	45 c0       	rjmp	.+138    	; 0x1d8 <DIO_enuWritePin+0x128>
 14e:	8a 81       	ldd	r24, Y+2	; 0x02
 150:	80 31       	cpi	r24, 0x10	; 16
 152:	08 f0       	brcs	.+2      	; 0x156 <DIO_enuWritePin+0xa6>
 154:	41 c0       	rjmp	.+130    	; 0x1d8 <DIO_enuWritePin+0x128>
	{
		switch (u8PinValueCpy)
 156:	8b 81       	ldd	r24, Y+3	; 0x03
 158:	28 2f       	mov	r18, r24
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	39 87       	std	Y+9, r19	; 0x09
 15e:	28 87       	std	Y+8, r18	; 0x08
 160:	88 85       	ldd	r24, Y+8	; 0x08
 162:	99 85       	ldd	r25, Y+9	; 0x09
 164:	00 97       	sbiw	r24, 0x00	; 0
 166:	31 f0       	breq	.+12     	; 0x174 <DIO_enuWritePin+0xc4>
 168:	28 85       	ldd	r18, Y+8	; 0x08
 16a:	39 85       	ldd	r19, Y+9	; 0x09
 16c:	21 30       	cpi	r18, 0x01	; 1
 16e:	31 05       	cpc	r19, r1
 170:	c9 f0       	breq	.+50     	; 0x1a4 <DIO_enuWritePin+0xf4>
 172:	2f c0       	rjmp	.+94     	; 0x1d2 <DIO_enuWritePin+0x122>
		{
			case DIO_LOW :
			 CLR_BIT (ODRB ,  u8PinNumCpy%8); //0 1 2 3 4 5 6 7 => 8%8 = 0, 9%8 = 1, 10%8 = 2, 11%8 = 3, 12%8 = 4, 13%8 = 5, 14%8 = 6, 15%8 = 7
 174:	a8 e3       	ldi	r26, 0x38	; 56
 176:	b0 e0       	ldi	r27, 0x00	; 0
 178:	e8 e3       	ldi	r30, 0x38	; 56
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	48 2f       	mov	r20, r24
 180:	8a 81       	ldd	r24, Y+2	; 0x02
 182:	88 2f       	mov	r24, r24
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	9c 01       	movw	r18, r24
 188:	27 70       	andi	r18, 0x07	; 7
 18a:	30 70       	andi	r19, 0x00	; 0
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 2e       	mov	r0, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_enuWritePin+0xe8>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	0a 94       	dec	r0
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_enuWritePin+0xe4>
 19c:	80 95       	com	r24
 19e:	84 23       	and	r24, r20
 1a0:	8c 93       	st	X, r24
 1a2:	b2 c0       	rjmp	.+356    	; 0x308 <DIO_enuWritePin+0x258>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRB , u8PinNumCpy%8);
 1a4:	a8 e3       	ldi	r26, 0x38	; 56
 1a6:	b0 e0       	ldi	r27, 0x00	; 0
 1a8:	e8 e3       	ldi	r30, 0x38	; 56
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	48 2f       	mov	r20, r24
 1b0:	8a 81       	ldd	r24, Y+2	; 0x02
 1b2:	88 2f       	mov	r24, r24
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	9c 01       	movw	r18, r24
 1b8:	27 70       	andi	r18, 0x07	; 7
 1ba:	30 70       	andi	r19, 0x00	; 0
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 2e       	mov	r0, r18
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_enuWritePin+0x118>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	0a 94       	dec	r0
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_enuWritePin+0x114>
 1cc:	84 2b       	or	r24, r20
 1ce:	8c 93       	st	X, r24
 1d0:	9b c0       	rjmp	.+310    	; 0x308 <DIO_enuWritePin+0x258>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	89 83       	std	Y+1, r24	; 0x01
 1d6:	98 c0       	rjmp	.+304    	; 0x308 <DIO_enuWritePin+0x258>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_16 && u8PinNumCpy <= DIO_PIN_NUM_23)
 1d8:	8a 81       	ldd	r24, Y+2	; 0x02
 1da:	80 31       	cpi	r24, 0x10	; 16
 1dc:	08 f4       	brcc	.+2      	; 0x1e0 <DIO_enuWritePin+0x130>
 1de:	45 c0       	rjmp	.+138    	; 0x26a <DIO_enuWritePin+0x1ba>
 1e0:	8a 81       	ldd	r24, Y+2	; 0x02
 1e2:	88 31       	cpi	r24, 0x18	; 24
 1e4:	08 f0       	brcs	.+2      	; 0x1e8 <DIO_enuWritePin+0x138>
 1e6:	41 c0       	rjmp	.+130    	; 0x26a <DIO_enuWritePin+0x1ba>
	{
		switch (u8PinValueCpy)
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	28 2f       	mov	r18, r24
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	3f 83       	std	Y+7, r19	; 0x07
 1f0:	2e 83       	std	Y+6, r18	; 0x06
 1f2:	8e 81       	ldd	r24, Y+6	; 0x06
 1f4:	9f 81       	ldd	r25, Y+7	; 0x07
 1f6:	00 97       	sbiw	r24, 0x00	; 0
 1f8:	31 f0       	breq	.+12     	; 0x206 <DIO_enuWritePin+0x156>
 1fa:	2e 81       	ldd	r18, Y+6	; 0x06
 1fc:	3f 81       	ldd	r19, Y+7	; 0x07
 1fe:	21 30       	cpi	r18, 0x01	; 1
 200:	31 05       	cpc	r19, r1
 202:	c9 f0       	breq	.+50     	; 0x236 <DIO_enuWritePin+0x186>
 204:	2f c0       	rjmp	.+94     	; 0x264 <DIO_enuWritePin+0x1b4>
		{
			case DIO_LOW :
			 CLR_BIT (ODRC ,  u8PinNumCpy%16);
 206:	a5 e3       	ldi	r26, 0x35	; 53
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	e5 e3       	ldi	r30, 0x35	; 53
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	48 2f       	mov	r20, r24
 212:	8a 81       	ldd	r24, Y+2	; 0x02
 214:	88 2f       	mov	r24, r24
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	9c 01       	movw	r18, r24
 21a:	2f 70       	andi	r18, 0x0F	; 15
 21c:	30 70       	andi	r19, 0x00	; 0
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 2e       	mov	r0, r18
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_enuWritePin+0x17a>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	0a 94       	dec	r0
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_enuWritePin+0x176>
 22e:	80 95       	com	r24
 230:	84 23       	and	r24, r20
 232:	8c 93       	st	X, r24
 234:	69 c0       	rjmp	.+210    	; 0x308 <DIO_enuWritePin+0x258>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRC , u8PinNumCpy%16);
 236:	a5 e3       	ldi	r26, 0x35	; 53
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	e5 e3       	ldi	r30, 0x35	; 53
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	48 2f       	mov	r20, r24
 242:	8a 81       	ldd	r24, Y+2	; 0x02
 244:	88 2f       	mov	r24, r24
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	9c 01       	movw	r18, r24
 24a:	2f 70       	andi	r18, 0x0F	; 15
 24c:	30 70       	andi	r19, 0x00	; 0
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	02 2e       	mov	r0, r18
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_enuWritePin+0x1aa>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	0a 94       	dec	r0
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_enuWritePin+0x1a6>
 25e:	84 2b       	or	r24, r20
 260:	8c 93       	st	X, r24
 262:	52 c0       	rjmp	.+164    	; 0x308 <DIO_enuWritePin+0x258>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	89 83       	std	Y+1, r24	; 0x01
 268:	4f c0       	rjmp	.+158    	; 0x308 <DIO_enuWritePin+0x258>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_24 && u8PinNumCpy <= DIO_PIN_NUM_31)
 26a:	8a 81       	ldd	r24, Y+2	; 0x02
 26c:	88 31       	cpi	r24, 0x18	; 24
 26e:	08 f4       	brcc	.+2      	; 0x272 <DIO_enuWritePin+0x1c2>
 270:	49 c0       	rjmp	.+146    	; 0x304 <DIO_enuWritePin+0x254>
 272:	8a 81       	ldd	r24, Y+2	; 0x02
 274:	80 32       	cpi	r24, 0x20	; 32
 276:	08 f0       	brcs	.+2      	; 0x27a <DIO_enuWritePin+0x1ca>
 278:	45 c0       	rjmp	.+138    	; 0x304 <DIO_enuWritePin+0x254>
	{
		switch (u8PinValueCpy)
 27a:	8b 81       	ldd	r24, Y+3	; 0x03
 27c:	28 2f       	mov	r18, r24
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	3d 83       	std	Y+5, r19	; 0x05
 282:	2c 83       	std	Y+4, r18	; 0x04
 284:	8c 81       	ldd	r24, Y+4	; 0x04
 286:	9d 81       	ldd	r25, Y+5	; 0x05
 288:	00 97       	sbiw	r24, 0x00	; 0
 28a:	31 f0       	breq	.+12     	; 0x298 <DIO_enuWritePin+0x1e8>
 28c:	2c 81       	ldd	r18, Y+4	; 0x04
 28e:	3d 81       	ldd	r19, Y+5	; 0x05
 290:	21 30       	cpi	r18, 0x01	; 1
 292:	31 05       	cpc	r19, r1
 294:	d9 f0       	breq	.+54     	; 0x2cc <DIO_enuWritePin+0x21c>
 296:	33 c0       	rjmp	.+102    	; 0x2fe <DIO_enuWritePin+0x24e>
		{
			case DIO_LOW :
			 CLR_BIT (ODRD ,  u8PinNumCpy%24);
 298:	a2 e3       	ldi	r26, 0x32	; 50
 29a:	b0 e0       	ldi	r27, 0x00	; 0
 29c:	e2 e3       	ldi	r30, 0x32	; 50
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	48 2f       	mov	r20, r24
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	98 e1       	ldi	r25, 0x18	; 24
 2a8:	69 2f       	mov	r22, r25
 2aa:	0e 94 a6 04 	call	0x94c	; 0x94c <__udivmodqi4>
 2ae:	89 2f       	mov	r24, r25
 2b0:	28 2f       	mov	r18, r24
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 2e       	mov	r0, r18
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_enuWritePin+0x210>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	0a 94       	dec	r0
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_enuWritePin+0x20c>
 2c4:	80 95       	com	r24
 2c6:	84 23       	and	r24, r20
 2c8:	8c 93       	st	X, r24
 2ca:	1e c0       	rjmp	.+60     	; 0x308 <DIO_enuWritePin+0x258>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRD , u8PinNumCpy%24);
 2cc:	a2 e3       	ldi	r26, 0x32	; 50
 2ce:	b0 e0       	ldi	r27, 0x00	; 0
 2d0:	e2 e3       	ldi	r30, 0x32	; 50
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	48 2f       	mov	r20, r24
 2d8:	8a 81       	ldd	r24, Y+2	; 0x02
 2da:	98 e1       	ldi	r25, 0x18	; 24
 2dc:	69 2f       	mov	r22, r25
 2de:	0e 94 a6 04 	call	0x94c	; 0x94c <__udivmodqi4>
 2e2:	89 2f       	mov	r24, r25
 2e4:	28 2f       	mov	r18, r24
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 2e       	mov	r0, r18
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_enuWritePin+0x244>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	0a 94       	dec	r0
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_enuWritePin+0x240>
 2f8:	84 2b       	or	r24, r20
 2fa:	8c 93       	st	X, r24
 2fc:	05 c0       	rjmp	.+10     	; 0x308 <DIO_enuWritePin+0x258>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	89 83       	std	Y+1, r24	; 0x01
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_enuWritePin+0x258>
		}
	}
	else
	{
		enuReturnStateLoc = PARAM_OUT_RANGE ;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuReturnStateLoc ;
 308:	89 81       	ldd	r24, Y+1	; 0x01

}
 30a:	2b 96       	adiw	r28, 0x0b	; 11
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	f8 94       	cli
 310:	de bf       	out	0x3e, r29	; 62
 312:	0f be       	out	0x3f, r0	; 63
 314:	cd bf       	out	0x3d, r28	; 61
 316:	cf 91       	pop	r28
 318:	df 91       	pop	r29
 31a:	08 95       	ret

0000031c <DIO_enuReadPin>:
//#define GET_BIT(byte,pos) ( (byte >> pos) & 1 )
//4 => 0100 
//GET_BIT(4, 1)     0100 >> 1 = 00010 & 0001 = 0

tenuErrorStatus DIO_enuReadPin(u8 u8PinNumCpy ,u8 *pu8PinValueCpy )
{
 31c:	df 93       	push	r29
 31e:	cf 93       	push	r28
 320:	00 d0       	rcall	.+0      	; 0x322 <DIO_enuReadPin+0x6>
 322:	00 d0       	rcall	.+0      	; 0x324 <DIO_enuReadPin+0x8>
 324:	cd b7       	in	r28, 0x3d	; 61
 326:	de b7       	in	r29, 0x3e	; 62
 328:	8a 83       	std	Y+2, r24	; 0x02
 32a:	7c 83       	std	Y+4, r23	; 0x04
 32c:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuReturnStateLoc = EOK;
 32e:	19 82       	std	Y+1, r1	; 0x01

	if (pu8PinValueCpy != NULL)
 330:	8b 81       	ldd	r24, Y+3	; 0x03
 332:	9c 81       	ldd	r25, Y+4	; 0x04
 334:	00 97       	sbiw	r24, 0x00	; 0
 336:	09 f4       	brne	.+2      	; 0x33a <DIO_enuReadPin+0x1e>
 338:	71 c0       	rjmp	.+226    	; 0x41c <DIO_enuReadPin+0x100>
	{
		//IDR
		if (u8PinNumCpy >= DIO_PIN_NUM_0 && u8PinNumCpy <= DIO_PIN_NUM_7)
 33a:	8a 81       	ldd	r24, Y+2	; 0x02
 33c:	88 30       	cpi	r24, 0x08	; 8
 33e:	a0 f4       	brcc	.+40     	; 0x368 <DIO_enuReadPin+0x4c>
		{
			*pu8PinValueCpy  = GET_BIT(IDRA , u8PinNumCpy);
 340:	e9 e3       	ldi	r30, 0x39	; 57
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	28 2f       	mov	r18, r24
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
 34c:	88 2f       	mov	r24, r24
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	a9 01       	movw	r20, r18
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_enuReadPin+0x3c>
 354:	55 95       	asr	r21
 356:	47 95       	ror	r20
 358:	8a 95       	dec	r24
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_enuReadPin+0x38>
 35c:	ca 01       	movw	r24, r20
 35e:	81 70       	andi	r24, 0x01	; 1
 360:	eb 81       	ldd	r30, Y+3	; 0x03
 362:	fc 81       	ldd	r31, Y+4	; 0x04
 364:	80 83       	st	Z, r24
 366:	5c c0       	rjmp	.+184    	; 0x420 <DIO_enuReadPin+0x104>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_8 && u8PinNumCpy <= DIO_PIN_NUM_15)
 368:	8a 81       	ldd	r24, Y+2	; 0x02
 36a:	88 30       	cpi	r24, 0x08	; 8
 36c:	c8 f0       	brcs	.+50     	; 0x3a0 <DIO_enuReadPin+0x84>
 36e:	8a 81       	ldd	r24, Y+2	; 0x02
 370:	80 31       	cpi	r24, 0x10	; 16
 372:	b0 f4       	brcc	.+44     	; 0x3a0 <DIO_enuReadPin+0x84>
		{
			*pu8PinValueCpy  = GET_BIT(IDRB , u8PinNumCpy%8);
 374:	e6 e3       	ldi	r30, 0x36	; 54
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	28 2f       	mov	r18, r24
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	8a 81       	ldd	r24, Y+2	; 0x02
 380:	88 2f       	mov	r24, r24
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	87 70       	andi	r24, 0x07	; 7
 386:	90 70       	andi	r25, 0x00	; 0
 388:	a9 01       	movw	r20, r18
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_enuReadPin+0x74>
 38c:	55 95       	asr	r21
 38e:	47 95       	ror	r20
 390:	8a 95       	dec	r24
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_enuReadPin+0x70>
 394:	ca 01       	movw	r24, r20
 396:	81 70       	andi	r24, 0x01	; 1
 398:	eb 81       	ldd	r30, Y+3	; 0x03
 39a:	fc 81       	ldd	r31, Y+4	; 0x04
 39c:	80 83       	st	Z, r24
 39e:	40 c0       	rjmp	.+128    	; 0x420 <DIO_enuReadPin+0x104>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_16 && u8PinNumCpy <= DIO_PIN_NUM_23)
 3a0:	8a 81       	ldd	r24, Y+2	; 0x02
 3a2:	80 31       	cpi	r24, 0x10	; 16
 3a4:	c8 f0       	brcs	.+50     	; 0x3d8 <DIO_enuReadPin+0xbc>
 3a6:	8a 81       	ldd	r24, Y+2	; 0x02
 3a8:	88 31       	cpi	r24, 0x18	; 24
 3aa:	b0 f4       	brcc	.+44     	; 0x3d8 <DIO_enuReadPin+0xbc>
		{
			*pu8PinValueCpy  = GET_BIT(IDRC , u8PinNumCpy%16);
 3ac:	e3 e3       	ldi	r30, 0x33	; 51
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
 3b2:	28 2f       	mov	r18, r24
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	8a 81       	ldd	r24, Y+2	; 0x02
 3b8:	88 2f       	mov	r24, r24
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	8f 70       	andi	r24, 0x0F	; 15
 3be:	90 70       	andi	r25, 0x00	; 0
 3c0:	a9 01       	movw	r20, r18
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_enuReadPin+0xac>
 3c4:	55 95       	asr	r21
 3c6:	47 95       	ror	r20
 3c8:	8a 95       	dec	r24
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_enuReadPin+0xa8>
 3cc:	ca 01       	movw	r24, r20
 3ce:	81 70       	andi	r24, 0x01	; 1
 3d0:	eb 81       	ldd	r30, Y+3	; 0x03
 3d2:	fc 81       	ldd	r31, Y+4	; 0x04
 3d4:	80 83       	st	Z, r24
 3d6:	24 c0       	rjmp	.+72     	; 0x420 <DIO_enuReadPin+0x104>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_24 && u8PinNumCpy <= DIO_PIN_NUM_31)
 3d8:	8a 81       	ldd	r24, Y+2	; 0x02
 3da:	88 31       	cpi	r24, 0x18	; 24
 3dc:	e0 f0       	brcs	.+56     	; 0x416 <DIO_enuReadPin+0xfa>
 3de:	8a 81       	ldd	r24, Y+2	; 0x02
 3e0:	80 32       	cpi	r24, 0x20	; 32
 3e2:	c8 f4       	brcc	.+50     	; 0x416 <DIO_enuReadPin+0xfa>
		{
			*pu8PinValueCpy  = GET_BIT(IDRD , u8PinNumCpy%24);
 3e4:	e0 e3       	ldi	r30, 0x30	; 48
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	28 2f       	mov	r18, r24
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	8a 81       	ldd	r24, Y+2	; 0x02
 3f0:	98 e1       	ldi	r25, 0x18	; 24
 3f2:	69 2f       	mov	r22, r25
 3f4:	0e 94 a6 04 	call	0x94c	; 0x94c <__udivmodqi4>
 3f8:	89 2f       	mov	r24, r25
 3fa:	88 2f       	mov	r24, r24
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	a9 01       	movw	r20, r18
 400:	02 c0       	rjmp	.+4      	; 0x406 <DIO_enuReadPin+0xea>
 402:	55 95       	asr	r21
 404:	47 95       	ror	r20
 406:	8a 95       	dec	r24
 408:	e2 f7       	brpl	.-8      	; 0x402 <DIO_enuReadPin+0xe6>
 40a:	ca 01       	movw	r24, r20
 40c:	81 70       	andi	r24, 0x01	; 1
 40e:	eb 81       	ldd	r30, Y+3	; 0x03
 410:	fc 81       	ldd	r31, Y+4	; 0x04
 412:	80 83       	st	Z, r24
 414:	05 c0       	rjmp	.+10     	; 0x420 <DIO_enuReadPin+0x104>
		}
		else
		{
			enuReturnStateLoc = PARAM_OUT_RANGE ;
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	89 83       	std	Y+1, r24	; 0x01
 41a:	02 c0       	rjmp	.+4      	; 0x420 <DIO_enuReadPin+0x104>
		}
	}
	else
	{
		enuReturnStateLoc = PARAM_NULL_PTR ;
 41c:	82 e0       	ldi	r24, 0x02	; 2
 41e:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuReturnStateLoc ;
 420:	89 81       	ldd	r24, Y+1	; 0x01

}
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	0f 90       	pop	r0
 428:	0f 90       	pop	r0
 42a:	cf 91       	pop	r28
 42c:	df 91       	pop	r29
 42e:	08 95       	ret

00000430 <DIO_enuStatePullup>:

tenuErrorStatus DIO_enuStatePullup(u8 u8PinNumCpy, u8 u8StateCpy)
{
 430:	df 93       	push	r29
 432:	cf 93       	push	r28
 434:	00 d0       	rcall	.+0      	; 0x436 <DIO_enuStatePullup+0x6>
 436:	cd b7       	in	r28, 0x3d	; 61
 438:	de b7       	in	r29, 0x3e	; 62
 43a:	89 83       	std	Y+1, r24	; 0x01
 43c:	6a 83       	std	Y+2, r22	; 0x02
   return DIO_enuWritePin(u8PinNumCpy,u8StateCpy);
 43e:	89 81       	ldd	r24, Y+1	; 0x01
 440:	6a 81       	ldd	r22, Y+2	; 0x02
 442:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_enuWritePin>
}
 446:	0f 90       	pop	r0
 448:	0f 90       	pop	r0
 44a:	cf 91       	pop	r28
 44c:	df 91       	pop	r29
 44e:	08 95       	ret

00000450 <DIO_enuWriteGroup>:



tenuErrorStatus DIO_enuWriteGroup(u8 *pau8PinNumCpy,u8 * pau8PinValueCpy , u8 u8SizeCpy)
{
 450:	df 93       	push	r29
 452:	cf 93       	push	r28
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
 458:	27 97       	sbiw	r28, 0x07	; 7
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	f8 94       	cli
 45e:	de bf       	out	0x3e, r29	; 62
 460:	0f be       	out	0x3f, r0	; 63
 462:	cd bf       	out	0x3d, r28	; 61
 464:	9c 83       	std	Y+4, r25	; 0x04
 466:	8b 83       	std	Y+3, r24	; 0x03
 468:	7e 83       	std	Y+6, r23	; 0x06
 46a:	6d 83       	std	Y+5, r22	; 0x05
 46c:	4f 83       	std	Y+7, r20	; 0x07
	tenuErrorStatus enuReturnStateLoc = EOK;
 46e:	1a 82       	std	Y+2, r1	; 0x02
	u8 u8CntrLoc;
	for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
 470:	19 82       	std	Y+1, r1	; 0x01
 472:	1d c0       	rjmp	.+58     	; 0x4ae <DIO_enuWriteGroup+0x5e>
	{
		enuReturnStateLoc = DIO_enuWritePin(pau8PinNumCpy[u8CntrLoc],pau8PinValueCpy[u8CntrLoc]);
 474:	89 81       	ldd	r24, Y+1	; 0x01
 476:	28 2f       	mov	r18, r24
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	8b 81       	ldd	r24, Y+3	; 0x03
 47c:	9c 81       	ldd	r25, Y+4	; 0x04
 47e:	fc 01       	movw	r30, r24
 480:	e2 0f       	add	r30, r18
 482:	f3 1f       	adc	r31, r19
 484:	40 81       	ld	r20, Z
 486:	89 81       	ldd	r24, Y+1	; 0x01
 488:	28 2f       	mov	r18, r24
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	8d 81       	ldd	r24, Y+5	; 0x05
 48e:	9e 81       	ldd	r25, Y+6	; 0x06
 490:	fc 01       	movw	r30, r24
 492:	e2 0f       	add	r30, r18
 494:	f3 1f       	adc	r31, r19
 496:	90 81       	ld	r25, Z
 498:	84 2f       	mov	r24, r20
 49a:	69 2f       	mov	r22, r25
 49c:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_enuWritePin>
 4a0:	8a 83       	std	Y+2, r24	; 0x02
		if (enuReturnStateLoc != EOK)
 4a2:	8a 81       	ldd	r24, Y+2	; 0x02
 4a4:	88 23       	and	r24, r24
 4a6:	39 f4       	brne	.+14     	; 0x4b6 <DIO_enuWriteGroup+0x66>

tenuErrorStatus DIO_enuWriteGroup(u8 *pau8PinNumCpy,u8 * pau8PinValueCpy , u8 u8SizeCpy)
{
	tenuErrorStatus enuReturnStateLoc = EOK;
	u8 u8CntrLoc;
	for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
 4a8:	89 81       	ldd	r24, Y+1	; 0x01
 4aa:	8f 5f       	subi	r24, 0xFF	; 255
 4ac:	89 83       	std	Y+1, r24	; 0x01
 4ae:	99 81       	ldd	r25, Y+1	; 0x01
 4b0:	8f 81       	ldd	r24, Y+7	; 0x07
 4b2:	98 17       	cp	r25, r24
 4b4:	f8 f2       	brcs	.-66     	; 0x474 <DIO_enuWriteGroup+0x24>
		if (enuReturnStateLoc != EOK)
		{
			break;
		}
	}
	return enuReturnStateLoc;
 4b6:	8a 81       	ldd	r24, Y+2	; 0x02
}
 4b8:	27 96       	adiw	r28, 0x07	; 7
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	f8 94       	cli
 4be:	de bf       	out	0x3e, r29	; 62
 4c0:	0f be       	out	0x3f, r0	; 63
 4c2:	cd bf       	out	0x3d, r28	; 61
 4c4:	cf 91       	pop	r28
 4c6:	df 91       	pop	r29
 4c8:	08 95       	ret

000004ca <Sev_Display>:
#include "SEV_cfg.h"
#include "SEV_priv.h"



tenuErrorStatus Sev_Display(u8 u8sevIndex, u8 u8num){
 4ca:	df 93       	push	r29
 4cc:	cf 93       	push	r28
 4ce:	cd b7       	in	r28, 0x3d	; 61
 4d0:	de b7       	in	r29, 0x3e	; 62
 4d2:	62 97       	sbiw	r28, 0x12	; 18
 4d4:	0f b6       	in	r0, 0x3f	; 63
 4d6:	f8 94       	cli
 4d8:	de bf       	out	0x3e, r29	; 62
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	cd bf       	out	0x3d, r28	; 61
 4de:	8c 87       	std	Y+12, r24	; 0x0c
 4e0:	6d 87       	std	Y+13, r22	; 0x0d
    tenuErrorStatus enuReturnLoc = EOK;
 4e2:	19 82       	std	Y+1, r1	; 0x01
    u8 au8Cathode[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
 4e4:	ce 01       	movw	r24, r28
 4e6:	02 96       	adiw	r24, 0x02	; 2
 4e8:	9f 87       	std	Y+15, r25	; 0x0f
 4ea:	8e 87       	std	Y+14, r24	; 0x0e
 4ec:	e2 e7       	ldi	r30, 0x72	; 114
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	f9 8b       	std	Y+17, r31	; 0x11
 4f2:	e8 8b       	std	Y+16, r30	; 0x10
 4f4:	fa e0       	ldi	r31, 0x0A	; 10
 4f6:	fa 8b       	std	Y+18, r31	; 0x12
 4f8:	e8 89       	ldd	r30, Y+16	; 0x10
 4fa:	f9 89       	ldd	r31, Y+17	; 0x11
 4fc:	00 80       	ld	r0, Z
 4fe:	88 89       	ldd	r24, Y+16	; 0x10
 500:	99 89       	ldd	r25, Y+17	; 0x11
 502:	01 96       	adiw	r24, 0x01	; 1
 504:	99 8b       	std	Y+17, r25	; 0x11
 506:	88 8b       	std	Y+16, r24	; 0x10
 508:	ee 85       	ldd	r30, Y+14	; 0x0e
 50a:	ff 85       	ldd	r31, Y+15	; 0x0f
 50c:	00 82       	st	Z, r0
 50e:	8e 85       	ldd	r24, Y+14	; 0x0e
 510:	9f 85       	ldd	r25, Y+15	; 0x0f
 512:	01 96       	adiw	r24, 0x01	; 1
 514:	9f 87       	std	Y+15, r25	; 0x0f
 516:	8e 87       	std	Y+14, r24	; 0x0e
 518:	9a 89       	ldd	r25, Y+18	; 0x12
 51a:	91 50       	subi	r25, 0x01	; 1
 51c:	9a 8b       	std	Y+18, r25	; 0x12
 51e:	ea 89       	ldd	r30, Y+18	; 0x12
 520:	ee 23       	and	r30, r30
 522:	51 f7       	brne	.-44     	; 0x4f8 <Sev_Display+0x2e>
    if(u8sevIndex < MAX_SEV_SEGMENT){
 524:	8c 85       	ldd	r24, Y+12	; 0x0c
 526:	82 30       	cpi	r24, 0x02	; 2
 528:	98 f5       	brcc	.+102    	; 0x590 <Sev_Display+0xc6>
        if(u8num < 10){
 52a:	8d 85       	ldd	r24, Y+13	; 0x0d
 52c:	8a 30       	cpi	r24, 0x0A	; 10
 52e:	90 f5       	brcc	.+100    	; 0x594 <Sev_Display+0xca>
            if(SEV_ConfigSet[u8sevIndex].common_mode == Common_Cathode){
 530:	8c 85       	ldd	r24, Y+12	; 0x0c
 532:	28 2f       	mov	r18, r24
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	c9 01       	movw	r24, r18
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	88 0f       	add	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	82 0f       	add	r24, r18
 546:	93 1f       	adc	r25, r19
 548:	fc 01       	movw	r30, r24
 54a:	e8 59       	subi	r30, 0x98	; 152
 54c:	ff 4f       	sbci	r31, 0xFF	; 255
 54e:	80 81       	ld	r24, Z
 550:	88 23       	and	r24, r24
 552:	71 f4       	brne	.+28     	; 0x570 <Sev_Display+0xa6>
            	PutOnBus(u8sevIndex, au8Cathode[u8num]);
 554:	8d 85       	ldd	r24, Y+13	; 0x0d
 556:	28 2f       	mov	r18, r24
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	ce 01       	movw	r24, r28
 55c:	02 96       	adiw	r24, 0x02	; 2
 55e:	fc 01       	movw	r30, r24
 560:	e2 0f       	add	r30, r18
 562:	f3 1f       	adc	r31, r19
 564:	90 81       	ld	r25, Z
 566:	8c 85       	ldd	r24, Y+12	; 0x0c
 568:	69 2f       	mov	r22, r25
 56a:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <PutOnBus>
 56e:	12 c0       	rjmp	.+36     	; 0x594 <Sev_Display+0xca>
            }
            else{
            	PutOnBus(u8sevIndex, ~au8Cathode[u8num]);
 570:	8d 85       	ldd	r24, Y+13	; 0x0d
 572:	28 2f       	mov	r18, r24
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	ce 01       	movw	r24, r28
 578:	02 96       	adiw	r24, 0x02	; 2
 57a:	fc 01       	movw	r30, r24
 57c:	e2 0f       	add	r30, r18
 57e:	f3 1f       	adc	r31, r19
 580:	80 81       	ld	r24, Z
 582:	98 2f       	mov	r25, r24
 584:	90 95       	com	r25
 586:	8c 85       	ldd	r24, Y+12	; 0x0c
 588:	69 2f       	mov	r22, r25
 58a:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <PutOnBus>
 58e:	02 c0       	rjmp	.+4      	; 0x594 <Sev_Display+0xca>
            }
        }
    }else{
        enuReturnLoc = PARAM_OUT_RANGE;
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	89 83       	std	Y+1, r24	; 0x01
    }
    return enuReturnLoc;
 594:	89 81       	ldd	r24, Y+1	; 0x01
}
 596:	62 96       	adiw	r28, 0x12	; 18
 598:	0f b6       	in	r0, 0x3f	; 63
 59a:	f8 94       	cli
 59c:	de bf       	out	0x3e, r29	; 62
 59e:	0f be       	out	0x3f, r0	; 63
 5a0:	cd bf       	out	0x3d, r28	; 61
 5a2:	cf 91       	pop	r28
 5a4:	df 91       	pop	r29
 5a6:	08 95       	ret

000005a8 <PutOnBus>:

static void PutOnBus(u8 u8sevIndex, u8 u8num){
 5a8:	df 93       	push	r29
 5aa:	cf 93       	push	r28
 5ac:	cd b7       	in	r28, 0x3d	; 61
 5ae:	de b7       	in	r29, 0x3e	; 62
 5b0:	2a 97       	sbiw	r28, 0x0a	; 10
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	f8 94       	cli
 5b6:	de bf       	out	0x3e, r29	; 62
 5b8:	0f be       	out	0x3f, r0	; 63
 5ba:	cd bf       	out	0x3d, r28	; 61
 5bc:	89 87       	std	Y+9, r24	; 0x09
 5be:	6a 87       	std	Y+10, r22	; 0x0a
    u8 u8Num[7]; //0x0011 1111
	u8 cntr;
	for(cntr = 0; cntr < 7; cntr++){
 5c0:	19 82       	std	Y+1, r1	; 0x01
 5c2:	1b c0       	rjmp	.+54     	; 0x5fa <PutOnBus+0x52>
		u8Num[cntr] = GET_BIT(u8num, cntr);
 5c4:	89 81       	ldd	r24, Y+1	; 0x01
 5c6:	48 2f       	mov	r20, r24
 5c8:	50 e0       	ldi	r21, 0x00	; 0
 5ca:	8a 85       	ldd	r24, Y+10	; 0x0a
 5cc:	28 2f       	mov	r18, r24
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	89 81       	ldd	r24, Y+1	; 0x01
 5d2:	88 2f       	mov	r24, r24
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	b9 01       	movw	r22, r18
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <PutOnBus+0x36>
 5da:	75 95       	asr	r23
 5dc:	67 95       	ror	r22
 5de:	8a 95       	dec	r24
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <PutOnBus+0x32>
 5e2:	cb 01       	movw	r24, r22
 5e4:	28 2f       	mov	r18, r24
 5e6:	21 70       	andi	r18, 0x01	; 1
 5e8:	ce 01       	movw	r24, r28
 5ea:	02 96       	adiw	r24, 0x02	; 2
 5ec:	fc 01       	movw	r30, r24
 5ee:	e4 0f       	add	r30, r20
 5f0:	f5 1f       	adc	r31, r21
 5f2:	20 83       	st	Z, r18
}

static void PutOnBus(u8 u8sevIndex, u8 u8num){
    u8 u8Num[7]; //0x0011 1111
	u8 cntr;
	for(cntr = 0; cntr < 7; cntr++){
 5f4:	89 81       	ldd	r24, Y+1	; 0x01
 5f6:	8f 5f       	subi	r24, 0xFF	; 255
 5f8:	89 83       	std	Y+1, r24	; 0x01
 5fa:	89 81       	ldd	r24, Y+1	; 0x01
 5fc:	87 30       	cpi	r24, 0x07	; 7
 5fe:	10 f3       	brcs	.-60     	; 0x5c4 <PutOnBus+0x1c>
		u8Num[cntr] = GET_BIT(u8num, cntr);
	}
    DIO_enuWriteGroup(SEV_ConfigSet[u8sevIndex].Au8Pin, u8Num, 7 );
 600:	89 85       	ldd	r24, Y+9	; 0x09
 602:	28 2f       	mov	r18, r24
 604:	30 e0       	ldi	r19, 0x00	; 0
 606:	c9 01       	movw	r24, r18
 608:	88 0f       	add	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	88 0f       	add	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	82 0f       	add	r24, r18
 616:	93 1f       	adc	r25, r19
 618:	80 5a       	subi	r24, 0xA0	; 160
 61a:	9f 4f       	sbci	r25, 0xFF	; 255
 61c:	9e 01       	movw	r18, r28
 61e:	2e 5f       	subi	r18, 0xFE	; 254
 620:	3f 4f       	sbci	r19, 0xFF	; 255
 622:	b9 01       	movw	r22, r18
 624:	47 e0       	ldi	r20, 0x07	; 7
 626:	0e 94 28 02 	call	0x450	; 0x450 <DIO_enuWriteGroup>
}
 62a:	2a 96       	adiw	r28, 0x0a	; 10
 62c:	0f b6       	in	r0, 0x3f	; 63
 62e:	f8 94       	cli
 630:	de bf       	out	0x3e, r29	; 62
 632:	0f be       	out	0x3f, r0	; 63
 634:	cd bf       	out	0x3d, r28	; 61
 636:	cf 91       	pop	r28
 638:	df 91       	pop	r29
 63a:	08 95       	ret

0000063c <Sev_PowerOn>:

tenuErrorStatus Sev_PowerOn(u8 u8sevIndex){
 63c:	df 93       	push	r29
 63e:	cf 93       	push	r28
 640:	00 d0       	rcall	.+0      	; 0x642 <Sev_PowerOn+0x6>
 642:	cd b7       	in	r28, 0x3d	; 61
 644:	de b7       	in	r29, 0x3e	; 62
 646:	8a 83       	std	Y+2, r24	; 0x02
    tenuErrorStatus enuReturnLoc = EOK;
 648:	19 82       	std	Y+1, r1	; 0x01
    
    if(u8sevIndex < MAX_SEV_SEGMENT){
 64a:	8a 81       	ldd	r24, Y+2	; 0x02
 64c:	82 30       	cpi	r24, 0x02	; 2
 64e:	e0 f5       	brcc	.+120    	; 0x6c8 <Sev_PowerOn+0x8c>
        if(SEV_ConfigSet[u8sevIndex].common_mode == Common_Cathode){
 650:	8a 81       	ldd	r24, Y+2	; 0x02
 652:	28 2f       	mov	r18, r24
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	c9 01       	movw	r24, r18
 658:	88 0f       	add	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	88 0f       	add	r24, r24
 662:	99 1f       	adc	r25, r25
 664:	82 0f       	add	r24, r18
 666:	93 1f       	adc	r25, r19
 668:	fc 01       	movw	r30, r24
 66a:	e8 59       	subi	r30, 0x98	; 152
 66c:	ff 4f       	sbci	r31, 0xFF	; 255
 66e:	80 81       	ld	r24, Z
 670:	88 23       	and	r24, r24
 672:	a9 f4       	brne	.+42     	; 0x69e <Sev_PowerOn+0x62>
            enuReturnLoc = DIO_enuWritePin(SEV_ConfigSet[u8sevIndex].common, Common_Cathode);
 674:	8a 81       	ldd	r24, Y+2	; 0x02
 676:	28 2f       	mov	r18, r24
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	c9 01       	movw	r24, r18
 67c:	88 0f       	add	r24, r24
 67e:	99 1f       	adc	r25, r25
 680:	88 0f       	add	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	88 0f       	add	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	82 0f       	add	r24, r18
 68a:	93 1f       	adc	r25, r19
 68c:	fc 01       	movw	r30, r24
 68e:	e9 59       	subi	r30, 0x99	; 153
 690:	ff 4f       	sbci	r31, 0xFF	; 255
 692:	80 81       	ld	r24, Z
 694:	60 e0       	ldi	r22, 0x00	; 0
 696:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_enuWritePin>
 69a:	89 83       	std	Y+1, r24	; 0x01
 69c:	17 c0       	rjmp	.+46     	; 0x6cc <Sev_PowerOn+0x90>
        }else{
        	 enuReturnLoc = DIO_enuWritePin(SEV_ConfigSet[u8sevIndex].common, Common_Anode);
 69e:	8a 81       	ldd	r24, Y+2	; 0x02
 6a0:	28 2f       	mov	r18, r24
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	c9 01       	movw	r24, r18
 6a6:	88 0f       	add	r24, r24
 6a8:	99 1f       	adc	r25, r25
 6aa:	88 0f       	add	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	88 0f       	add	r24, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	82 0f       	add	r24, r18
 6b4:	93 1f       	adc	r25, r19
 6b6:	fc 01       	movw	r30, r24
 6b8:	e9 59       	subi	r30, 0x99	; 153
 6ba:	ff 4f       	sbci	r31, 0xFF	; 255
 6bc:	80 81       	ld	r24, Z
 6be:	61 e0       	ldi	r22, 0x01	; 1
 6c0:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_enuWritePin>
 6c4:	89 83       	std	Y+1, r24	; 0x01
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <Sev_PowerOn+0x90>
        }
       
    }else{
        enuReturnLoc = PARAM_OUT_RANGE;
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	89 83       	std	Y+1, r24	; 0x01
    }
    return enuReturnLoc;
 6cc:	89 81       	ldd	r24, Y+1	; 0x01
}
 6ce:	0f 90       	pop	r0
 6d0:	0f 90       	pop	r0
 6d2:	cf 91       	pop	r28
 6d4:	df 91       	pop	r29
 6d6:	08 95       	ret

000006d8 <Sev_PowerOff>:

tenuErrorStatus Sev_PowerOff(u8 u8sevIndex){
 6d8:	df 93       	push	r29
 6da:	cf 93       	push	r28
 6dc:	00 d0       	rcall	.+0      	; 0x6de <Sev_PowerOff+0x6>
 6de:	cd b7       	in	r28, 0x3d	; 61
 6e0:	de b7       	in	r29, 0x3e	; 62
 6e2:	8a 83       	std	Y+2, r24	; 0x02
    tenuErrorStatus enuReturnLoc = EOK;
 6e4:	19 82       	std	Y+1, r1	; 0x01
    
    if(u8sevIndex < MAX_SEV_SEGMENT){
 6e6:	8a 81       	ldd	r24, Y+2	; 0x02
 6e8:	82 30       	cpi	r24, 0x02	; 2
 6ea:	e0 f5       	brcc	.+120    	; 0x764 <Sev_PowerOff+0x8c>
        if(SEV_ConfigSet[u8sevIndex].common_mode == Common_Cathode){
 6ec:	8a 81       	ldd	r24, Y+2	; 0x02
 6ee:	28 2f       	mov	r18, r24
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	c9 01       	movw	r24, r18
 6f4:	88 0f       	add	r24, r24
 6f6:	99 1f       	adc	r25, r25
 6f8:	88 0f       	add	r24, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	88 0f       	add	r24, r24
 6fe:	99 1f       	adc	r25, r25
 700:	82 0f       	add	r24, r18
 702:	93 1f       	adc	r25, r19
 704:	fc 01       	movw	r30, r24
 706:	e8 59       	subi	r30, 0x98	; 152
 708:	ff 4f       	sbci	r31, 0xFF	; 255
 70a:	80 81       	ld	r24, Z
 70c:	88 23       	and	r24, r24
 70e:	a9 f4       	brne	.+42     	; 0x73a <Sev_PowerOff+0x62>
        	 enuReturnLoc = DIO_enuWritePin(SEV_ConfigSet[u8sevIndex].common, Common_Anode);
 710:	8a 81       	ldd	r24, Y+2	; 0x02
 712:	28 2f       	mov	r18, r24
 714:	30 e0       	ldi	r19, 0x00	; 0
 716:	c9 01       	movw	r24, r18
 718:	88 0f       	add	r24, r24
 71a:	99 1f       	adc	r25, r25
 71c:	88 0f       	add	r24, r24
 71e:	99 1f       	adc	r25, r25
 720:	88 0f       	add	r24, r24
 722:	99 1f       	adc	r25, r25
 724:	82 0f       	add	r24, r18
 726:	93 1f       	adc	r25, r19
 728:	fc 01       	movw	r30, r24
 72a:	e9 59       	subi	r30, 0x99	; 153
 72c:	ff 4f       	sbci	r31, 0xFF	; 255
 72e:	80 81       	ld	r24, Z
 730:	61 e0       	ldi	r22, 0x01	; 1
 732:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_enuWritePin>
 736:	89 83       	std	Y+1, r24	; 0x01
 738:	17 c0       	rjmp	.+46     	; 0x768 <Sev_PowerOff+0x90>
        }else{
        	 enuReturnLoc = DIO_enuWritePin(SEV_ConfigSet[u8sevIndex].common, Common_Cathode);
 73a:	8a 81       	ldd	r24, Y+2	; 0x02
 73c:	28 2f       	mov	r18, r24
 73e:	30 e0       	ldi	r19, 0x00	; 0
 740:	c9 01       	movw	r24, r18
 742:	88 0f       	add	r24, r24
 744:	99 1f       	adc	r25, r25
 746:	88 0f       	add	r24, r24
 748:	99 1f       	adc	r25, r25
 74a:	88 0f       	add	r24, r24
 74c:	99 1f       	adc	r25, r25
 74e:	82 0f       	add	r24, r18
 750:	93 1f       	adc	r25, r19
 752:	fc 01       	movw	r30, r24
 754:	e9 59       	subi	r30, 0x99	; 153
 756:	ff 4f       	sbci	r31, 0xFF	; 255
 758:	80 81       	ld	r24, Z
 75a:	60 e0       	ldi	r22, 0x00	; 0
 75c:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_enuWritePin>
 760:	89 83       	std	Y+1, r24	; 0x01
 762:	02 c0       	rjmp	.+4      	; 0x768 <Sev_PowerOff+0x90>
        }
       
    }else{
        enuReturnLoc = PARAM_OUT_RANGE;
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	89 83       	std	Y+1, r24	; 0x01
    }
    return enuReturnLoc;
 768:	89 81       	ldd	r24, Y+1	; 0x01
}
 76a:	0f 90       	pop	r0
 76c:	0f 90       	pop	r0
 76e:	cf 91       	pop	r28
 770:	df 91       	pop	r29
 772:	08 95       	ret

00000774 <RunCountdown>:

#include "../MCAL/DIO/DIO.h"
#include "../HAL/SEVEN_SEGMENT/SEV.h"
#include "../LIBS/delay.h"
void RunCountdown() {
 774:	df 93       	push	r29
 776:	cf 93       	push	r28
 778:	cd b7       	in	r28, 0x3d	; 61
 77a:	de b7       	in	r29, 0x3e	; 62
 77c:	64 97       	sbiw	r28, 0x14	; 20
 77e:	0f b6       	in	r0, 0x3f	; 63
 780:	f8 94       	cli
 782:	de bf       	out	0x3e, r29	; 62
 784:	0f be       	out	0x3f, r0	; 63
 786:	cd bf       	out	0x3d, r28	; 61
    Sev_Display(1, 3);
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	63 e0       	ldi	r22, 0x03	; 3
 78c:	0e 94 65 02 	call	0x4ca	; 0x4ca <Sev_Display>
    Sev_Display(0, 0);
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	60 e0       	ldi	r22, 0x00	; 0
 794:	0e 94 65 02 	call	0x4ca	; 0x4ca <Sev_Display>
   Delay_ms(50);
 798:	86 e0       	ldi	r24, 0x06	; 6
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	a0 e0       	ldi	r26, 0x00	; 0
 79e:	b0 e0       	ldi	r27, 0x00	; 0
 7a0:	89 8b       	std	Y+17, r24	; 0x11
 7a2:	9a 8b       	std	Y+18, r25	; 0x12
 7a4:	ab 8b       	std	Y+19, r26	; 0x13
 7a6:	bc 8b       	std	Y+20, r27	; 0x14
 7a8:	28 c0       	rjmp	.+80     	; 0x7fa <RunCountdown+0x86>
 7aa:	80 ed       	ldi	r24, 0xD0	; 208
 7ac:	97 e0       	ldi	r25, 0x07	; 7
 7ae:	a0 e0       	ldi	r26, 0x00	; 0
 7b0:	b0 e0       	ldi	r27, 0x00	; 0
 7b2:	8d 87       	std	Y+13, r24	; 0x0d
 7b4:	9e 87       	std	Y+14, r25	; 0x0e
 7b6:	af 87       	std	Y+15, r26	; 0x0f
 7b8:	b8 8b       	std	Y+16, r27	; 0x10
 7ba:	0c c0       	rjmp	.+24     	; 0x7d4 <RunCountdown+0x60>
 7bc:	00 00       	nop
 7be:	8d 85       	ldd	r24, Y+13	; 0x0d
 7c0:	9e 85       	ldd	r25, Y+14	; 0x0e
 7c2:	af 85       	ldd	r26, Y+15	; 0x0f
 7c4:	b8 89       	ldd	r27, Y+16	; 0x10
 7c6:	01 97       	sbiw	r24, 0x01	; 1
 7c8:	a1 09       	sbc	r26, r1
 7ca:	b1 09       	sbc	r27, r1
 7cc:	8d 87       	std	Y+13, r24	; 0x0d
 7ce:	9e 87       	std	Y+14, r25	; 0x0e
 7d0:	af 87       	std	Y+15, r26	; 0x0f
 7d2:	b8 8b       	std	Y+16, r27	; 0x10
 7d4:	8d 85       	ldd	r24, Y+13	; 0x0d
 7d6:	9e 85       	ldd	r25, Y+14	; 0x0e
 7d8:	af 85       	ldd	r26, Y+15	; 0x0f
 7da:	b8 89       	ldd	r27, Y+16	; 0x10
 7dc:	00 97       	sbiw	r24, 0x00	; 0
 7de:	a1 05       	cpc	r26, r1
 7e0:	b1 05       	cpc	r27, r1
 7e2:	61 f7       	brne	.-40     	; 0x7bc <RunCountdown+0x48>
 7e4:	89 89       	ldd	r24, Y+17	; 0x11
 7e6:	9a 89       	ldd	r25, Y+18	; 0x12
 7e8:	ab 89       	ldd	r26, Y+19	; 0x13
 7ea:	bc 89       	ldd	r27, Y+20	; 0x14
 7ec:	01 97       	sbiw	r24, 0x01	; 1
 7ee:	a1 09       	sbc	r26, r1
 7f0:	b1 09       	sbc	r27, r1
 7f2:	89 8b       	std	Y+17, r24	; 0x11
 7f4:	9a 8b       	std	Y+18, r25	; 0x12
 7f6:	ab 8b       	std	Y+19, r26	; 0x13
 7f8:	bc 8b       	std	Y+20, r27	; 0x14
 7fa:	89 89       	ldd	r24, Y+17	; 0x11
 7fc:	9a 89       	ldd	r25, Y+18	; 0x12
 7fe:	ab 89       	ldd	r26, Y+19	; 0x13
 800:	bc 89       	ldd	r27, Y+20	; 0x14
 802:	00 97       	sbiw	r24, 0x00	; 0
 804:	a1 05       	cpc	r26, r1
 806:	b1 05       	cpc	r27, r1
 808:	81 f6       	brne	.-96     	; 0x7aa <RunCountdown+0x36>
    for (int i = 2; i >= 0; i--) {
 80a:	82 e0       	ldi	r24, 0x02	; 2
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	9c 87       	std	Y+12, r25	; 0x0c
 810:	8b 87       	std	Y+11, r24	; 0x0b
 812:	57 c0       	rjmp	.+174    	; 0x8c2 <__stack+0x63>
        Sev_Display(1, i);
 814:	9b 85       	ldd	r25, Y+11	; 0x0b
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	69 2f       	mov	r22, r25
 81a:	0e 94 65 02 	call	0x4ca	; 0x4ca <Sev_Display>
        for (int j = 9; j >= 0; j--){
 81e:	89 e0       	ldi	r24, 0x09	; 9
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	9a 87       	std	Y+10, r25	; 0x0a
 824:	89 87       	std	Y+9, r24	; 0x09
 826:	43 c0       	rjmp	.+134    	; 0x8ae <__stack+0x4f>
        	 Sev_Display(0, j);
 828:	99 85       	ldd	r25, Y+9	; 0x09
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	69 2f       	mov	r22, r25
 82e:	0e 94 65 02 	call	0x4ca	; 0x4ca <Sev_Display>
        	 Delay_ms(50);
 832:	86 e0       	ldi	r24, 0x06	; 6
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	a0 e0       	ldi	r26, 0x00	; 0
 838:	b0 e0       	ldi	r27, 0x00	; 0
 83a:	8d 83       	std	Y+5, r24	; 0x05
 83c:	9e 83       	std	Y+6, r25	; 0x06
 83e:	af 83       	std	Y+7, r26	; 0x07
 840:	b8 87       	std	Y+8, r27	; 0x08
 842:	28 c0       	rjmp	.+80     	; 0x894 <__stack+0x35>
 844:	80 ed       	ldi	r24, 0xD0	; 208
 846:	97 e0       	ldi	r25, 0x07	; 7
 848:	a0 e0       	ldi	r26, 0x00	; 0
 84a:	b0 e0       	ldi	r27, 0x00	; 0
 84c:	89 83       	std	Y+1, r24	; 0x01
 84e:	9a 83       	std	Y+2, r25	; 0x02
 850:	ab 83       	std	Y+3, r26	; 0x03
 852:	bc 83       	std	Y+4, r27	; 0x04
 854:	0c c0       	rjmp	.+24     	; 0x86e <__stack+0xf>
 856:	00 00       	nop
 858:	89 81       	ldd	r24, Y+1	; 0x01
 85a:	9a 81       	ldd	r25, Y+2	; 0x02
 85c:	ab 81       	ldd	r26, Y+3	; 0x03
 85e:	bc 81       	ldd	r27, Y+4	; 0x04
 860:	01 97       	sbiw	r24, 0x01	; 1
 862:	a1 09       	sbc	r26, r1
 864:	b1 09       	sbc	r27, r1
 866:	89 83       	std	Y+1, r24	; 0x01
 868:	9a 83       	std	Y+2, r25	; 0x02
 86a:	ab 83       	std	Y+3, r26	; 0x03
 86c:	bc 83       	std	Y+4, r27	; 0x04
 86e:	89 81       	ldd	r24, Y+1	; 0x01
 870:	9a 81       	ldd	r25, Y+2	; 0x02
 872:	ab 81       	ldd	r26, Y+3	; 0x03
 874:	bc 81       	ldd	r27, Y+4	; 0x04
 876:	00 97       	sbiw	r24, 0x00	; 0
 878:	a1 05       	cpc	r26, r1
 87a:	b1 05       	cpc	r27, r1
 87c:	61 f7       	brne	.-40     	; 0x856 <RunCountdown+0xe2>
 87e:	8d 81       	ldd	r24, Y+5	; 0x05
 880:	9e 81       	ldd	r25, Y+6	; 0x06
 882:	af 81       	ldd	r26, Y+7	; 0x07
 884:	b8 85       	ldd	r27, Y+8	; 0x08
 886:	01 97       	sbiw	r24, 0x01	; 1
 888:	a1 09       	sbc	r26, r1
 88a:	b1 09       	sbc	r27, r1
 88c:	8d 83       	std	Y+5, r24	; 0x05
 88e:	9e 83       	std	Y+6, r25	; 0x06
 890:	af 83       	std	Y+7, r26	; 0x07
 892:	b8 87       	std	Y+8, r27	; 0x08
 894:	8d 81       	ldd	r24, Y+5	; 0x05
 896:	9e 81       	ldd	r25, Y+6	; 0x06
 898:	af 81       	ldd	r26, Y+7	; 0x07
 89a:	b8 85       	ldd	r27, Y+8	; 0x08
 89c:	00 97       	sbiw	r24, 0x00	; 0
 89e:	a1 05       	cpc	r26, r1
 8a0:	b1 05       	cpc	r27, r1
 8a2:	81 f6       	brne	.-96     	; 0x844 <RunCountdown+0xd0>
    Sev_Display(1, 3);
    Sev_Display(0, 0);
   Delay_ms(50);
    for (int i = 2; i >= 0; i--) {
        Sev_Display(1, i);
        for (int j = 9; j >= 0; j--){
 8a4:	89 85       	ldd	r24, Y+9	; 0x09
 8a6:	9a 85       	ldd	r25, Y+10	; 0x0a
 8a8:	01 97       	sbiw	r24, 0x01	; 1
 8aa:	9a 87       	std	Y+10, r25	; 0x0a
 8ac:	89 87       	std	Y+9, r24	; 0x09
 8ae:	89 85       	ldd	r24, Y+9	; 0x09
 8b0:	9a 85       	ldd	r25, Y+10	; 0x0a
 8b2:	99 23       	and	r25, r25
 8b4:	0c f0       	brlt	.+2      	; 0x8b8 <__stack+0x59>
 8b6:	b8 cf       	rjmp	.-144    	; 0x828 <RunCountdown+0xb4>
#include "../LIBS/delay.h"
void RunCountdown() {
    Sev_Display(1, 3);
    Sev_Display(0, 0);
   Delay_ms(50);
    for (int i = 2; i >= 0; i--) {
 8b8:	8b 85       	ldd	r24, Y+11	; 0x0b
 8ba:	9c 85       	ldd	r25, Y+12	; 0x0c
 8bc:	01 97       	sbiw	r24, 0x01	; 1
 8be:	9c 87       	std	Y+12, r25	; 0x0c
 8c0:	8b 87       	std	Y+11, r24	; 0x0b
 8c2:	8b 85       	ldd	r24, Y+11	; 0x0b
 8c4:	9c 85       	ldd	r25, Y+12	; 0x0c
 8c6:	99 23       	and	r25, r25
 8c8:	0c f0       	brlt	.+2      	; 0x8cc <__stack+0x6d>
 8ca:	a4 cf       	rjmp	.-184    	; 0x814 <RunCountdown+0xa0>
        for (int j = 9; j >= 0; j--){
        	 Sev_Display(0, j);
        	 Delay_ms(50);
        }
    }
}
 8cc:	64 96       	adiw	r28, 0x14	; 20
 8ce:	0f b6       	in	r0, 0x3f	; 63
 8d0:	f8 94       	cli
 8d2:	de bf       	out	0x3e, r29	; 62
 8d4:	0f be       	out	0x3f, r0	; 63
 8d6:	cd bf       	out	0x3d, r28	; 61
 8d8:	cf 91       	pop	r28
 8da:	df 91       	pop	r29
 8dc:	08 95       	ret

000008de <main>:

int main(){
 8de:	df 93       	push	r29
 8e0:	cf 93       	push	r28
 8e2:	cd b7       	in	r28, 0x3d	; 61
 8e4:	de b7       	in	r29, 0x3e	; 62
	 DIO_voidInit();
 8e6:	0e 94 41 00 	call	0x82	; 0x82 <DIO_voidInit>
	 DIO_enuWritePin(DIO_PIN_NUM_0, DIO_LOW);
 8ea:	80 e0       	ldi	r24, 0x00	; 0
 8ec:	60 e0       	ldi	r22, 0x00	; 0
 8ee:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_enuWritePin>
	 DIO_enuWritePin(DIO_PIN_NUM_1, DIO_LOW);
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	60 e0       	ldi	r22, 0x00	; 0
 8f6:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_enuWritePin>
	 DIO_enuWritePin(DIO_PIN_NUM_2, DIO_LOW);
 8fa:	82 e0       	ldi	r24, 0x02	; 2
 8fc:	60 e0       	ldi	r22, 0x00	; 0
 8fe:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_enuWritePin>

	 //segment 1
	 Sev_PowerOn(0);
 902:	80 e0       	ldi	r24, 0x00	; 0
 904:	0e 94 1e 03 	call	0x63c	; 0x63c <Sev_PowerOn>
	//segment 2
	 Sev_PowerOn(1);
 908:	81 e0       	ldi	r24, 0x01	; 1
 90a:	0e 94 1e 03 	call	0x63c	; 0x63c <Sev_PowerOn>


	while (1) {
		DIO_enuWritePin(DIO_PIN_NUM_2, DIO_HIGH);
 90e:	82 e0       	ldi	r24, 0x02	; 2
 910:	61 e0       	ldi	r22, 0x01	; 1
 912:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_enuWritePin>
		RunCountdown(); // Segment 1 active
 916:	0e 94 ba 03 	call	0x774	; 0x774 <RunCountdown>
		DIO_enuWritePin(DIO_PIN_NUM_2, DIO_LOW);
 91a:	82 e0       	ldi	r24, 0x02	; 2
 91c:	60 e0       	ldi	r22, 0x00	; 0
 91e:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_enuWritePin>
		DIO_enuWritePin(DIO_PIN_NUM_1, DIO_HIGH);
 922:	81 e0       	ldi	r24, 0x01	; 1
 924:	61 e0       	ldi	r22, 0x01	; 1
 926:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_enuWritePin>
		RunCountdown(); // Segment 2 active
 92a:	0e 94 ba 03 	call	0x774	; 0x774 <RunCountdown>
		DIO_enuWritePin(DIO_PIN_NUM_1, DIO_LOW);
 92e:	81 e0       	ldi	r24, 0x01	; 1
 930:	60 e0       	ldi	r22, 0x00	; 0
 932:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_enuWritePin>
		DIO_enuWritePin(DIO_PIN_NUM_0, DIO_HIGH);
 936:	80 e0       	ldi	r24, 0x00	; 0
 938:	61 e0       	ldi	r22, 0x01	; 1
 93a:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_enuWritePin>
		RunCountdown(); // Segment 3 active
 93e:	0e 94 ba 03 	call	0x774	; 0x774 <RunCountdown>
		DIO_enuWritePin(DIO_PIN_NUM_0, DIO_LOW);
 942:	80 e0       	ldi	r24, 0x00	; 0
 944:	60 e0       	ldi	r22, 0x00	; 0
 946:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_enuWritePin>
 94a:	e1 cf       	rjmp	.-62     	; 0x90e <main+0x30>

0000094c <__udivmodqi4>:
 94c:	99 1b       	sub	r25, r25
 94e:	79 e0       	ldi	r23, 0x09	; 9
 950:	04 c0       	rjmp	.+8      	; 0x95a <__udivmodqi4_ep>

00000952 <__udivmodqi4_loop>:
 952:	99 1f       	adc	r25, r25
 954:	96 17       	cp	r25, r22
 956:	08 f0       	brcs	.+2      	; 0x95a <__udivmodqi4_ep>
 958:	96 1b       	sub	r25, r22

0000095a <__udivmodqi4_ep>:
 95a:	88 1f       	adc	r24, r24
 95c:	7a 95       	dec	r23
 95e:	c9 f7       	brne	.-14     	; 0x952 <__udivmodqi4_loop>
 960:	80 95       	com	r24
 962:	08 95       	ret

00000964 <_exit>:
 964:	f8 94       	cli

00000966 <__stop_program>:
 966:	ff cf       	rjmp	.-2      	; 0x966 <__stop_program>
